
LAB04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f64  08010658  08010658  00020658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125bc  080125bc  0003037c  2**0
                  CONTENTS
  4 .ARM          00000008  080125bc  080125bc  000225bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125c4  080125c4  0003037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125c4  080125c4  000225c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125c8  080125c8  000225c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  080125cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003037c  2**0
                  CONTENTS
 10 .bss          00005f68  2000037c  2000037c  0003037c  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  200062e4  200062e4  0003037c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000262ae  00000000  00000000  000303ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d2f  00000000  00000000  0005665a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d0  00000000  00000000  0005c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f18  00000000  00000000  0005e560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8c7  00000000  00000000  00060478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ab51  00000000  00000000  0008cd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f71  00000000  00000000  000b7890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ac801  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e38  00000000  00000000  001ac854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801063c 	.word	0x0801063c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000380 	.word	0x20000380
 80001ec:	0801063c 	.word	0x0801063c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000edc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <vApplicationGetIdleTaskMemory+0x30>)
 8000ee2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000398 	.word	0x20000398
 8000efc:	200003ec 	.word	0x200003ec

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f002 fa5d 	bl	80033c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f84d 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 f8eb 	bl	80010e8 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000f12:	f000 f8b3 	bl	800107c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000f16:	f001 fb73 	bl	8002600 <BSP_LCD_Init>
  BSP_GYRO_Init();
 8000f1a:	f001 fb0b 	bl	8002534 <BSP_GYRO_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f1e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f22:	2001      	movs	r0, #1
 8000f24:	f001 fbee 	bl	8002704 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f001 fc4f 	bl	80027cc <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000f2e:	f001 ff3b 	bl	8002da8 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <main+0x94>)
 8000f34:	f001 fca6 	bl	8002884 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000f38:	4816      	ldr	r0, [pc, #88]	; (8000f94 <main+0x94>)
 8000f3a:	f001 fc6f 	bl	800281c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f42:	f001 fc53 	bl	80027ec <BSP_LCD_SetTextColor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 256);
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <main+0x98>)
 8000f48:	f107 041c 	add.w	r4, r7, #28
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f008 fd18 	bl	8009996 <osThreadCreate>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <main+0x9c>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <main+0xa0>)
 8000f6e:	463c      	mov	r4, r7
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 fd07 	bl	8009996 <osThreadCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <main+0xa4>)
 8000f8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f8e:	f008 fcfb 	bl	8009988 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <main+0x92>
 8000f94:	ff0000ff 	.word	0xff0000ff
 8000f98:	08010668 	.word	0x08010668
 8000f9c:	20000644 	.word	0x20000644
 8000fa0:	08010684 	.word	0x08010684
 8000fa4:	20000648 	.word	0x20000648

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00c fc64 	bl	800d884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001018:	2308      	movs	r3, #8
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800101c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4618      	mov	r0, r3
 8001030:	f004 ff8c 	bl	8005f4c <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800103a:	f000 f9c5 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001050:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2105      	movs	r1, #5
 800105c:	4618      	mov	r0, r3
 800105e:	f005 f9ed 	bl	800643c <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001068:	f000 f9ae 	bl	80013c8 <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_SPI5_Init+0x64>)
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_SPI5_Init+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_SPI5_Init+0x64>)
 8001088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_SPI5_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_SPI5_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SPI5_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010b0:	2218      	movs	r2, #24
 80010b2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010c8:	220a      	movs	r2, #10
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_SPI5_Init+0x64>)
 80010ce:	f005 fe4e 	bl	8006d6e <HAL_SPI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80010d8:	f000 f976 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200005ec 	.word	0x200005ec
 80010e4:	40015000 	.word	0x40015000

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <MX_GPIO_Init+0x118>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a3e      	ldr	r2, [pc, #248]	; (8001200 <MX_GPIO_Init+0x118>)
 8001108:	f043 0320 	orr.w	r3, r3, #32
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <MX_GPIO_Init+0x118>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <MX_GPIO_Init+0x118>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a37      	ldr	r2, [pc, #220]	; (8001200 <MX_GPIO_Init+0x118>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <MX_GPIO_Init+0x118>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <MX_GPIO_Init+0x118>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a30      	ldr	r2, [pc, #192]	; (8001200 <MX_GPIO_Init+0x118>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <MX_GPIO_Init+0x118>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <MX_GPIO_Init+0x118>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a29      	ldr	r2, [pc, #164]	; (8001200 <MX_GPIO_Init+0x118>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_GPIO_Init+0x118>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_GPIO_Init+0x118>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <MX_GPIO_Init+0x118>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_GPIO_Init+0x118>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_GPIO_Init+0x118>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <MX_GPIO_Init+0x118>)
 8001194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_GPIO_Init+0x118>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2102      	movs	r1, #2
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <MX_GPIO_Init+0x11c>)
 80011ac:	f003 f95e 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_GPIO_Init+0x120>)
 80011b8:	f003 f958 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <MX_GPIO_Init+0x11c>)
 80011d4:	f002 fe92 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011d8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_GPIO_Init+0x120>)
 80011f2:	f002 fe83 	bl	8003efc <HAL_GPIO_Init>

}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	; 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40020800 	.word	0x40020800
 8001208:	40021800 	.word	0x40021800

0800120c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 800120c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af04      	add	r7, sp, #16
 8001214:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001216:	f00b fdb9 	bl	800cd8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  L3GD20_ReadXYZAngRate(pfData);
 800121a:	4818      	ldr	r0, [pc, #96]	; (800127c <StartTask01+0x70>)
 800121c:	f000 fe00 	bl	8001e20 <L3GD20_ReadXYZAngRate>
	  sprintf(buffer, "X = %4f, Y = %4f, Z = %4f\n",pfData[0], pfData[1], pfData[2]);
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <StartTask01+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f99f 	bl	8000568 <__aeabi_f2d>
 800122a:	4680      	mov	r8, r0
 800122c:	4689      	mov	r9, r1
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <StartTask01+0x70>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f998 	bl	8000568 <__aeabi_f2d>
 8001238:	4604      	mov	r4, r0
 800123a:	460d      	mov	r5, r1
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <StartTask01+0x70>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f991 	bl	8000568 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800124e:	e9cd 4500 	strd	r4, r5, [sp]
 8001252:	4642      	mov	r2, r8
 8001254:	464b      	mov	r3, r9
 8001256:	490a      	ldr	r1, [pc, #40]	; (8001280 <StartTask01+0x74>)
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <StartTask01+0x78>)
 800125a:	f00c ff85 	bl	800e168 <siprintf>
	  CDC_Transmit_HS((uint8_t*)buffer,strlen(buffer));
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <StartTask01+0x78>)
 8001260:	f7fe ffc6 	bl	80001f0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29b      	uxth	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <StartTask01+0x78>)
 800126c:	f00b fe74 	bl	800cf58 <CDC_Transmit_HS>
	  osDelay(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001274:	f008 fbdb 	bl	8009a2e <osDelay>
	  L3GD20_ReadXYZAngRate(pfData);
 8001278:	e7cf      	b.n	800121a <StartTask01+0xe>
 800127a:	bf00      	nop
 800127c:	2000064c 	.word	0x2000064c
 8001280:	080106a0 	.word	0x080106a0
 8001284:	20000660 	.word	0x20000660

08001288 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  	  if (pfData[0]<0&&pfData[1]<0)
 8001290:	4b3e      	ldr	r3, [pc, #248]	; (800138c <StartTask02+0x104>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	d516      	bpl.n	80012ce <StartTask02+0x46>
 80012a0:	4b3a      	ldr	r3, [pc, #232]	; (800138c <StartTask02+0x104>)
 80012a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	d50e      	bpl.n	80012ce <StartTask02+0x46>
	  	  {
	  		  BSP_LCD_FillPolygon(top, 3);
 80012b0:	2103      	movs	r1, #3
 80012b2:	4837      	ldr	r0, [pc, #220]	; (8001390 <StartTask02+0x108>)
 80012b4:	f001 fc96 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  BSP_LCD_FillPolygon(left, 3);
 80012b8:	2103      	movs	r1, #3
 80012ba:	4836      	ldr	r0, [pc, #216]	; (8001394 <StartTask02+0x10c>)
 80012bc:	f001 fc92 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  HAL_Delay(1000);
 80012c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c4:	f002 f8c0 	bl	8003448 <HAL_Delay>
	  	  	BSP_LCD_Clear(LCD_COLOR_BLUE);
 80012c8:	4833      	ldr	r0, [pc, #204]	; (8001398 <StartTask02+0x110>)
 80012ca:	f001 fadb 	bl	8002884 <BSP_LCD_Clear>
	  	  }
	  	  if (pfData[0]<0&&pfData[1]>0)
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <StartTask02+0x104>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d516      	bpl.n	800130c <StartTask02+0x84>
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <StartTask02+0x104>)
 80012e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	dd0e      	ble.n	800130c <StartTask02+0x84>
	  	  {
	  	  	  BSP_LCD_FillPolygon(top, 3);
 80012ee:	2103      	movs	r1, #3
 80012f0:	4827      	ldr	r0, [pc, #156]	; (8001390 <StartTask02+0x108>)
 80012f2:	f001 fc77 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  BSP_LCD_FillPolygon(right, 3);
 80012f6:	2103      	movs	r1, #3
 80012f8:	4828      	ldr	r0, [pc, #160]	; (800139c <StartTask02+0x114>)
 80012fa:	f001 fc73 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  HAL_Delay(1000);
 80012fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001302:	f002 f8a1 	bl	8003448 <HAL_Delay>
	  	  	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001306:	4824      	ldr	r0, [pc, #144]	; (8001398 <StartTask02+0x110>)
 8001308:	f001 fabc 	bl	8002884 <BSP_LCD_Clear>
	  	  }
	  	  if (pfData[0]>0&&pfData[1]<0)
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <StartTask02+0x104>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	dd16      	ble.n	800134a <StartTask02+0xc2>
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <StartTask02+0x104>)
 800131e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d50e      	bpl.n	800134a <StartTask02+0xc2>
	  	  {
	  	  	  BSP_LCD_FillPolygon(bot, 3);
 800132c:	2103      	movs	r1, #3
 800132e:	481c      	ldr	r0, [pc, #112]	; (80013a0 <StartTask02+0x118>)
 8001330:	f001 fc58 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  BSP_LCD_FillPolygon(left, 3);
 8001334:	2103      	movs	r1, #3
 8001336:	4817      	ldr	r0, [pc, #92]	; (8001394 <StartTask02+0x10c>)
 8001338:	f001 fc54 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  HAL_Delay(1000);
 800133c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001340:	f002 f882 	bl	8003448 <HAL_Delay>
	  	  	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <StartTask02+0x110>)
 8001346:	f001 fa9d 	bl	8002884 <BSP_LCD_Clear>
	  	  }
	  	  if (pfData[0]>0&&pfData[1]>0)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <StartTask02+0x104>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd16      	ble.n	8001388 <StartTask02+0x100>
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <StartTask02+0x104>)
 800135c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	dd0e      	ble.n	8001388 <StartTask02+0x100>
	  	  {
	  	  	  BSP_LCD_FillPolygon(bot, 3);
 800136a:	2103      	movs	r1, #3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <StartTask02+0x118>)
 800136e:	f001 fc39 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  BSP_LCD_FillPolygon(right, 3);
 8001372:	2103      	movs	r1, #3
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <StartTask02+0x114>)
 8001376:	f001 fc35 	bl	8002be4 <BSP_LCD_FillPolygon>
	  	  	  HAL_Delay(1000);
 800137a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137e:	f002 f863 	bl	8003448 <HAL_Delay>
	  	  	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <StartTask02+0x110>)
 8001384:	f001 fa7e 	bl	8002884 <BSP_LCD_Clear>
	  	  if (pfData[0]<0&&pfData[1]<0)
 8001388:	e782      	b.n	8001290 <StartTask02+0x8>
 800138a:	bf00      	nop
 800138c:	2000064c 	.word	0x2000064c
 8001390:	20000000 	.word	0x20000000
 8001394:	20000018 	.word	0x20000018
 8001398:	ff0000ff 	.word	0xff0000ff
 800139c:	20000024 	.word	0x20000024
 80013a0:	2000000c 	.word	0x2000000c

080013a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013b6:	f002 f827 	bl	8003408 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40001000 	.word	0x40001000

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_MspInit+0x54>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a11      	ldr	r2, [pc, #68]	; (8001428 <HAL_MspInit+0x54>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_MspInit+0x54>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_MspInit+0x54>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_MspInit+0x54>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_MspInit+0x54>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	210f      	movs	r1, #15
 8001416:	f06f 0001 	mvn.w	r0, #1
 800141a:	f002 f8f1 	bl	8003600 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_SPI_MspInit+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12c      	bne.n	80014a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001486:	f44f 7360 	mov.w	r3, #896	; 0x380
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001498:	2305      	movs	r3, #5
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 80014a4:	f002 fd2a 	bl	8003efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40015000 	.word	0x40015000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021400 	.word	0x40021400

080014bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_SPI_MspDeInit+0x30>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10a      	bne.n	80014e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_SPI_MspDeInit+0x34>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_SPI_MspDeInit+0x34>)
 80014d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80014da:	f44f 7160 	mov.w	r1, #896	; 0x380
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <HAL_SPI_MspDeInit+0x38>)
 80014e0:	f002 feb8 	bl	8004254 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40015000 	.word	0x40015000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40021400 	.word	0x40021400

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4b33      	ldr	r3, [pc, #204]	; (80015dc <HAL_InitTick+0xe4>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a32      	ldr	r2, [pc, #200]	; (80015dc <HAL_InitTick+0xe4>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <HAL_InitTick+0xe4>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001524:	f107 0210 	add.w	r2, r7, #16
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f005 f990 	bl	8006854 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800153e:	f005 f975 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 8001542:	6378      	str	r0, [r7, #52]	; 0x34
 8001544:	e004      	b.n	8001550 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001546:	f005 f971 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 800154a:	4603      	mov	r3, r0
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <HAL_InitTick+0xe8>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9b      	lsrs	r3, r3, #18
 800155a:	3b01      	subs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_InitTick+0xec>)
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_InitTick+0xf0>)
 8001562:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <HAL_InitTick+0xec>)
 8001566:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_InitTick+0xec>)
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_InitTick+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_InitTick+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_InitTick+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001584:	4817      	ldr	r0, [pc, #92]	; (80015e4 <HAL_InitTick+0xec>)
 8001586:	f006 f9d1 	bl	800792c <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001594:	2b00      	cmp	r3, #0
 8001596:	d11b      	bne.n	80015d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001598:	4812      	ldr	r0, [pc, #72]	; (80015e4 <HAL_InitTick+0xec>)
 800159a:	f006 fa21 	bl	80079e0 <HAL_TIM_Base_Start_IT>
 800159e:	4603      	mov	r3, r0
 80015a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d111      	bne.n	80015d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ac:	2036      	movs	r0, #54	; 0x36
 80015ae:	f002 f843 	bl	8003638 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d808      	bhi.n	80015ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2036      	movs	r0, #54	; 0x36
 80015be:	f002 f81f 	bl	8003600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_InitTick+0xf4>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e002      	b.n	80015d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3738      	adds	r7, #56	; 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	200006c4 	.word	0x200006c4
 80015e8:	40001000 	.word	0x40001000
 80015ec:	200000b0 	.word	0x200000b0

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM6_DAC_IRQHandler+0x10>)
 8001622:	f006 fa4d 	bl	8007ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200006c4 	.word	0x200006c4

08001630 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <OTG_HS_IRQHandler+0x10>)
 8001636:	f003 fb5c 	bl	8004cf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20005ba8 	.word	0x20005ba8

08001644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_kill>:

int _kill(int pid, int sig)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800165e:	f00c f8d9 	bl	800d814 <__errno>
 8001662:	4603      	mov	r3, r0
 8001664:	2216      	movs	r2, #22
 8001666:	601a      	str	r2, [r3, #0]
	return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_exit>:

void _exit (int status)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe7 	bl	8001654 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001686:	e7fe      	b.n	8001686 <_exit+0x12>

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
	}

return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e009      	b.n	80016e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf1      	blt.n	80016d4 <_write+0x12>
	}
	return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_close>:

int _close(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f00c f83e 	bl	800d814 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20030000 	.word	0x20030000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	2000070c 	.word	0x2000070c
 80017cc:	200062e8 	.word	0x200062e8

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181e:	f7ff ffd7 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f00b fffd 	bl	800d820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff fb6b 	bl	8000f00 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800182c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 8001838:	080125cc 	.word	0x080125cc
  ldr r2, =_sbss
 800183c:	2000037c 	.word	0x2000037c
  ldr r4, =_ebss
 8001840:	200062e4 	.word	0x200062e4

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>

08001846 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800184a:	f000 fcc1 	bl	80021d0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800184e:	20ca      	movs	r0, #202	; 0xca
 8001850:	f000 f95d 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001854:	20c3      	movs	r0, #195	; 0xc3
 8001856:	f000 f967 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800185a:	2008      	movs	r0, #8
 800185c:	f000 f964 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001860:	2050      	movs	r0, #80	; 0x50
 8001862:	f000 f961 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001866:	20cf      	movs	r0, #207	; 0xcf
 8001868:	f000 f951 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800186c:	2000      	movs	r0, #0
 800186e:	f000 f95b 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001872:	20c1      	movs	r0, #193	; 0xc1
 8001874:	f000 f958 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001878:	2030      	movs	r0, #48	; 0x30
 800187a:	f000 f955 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800187e:	20ed      	movs	r0, #237	; 0xed
 8001880:	f000 f945 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001884:	2064      	movs	r0, #100	; 0x64
 8001886:	f000 f94f 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800188a:	2003      	movs	r0, #3
 800188c:	f000 f94c 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001890:	2012      	movs	r0, #18
 8001892:	f000 f949 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001896:	2081      	movs	r0, #129	; 0x81
 8001898:	f000 f946 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800189c:	20e8      	movs	r0, #232	; 0xe8
 800189e:	f000 f936 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80018a2:	2085      	movs	r0, #133	; 0x85
 80018a4:	f000 f940 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f000 f93d 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80018ae:	2078      	movs	r0, #120	; 0x78
 80018b0:	f000 f93a 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80018b4:	20cb      	movs	r0, #203	; 0xcb
 80018b6:	f000 f92a 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80018ba:	2039      	movs	r0, #57	; 0x39
 80018bc:	f000 f934 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80018c0:	202c      	movs	r0, #44	; 0x2c
 80018c2:	f000 f931 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f92e 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80018cc:	2034      	movs	r0, #52	; 0x34
 80018ce:	f000 f92b 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80018d2:	2002      	movs	r0, #2
 80018d4:	f000 f928 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80018d8:	20f7      	movs	r0, #247	; 0xf7
 80018da:	f000 f918 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80018de:	2020      	movs	r0, #32
 80018e0:	f000 f922 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80018e4:	20ea      	movs	r0, #234	; 0xea
 80018e6:	f000 f912 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f91c 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 f919 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80018f6:	20b1      	movs	r0, #177	; 0xb1
 80018f8:	f000 f909 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 f913 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001902:	201b      	movs	r0, #27
 8001904:	f000 f910 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001908:	20b6      	movs	r0, #182	; 0xb6
 800190a:	f000 f900 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800190e:	200a      	movs	r0, #10
 8001910:	f000 f90a 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001914:	20a2      	movs	r0, #162	; 0xa2
 8001916:	f000 f907 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800191a:	20c0      	movs	r0, #192	; 0xc0
 800191c:	f000 f8f7 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001920:	2010      	movs	r0, #16
 8001922:	f000 f901 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001926:	20c1      	movs	r0, #193	; 0xc1
 8001928:	f000 f8f1 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800192c:	2010      	movs	r0, #16
 800192e:	f000 f8fb 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001932:	20c5      	movs	r0, #197	; 0xc5
 8001934:	f000 f8eb 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001938:	2045      	movs	r0, #69	; 0x45
 800193a:	f000 f8f5 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800193e:	2015      	movs	r0, #21
 8001940:	f000 f8f2 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001944:	20c7      	movs	r0, #199	; 0xc7
 8001946:	f000 f8e2 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800194a:	2090      	movs	r0, #144	; 0x90
 800194c:	f000 f8ec 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001950:	2036      	movs	r0, #54	; 0x36
 8001952:	f000 f8dc 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001956:	20c8      	movs	r0, #200	; 0xc8
 8001958:	f000 f8e6 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800195c:	20f2      	movs	r0, #242	; 0xf2
 800195e:	f000 f8d6 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001962:	2000      	movs	r0, #0
 8001964:	f000 f8e0 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001968:	20b0      	movs	r0, #176	; 0xb0
 800196a:	f000 f8d0 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800196e:	20c2      	movs	r0, #194	; 0xc2
 8001970:	f000 f8da 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001974:	20b6      	movs	r0, #182	; 0xb6
 8001976:	f000 f8ca 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800197a:	200a      	movs	r0, #10
 800197c:	f000 f8d4 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001980:	20a7      	movs	r0, #167	; 0xa7
 8001982:	f000 f8d1 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001986:	2027      	movs	r0, #39	; 0x27
 8001988:	f000 f8ce 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800198c:	2004      	movs	r0, #4
 800198e:	f000 f8cb 	bl	8001b28 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001992:	202a      	movs	r0, #42	; 0x2a
 8001994:	f000 f8bb 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001998:	2000      	movs	r0, #0
 800199a:	f000 f8c5 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f8c2 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 f8bf 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80019aa:	20ef      	movs	r0, #239	; 0xef
 80019ac:	f000 f8bc 	bl	8001b28 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80019b0:	202b      	movs	r0, #43	; 0x2b
 80019b2:	f000 f8ac 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f8b6 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f8b3 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 f8b0 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80019c8:	203f      	movs	r0, #63	; 0x3f
 80019ca:	f000 f8ad 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80019ce:	20f6      	movs	r0, #246	; 0xf6
 80019d0:	f000 f89d 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f000 f8a7 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 f8a4 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80019e0:	2006      	movs	r0, #6
 80019e2:	f000 f8a1 	bl	8001b28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80019e6:	202c      	movs	r0, #44	; 0x2c
 80019e8:	f000 f891 	bl	8001b0e <ili9341_WriteReg>
  LCD_Delay(200);
 80019ec:	20c8      	movs	r0, #200	; 0xc8
 80019ee:	f000 fcdd 	bl	80023ac <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80019f2:	2026      	movs	r0, #38	; 0x26
 80019f4:	f000 f88b 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f000 f895 	bl	8001b28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80019fe:	20e0      	movs	r0, #224	; 0xe0
 8001a00:	f000 f885 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001a04:	200f      	movs	r0, #15
 8001a06:	f000 f88f 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001a0a:	2029      	movs	r0, #41	; 0x29
 8001a0c:	f000 f88c 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001a10:	2024      	movs	r0, #36	; 0x24
 8001a12:	f000 f889 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a16:	200c      	movs	r0, #12
 8001a18:	f000 f886 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001a1c:	200e      	movs	r0, #14
 8001a1e:	f000 f883 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001a22:	2009      	movs	r0, #9
 8001a24:	f000 f880 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001a28:	204e      	movs	r0, #78	; 0x4e
 8001a2a:	f000 f87d 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a2e:	2078      	movs	r0, #120	; 0x78
 8001a30:	f000 f87a 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001a34:	203c      	movs	r0, #60	; 0x3c
 8001a36:	f000 f877 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001a3a:	2009      	movs	r0, #9
 8001a3c:	f000 f874 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001a40:	2013      	movs	r0, #19
 8001a42:	f000 f871 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001a46:	2005      	movs	r0, #5
 8001a48:	f000 f86e 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001a4c:	2017      	movs	r0, #23
 8001a4e:	f000 f86b 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a52:	2011      	movs	r0, #17
 8001a54:	f000 f868 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f000 f865 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001a5e:	20e1      	movs	r0, #225	; 0xe1
 8001a60:	f000 f855 	bl	8001b0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f000 f85f 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001a6a:	2016      	movs	r0, #22
 8001a6c:	f000 f85c 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a70:	201b      	movs	r0, #27
 8001a72:	f000 f859 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a76:	2004      	movs	r0, #4
 8001a78:	f000 f856 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a7c:	2011      	movs	r0, #17
 8001a7e:	f000 f853 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001a82:	2007      	movs	r0, #7
 8001a84:	f000 f850 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001a88:	2031      	movs	r0, #49	; 0x31
 8001a8a:	f000 f84d 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001a8e:	2033      	movs	r0, #51	; 0x33
 8001a90:	f000 f84a 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001a94:	2042      	movs	r0, #66	; 0x42
 8001a96:	f000 f847 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f000 f844 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001aa0:	200c      	movs	r0, #12
 8001aa2:	f000 f841 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001aa6:	200a      	movs	r0, #10
 8001aa8:	f000 f83e 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001aac:	2028      	movs	r0, #40	; 0x28
 8001aae:	f000 f83b 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001ab2:	202f      	movs	r0, #47	; 0x2f
 8001ab4:	f000 f838 	bl	8001b28 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001ab8:	200f      	movs	r0, #15
 8001aba:	f000 f835 	bl	8001b28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001abe:	2011      	movs	r0, #17
 8001ac0:	f000 f825 	bl	8001b0e <ili9341_WriteReg>
  LCD_Delay(200);
 8001ac4:	20c8      	movs	r0, #200	; 0xc8
 8001ac6:	f000 fc71 	bl	80023ac <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001aca:	2029      	movs	r0, #41	; 0x29
 8001acc:	f000 f81f 	bl	8001b0e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001ad0:	202c      	movs	r0, #44	; 0x2c
 8001ad2:	f000 f81c 	bl	8001b0e <ili9341_WriteReg>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001ade:	f000 fb77 	bl	80021d0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	20d3      	movs	r0, #211	; 0xd3
 8001ae6:	f000 f82c 	bl	8001b42 <ili9341_ReadData>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29b      	uxth	r3, r3
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001af6:	2029      	movs	r0, #41	; 0x29
 8001af8:	f000 f809 	bl	8001b0e <ili9341_WriteReg>
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001b04:	2028      	movs	r0, #40	; 0x28
 8001b06:	f000 f802 	bl	8001b0e <ili9341_WriteReg>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fbf2 	bl	8002304 <LCD_IO_WriteReg>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fbc3 	bl	80022c0 <LCD_IO_WriteData>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	80fb      	strh	r3, [r7, #6]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001b52:	797a      	ldrb	r2, [r7, #5]
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fbf5 	bl	8002348 <LCD_IO_ReadData>
 8001b5e:	4603      	mov	r3, r0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001b6c:	23f0      	movs	r3, #240	; 0xf0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001b7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001b98:	f000 fc14 	bl	80023c4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001ba2:	f107 030f 	add.w	r3, r7, #15
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2120      	movs	r1, #32
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fc56 	bl	800245c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001bba:	f107 030f 	add.w	r3, r7, #15
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2123      	movs	r1, #35	; 0x23
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fc4a 	bl	800245c <GYRO_IO_Write>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001be4:	f000 fbee 	bl	80023c4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	2201      	movs	r2, #1
 8001bec:	210f      	movs	r1, #15
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fc66 	bl	80024c0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	2201      	movs	r2, #1
 8001c08:	2124      	movs	r1, #36	; 0x24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fc58 	bl	80024c0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2124      	movs	r1, #36	; 0x24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fc1b 	bl	800245c <GYRO_IO_Write>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001c42:	f107 030f 	add.w	r3, r7, #15
 8001c46:	2201      	movs	r2, #1
 8001c48:	2120      	movs	r1, #32
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fc06 	bl	800245c <GYRO_IO_Write>
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	2300      	movs	r3, #0
 8001c68:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001c6a:	f107 030f 	add.w	r3, r7, #15
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2130      	movs	r1, #48	; 0x30
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fc24 	bl	80024c0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001c78:	f107 030e 	add.w	r3, r7, #14
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2122      	movs	r1, #34	; 0x22
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fc1d 	bl	80024c0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	121b      	asrs	r3, r3, #8
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001ca4:	7bbb      	ldrb	r3, [r7, #14]
 8001ca6:	f023 0320 	bic.w	r3, r3, #32
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001cba:	f107 030f 	add.w	r3, r7, #15
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2130      	movs	r1, #48	; 0x30
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fbca 	bl	800245c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001cc8:	f107 030e 	add.w	r3, r7, #14
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2122      	movs	r1, #34	; 0x22
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fbc3 	bl	800245c <GYRO_IO_Write>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ce8:	f107 030f 	add.w	r3, r7, #15
 8001cec:	2201      	movs	r2, #1
 8001cee:	2122      	movs	r1, #34	; 0x22
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fbe5 	bl	80024c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e00c      	b.n	8001d2c <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d109      	bne.n	8001d2c <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	f023 0308 	bic.w	r3, r3, #8
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001d2c:	f107 030f 	add.w	r3, r7, #15
 8001d30:	2201      	movs	r2, #1
 8001d32:	2122      	movs	r1, #34	; 0x22
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fb91 	bl	800245c <GYRO_IO_Write>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001d4c:	f107 030f 	add.w	r3, r7, #15
 8001d50:	2201      	movs	r2, #1
 8001d52:	2122      	movs	r1, #34	; 0x22
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fbb3 	bl	80024c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e009      	b.n	8001d84 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d106      	bne.n	8001d84 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	f023 0308 	bic.w	r3, r3, #8
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001d84:	f107 030f 	add.w	r3, r7, #15
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2122      	movs	r1, #34	; 0x22
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fb65 	bl	800245c <GYRO_IO_Write>
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001da4:	f107 030f 	add.w	r3, r7, #15
 8001da8:	2201      	movs	r2, #1
 8001daa:	2121      	movs	r1, #33	; 0x21
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fb87 	bl	80024c0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001dc6:	f107 030f 	add.w	r3, r7, #15
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2121      	movs	r1, #33	; 0x21
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fb44 	bl	800245c <GYRO_IO_Write>
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001de6:	f107 030f 	add.w	r3, r7, #15
 8001dea:	2201      	movs	r2, #1
 8001dec:	2124      	movs	r1, #36	; 0x24
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fb66 	bl	80024c0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	f023 0310 	bic.w	r3, r3, #16
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001e08:	f107 030f 	add.w	r3, r7, #15
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2124      	movs	r1, #36	; 0x24
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fb23 	bl	800245c <GYRO_IO_Write>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001e48:	f107 030f 	add.w	r3, r7, #15
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2123      	movs	r1, #35	; 0x23
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fb35 	bl	80024c0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	2206      	movs	r2, #6
 8001e5c:	2128      	movs	r1, #40	; 0x28
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fb2e 	bl	80024c0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d123      	bne.n	8001eb6 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
 8001e72:	e01c      	b.n	8001eae <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	3301      	adds	r3, #1
 8001e7a:	3328      	adds	r3, #40	; 0x28
 8001e7c:	443b      	add	r3, r7
 8001e7e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	3328      	adds	r3, #40	; 0x28
 8001e8e:	443b      	add	r3, r7
 8001e90:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	3328      	adds	r3, #40	; 0x28
 8001ea2:	443b      	add	r3, r7
 8001ea4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	dddf      	ble.n	8001e74 <L3GD20_ReadXYZAngRate+0x54>
 8001eb4:	e022      	b.n	8001efc <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
 8001eba:	e01c      	b.n	8001ef6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	3328      	adds	r3, #40	; 0x28
 8001ec2:	443b      	add	r3, r7
 8001ec4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	3328      	adds	r3, #40	; 0x28
 8001ed6:	443b      	add	r3, r7
 8001ed8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	3328      	adds	r3, #40	; 0x28
 8001eea:	443b      	add	r3, r7
 8001eec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	dddf      	ble.n	8001ebc <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d00c      	beq.n	8001f20 <L3GD20_ReadXYZAngRate+0x100>
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	dc0d      	bgt.n	8001f26 <L3GD20_ReadXYZAngRate+0x106>
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <L3GD20_ReadXYZAngRate+0xf4>
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d003      	beq.n	8001f1a <L3GD20_ReadXYZAngRate+0xfa>
 8001f12:	e008      	b.n	8001f26 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <L3GD20_ReadXYZAngRate+0x1e4>)
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001f18:	e005      	b.n	8001f26 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <L3GD20_ReadXYZAngRate+0x1e8>)
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001f1e:	e002      	b.n	8001f26 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <L3GD20_ReadXYZAngRate+0x1ec>)
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001f24:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i= 0; i<3; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	e063      	b.n	8001ff4 <L3GD20_ReadXYZAngRate+0x1d4>
        {
          pfData[i] = (float)(RawData[i] * sensitivity) / 1000;
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	3328      	adds	r3, #40	; 0x28
 8001f32:	443b      	add	r3, r7
 8001f34:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002010 <L3GD20_ReadXYZAngRate+0x1f0>
 8001f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f58:	edc3 7a00 	vstr	s15, [r3]
          if((pfData[i] < 1 && pfData[i] > 0) || (pfData[i] > -1 && pfData[i] < 0))
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	d50a      	bpl.n	8001f8c <L3GD20_ReadXYZAngRate+0x16c>
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	dc17      	bgt.n	8001fbc <L3GD20_ReadXYZAngRate+0x19c>
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa4:	dd12      	ble.n	8001fcc <L3GD20_ReadXYZAngRate+0x1ac>
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fba:	d507      	bpl.n	8001fcc <L3GD20_ReadXYZAngRate+0x1ac>
          {
          	pfData[i] = 0;
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e00d      	b.n	8001fe8 <L3GD20_ReadXYZAngRate+0x1c8>
          }
          else
          {
          	pfData[i] += pfData[i];
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fe4:	edc3 7a00 	vstr	s15, [r3]
          }
          HAL_Delay(200);
 8001fe8:	20c8      	movs	r0, #200	; 0xc8
 8001fea:	f001 fa2d 	bl	8003448 <HAL_Delay>
  for(i= 0; i<3; i++)
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	dd98      	ble.n	8001f2c <L3GD20_ReadXYZAngRate+0x10c>
        }
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	410c0000 	.word	0x410c0000
 8002008:	418c0000 	.word	0x418c0000
 800200c:	428c0000 	.word	0x428c0000
 8002010:	447a0000 	.word	0x447a0000

08002014 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002018:	4819      	ldr	r0, [pc, #100]	; (8002080 <SPIx_Init+0x6c>)
 800201a:	f005 fb48 	bl	80076ae <HAL_SPI_GetState>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d12b      	bne.n	800207c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <SPIx_Init+0x6c>)
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <SPIx_Init+0x70>)
 8002028:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <SPIx_Init+0x6c>)
 800202c:	2218      	movs	r2, #24
 800202e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <SPIx_Init+0x6c>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <SPIx_Init+0x6c>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <SPIx_Init+0x6c>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <SPIx_Init+0x6c>)
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <SPIx_Init+0x6c>)
 800204a:	2207      	movs	r2, #7
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <SPIx_Init+0x6c>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <SPIx_Init+0x6c>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <SPIx_Init+0x6c>)
 800205c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002060:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <SPIx_Init+0x6c>)
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SPIx_Init+0x6c>)
 800206a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800206e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <SPIx_Init+0x6c>)
 8002072:	f000 f873 	bl	800215c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002076:	4802      	ldr	r0, [pc, #8]	; (8002080 <SPIx_Init+0x6c>)
 8002078:	f004 fe79 	bl	8006d6e <HAL_SPI_Init>
  } 
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000710 	.word	0x20000710
 8002084:	40015000 	.word	0x40015000

08002088 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <SPIx_Read+0x38>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f107 0108 	add.w	r1, r7, #8
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <SPIx_Read+0x3c>)
 80020a4:	f005 f850 	bl	8007148 <HAL_SPI_Receive>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020b2:	f000 f847 	bl	8002144 <SPIx_Error>
  }
  
  return readvalue;
 80020b6:	68bb      	ldr	r3, [r7, #8]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200000a0 	.word	0x200000a0
 80020c4:	20000710 	.word	0x20000710

080020c8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <SPIx_Write+0x34>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1db9      	adds	r1, r7, #6
 80020dc:	2201      	movs	r2, #1
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <SPIx_Write+0x38>)
 80020e0:	f004 fef6 	bl	8006ed0 <HAL_SPI_Transmit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020ee:	f000 f829 	bl	8002144 <SPIx_Error>
  }
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200000a0 	.word	0x200000a0
 8002100:	20000710 	.word	0x20000710

08002104 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af02      	add	r7, sp, #8
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <SPIx_WriteRead+0x38>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f107 020f 	add.w	r2, r7, #15
 800211a:	1df9      	adds	r1, r7, #7
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <SPIx_WriteRead+0x3c>)
 8002122:	f005 f922 	bl	800736a <HAL_SPI_TransmitReceive>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 800212c:	f000 f80a 	bl	8002144 <SPIx_Error>
  }
  
  return receivedbyte;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200000a0 	.word	0x200000a0
 8002140:	20000710 	.word	0x20000710

08002144 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <SPIx_Error+0x14>)
 800214a:	f004 fe99 	bl	8006e80 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800214e:	f7ff ff61 	bl	8002014 <SPIx_Init>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000710 	.word	0x20000710

0800215c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <SPIx_MspInit+0x6c>)
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <SPIx_MspInit+0x6c>)
 800216e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002172:	6453      	str	r3, [r2, #68]	; 0x44
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <SPIx_MspInit+0x6c>)
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <SPIx_MspInit+0x6c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <SPIx_MspInit+0x6c>)
 800218a:	f043 0320 	orr.w	r3, r3, #32
 800218e:	6313      	str	r3, [r2, #48]	; 0x30
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <SPIx_MspInit+0x6c>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800219c:	f44f 7360 	mov.w	r3, #896	; 0x380
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021aa:	2301      	movs	r3, #1
 80021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80021ae:	2305      	movs	r3, #5
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <SPIx_MspInit+0x70>)
 80021ba:	f001 fe9f 	bl	8003efc <HAL_GPIO_Init>
}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	; 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40021400 	.word	0x40021400

080021d0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <LCD_IO_Init+0xe0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d164      	bne.n	80022a8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <LCD_IO_Init+0xe0>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <LCD_IO_Init+0xe4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <LCD_IO_Init+0xe4>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <LCD_IO_Init+0xe4>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002204:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	4619      	mov	r1, r3
 8002218:	4827      	ldr	r0, [pc, #156]	; (80022b8 <LCD_IO_Init+0xe8>)
 800221a:	f001 fe6f 	bl	8003efc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <LCD_IO_Init+0xe4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <LCD_IO_Init+0xe4>)
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <LCD_IO_Init+0xe4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800223a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	4619      	mov	r1, r3
 8002252:	4819      	ldr	r0, [pc, #100]	; (80022b8 <LCD_IO_Init+0xe8>)
 8002254:	f001 fe52 	bl	8003efc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <LCD_IO_Init+0xe4>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <LCD_IO_Init+0xe4>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6313      	str	r3, [r2, #48]	; 0x30
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <LCD_IO_Init+0xe4>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002274:	2304      	movs	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4619      	mov	r1, r3
 800228a:	480c      	ldr	r0, [pc, #48]	; (80022bc <LCD_IO_Init+0xec>)
 800228c:	f001 fe36 	bl	8003efc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002290:	2200      	movs	r2, #0
 8002292:	2104      	movs	r1, #4
 8002294:	4809      	ldr	r0, [pc, #36]	; (80022bc <LCD_IO_Init+0xec>)
 8002296:	f002 f8e9 	bl	800446c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800229a:	2201      	movs	r2, #1
 800229c:	2104      	movs	r1, #4
 800229e:	4807      	ldr	r0, [pc, #28]	; (80022bc <LCD_IO_Init+0xec>)
 80022a0:	f002 f8e4 	bl	800446c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80022a4:	f7ff feb6 	bl	8002014 <SPIx_Init>
  }
}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000768 	.word	0x20000768
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40020800 	.word	0x40020800

080022c0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d0:	480a      	ldr	r0, [pc, #40]	; (80022fc <LCD_IO_WriteData+0x3c>)
 80022d2:	f002 f8cb 	bl	800446c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80022d6:	2200      	movs	r2, #0
 80022d8:	2104      	movs	r1, #4
 80022da:	4809      	ldr	r0, [pc, #36]	; (8002300 <LCD_IO_WriteData+0x40>)
 80022dc:	f002 f8c6 	bl	800446c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fef0 	bl	80020c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022e8:	2201      	movs	r2, #1
 80022ea:	2104      	movs	r1, #4
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <LCD_IO_WriteData+0x40>)
 80022ee:	f002 f8bd 	bl	800446c <HAL_GPIO_WritePin>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40020800 	.word	0x40020800

08002304 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002314:	480a      	ldr	r0, [pc, #40]	; (8002340 <LCD_IO_WriteReg+0x3c>)
 8002316:	f002 f8a9 	bl	800446c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800231a:	2200      	movs	r2, #0
 800231c:	2104      	movs	r1, #4
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <LCD_IO_WriteReg+0x40>)
 8002320:	f002 f8a4 	bl	800446c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fecd 	bl	80020c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800232e:	2201      	movs	r2, #1
 8002330:	2104      	movs	r1, #4
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <LCD_IO_WriteReg+0x40>)
 8002334:	f002 f89a 	bl	800446c <HAL_GPIO_WritePin>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40020800 	.word	0x40020800

08002348 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	460a      	mov	r2, r1
 8002352:	80fb      	strh	r3, [r7, #6]
 8002354:	4613      	mov	r3, r2
 8002356:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800235c:	2200      	movs	r2, #0
 800235e:	2104      	movs	r1, #4
 8002360:	4810      	ldr	r0, [pc, #64]	; (80023a4 <LCD_IO_ReadData+0x5c>)
 8002362:	f002 f883 	bl	800446c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800236c:	480e      	ldr	r0, [pc, #56]	; (80023a8 <LCD_IO_ReadData+0x60>)
 800236e:	f002 f87d 	bl	800446c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fea7 	bl	80020c8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800237a:	797b      	ldrb	r3, [r7, #5]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe83 	bl	8002088 <SPIx_Read>
 8002382:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002384:	2201      	movs	r2, #1
 8002386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800238a:	4807      	ldr	r0, [pc, #28]	; (80023a8 <LCD_IO_ReadData+0x60>)
 800238c:	f002 f86e 	bl	800446c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002390:	2201      	movs	r2, #1
 8002392:	2104      	movs	r1, #4
 8002394:	4803      	ldr	r0, [pc, #12]	; (80023a4 <LCD_IO_ReadData+0x5c>)
 8002396:	f002 f869 	bl	800446c <HAL_GPIO_WritePin>
  
  return readvalue;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00

080023ac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f001 f847 	bl	8003448 <HAL_Delay>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <GYRO_IO_Init+0x8c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <GYRO_IO_Init+0x8c>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <GYRO_IO_Init+0x8c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80023e6:	2302      	movs	r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	4619      	mov	r1, r3
 80023fc:	4815      	ldr	r0, [pc, #84]	; (8002454 <GYRO_IO_Init+0x90>)
 80023fe:	f001 fd7d 	bl	8003efc <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002402:	2201      	movs	r2, #1
 8002404:	2102      	movs	r1, #2
 8002406:	4813      	ldr	r0, [pc, #76]	; (8002454 <GYRO_IO_Init+0x90>)
 8002408:	f002 f830 	bl	800446c <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <GYRO_IO_Init+0x8c>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <GYRO_IO_Init+0x8c>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6313      	str	r3, [r2, #48]	; 0x30
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <GYRO_IO_Init+0x8c>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002428:	2306      	movs	r3, #6
 800242a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <GYRO_IO_Init+0x94>)
 8002440:	f001 fd5c 	bl	8003efc <HAL_GPIO_Init>

  SPIx_Init();
 8002444:	f7ff fde6 	bl	8002014 <SPIx_Init>
}
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	40020800 	.word	0x40020800
 8002458:	40020000 	.word	0x40020000

0800245c <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
 8002468:	4613      	mov	r3, r2
 800246a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800246c:	883b      	ldrh	r3, [r7, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d903      	bls.n	800247a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002478:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800247a:	2200      	movs	r2, #0
 800247c:	2102      	movs	r1, #2
 800247e:	480f      	ldr	r0, [pc, #60]	; (80024bc <GYRO_IO_Write+0x60>)
 8002480:	f001 fff4 	bl	800446c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fe3c 	bl	8002104 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800248c:	e00a      	b.n	80024a4 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fe36 	bl	8002104 <SPIx_WriteRead>
    NumByteToWrite--;
 8002498:	883b      	ldrh	r3, [r7, #0]
 800249a:	3b01      	subs	r3, #1
 800249c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80024a4:	883b      	ldrh	r3, [r7, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f1      	bne.n	800248e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80024aa:	2201      	movs	r2, #1
 80024ac:	2102      	movs	r1, #2
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <GYRO_IO_Write+0x60>)
 80024b0:	f001 ffdc 	bl	800446c <HAL_GPIO_WritePin>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40020800 	.word	0x40020800

080024c0 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
 80024cc:	4613      	mov	r3, r2
 80024ce:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80024d0:	883b      	ldrh	r3, [r7, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d904      	bls.n	80024e0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80024dc:	70fb      	strb	r3, [r7, #3]
 80024de:	e003      	b.n	80024e8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024e6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80024e8:	2200      	movs	r2, #0
 80024ea:	2102      	movs	r1, #2
 80024ec:	4810      	ldr	r0, [pc, #64]	; (8002530 <GYRO_IO_Read+0x70>)
 80024ee:	f001 ffbd 	bl	800446c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fe05 	bl	8002104 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80024fa:	e00c      	b.n	8002516 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff fe01 	bl	8002104 <SPIx_WriteRead>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800250a:	883b      	ldrh	r3, [r7, #0]
 800250c:	3b01      	subs	r3, #1
 800250e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3301      	adds	r3, #1
 8002514:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002516:	883b      	ldrh	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ef      	bne.n	80024fc <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800251c:	2201      	movs	r2, #1
 800251e:	2102      	movs	r1, #2
 8002520:	4803      	ldr	r0, [pc, #12]	; (8002530 <GYRO_IO_Read+0x70>)
 8002522:	f001 ffa3 	bl	800446c <HAL_GPIO_WritePin>
}  
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40020800 	.word	0x40020800

08002534 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800253e:	2300      	movs	r3, #0
 8002540:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002542:	2300      	movs	r3, #0
 8002544:	703b      	strb	r3, [r7, #0]
 8002546:	2300      	movs	r3, #0
 8002548:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <BSP_GYRO_Init+0xc4>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4798      	blx	r3
 8002550:	4603      	mov	r3, r0
 8002552:	2bd4      	cmp	r3, #212	; 0xd4
 8002554:	d005      	beq.n	8002562 <BSP_GYRO_Init+0x2e>
 8002556:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <BSP_GYRO_Init+0xc4>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4798      	blx	r3
 800255c:	4603      	mov	r3, r0
 800255e:	2bd5      	cmp	r3, #213	; 0xd5
 8002560:	d145      	bne.n	80025ee <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <BSP_GYRO_Init+0xc8>)
 8002564:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <BSP_GYRO_Init+0xc4>)
 8002566:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002568:	2308      	movs	r3, #8
 800256a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800256c:	2300      	movs	r3, #0
 800256e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002570:	2307      	movs	r3, #7
 8002572:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002574:	2330      	movs	r3, #48	; 0x30
 8002576:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002578:	2300      	movs	r3, #0
 800257a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800257c:	2300      	movs	r3, #0
 800257e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002580:	2310      	movs	r3, #16
 8002582:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002584:	793a      	ldrb	r2, [r7, #4]
 8002586:	797b      	ldrb	r3, [r7, #5]
 8002588:	4313      	orrs	r3, r2
 800258a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800258c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800258e:	4313      	orrs	r3, r2
 8002590:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002592:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002594:	4313      	orrs	r3, r2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800259a:	7a3a      	ldrb	r2, [r7, #8]
 800259c:	7a7b      	ldrb	r3, [r7, #9]
 800259e:	4313      	orrs	r3, r2
 80025a0:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80025a2:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	89bb      	ldrh	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <BSP_GYRO_Init+0xc8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	89ba      	ldrh	r2, [r7, #12]
 80025bc:	4610      	mov	r0, r2
 80025be:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80025c0:	2300      	movs	r3, #0
 80025c2:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80025c8:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80025ca:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <BSP_GYRO_Init+0xc8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	89ba      	ldrh	r2, [r7, #12]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	4610      	mov	r0, r2
 80025de:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <BSP_GYRO_Init+0xc8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	2010      	movs	r0, #16
 80025e8:	4798      	blx	r3

    ret = GYRO_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	2000006c 	.word	0x2000006c
 80025fc:	2000076c 	.word	0x2000076c

08002600 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <BSP_LCD_Init+0xc0>)
 8002608:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <BSP_LCD_Init+0xbc>)
 800260c:	2209      	movs	r2, #9
 800260e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002612:	2201      	movs	r2, #1
 8002614:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002618:	221d      	movs	r2, #29
 800261a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <BSP_LCD_Init+0xbc>)
 800261e:	2203      	movs	r2, #3
 8002620:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002624:	f240 120d 	movw	r2, #269	; 0x10d
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <BSP_LCD_Init+0xbc>)
 800262c:	f240 1243 	movw	r2, #323	; 0x143
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002634:	f240 1217 	movw	r2, #279	; 0x117
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <BSP_LCD_Init+0xbc>)
 800263c:	f240 1247 	movw	r2, #327	; 0x147
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <BSP_LCD_Init+0xbc>)
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <BSP_LCD_Init+0xc4>)
 800265c:	2208      	movs	r2, #8
 800265e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <BSP_LCD_Init+0xc4>)
 8002662:	22c0      	movs	r2, #192	; 0xc0
 8002664:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <BSP_LCD_Init+0xc4>)
 8002668:	2204      	movs	r2, #4
 800266a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <BSP_LCD_Init+0xc4>)
 800266e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002674:	4813      	ldr	r0, [pc, #76]	; (80026c4 <BSP_LCD_Init+0xc4>)
 8002676:	f004 f91f 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <BSP_LCD_Init+0xbc>)
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002688:	2200      	movs	r2, #0
 800268a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <BSP_LCD_Init+0xbc>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002692:	f000 fb99 	bl	8002dc8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002696:	4809      	ldr	r0, [pc, #36]	; (80026bc <BSP_LCD_Init+0xbc>)
 8002698:	f001 ff02 	bl	80044a0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <BSP_LCD_Init+0xc8>)
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <BSP_LCD_Init+0xcc>)
 80026a0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <BSP_LCD_Init+0xc8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80026aa:	f000 fcc1 	bl	8003030 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80026ae:	4808      	ldr	r0, [pc, #32]	; (80026d0 <BSP_LCD_Init+0xd0>)
 80026b0:	f000 f8ce 	bl	8002850 <BSP_LCD_SetFont>

  return LCD_OK;
 80026b4:	2300      	movs	r3, #0
}  
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000770 	.word	0x20000770
 80026c0:	40016800 	.word	0x40016800
 80026c4:	20000858 	.word	0x20000858
 80026c8:	200008a4 	.word	0x200008a4
 80026cc:	20000034 	.word	0x20000034
 80026d0:	200000a4 	.word	0x200000a4

080026d4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <BSP_LCD_GetXSize+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	4798      	blx	r3
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200008a4 	.word	0x200008a4

080026ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <BSP_LCD_GetYSize+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	4798      	blx	r3
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200008a4 	.word	0x200008a4

08002704 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002704:	b580      	push	{r7, lr}
 8002706:	b090      	sub	sp, #64	; 0x40
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002714:	f7ff ffde 	bl	80026d4 <BSP_LCD_GetXSize>
 8002718:	4603      	mov	r3, r0
 800271a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002720:	f7ff ffe4 	bl	80026ec <BSP_LCD_GetYSize>
 8002724:	4603      	mov	r3, r0
 8002726:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002730:	23ff      	movs	r3, #255	; 0xff
 8002732:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800274a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002750:	2307      	movs	r3, #7
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002754:	f7ff ffbe 	bl	80026d4 <BSP_LCD_GetXSize>
 8002758:	4603      	mov	r3, r0
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800275c:	f7ff ffc6 	bl	80026ec <BSP_LCD_GetYSize>
 8002760:	4603      	mov	r3, r0
 8002762:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	4619      	mov	r1, r3
 800276c:	4814      	ldr	r0, [pc, #80]	; (80027c0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800276e:	f001 ff71 	bl	8004654 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	4913      	ldr	r1, [pc, #76]	; (80027c4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3304      	adds	r3, #4
 8002782:	f04f 32ff 	mov.w	r2, #4294967295
 8002786:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002788:	88fa      	ldrh	r2, [r7, #6]
 800278a:	490e      	ldr	r1, [pc, #56]	; (80027c4 <BSP_LCD_LayerDefaultInit+0xc0>)
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3308      	adds	r3, #8
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <BSP_LCD_LayerDefaultInit+0xc4>)
 800279a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	4909      	ldr	r1, [pc, #36]	; (80027c4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80027ae:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80027b2:	f001 ff8d 	bl	80046d0 <HAL_LTDC_EnableDither>
}
 80027b6:	bf00      	nop
 80027b8:	3740      	adds	r7, #64	; 0x40
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000770 	.word	0x20000770
 80027c4:	2000088c 	.word	0x2000088c
 80027c8:	200000a4 	.word	0x200000a4

080027cc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <BSP_LCD_SelectLayer+0x1c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000888 	.word	0x20000888

080027ec <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <BSP_LCD_SetTextColor+0x28>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <BSP_LCD_SetTextColor+0x2c>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	601a      	str	r2, [r3, #0]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	20000888 	.word	0x20000888
 8002818:	2000088c 	.word	0x2000088c

0800281c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <BSP_LCD_SetBackColor+0x2c>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4908      	ldr	r1, [pc, #32]	; (800284c <BSP_LCD_SetBackColor+0x30>)
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3304      	adds	r3, #4
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000888 	.word	0x20000888
 800284c:	2000088c 	.word	0x2000088c

08002850 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <BSP_LCD_SetFont+0x2c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4908      	ldr	r1, [pc, #32]	; (8002880 <BSP_LCD_SetFont+0x30>)
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3308      	adds	r3, #8
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000888 	.word	0x20000888
 8002880:	2000088c 	.word	0x2000088c

08002884 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	b085      	sub	sp, #20
 8002888:	af02      	add	r7, sp, #8
 800288a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <BSP_LCD_Clear+0x48>)
 800288e:	681c      	ldr	r4, [r3, #0]
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <BSP_LCD_Clear+0x48>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <BSP_LCD_Clear+0x4c>)
 8002896:	2134      	movs	r1, #52	; 0x34
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461e      	mov	r6, r3
 80028a4:	f7ff ff16 	bl	80026d4 <BSP_LCD_GetXSize>
 80028a8:	4605      	mov	r5, r0
 80028aa:	f7ff ff1f 	bl	80026ec <BSP_LCD_GetYSize>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	2300      	movs	r3, #0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	462a      	mov	r2, r5
 80028bc:	4631      	mov	r1, r6
 80028be:	4620      	mov	r0, r4
 80028c0:	f000 fb7e 	bl	8002fc0 <FillBuffer>
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028cc:	20000888 	.word	0x20000888
 80028d0:	20000770 	.word	0x20000770

080028d4 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b08b      	sub	sp, #44	; 0x2c
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	80fb      	strh	r3, [r7, #6]
 80028e6:	4603      	mov	r3, r0
 80028e8:	80bb      	strh	r3, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]
 80028ee:	4613      	mov	r3, r2
 80028f0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80028f2:	2300      	movs	r3, #0
 80028f4:	823b      	strh	r3, [r7, #16]
 80028f6:	2300      	movs	r3, #0
 80028f8:	81fb      	strh	r3, [r7, #14]
 80028fa:	2300      	movs	r3, #0
 80028fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80028fe:	2300      	movs	r3, #0
 8002900:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002902:	2300      	movs	r3, #0
 8002904:	847b      	strh	r3, [r7, #34]	; 0x22
 8002906:	2300      	movs	r3, #0
 8002908:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800290a:	2300      	movs	r3, #0
 800290c:	83fb      	strh	r3, [r7, #30]
 800290e:	2300      	movs	r3, #0
 8002910:	83bb      	strh	r3, [r7, #28]
 8002912:	2300      	movs	r3, #0
 8002914:	837b      	strh	r3, [r7, #26]
 8002916:	2300      	movs	r3, #0
 8002918:	833b      	strh	r3, [r7, #24]
 800291a:	2300      	movs	r3, #0
 800291c:	82fb      	strh	r3, [r7, #22]
 800291e:	2300      	movs	r3, #0
 8002920:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	bfb8      	it	lt
 8002930:	425b      	neglt	r3, r3
 8002932:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002934:	883a      	ldrh	r2, [r7, #0]
 8002936:	88bb      	ldrh	r3, [r7, #4]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	bfb8      	it	lt
 800293e:	425b      	neglt	r3, r3
 8002940:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002946:	88bb      	ldrh	r3, [r7, #4]
 8002948:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	429a      	cmp	r2, r3
 8002950:	d304      	bcc.n	800295c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	843b      	strh	r3, [r7, #32]
 800295a:	e005      	b.n	8002968 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800295c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002960:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002966:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002968:	883a      	ldrh	r2, [r7, #0]
 800296a:	88bb      	ldrh	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d304      	bcc.n	800297a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	83bb      	strh	r3, [r7, #28]
 8002978:	e005      	b.n	8002986 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800297a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002984:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002986:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800298a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800298e:	429a      	cmp	r2, r3
 8002990:	db10      	blt.n	80029b4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002992:	2300      	movs	r3, #0
 8002994:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002996:	2300      	movs	r3, #0
 8002998:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800299a:	8a3b      	ldrh	r3, [r7, #16]
 800299c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800299e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029a2:	0fda      	lsrs	r2, r3, #31
 80029a4:	4413      	add	r3, r2
 80029a6:	105b      	asrs	r3, r3, #1
 80029a8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80029ae:	8a3b      	ldrh	r3, [r7, #16]
 80029b0:	82bb      	strh	r3, [r7, #20]
 80029b2:	e00f      	b.n	80029d4 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80029b4:	2300      	movs	r3, #0
 80029b6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80029b8:	2300      	movs	r3, #0
 80029ba:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80029c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c4:	0fda      	lsrs	r2, r3, #31
 80029c6:	4413      	add	r3, r2
 80029c8:	105b      	asrs	r3, r3, #1
 80029ca:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80029cc:	8a3b      	ldrh	r3, [r7, #16]
 80029ce:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80029d0:	89fb      	ldrh	r3, [r7, #14]
 80029d2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	827b      	strh	r3, [r7, #18]
 80029d8:	e037      	b.n	8002a4a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80029da:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80029dc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <BSP_LCD_DrawLine+0x18c>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4c20      	ldr	r4, [pc, #128]	; (8002a64 <BSP_LCD_DrawLine+0x190>)
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4423      	add	r3, r4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f000 fabf 	bl	8002f74 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80029f6:	8b3a      	ldrh	r2, [r7, #24]
 80029f8:	8afb      	ldrh	r3, [r7, #22]
 80029fa:	4413      	add	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002a00:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	db0e      	blt.n	8002a2a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002a0c:	8b3a      	ldrh	r2, [r7, #24]
 8002a0e:	8b7b      	ldrh	r3, [r7, #26]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002a16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a1a:	4413      	add	r3, r2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002a20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a22:	8bfb      	ldrh	r3, [r7, #30]
 8002a24:	4413      	add	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002a2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a2c:	8c3b      	ldrh	r3, [r7, #32]
 8002a2e:	4413      	add	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002a34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a36:	8bbb      	ldrh	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002a3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	827b      	strh	r3, [r7, #18]
 8002a4a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	ddc1      	ble.n	80029da <BSP_LCD_DrawLine+0x106>
  }
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	372c      	adds	r7, #44	; 0x2c
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	20000888 	.word	0x20000888
 8002a64:	2000088c 	.word	0x2000088c

08002a68 <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{ 
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b08b      	sub	sp, #44	; 0x2c
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	80fb      	strh	r3, [r7, #6]
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80bb      	strh	r3, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	807b      	strh	r3, [r7, #2]
 8002a82:	4613      	mov	r3, r2
 8002a84:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002a86:	2300      	movs	r3, #0
 8002a88:	823b      	strh	r3, [r7, #16]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	81fb      	strh	r3, [r7, #14]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a92:	2300      	movs	r3, #0
 8002a94:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a96:	2300      	movs	r3, #0
 8002a98:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	83fb      	strh	r3, [r7, #30]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	83bb      	strh	r3, [r7, #28]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	837b      	strh	r3, [r7, #26]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	833b      	strh	r3, [r7, #24]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	82fb      	strh	r3, [r7, #22]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002aba:	88ba      	ldrh	r2, [r7, #4]
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bfb8      	it	lt
 8002ac4:	425b      	neglt	r3, r3
 8002ac6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002ac8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002aca:	883b      	ldrh	r3, [r7, #0]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bfb8      	it	lt
 8002ad2:	425b      	neglt	r3, r3
 8002ad4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002ada:	883b      	ldrh	r3, [r7, #0]
 8002adc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002ade:	88ba      	ldrh	r2, [r7, #4]
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d304      	bcc.n	8002af0 <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	843b      	strh	r3, [r7, #32]
 8002aee:	e005      	b.n	8002afc <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002af4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002afa:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002afc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002afe:	883b      	ldrh	r3, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d304      	bcc.n	8002b0e <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	83bb      	strh	r3, [r7, #28]
 8002b0c:	e005      	b.n	8002b1a <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b12:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b18:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002b1a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	db10      	blt.n	8002b48 <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002b26:	2300      	movs	r3, #0
 8002b28:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002b2e:	8a3b      	ldrh	r3, [r7, #16]
 8002b30:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002b32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b36:	0fda      	lsrs	r2, r3, #31
 8002b38:	4413      	add	r3, r2
 8002b3a:	105b      	asrs	r3, r3, #1
 8002b3c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002b3e:	89fb      	ldrh	r3, [r7, #14]
 8002b40:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002b42:	8a3b      	ldrh	r3, [r7, #16]
 8002b44:	82bb      	strh	r3, [r7, #20]
 8002b46:	e00f      	b.n	8002b68 <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002b48:	2300      	movs	r3, #0
 8002b4a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002b54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b58:	0fda      	lsrs	r2, r3, #31
 8002b5a:	4413      	add	r3, r2
 8002b5c:	105b      	asrs	r3, r3, #1
 8002b5e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002b60:	8a3b      	ldrh	r3, [r7, #16]
 8002b62:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002b64:	89fb      	ldrh	r3, [r7, #14]
 8002b66:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	827b      	strh	r3, [r7, #18]
 8002b6c:	e02f      	b.n	8002bce <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 8002b6e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002b70:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002b72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	f7ff fead 	bl	80028d4 <BSP_LCD_DrawLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002b7a:	8b3a      	ldrh	r2, [r7, #24]
 8002b7c:	8afb      	ldrh	r3, [r7, #22]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002b84:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b88:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	db0e      	blt.n	8002bae <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8002b90:	8b3a      	ldrh	r2, [r7, #24]
 8002b92:	8b7b      	ldrh	r3, [r7, #26]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8002b9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002ba4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ba6:	8bfb      	ldrh	r3, [r7, #30]
 8002ba8:	4413      	add	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8002bae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002bb0:	8c3b      	ldrh	r3, [r7, #32]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002bb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bba:	8bbb      	ldrh	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002bc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	827b      	strh	r3, [r7, #18]
 8002bce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002bd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	ddc9      	ble.n	8002b6e <BSP_LCD_FillTriangle+0x106>
  } 
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	372c      	adds	r7, #44	; 0x2c
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd90      	pop	{r4, r7, pc}

08002be4 <BSP_LCD_FillPolygon>:
  * @brief  Displays a full poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
  
  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	833b      	strh	r3, [r7, #24]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	82fb      	strh	r3, [r7, #22]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c00:	2300      	movs	r3, #0
 8002c02:	82bb      	strh	r3, [r7, #20]
 8002c04:	2300      	movs	r3, #0
 8002c06:	827b      	strh	r3, [r7, #18]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	823b      	strh	r3, [r7, #16]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	81fb      	strh	r3, [r7, #14]
 8002c10:	2300      	movs	r3, #0
 8002c12:	81bb      	strh	r3, [r7, #12]
 8002c14:	2300      	movs	r3, #0
 8002c16:	817b      	strh	r3, [r7, #10]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  imageleft = 0, imageright = 0, imagetop = 0, imagebottom = 0;  
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	843b      	strh	r3, [r7, #32]
 8002c20:	2300      	movs	r3, #0
 8002c22:	83fb      	strh	r3, [r7, #30]
 8002c24:	2300      	movs	r3, #0
 8002c26:	83bb      	strh	r3, [r7, #28]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	837b      	strh	r3, [r7, #26]

  imageleft = imageright = Points->X;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c32:	83fb      	strh	r3, [r7, #30]
 8002c34:	8bfb      	ldrh	r3, [r7, #30]
 8002c36:	843b      	strh	r3, [r7, #32]
  imagetop= imagebottom = Points->Y;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c3e:	837b      	strh	r3, [r7, #26]
 8002c40:	8b7b      	ldrh	r3, [r7, #26]
 8002c42:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8002c44:	2301      	movs	r3, #1
 8002c46:	847b      	strh	r3, [r7, #34]	; 0x22
 8002c48:	e02f      	b.n	8002caa <BSP_LCD_FillPolygon+0xc6>
  {
    pixelx = POLY_X(counter);
 8002c4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	81bb      	strh	r3, [r7, #12]
    if(pixelx < imageleft)
 8002c58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c5c:	8c3b      	ldrh	r3, [r7, #32]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	da01      	bge.n	8002c66 <BSP_LCD_FillPolygon+0x82>
    {
      imageleft = pixelx;
 8002c62:	89bb      	ldrh	r3, [r7, #12]
 8002c64:	843b      	strh	r3, [r7, #32]
    }
    if(pixelx > imageright)
 8002c66:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c6a:	8bfb      	ldrh	r3, [r7, #30]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dd01      	ble.n	8002c74 <BSP_LCD_FillPolygon+0x90>
    {
      imageright = pixelx;
 8002c70:	89bb      	ldrh	r3, [r7, #12]
 8002c72:	83fb      	strh	r3, [r7, #30]
    }

    pixely = POLY_Y(counter);
 8002c74:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	885b      	ldrh	r3, [r3, #2]
 8002c80:	817b      	strh	r3, [r7, #10]
    if(pixely < imagetop)
 8002c82:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c86:	8bbb      	ldrh	r3, [r7, #28]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	da01      	bge.n	8002c90 <BSP_LCD_FillPolygon+0xac>
    { 
      imagetop = pixely;
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	83bb      	strh	r3, [r7, #28]
    }
    if(pixely > imagebottom)
 8002c90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c94:	8b7b      	ldrh	r3, [r7, #26]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	dd01      	ble.n	8002c9e <BSP_LCD_FillPolygon+0xba>
    {
      imagebottom = pixely;
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8002c9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	847b      	strh	r3, [r7, #34]	; 0x22
 8002caa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dbca      	blt.n	8002c4a <BSP_LCD_FillPolygon+0x66>
    }
  }  

  if(PointCount < 2)
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d972      	bls.n	8002da0 <BSP_LCD_FillPolygon+0x1bc>
  {
    return;
  }

  xcenter = (imageleft + imageright)/2;
 8002cba:	8c3a      	ldrh	r2, [r7, #32]
 8002cbc:	8bfb      	ldrh	r3, [r7, #30]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	0fda      	lsrs	r2, r3, #31
 8002cc2:	4413      	add	r3, r2
 8002cc4:	105b      	asrs	r3, r3, #1
 8002cc6:	82bb      	strh	r3, [r7, #20]
  ycenter = (imagebottom + imagetop)/2;
 8002cc8:	8b7a      	ldrh	r2, [r7, #26]
 8002cca:	8bbb      	ldrh	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	0fda      	lsrs	r2, r3, #31
 8002cd0:	4413      	add	r3, r2
 8002cd2:	105b      	asrs	r3, r3, #1
 8002cd4:	827b      	strh	r3, [r7, #18]
 
  xfirst = Points->X;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	823b      	strh	r3, [r7, #16]
  yfirst = Points->Y;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	885b      	ldrh	r3, [r3, #2]
 8002ce0:	81fb      	strh	r3, [r7, #14]

  while(--PointCount)
 8002ce2:	e032      	b.n	8002d4a <BSP_LCD_FillPolygon+0x166>
  {
    x = Points->X;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	833b      	strh	r3, [r7, #24]
    y = Points->Y;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	885b      	ldrh	r3, [r3, #2]
 8002cee:	82fb      	strh	r3, [r7, #22]
    Points++;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	607b      	str	r3, [r7, #4]
    x2 = Points->X;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
    y2 = Points->Y;    
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	885b      	ldrh	r3, [r3, #2]
 8002d00:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002d02:	8b38      	ldrh	r0, [r7, #24]
 8002d04:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002d06:	8abc      	ldrh	r4, [r7, #20]
 8002d08:	8afd      	ldrh	r5, [r7, #22]
 8002d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d0c:	8a7a      	ldrh	r2, [r7, #18]
 8002d0e:	9201      	str	r2, [sp, #4]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	462b      	mov	r3, r5
 8002d14:	4622      	mov	r2, r4
 8002d16:	f7ff fea7 	bl	8002a68 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 8002d1a:	8b38      	ldrh	r0, [r7, #24]
 8002d1c:	8ab9      	ldrh	r1, [r7, #20]
 8002d1e:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002d20:	8afd      	ldrh	r5, [r7, #22]
 8002d22:	8a7b      	ldrh	r3, [r7, #18]
 8002d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d26:	9201      	str	r2, [sp, #4]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	f7ff fe9b 	bl	8002a68 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);   
 8002d32:	8ab8      	ldrh	r0, [r7, #20]
 8002d34:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002d36:	8b3c      	ldrh	r4, [r7, #24]
 8002d38:	8a7d      	ldrh	r5, [r7, #18]
 8002d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d3c:	8afa      	ldrh	r2, [r7, #22]
 8002d3e:	9201      	str	r2, [sp, #4]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	462b      	mov	r3, r5
 8002d44:	4622      	mov	r2, r4
 8002d46:	f7ff fe8f 	bl	8002a68 <BSP_LCD_FillTriangle>
  while(--PointCount)
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1c6      	bne.n	8002ce4 <BSP_LCD_FillPolygon+0x100>
  }
  
  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 8002d56:	8a38      	ldrh	r0, [r7, #16]
 8002d58:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002d5a:	8abc      	ldrh	r4, [r7, #20]
 8002d5c:	89fd      	ldrh	r5, [r7, #14]
 8002d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d60:	8a7a      	ldrh	r2, [r7, #18]
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	462b      	mov	r3, r5
 8002d68:	4622      	mov	r2, r4
 8002d6a:	f7ff fe7d 	bl	8002a68 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 8002d6e:	8a38      	ldrh	r0, [r7, #16]
 8002d70:	8ab9      	ldrh	r1, [r7, #20]
 8002d72:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002d74:	89fd      	ldrh	r5, [r7, #14]
 8002d76:	8a7b      	ldrh	r3, [r7, #18]
 8002d78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d7a:	9201      	str	r2, [sp, #4]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	462b      	mov	r3, r5
 8002d80:	4622      	mov	r2, r4
 8002d82:	f7ff fe71 	bl	8002a68 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);   
 8002d86:	8ab8      	ldrh	r0, [r7, #20]
 8002d88:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002d8a:	8a3c      	ldrh	r4, [r7, #16]
 8002d8c:	8a7d      	ldrh	r5, [r7, #18]
 8002d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d90:	89fa      	ldrh	r2, [r7, #14]
 8002d92:	9201      	str	r2, [sp, #4]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	462b      	mov	r3, r5
 8002d98:	4622      	mov	r2, r4
 8002d9a:	f7ff fe65 	bl	8002a68 <BSP_LCD_FillTriangle>
 8002d9e:	e000      	b.n	8002da2 <BSP_LCD_FillPolygon+0x1be>
    return;
 8002da0:	bf00      	nop
}
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}

08002da8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <BSP_LCD_DisplayOn+0x1c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002db6:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <BSP_LCD_DisplayOn+0x1c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4798      	blx	r3
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200008a4 	.word	0x200008a4

08002dc8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	; 0x38
 8002dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a60      	ldr	r2, [pc, #384]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002dd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b5e      	ldr	r3, [pc, #376]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de6:	623b      	str	r3, [r7, #32]
 8002de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	4b5a      	ldr	r3, [pc, #360]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a59      	ldr	r2, [pc, #356]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a4b      	ldr	r2, [pc, #300]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a44      	ldr	r2, [pc, #272]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e64:	f043 0308 	orr.w	r3, r3, #8
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a36      	ldr	r2, [pc, #216]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e80:	f043 0320 	orr.w	r3, r3, #32
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <BSP_LCD_MspInit+0x190>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002eae:	f641 0358 	movw	r3, #6232	; 0x1858
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002ec0:	230e      	movs	r3, #14
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4824      	ldr	r0, [pc, #144]	; (8002f5c <BSP_LCD_MspInit+0x194>)
 8002ecc:	f001 f816 	bl	8003efc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002ed0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	4820      	ldr	r0, [pc, #128]	; (8002f60 <BSP_LCD_MspInit+0x198>)
 8002ede:	f001 f80d 	bl	8003efc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002ee2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eec:	4619      	mov	r1, r3
 8002eee:	481d      	ldr	r0, [pc, #116]	; (8002f64 <BSP_LCD_MspInit+0x19c>)
 8002ef0:	f001 f804 	bl	8003efc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002ef4:	2348      	movs	r3, #72	; 0x48
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	4619      	mov	r1, r3
 8002efe:	481a      	ldr	r0, [pc, #104]	; (8002f68 <BSP_LCD_MspInit+0x1a0>)
 8002f00:	f000 fffc 	bl	8003efc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4816      	ldr	r0, [pc, #88]	; (8002f6c <BSP_LCD_MspInit+0x1a4>)
 8002f12:	f000 fff3 	bl	8003efc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002f16:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	4813      	ldr	r0, [pc, #76]	; (8002f70 <BSP_LCD_MspInit+0x1a8>)
 8002f24:	f000 ffea 	bl	8003efc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002f2c:	2309      	movs	r3, #9
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	4619      	mov	r1, r3
 8002f36:	480a      	ldr	r0, [pc, #40]	; (8002f60 <BSP_LCD_MspInit+0x198>)
 8002f38:	f000 ffe0 	bl	8003efc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002f3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f46:	4619      	mov	r1, r3
 8002f48:	4809      	ldr	r0, [pc, #36]	; (8002f70 <BSP_LCD_MspInit+0x1a8>)
 8002f4a:	f000 ffd7 	bl	8003efc <HAL_GPIO_Init>
}
 8002f4e:	bf00      	nop
 8002f50:	3738      	adds	r7, #56	; 0x38
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	40021400 	.word	0x40021400
 8002f70:	40021800 	.word	0x40021800

08002f74 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	603a      	str	r2, [r7, #0]
 8002f7e:	80fb      	strh	r3, [r7, #6]
 8002f80:	460b      	mov	r3, r1
 8002f82:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <BSP_LCD_DrawPixel+0x44>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <BSP_LCD_DrawPixel+0x48>)
 8002f8a:	2134      	movs	r1, #52	; 0x34
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	681c      	ldr	r4, [r3, #0]
 8002f96:	88bd      	ldrh	r5, [r7, #4]
 8002f98:	f7ff fb9c 	bl	80026d4 <BSP_LCD_GetXSize>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	fb03 f205 	mul.w	r2, r3, r5
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4423      	add	r3, r4
 8002faa:	461a      	mov	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb8:	20000888 	.word	0x20000888
 8002fbc:	20000770 	.word	0x20000770

08002fc0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <FillBuffer+0x68>)
 8002fd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fd4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002fd6:	4b14      	ldr	r3, [pc, #80]	; (8003028 <FillBuffer+0x68>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002fdc:	4a12      	ldr	r2, [pc, #72]	; (8003028 <FillBuffer+0x68>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <FillBuffer+0x68>)
 8002fe4:	4a11      	ldr	r2, [pc, #68]	; (800302c <FillBuffer+0x6c>)
 8002fe6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002fe8:	480f      	ldr	r0, [pc, #60]	; (8003028 <FillBuffer+0x68>)
 8002fea:	f000 fcf1 	bl	80039d0 <HAL_DMA2D_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d115      	bne.n	8003020 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002ff4:	68f9      	ldr	r1, [r7, #12]
 8002ff6:	480c      	ldr	r0, [pc, #48]	; (8003028 <FillBuffer+0x68>)
 8002ff8:	f000 fe52 	bl	8003ca0 <HAL_DMA2D_ConfigLayer>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69f9      	ldr	r1, [r7, #28]
 800300c:	4806      	ldr	r0, [pc, #24]	; (8003028 <FillBuffer+0x68>)
 800300e:	f000 fd32 	bl	8003a76 <HAL_DMA2D_Start>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003018:	210a      	movs	r1, #10
 800301a:	4803      	ldr	r0, [pc, #12]	; (8003028 <FillBuffer+0x68>)
 800301c:	f000 fd56 	bl	8003acc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000818 	.word	0x20000818
 800302c:	4002b000 	.word	0x4002b000

08003030 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <BSP_SDRAM_Init+0xac>)
 8003036:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <BSP_SDRAM_Init+0xb0>)
 8003038:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 800303c:	2202      	movs	r2, #2
 800303e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 8003042:	2207      	movs	r2, #7
 8003044:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 8003048:	2204      	movs	r2, #4
 800304a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 800304e:	2207      	movs	r2, #7
 8003050:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 8003054:	2202      	movs	r2, #2
 8003056:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003058:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 800305a:	2202      	movs	r2, #2
 800305c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 8003060:	2202      	movs	r2, #2
 8003062:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <BSP_SDRAM_Init+0xac>)
 8003066:	2201      	movs	r2, #1
 8003068:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <BSP_SDRAM_Init+0xac>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <BSP_SDRAM_Init+0xac>)
 8003072:	2204      	movs	r2, #4
 8003074:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <BSP_SDRAM_Init+0xac>)
 8003078:	2210      	movs	r2, #16
 800307a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <BSP_SDRAM_Init+0xac>)
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <BSP_SDRAM_Init+0xac>)
 8003084:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003088:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <BSP_SDRAM_Init+0xac>)
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <BSP_SDRAM_Init+0xac>)
 8003092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003096:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <BSP_SDRAM_Init+0xac>)
 800309a:	2200      	movs	r2, #0
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <BSP_SDRAM_Init+0xac>)
 80030a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80030a6:	2100      	movs	r1, #0
 80030a8:	480c      	ldr	r0, [pc, #48]	; (80030dc <BSP_SDRAM_Init+0xac>)
 80030aa:	f000 f87f 	bl	80031ac <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80030ae:	490d      	ldr	r1, [pc, #52]	; (80030e4 <BSP_SDRAM_Init+0xb4>)
 80030b0:	480a      	ldr	r0, [pc, #40]	; (80030dc <BSP_SDRAM_Init+0xac>)
 80030b2:	f003 fdc1 	bl	8006c38 <HAL_SDRAM_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <BSP_SDRAM_Init+0xb8>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e002      	b.n	80030ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <BSP_SDRAM_Init+0xb8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80030ca:	f240 506a 	movw	r0, #1386	; 0x56a
 80030ce:	f000 f80d 	bl	80030ec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <BSP_SDRAM_Init+0xb8>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200008a8 	.word	0x200008a8
 80030e0:	a0000140 	.word	0xa0000140
 80030e4:	200008dc 	.word	0x200008dc
 80030e8:	200000ac 	.word	0x200000ac

080030ec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003100:	2208      	movs	r2, #8
 8003102:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003106:	2201      	movs	r2, #1
 8003108:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003114:	4923      	ldr	r1, [pc, #140]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003116:	4824      	ldr	r0, [pc, #144]	; (80031a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003118:	f003 fdcc 	bl	8006cb4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800311c:	2001      	movs	r0, #1
 800311e:	f000 f993 	bl	8003448 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003124:	2202      	movs	r2, #2
 8003126:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800312a:	2208      	movs	r2, #8
 800312c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003130:	2201      	movs	r2, #1
 8003132:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800313a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313e:	4919      	ldr	r1, [pc, #100]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003140:	4819      	ldr	r0, [pc, #100]	; (80031a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003142:	f003 fdb7 	bl	8006cb4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003148:	2203      	movs	r2, #3
 800314a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800314e:	2208      	movs	r2, #8
 8003150:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003154:	2204      	movs	r2, #4
 8003156:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800315e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003162:	4910      	ldr	r1, [pc, #64]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003164:	4810      	ldr	r0, [pc, #64]	; (80031a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003166:	f003 fda5 	bl	8006cb4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800316a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800316e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003172:	2204      	movs	r2, #4
 8003174:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003178:	2208      	movs	r2, #8
 800317a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800317e:	2201      	movs	r2, #1
 8003180:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003186:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318c:	4905      	ldr	r1, [pc, #20]	; (80031a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800318e:	4806      	ldr	r0, [pc, #24]	; (80031a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003190:	f003 fd90 	bl	8006cb4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4804      	ldr	r0, [pc, #16]	; (80031a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003198:	f003 fdc1 	bl	8006d1e <HAL_SDRAM_ProgramRefreshRate>
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200008f8 	.word	0x200008f8
 80031a8:	200008a8 	.word	0x200008a8

080031ac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b090      	sub	sp, #64	; 0x40
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80ec 	beq.w	8003396 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c2:	4b77      	ldr	r3, [pc, #476]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	4a76      	ldr	r2, [pc, #472]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6393      	str	r3, [r2, #56]	; 0x38
 80031ce:	4b74      	ldr	r3, [pc, #464]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	4b70      	ldr	r3, [pc, #448]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a6f      	ldr	r2, [pc, #444]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 80031e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b6d      	ldr	r3, [pc, #436]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	4b69      	ldr	r3, [pc, #420]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a68      	ldr	r2, [pc, #416]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a61      	ldr	r2, [pc, #388]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b58      	ldr	r3, [pc, #352]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a53      	ldr	r2, [pc, #332]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 800328c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <BSP_SDRAM_MspInit+0x1f4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80032a2:	2302      	movs	r3, #2
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80032aa:	230c      	movs	r3, #12
 80032ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80032ae:	2360      	movs	r3, #96	; 0x60
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80032b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032b6:	4619      	mov	r1, r3
 80032b8:	483a      	ldr	r0, [pc, #232]	; (80033a4 <BSP_SDRAM_MspInit+0x1f8>)
 80032ba:	f000 fe1f 	bl	8003efc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80032be:	2301      	movs	r3, #1
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80032c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c6:	4619      	mov	r1, r3
 80032c8:	4837      	ldr	r0, [pc, #220]	; (80033a8 <BSP_SDRAM_MspInit+0x1fc>)
 80032ca:	f000 fe17 	bl	8003efc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80032ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80032d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d8:	4619      	mov	r1, r3
 80032da:	4834      	ldr	r0, [pc, #208]	; (80033ac <BSP_SDRAM_MspInit+0x200>)
 80032dc:	f000 fe0e 	bl	8003efc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80032e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80032e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ea:	4619      	mov	r1, r3
 80032ec:	4830      	ldr	r0, [pc, #192]	; (80033b0 <BSP_SDRAM_MspInit+0x204>)
 80032ee:	f000 fe05 	bl	8003efc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80032f2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80032f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032fc:	4619      	mov	r1, r3
 80032fe:	482d      	ldr	r0, [pc, #180]	; (80033b4 <BSP_SDRAM_MspInit+0x208>)
 8003300:	f000 fdfc 	bl	8003efc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003304:	f248 1333 	movw	r3, #33075	; 0x8133
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800330a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800330e:	4619      	mov	r1, r3
 8003310:	4829      	ldr	r0, [pc, #164]	; (80033b8 <BSP_SDRAM_MspInit+0x20c>)
 8003312:	f000 fdf3 	bl	8003efc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003328:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 800332c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003330:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003338:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 800333c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003340:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003344:	2200      	movs	r2, #0
 8003346:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 800334a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800334e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003352:	2200      	movs	r2, #0
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003358:	2203      	movs	r2, #3
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800335c:	4b17      	ldr	r3, [pc, #92]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 800335e:	2200      	movs	r2, #0
 8003360:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 800336a:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <BSP_SDRAM_MspInit+0x214>)
 800336c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a12      	ldr	r2, [pc, #72]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
 8003374:	4a11      	ldr	r2, [pc, #68]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800337a:	4810      	ldr	r0, [pc, #64]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 800337c:	f000 fa18 	bl	80037b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003380:	480e      	ldr	r0, [pc, #56]	; (80033bc <BSP_SDRAM_MspInit+0x210>)
 8003382:	f000 f967 	bl	8003654 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	210f      	movs	r1, #15
 800338a:	2038      	movs	r0, #56	; 0x38
 800338c:	f000 f938 	bl	8003600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003390:	2038      	movs	r0, #56	; 0x38
 8003392:	f000 f951 	bl	8003638 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003396:	bf00      	nop
 8003398:	3740      	adds	r7, #64	; 0x40
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40021400 	.word	0x40021400
 80033b8:	40021800 	.word	0x40021800
 80033bc:	20000908 	.word	0x20000908
 80033c0:	40026410 	.word	0x40026410

080033c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_Init+0x40>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <HAL_Init+0x40>)
 80033ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_Init+0x40>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_Init+0x40>)
 80033da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a07      	ldr	r2, [pc, #28]	; (8003404 <HAL_Init+0x40>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ec:	2003      	movs	r0, #3
 80033ee:	f000 f8fc 	bl	80035ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033f2:	200f      	movs	r0, #15
 80033f4:	f7fe f880 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033f8:	f7fd ffec 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00

08003408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_IncTick+0x20>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x24>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4413      	add	r3, r2
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_IncTick+0x24>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	200000b4 	.word	0x200000b4
 800342c:	20000968 	.word	0x20000968

08003430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return uwTick;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_GetTick+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000968 	.word	0x20000968

08003448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff ffee 	bl	8003430 <HAL_GetTick>
 8003454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d005      	beq.n	800346e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_Delay+0x44>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800346e:	bf00      	nop
 8003470:	f7ff ffde 	bl	8003430 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	d8f7      	bhi.n	8003470 <HAL_Delay+0x28>
  {
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200000b4 	.word	0x200000b4

08003490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ac:	4013      	ands	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c2:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60d3      	str	r3, [r2, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <__NVIC_GetPriorityGrouping+0x18>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 0307 	and.w	r3, r3, #7
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db0b      	blt.n	800351e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <__NVIC_EnableIRQ+0x38>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2001      	movs	r0, #1
 8003516:	fa00 f202 	lsl.w	r2, r0, r2
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ff4c 	bl	8003490 <__NVIC_SetPriorityGrouping>
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003612:	f7ff ff61 	bl	80034d8 <__NVIC_GetPriorityGrouping>
 8003616:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	6978      	ldr	r0, [r7, #20]
 800361e:	f7ff ffb1 	bl	8003584 <NVIC_EncodePriority>
 8003622:	4602      	mov	r2, r0
 8003624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ff80 	bl	8003530 <__NVIC_SetPriority>
}
 8003630:	bf00      	nop
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff54 	bl	80034f4 <__NVIC_EnableIRQ>
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003660:	f7ff fee6 	bl	8003430 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e099      	b.n	80037a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003690:	e00f      	b.n	80036b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003692:	f7ff fecd 	bl	8003430 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b05      	cmp	r3, #5
 800369e:	d908      	bls.n	80036b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2203      	movs	r2, #3
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e078      	b.n	80037a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e8      	bne.n	8003692 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <HAL_DMA_Init+0x158>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2b04      	cmp	r3, #4
 800370a:	d107      	bne.n	800371c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	4313      	orrs	r3, r2
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0307 	bic.w	r3, r3, #7
 8003732:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b04      	cmp	r3, #4
 8003744:	d117      	bne.n	8003776 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8bd 	bl	80038d8 <DMA_CheckFifoParam>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003772:	2301      	movs	r3, #1
 8003774:	e016      	b.n	80037a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f874 	bl	800386c <DMA_CalcBaseAndBitshift>
 8003784:	4603      	mov	r3, r0
 8003786:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	223f      	movs	r2, #63	; 0x3f
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	f010803f 	.word	0xf010803f

080037b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e050      	b.n	8003864 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d101      	bne.n	80037d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	e048      	b.n	8003864 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2221      	movs	r2, #33	; 0x21
 8003810:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f82a 	bl	800386c <DMA_CalcBaseAndBitshift>
 8003818:	4603      	mov	r3, r0
 800381a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	223f      	movs	r2, #63	; 0x3f
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3b10      	subs	r3, #16
 800387c:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <DMA_CalcBaseAndBitshift+0x64>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d909      	bls.n	80038ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58
 80038ac:	e007      	b.n	80038be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	aaaaaaab 	.word	0xaaaaaaab
 80038d4:	080121dc 	.word	0x080121dc

080038d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11f      	bne.n	8003932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d856      	bhi.n	80039a6 <DMA_CheckFifoParam+0xce>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <DMA_CheckFifoParam+0x28>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003911 	.word	0x08003911
 8003904:	08003923 	.word	0x08003923
 8003908:	08003911 	.word	0x08003911
 800390c:	080039a7 	.word	0x080039a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d046      	beq.n	80039aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003920:	e043      	b.n	80039aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800392a:	d140      	bne.n	80039ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e03d      	b.n	80039ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393a:	d121      	bne.n	8003980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d837      	bhi.n	80039b2 <DMA_CheckFifoParam+0xda>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <DMA_CheckFifoParam+0x70>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	08003959 	.word	0x08003959
 800394c:	0800395f 	.word	0x0800395f
 8003950:	08003959 	.word	0x08003959
 8003954:	08003971 	.word	0x08003971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
      break;
 800395c:	e030      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d025      	beq.n	80039b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396e:	e022      	b.n	80039b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003978:	d11f      	bne.n	80039ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800397e:	e01c      	b.n	80039ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d903      	bls.n	800398e <DMA_CheckFifoParam+0xb6>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800398c:	e018      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
      break;
 8003992:	e015      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      break;
 80039a4:	e00b      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;
 80039a6:	bf00      	nop
 80039a8:	e00a      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e008      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ae:	bf00      	nop
 80039b0:	e006      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
 80039b4:	e004      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039be:	bf00      	nop
    }
  } 
  
  return status; 
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e03b      	b.n	8003a5a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f833 	bl	8003a62 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	f023 0107 	bic.w	r1, r3, #7
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68d1      	ldr	r1, [r2, #12]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	430b      	orrs	r3, r1
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af02      	add	r7, sp, #8
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_DMA2D_Start+0x1c>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e018      	b.n	8003ac4 <HAL_DMA2D_Start+0x4e>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f989 	bl	8003dc4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d056      	beq.n	8003b96 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7ff fca2 	bl	8003430 <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003aee:	e04b      	b.n	8003b88 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d023      	beq.n	8003b4a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	f043 0202 	orr.w	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2221      	movs	r2, #33	; 0x21
 8003b34:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0a5      	b.n	8003c96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d01a      	beq.n	8003b88 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7ff fc6d 	bl	8003430 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <HAL_DMA2D_PollForTransfer+0x9c>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10f      	bne.n	8003b88 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2203      	movs	r2, #3
 8003b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e086      	b.n	8003c96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ac      	beq.n	8003af0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d061      	beq.n	8003c7c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7ff fc3a 	bl	8003430 <HAL_GetTick>
 8003bbc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003bbe:	e056      	b.n	8003c6e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02e      	beq.n	8003c30 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	f043 0202 	orr.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2229      	movs	r2, #41	; 0x29
 8003c1a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e032      	b.n	8003c96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d01a      	beq.n	8003c6e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c38:	f7ff fbfa 	bl	8003430 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d302      	bcc.n	8003c4e <HAL_DMA2D_PollForTransfer+0x182>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e013      	b.n	8003c96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0a1      	beq.n	8003bc0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2212      	movs	r2, #18
 8003c82:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_DMA2D_ConfigLayer+0x20>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e079      	b.n	8003db4 <HAL_DMA2D_ConfigLayer+0x114>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	3318      	adds	r3, #24
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003cec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b0a      	cmp	r3, #10
 8003cf4:	d003      	beq.n	8003cfe <HAL_DMA2D_ConfigLayer+0x5e>
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b09      	cmp	r3, #9
 8003cfc:	d107      	bne.n	8003d0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e005      	b.n	8003d1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d120      	bne.n	8003d62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	ea02 0103 	and.w	r1, r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b0a      	cmp	r3, #10
 8003d48:	d003      	beq.n	8003d52 <HAL_DMA2D_ConfigLayer+0xb2>
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b09      	cmp	r3, #9
 8003d50:	d127      	bne.n	8003da2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d60:	e01f      	b.n	8003da2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	ea02 0103 	and.w	r1, r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b0a      	cmp	r3, #10
 8003d8a:	d003      	beq.n	8003d94 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b09      	cmp	r3, #9
 8003d92:	d106      	bne.n	8003da2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003da0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	ff03000f 	.word	0xff03000f

08003dc4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b08b      	sub	sp, #44	; 0x2c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	041a      	lsls	r2, r3, #16
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	431a      	orrs	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dfc:	d174      	bne.n	8003ee8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e04:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e14:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	e053      	b.n	8003ede <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d106      	bne.n	8003e4c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e048      	b.n	8003ede <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d111      	bne.n	8003e78 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	0cdb      	lsrs	r3, r3, #19
 8003e58:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	0a9b      	lsrs	r3, r3, #10
 8003e5e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	08db      	lsrs	r3, r3, #3
 8003e64:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	02db      	lsls	r3, r3, #11
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	e032      	b.n	8003ede <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d117      	bne.n	8003eb0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	0fdb      	lsrs	r3, r3, #31
 8003e84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	0cdb      	lsrs	r3, r3, #19
 8003e8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	0adb      	lsrs	r3, r3, #11
 8003e90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	08db      	lsrs	r3, r3, #3
 8003e96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	03db      	lsls	r3, r3, #15
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	e016      	b.n	8003ede <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	0f1b      	lsrs	r3, r3, #28
 8003eb4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	0d1b      	lsrs	r3, r3, #20
 8003eba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	0b1b      	lsrs	r3, r3, #12
 8003ec0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	011a      	lsls	r2, r3, #4
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	031b      	lsls	r3, r3, #12
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003ee6:	e003      	b.n	8003ef0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	60da      	str	r2, [r3, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	372c      	adds	r7, #44	; 0x2c
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	; 0x24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e177      	b.n	8004208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	f040 8166 	bne.w	8004202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d005      	beq.n	8003f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d130      	bne.n	8003fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 0201 	and.w	r2, r3, #1
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d017      	beq.n	8003fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d123      	bne.n	8004040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	08da      	lsrs	r2, r3, #3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3208      	adds	r2, #8
 8004000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	220f      	movs	r2, #15
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	08da      	lsrs	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3208      	adds	r2, #8
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	2203      	movs	r2, #3
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0203 	and.w	r2, r3, #3
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80c0 	beq.w	8004202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	4b66      	ldr	r3, [pc, #408]	; (8004220 <HAL_GPIO_Init+0x324>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	4a65      	ldr	r2, [pc, #404]	; (8004220 <HAL_GPIO_Init+0x324>)
 800408c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004090:	6453      	str	r3, [r2, #68]	; 0x44
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_GPIO_Init+0x324>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800409e:	4a61      	ldr	r2, [pc, #388]	; (8004224 <HAL_GPIO_Init+0x328>)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	3302      	adds	r3, #2
 80040a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	220f      	movs	r2, #15
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_GPIO_Init+0x32c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d037      	beq.n	800413a <HAL_GPIO_Init+0x23e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a57      	ldr	r2, [pc, #348]	; (800422c <HAL_GPIO_Init+0x330>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d031      	beq.n	8004136 <HAL_GPIO_Init+0x23a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a56      	ldr	r2, [pc, #344]	; (8004230 <HAL_GPIO_Init+0x334>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d02b      	beq.n	8004132 <HAL_GPIO_Init+0x236>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a55      	ldr	r2, [pc, #340]	; (8004234 <HAL_GPIO_Init+0x338>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d025      	beq.n	800412e <HAL_GPIO_Init+0x232>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a54      	ldr	r2, [pc, #336]	; (8004238 <HAL_GPIO_Init+0x33c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01f      	beq.n	800412a <HAL_GPIO_Init+0x22e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a53      	ldr	r2, [pc, #332]	; (800423c <HAL_GPIO_Init+0x340>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d019      	beq.n	8004126 <HAL_GPIO_Init+0x22a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a52      	ldr	r2, [pc, #328]	; (8004240 <HAL_GPIO_Init+0x344>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_GPIO_Init+0x226>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a51      	ldr	r2, [pc, #324]	; (8004244 <HAL_GPIO_Init+0x348>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00d      	beq.n	800411e <HAL_GPIO_Init+0x222>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a50      	ldr	r2, [pc, #320]	; (8004248 <HAL_GPIO_Init+0x34c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <HAL_GPIO_Init+0x21e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a4f      	ldr	r2, [pc, #316]	; (800424c <HAL_GPIO_Init+0x350>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_GPIO_Init+0x21a>
 8004112:	2309      	movs	r3, #9
 8004114:	e012      	b.n	800413c <HAL_GPIO_Init+0x240>
 8004116:	230a      	movs	r3, #10
 8004118:	e010      	b.n	800413c <HAL_GPIO_Init+0x240>
 800411a:	2308      	movs	r3, #8
 800411c:	e00e      	b.n	800413c <HAL_GPIO_Init+0x240>
 800411e:	2307      	movs	r3, #7
 8004120:	e00c      	b.n	800413c <HAL_GPIO_Init+0x240>
 8004122:	2306      	movs	r3, #6
 8004124:	e00a      	b.n	800413c <HAL_GPIO_Init+0x240>
 8004126:	2305      	movs	r3, #5
 8004128:	e008      	b.n	800413c <HAL_GPIO_Init+0x240>
 800412a:	2304      	movs	r3, #4
 800412c:	e006      	b.n	800413c <HAL_GPIO_Init+0x240>
 800412e:	2303      	movs	r3, #3
 8004130:	e004      	b.n	800413c <HAL_GPIO_Init+0x240>
 8004132:	2302      	movs	r3, #2
 8004134:	e002      	b.n	800413c <HAL_GPIO_Init+0x240>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_GPIO_Init+0x240>
 800413a:	2300      	movs	r3, #0
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	f002 0203 	and.w	r2, r2, #3
 8004142:	0092      	lsls	r2, r2, #2
 8004144:	4093      	lsls	r3, r2
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800414c:	4935      	ldr	r1, [pc, #212]	; (8004224 <HAL_GPIO_Init+0x328>)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	3302      	adds	r3, #2
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415a:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <HAL_GPIO_Init+0x354>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	43db      	mvns	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800417e:	4a34      	ldr	r2, [pc, #208]	; (8004250 <HAL_GPIO_Init+0x354>)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004184:	4b32      	ldr	r3, [pc, #200]	; (8004250 <HAL_GPIO_Init+0x354>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <HAL_GPIO_Init+0x354>)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ae:	4b28      	ldr	r3, [pc, #160]	; (8004250 <HAL_GPIO_Init+0x354>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041d2:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <HAL_GPIO_Init+0x354>)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_GPIO_Init+0x354>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041fc:	4a14      	ldr	r2, [pc, #80]	; (8004250 <HAL_GPIO_Init+0x354>)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3301      	adds	r3, #1
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b0f      	cmp	r3, #15
 800420c:	f67f ae84 	bls.w	8003f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	40013800 	.word	0x40013800
 8004228:	40020000 	.word	0x40020000
 800422c:	40020400 	.word	0x40020400
 8004230:	40020800 	.word	0x40020800
 8004234:	40020c00 	.word	0x40020c00
 8004238:	40021000 	.word	0x40021000
 800423c:	40021400 	.word	0x40021400
 8004240:	40021800 	.word	0x40021800
 8004244:	40021c00 	.word	0x40021c00
 8004248:	40022000 	.word	0x40022000
 800424c:	40022400 	.word	0x40022400
 8004250:	40013c00 	.word	0x40013c00

08004254 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	e0d9      	b.n	8004424 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004270:	2201      	movs	r2, #1
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	f040 80c9 	bne.w	800441e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800428c:	4a6b      	ldr	r2, [pc, #428]	; (800443c <HAL_GPIO_DeInit+0x1e8>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3302      	adds	r3, #2
 8004294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004298:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	220f      	movs	r2, #15
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a63      	ldr	r2, [pc, #396]	; (8004440 <HAL_GPIO_DeInit+0x1ec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d037      	beq.n	8004326 <HAL_GPIO_DeInit+0xd2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a62      	ldr	r2, [pc, #392]	; (8004444 <HAL_GPIO_DeInit+0x1f0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d031      	beq.n	8004322 <HAL_GPIO_DeInit+0xce>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a61      	ldr	r2, [pc, #388]	; (8004448 <HAL_GPIO_DeInit+0x1f4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d02b      	beq.n	800431e <HAL_GPIO_DeInit+0xca>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a60      	ldr	r2, [pc, #384]	; (800444c <HAL_GPIO_DeInit+0x1f8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d025      	beq.n	800431a <HAL_GPIO_DeInit+0xc6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a5f      	ldr	r2, [pc, #380]	; (8004450 <HAL_GPIO_DeInit+0x1fc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01f      	beq.n	8004316 <HAL_GPIO_DeInit+0xc2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a5e      	ldr	r2, [pc, #376]	; (8004454 <HAL_GPIO_DeInit+0x200>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d019      	beq.n	8004312 <HAL_GPIO_DeInit+0xbe>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a5d      	ldr	r2, [pc, #372]	; (8004458 <HAL_GPIO_DeInit+0x204>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_DeInit+0xba>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a5c      	ldr	r2, [pc, #368]	; (800445c <HAL_GPIO_DeInit+0x208>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00d      	beq.n	800430a <HAL_GPIO_DeInit+0xb6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a5b      	ldr	r2, [pc, #364]	; (8004460 <HAL_GPIO_DeInit+0x20c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <HAL_GPIO_DeInit+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a5a      	ldr	r2, [pc, #360]	; (8004464 <HAL_GPIO_DeInit+0x210>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_GPIO_DeInit+0xae>
 80042fe:	2309      	movs	r3, #9
 8004300:	e012      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 8004302:	230a      	movs	r3, #10
 8004304:	e010      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 8004306:	2308      	movs	r3, #8
 8004308:	e00e      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 800430a:	2307      	movs	r3, #7
 800430c:	e00c      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 800430e:	2306      	movs	r3, #6
 8004310:	e00a      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 8004312:	2305      	movs	r3, #5
 8004314:	e008      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 8004316:	2304      	movs	r3, #4
 8004318:	e006      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 800431a:	2303      	movs	r3, #3
 800431c:	e004      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 800431e:	2302      	movs	r3, #2
 8004320:	e002      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_GPIO_DeInit+0xd4>
 8004326:	2300      	movs	r3, #0
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	f002 0203 	and.w	r2, r2, #3
 800432e:	0092      	lsls	r2, r2, #2
 8004330:	4093      	lsls	r3, r2
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d132      	bne.n	800439e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004338:	4b4b      	ldr	r3, [pc, #300]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	43db      	mvns	r3, r3
 8004340:	4949      	ldr	r1, [pc, #292]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 8004342:	4013      	ands	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004346:	4b48      	ldr	r3, [pc, #288]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	43db      	mvns	r3, r3
 800434e:	4946      	ldr	r1, [pc, #280]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 8004350:	4013      	ands	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004354:	4b44      	ldr	r3, [pc, #272]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	43db      	mvns	r3, r3
 800435c:	4942      	ldr	r1, [pc, #264]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 800435e:	4013      	ands	r3, r2
 8004360:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004362:	4b41      	ldr	r3, [pc, #260]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	43db      	mvns	r3, r3
 800436a:	493f      	ldr	r1, [pc, #252]	; (8004468 <HAL_GPIO_DeInit+0x214>)
 800436c:	4013      	ands	r3, r2
 800436e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	220f      	movs	r2, #15
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004380:	4a2e      	ldr	r2, [pc, #184]	; (800443c <HAL_GPIO_DeInit+0x1e8>)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	3302      	adds	r3, #2
 8004388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	43da      	mvns	r2, r3
 8004390:	482a      	ldr	r0, [pc, #168]	; (800443c <HAL_GPIO_DeInit+0x1e8>)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	400a      	ands	r2, r1
 8004398:	3302      	adds	r3, #2
 800439a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	2103      	movs	r1, #3
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	220f      	movs	r2, #15
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	08d2      	lsrs	r2, r2, #3
 80043d4:	4019      	ands	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3208      	adds	r2, #8
 80043da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	2103      	movs	r1, #3
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	401a      	ands	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	2101      	movs	r1, #1
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	2103      	movs	r1, #3
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	401a      	ands	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b0f      	cmp	r3, #15
 8004428:	f67f af22 	bls.w	8004270 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40013800 	.word	0x40013800
 8004440:	40020000 	.word	0x40020000
 8004444:	40020400 	.word	0x40020400
 8004448:	40020800 	.word	0x40020800
 800444c:	40020c00 	.word	0x40020c00
 8004450:	40021000 	.word	0x40021000
 8004454:	40021400 	.word	0x40021400
 8004458:	40021800 	.word	0x40021800
 800445c:	40021c00 	.word	0x40021c00
 8004460:	40022000 	.word	0x40022000
 8004464:	40022400 	.word	0x40022400
 8004468:	40013c00 	.word	0x40013c00

0800446c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
 8004478:	4613      	mov	r3, r2
 800447a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800447c:	787b      	ldrb	r3, [r7, #1]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004488:	e003      	b.n	8004492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800448a:	887b      	ldrh	r3, [r7, #2]
 800448c:	041a      	lsls	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	619a      	str	r2, [r3, #24]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0bf      	b.n	8004632 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8ba 	bl	8004640 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80044e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6999      	ldr	r1, [r3, #24]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6899      	ldr	r1, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_LTDC_Init+0x19c>)
 8004514:	400b      	ands	r3, r1
 8004516:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68d9      	ldr	r1, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b3e      	ldr	r3, [pc, #248]	; (800463c <HAL_LTDC_Init+0x19c>)
 8004542:	400b      	ands	r3, r1
 8004544:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68d9      	ldr	r1, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6919      	ldr	r1, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b33      	ldr	r3, [pc, #204]	; (800463c <HAL_LTDC_Init+0x19c>)
 8004570:	400b      	ands	r3, r1
 8004572:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6959      	ldr	r1, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_LTDC_Init+0x19c>)
 800459e:	400b      	ands	r3, r1
 80045a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6959      	ldr	r1, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0206 	orr.w	r2, r2, #6
 800460e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	f000f800 	.word	0xf000f800

08004640 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004654:	b5b0      	push	{r4, r5, r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_LTDC_ConfigLayer+0x1a>
 800466a:	2302      	movs	r3, #2
 800466c:	e02c      	b.n	80046c8 <HAL_LTDC_ConfigLayer+0x74>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2134      	movs	r1, #52	; 0x34
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4614      	mov	r4, r2
 8004692:	461d      	mov	r5, r3
 8004694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800469a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800469c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800469e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f83b 	bl	8004724 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bdb0      	pop	{r4, r5, r7, pc}

080046d0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_LTDC_EnableDither+0x16>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e016      	b.n	8004714 <HAL_LTDC_EnableDither+0x44>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80046f6:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <HAL_LTDC_EnableDither+0x50>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <HAL_LTDC_EnableDither+0x50>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40016800 	.word	0x40016800

08004724 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	; 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	4413      	add	r3, r2
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	01db      	lsls	r3, r3, #7
 8004750:	4413      	add	r3, r2
 8004752:	3384      	adds	r3, #132	; 0x84
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	4611      	mov	r1, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	01d2      	lsls	r2, r2, #7
 8004760:	440a      	add	r2, r1
 8004762:	3284      	adds	r2, #132	; 0x84
 8004764:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004768:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800477a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800477c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4619      	mov	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	01db      	lsls	r3, r3, #7
 8004788:	440b      	add	r3, r1
 800478a:	3384      	adds	r3, #132	; 0x84
 800478c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004792:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047a2:	4413      	add	r3, r2
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	01db      	lsls	r3, r3, #7
 80047b2:	4413      	add	r3, r2
 80047b4:	3384      	adds	r3, #132	; 0x84
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	4611      	mov	r1, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	01d2      	lsls	r2, r2, #7
 80047c2:	440a      	add	r2, r1
 80047c4:	3284      	adds	r2, #132	; 0x84
 80047c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80047ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047da:	4413      	add	r3, r2
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	01db      	lsls	r3, r3, #7
 80047e8:	440b      	add	r3, r1
 80047ea:	3384      	adds	r3, #132	; 0x84
 80047ec:	4619      	mov	r1, r3
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	01db      	lsls	r3, r3, #7
 80047fe:	4413      	add	r3, r2
 8004800:	3384      	adds	r3, #132	; 0x84
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	4611      	mov	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	01d2      	lsls	r2, r2, #7
 800480e:	440a      	add	r2, r1
 8004810:	3284      	adds	r2, #132	; 0x84
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	01db      	lsls	r3, r3, #7
 8004822:	4413      	add	r3, r2
 8004824:	3384      	adds	r3, #132	; 0x84
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	01db      	lsls	r3, r3, #7
 8004854:	4413      	add	r3, r2
 8004856:	3384      	adds	r3, #132	; 0x84
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	4413      	add	r3, r2
 8004866:	3384      	adds	r3, #132	; 0x84
 8004868:	461a      	mov	r2, r3
 800486a:	2300      	movs	r3, #0
 800486c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004874:	461a      	mov	r2, r3
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	431a      	orrs	r2, r3
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	431a      	orrs	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	01db      	lsls	r3, r3, #7
 8004888:	440b      	add	r3, r1
 800488a:	3384      	adds	r3, #132	; 0x84
 800488c:	4619      	mov	r1, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	01db      	lsls	r3, r3, #7
 800489e:	4413      	add	r3, r2
 80048a0:	3384      	adds	r3, #132	; 0x84
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	4611      	mov	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	01d2      	lsls	r2, r2, #7
 80048ae:	440a      	add	r2, r1
 80048b0:	3284      	adds	r2, #132	; 0x84
 80048b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	01db      	lsls	r3, r3, #7
 80048c2:	4413      	add	r3, r2
 80048c4:	3384      	adds	r3, #132	; 0x84
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	01db      	lsls	r3, r3, #7
 80048d8:	4413      	add	r3, r2
 80048da:	3384      	adds	r3, #132	; 0x84
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	4611      	mov	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	01d2      	lsls	r2, r2, #7
 80048e8:	440a      	add	r2, r1
 80048ea:	3284      	adds	r2, #132	; 0x84
 80048ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048f0:	f023 0307 	bic.w	r3, r3, #7
 80048f4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	6809      	ldr	r1, [r1, #0]
 8004902:	4608      	mov	r0, r1
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	01c9      	lsls	r1, r1, #7
 8004908:	4401      	add	r1, r0
 800490a:	3184      	adds	r1, #132	; 0x84
 800490c:	4313      	orrs	r3, r2
 800490e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	01db      	lsls	r3, r3, #7
 800491a:	4413      	add	r3, r2
 800491c:	3384      	adds	r3, #132	; 0x84
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	01db      	lsls	r3, r3, #7
 800492a:	4413      	add	r3, r2
 800492c:	3384      	adds	r3, #132	; 0x84
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	01db      	lsls	r3, r3, #7
 800493e:	4413      	add	r3, r2
 8004940:	3384      	adds	r3, #132	; 0x84
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004952:	2304      	movs	r3, #4
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e01b      	b.n	8004990 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d102      	bne.n	8004966 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004960:	2303      	movs	r3, #3
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	e014      	b.n	8004990 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d00b      	beq.n	8004986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004972:	2b02      	cmp	r3, #2
 8004974:	d007      	beq.n	8004986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800497a:	2b03      	cmp	r3, #3
 800497c:	d003      	beq.n	8004986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004982:	2b07      	cmp	r3, #7
 8004984:	d102      	bne.n	800498c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004986:	2302      	movs	r3, #2
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e001      	b.n	8004990 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800498c:	2301      	movs	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	01db      	lsls	r3, r3, #7
 800499a:	4413      	add	r3, r2
 800499c:	3384      	adds	r3, #132	; 0x84
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	4611      	mov	r1, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	01d2      	lsls	r2, r2, #7
 80049aa:	440a      	add	r2, r1
 80049ac:	3284      	adds	r2, #132	; 0x84
 80049ae:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	1acb      	subs	r3, r1, r3
 80049ca:	69f9      	ldr	r1, [r7, #28]
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	6809      	ldr	r1, [r1, #0]
 80049d6:	4608      	mov	r0, r1
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	01c9      	lsls	r1, r1, #7
 80049dc:	4401      	add	r1, r0
 80049de:	3184      	adds	r1, #132	; 0x84
 80049e0:	4313      	orrs	r3, r2
 80049e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	01db      	lsls	r3, r3, #7
 80049ee:	4413      	add	r3, r2
 80049f0:	3384      	adds	r3, #132	; 0x84
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	4611      	mov	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	01d2      	lsls	r2, r2, #7
 80049fe:	440a      	add	r2, r1
 8004a00:	3284      	adds	r2, #132	; 0x84
 8004a02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	01db      	lsls	r3, r3, #7
 8004a16:	4413      	add	r3, r2
 8004a18:	3384      	adds	r3, #132	; 0x84
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	01db      	lsls	r3, r3, #7
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3384      	adds	r3, #132	; 0x84
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	4611      	mov	r1, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	01d2      	lsls	r2, r2, #7
 8004a3c:	440a      	add	r2, r1
 8004a3e:	3284      	adds	r2, #132	; 0x84
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6013      	str	r3, [r2, #0]
}
 8004a46:	bf00      	nop
 8004a48:	3724      	adds	r7, #36	; 0x24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a54:	b08f      	sub	sp, #60	; 0x3c
 8004a56:	af0a      	add	r7, sp, #40	; 0x28
 8004a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e10f      	b.n	8004c84 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f008 fbb2 	bl	800d1e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2203      	movs	r2, #3
 8004a88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f003 fc1f 	bl	80082e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	687e      	ldr	r6, [r7, #4]
 8004ab0:	466d      	mov	r5, sp
 8004ab2:	f106 0410 	add.w	r4, r6, #16
 8004ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004abe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ac6:	1d33      	adds	r3, r6, #4
 8004ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	f003 faf6 	bl	80080bc <USB_CoreInit>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0d0      	b.n	8004c84 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 fc0d 	bl	8008308 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e04a      	b.n	8004b8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	333d      	adds	r3, #61	; 0x3d
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b08:	7bfa      	ldrb	r2, [r7, #15]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	333c      	adds	r3, #60	; 0x3c
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	b298      	uxth	r0, r3
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3344      	adds	r3, #68	; 0x44
 8004b30:	4602      	mov	r2, r0
 8004b32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	3340      	adds	r3, #64	; 0x40
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3348      	adds	r3, #72	; 0x48
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b5c:	7bfa      	ldrb	r2, [r7, #15]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	334c      	adds	r3, #76	; 0x4c
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b70:	7bfa      	ldrb	r2, [r7, #15]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	3354      	adds	r3, #84	; 0x54
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	3301      	adds	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	7bfa      	ldrb	r2, [r7, #15]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d3af      	bcc.n	8004af4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e044      	b.n	8004c24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b9a:	7bfa      	ldrb	r2, [r7, #15]
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004bc2:	7bfa      	ldrb	r2, [r7, #15]
 8004bc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	3301      	adds	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d3b5      	bcc.n	8004b9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	687e      	ldr	r6, [r7, #4]
 8004c36:	466d      	mov	r5, sp
 8004c38:	f106 0410 	add.w	r4, r6, #16
 8004c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c4c:	1d33      	adds	r3, r6, #4
 8004c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c50:	6838      	ldr	r0, [r7, #0]
 8004c52:	f003 fba5 	bl	80083a0 <USB_DevInit>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e00d      	b.n	8004c84 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f004 fcf4 	bl	800966a <USB_DevDisconnect>

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_PCD_Start+0x1c>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e020      	b.n	8004cea <HAL_PCD_Start+0x5e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d109      	bne.n	8004ccc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d005      	beq.n	8004ccc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f003 faf7 	bl	80082c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f004 fca4 	bl	8009628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cf2:	b590      	push	{r4, r7, lr}
 8004cf4:	b08d      	sub	sp, #52	; 0x34
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f004 fd62 	bl	80097d2 <USB_GetMode>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 848a 	bne.w	800562a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f004 fcc6 	bl	80096ac <USB_ReadInterrupts>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8480 	beq.w	8005628 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f004 fcb3 	bl	80096ac <USB_ReadInterrupts>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d107      	bne.n	8004d60 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f002 0202 	and.w	r2, r2, #2
 8004d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f004 fca1 	bl	80096ac <USB_ReadInterrupts>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d161      	bne.n	8004e38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0210 	bic.w	r2, r2, #16
 8004d82:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	4413      	add	r3, r2
 8004da0:	3304      	adds	r3, #4
 8004da2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	0c5b      	lsrs	r3, r3, #17
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d124      	bne.n	8004dfa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d035      	beq.n	8004e28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6a38      	ldr	r0, [r7, #32]
 8004dd0:	f004 fad8 	bl	8009384 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004de0:	441a      	add	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004df2:	441a      	add	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
 8004df8:	e016      	b.n	8004e28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	0c5b      	lsrs	r3, r3, #17
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	2b06      	cmp	r3, #6
 8004e04:	d110      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6a38      	ldr	r0, [r7, #32]
 8004e12:	f004 fab7 	bl	8009384 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6a1a      	ldr	r2, [r3, #32]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e22:	441a      	add	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0210 	orr.w	r2, r2, #16
 8004e36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f004 fc35 	bl	80096ac <USB_ReadInterrupts>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e4c:	f040 80a7 	bne.w	8004f9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f004 fc3a 	bl	80096d2 <USB_ReadDevAllOutEpInterrupt>
 8004e5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004e60:	e099      	b.n	8004f96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 808e 	beq.w	8004f8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f004 fc5e 	bl	800973a <USB_ReadDevOutEPInterrupt>
 8004e7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	2301      	movs	r3, #1
 8004e9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fec2 	bl	8005c28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 ff98 	bl	8005df8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d030      	beq.n	8004f50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b80      	cmp	r3, #128	; 0x80
 8004ef8:	d109      	bne.n	8004f0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	4413      	add	r3, r2
 8004f20:	3304      	adds	r3, #4
 8004f22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	78db      	ldrb	r3, [r3, #3]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d108      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f008 fa57 	bl	800d3ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	461a      	mov	r2, r3
 8004f68:	2320      	movs	r3, #32
 8004f6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	461a      	mov	r2, r3
 8004f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f47f af62 	bne.w	8004e62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f004 fb82 	bl	80096ac <USB_ReadInterrupts>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fb2:	f040 80db 	bne.w	800516c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f004 fba3 	bl	8009706 <USB_ReadDevAllInEpInterrupt>
 8004fc0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004fc6:	e0cd      	b.n	8005164 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80c2 	beq.w	8005158 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f004 fbc9 	bl	8009776 <USB_ReadDevInEPInterrupt>
 8004fe4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d057      	beq.n	80050a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	43db      	mvns	r3, r3
 800500a:	69f9      	ldr	r1, [r7, #28]
 800500c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005010:	4013      	ands	r3, r2
 8005012:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	461a      	mov	r2, r3
 8005022:	2301      	movs	r3, #1
 8005024:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d132      	bne.n	8005094 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	334c      	adds	r3, #76	; 0x4c
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4403      	add	r3, r0
 800504e:	3348      	adds	r3, #72	; 0x48
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4419      	add	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4403      	add	r3, r0
 8005062:	334c      	adds	r3, #76	; 0x4c
 8005064:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d113      	bne.n	8005094 <HAL_PCD_IRQHandler+0x3a2>
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3354      	adds	r3, #84	; 0x54
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d108      	bne.n	8005094 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800508c:	461a      	mov	r2, r3
 800508e:	2101      	movs	r1, #1
 8005090:	f004 fbd0 	bl	8009834 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	b2db      	uxtb	r3, r3
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f008 f921 	bl	800d2e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b6:	461a      	mov	r2, r3
 80050b8:	2308      	movs	r3, #8
 80050ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	461a      	mov	r2, r3
 80050d4:	2310      	movs	r3, #16
 80050d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ee:	461a      	mov	r2, r3
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d023      	beq.n	8005146 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005100:	6a38      	ldr	r0, [r7, #32]
 8005102:	f003 fab1 	bl	8008668 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	3338      	adds	r3, #56	; 0x38
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	3304      	adds	r3, #4
 8005118:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	78db      	ldrb	r3, [r3, #3]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d108      	bne.n	8005134 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2200      	movs	r2, #0
 8005126:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	b2db      	uxtb	r3, r3
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f008 f96e 	bl	800d410 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	461a      	mov	r2, r3
 8005142:	2302      	movs	r3, #2
 8005144:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fcdb 	bl	8005b0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	3301      	adds	r3, #1
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	f47f af2e 	bne.w	8004fc8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f004 fa9b 	bl	80096ac <USB_ReadInterrupts>
 8005176:	4603      	mov	r3, r0
 8005178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005180:	d122      	bne.n	80051c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800519c:	2b01      	cmp	r3, #1
 800519e:	d108      	bne.n	80051b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051a8:	2100      	movs	r1, #0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fec2 	bl	8005f34 <HAL_PCDEx_LPM_Callback>
 80051b0:	e002      	b.n	80051b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f008 f90c 	bl	800d3d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f004 fa6d 	bl	80096ac <USB_ReadInterrupts>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051dc:	d112      	bne.n	8005204 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d102      	bne.n	80051f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f008 f8c8 	bl	800d384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005202:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f004 fa4f 	bl	80096ac <USB_ReadInterrupts>
 800520e:	4603      	mov	r3, r0
 8005210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005218:	f040 80b7 	bne.w	800538a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2110      	movs	r1, #16
 8005236:	4618      	mov	r0, r3
 8005238:	f003 fa16 	bl	8008668 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800523c:	2300      	movs	r3, #0
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005240:	e046      	b.n	80052d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	461a      	mov	r2, r3
 8005250:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005254:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005274:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	461a      	mov	r2, r3
 8005284:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005288:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	3301      	adds	r3, #1
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d3b3      	bcc.n	8005242 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80052ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005306:	f043 030b 	orr.w	r3, r3, #11
 800530a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531c:	f043 030b 	orr.w	r3, r3, #11
 8005320:	6453      	str	r3, [r2, #68]	; 0x44
 8005322:	e015      	b.n	8005350 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005336:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800533a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534a:	f043 030b 	orr.w	r3, r3, #11
 800534e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005362:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005374:	461a      	mov	r2, r3
 8005376:	f004 fa5d 	bl	8009834 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f004 f98c 	bl	80096ac <USB_ReadInterrupts>
 8005394:	4603      	mov	r3, r0
 8005396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539e:	d124      	bne.n	80053ea <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f004 fa22 	bl	80097ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f003 f9d7 	bl	8008762 <USB_GetDevSpeed>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681c      	ldr	r4, [r3, #0]
 80053c0:	f001 fa28 	bl	8006814 <HAL_RCC_GetHCLKFreq>
 80053c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	4620      	mov	r0, r4
 80053d0:	f002 fed6 	bl	8008180 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f007 ffac 	bl	800d332 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f004 f95c 	bl	80096ac <USB_ReadInterrupts>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d10a      	bne.n	8005414 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f007 ff89 	bl	800d316 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f002 0208 	and.w	r2, r2, #8
 8005412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f004 f947 	bl	80096ac <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b80      	cmp	r3, #128	; 0x80
 8005426:	d122      	bne.n	800546e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005434:	2301      	movs	r3, #1
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	e014      	b.n	8005464 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d105      	bne.n	800545e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	b2db      	uxtb	r3, r3
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fb27 	bl	8005aac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	3301      	adds	r3, #1
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	429a      	cmp	r2, r3
 800546c:	d3e5      	bcc.n	800543a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f004 f91a 	bl	80096ac <USB_ReadInterrupts>
 8005478:	4603      	mov	r3, r0
 800547a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005482:	d13b      	bne.n	80054fc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005484:	2301      	movs	r3, #1
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
 8005488:	e02b      	b.n	80054e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	4613      	mov	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	3340      	adds	r3, #64	; 0x40
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d115      	bne.n	80054dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da12      	bge.n	80054dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	4613      	mov	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	333f      	adds	r3, #63	; 0x3f
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fae8 	bl	8005aac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	3301      	adds	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d3ce      	bcc.n	800548a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695a      	ldr	r2, [r3, #20]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80054fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f004 f8d3 	bl	80096ac <USB_ReadInterrupts>
 8005506:	4603      	mov	r3, r0
 8005508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005510:	d155      	bne.n	80055be <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005512:	2301      	movs	r3, #1
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
 8005516:	e045      	b.n	80055a4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d12e      	bne.n	800559e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005540:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005542:	2b00      	cmp	r3, #0
 8005544:	da2b      	bge.n	800559e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005552:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005556:	429a      	cmp	r2, r3
 8005558:	d121      	bne.n	800559e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555e:	4613      	mov	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800559a:	6053      	str	r3, [r2, #4]
            break;
 800559c:	e007      	b.n	80055ae <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	3301      	adds	r3, #1
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d3b4      	bcc.n	8005518 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80055bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f004 f872 	bl	80096ac <USB_ReadInterrupts>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d2:	d10a      	bne.n	80055ea <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f007 ff2d 	bl	800d434 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f004 f85c 	bl	80096ac <USB_ReadInterrupts>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d115      	bne.n	800562a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f007 ff1d 	bl	800d450 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	e000      	b.n	800562a <HAL_PCD_IRQHandler+0x938>
      return;
 8005628:	bf00      	nop
    }
  }
}
 800562a:	3734      	adds	r7, #52	; 0x34
 800562c:	46bd      	mov	sp, r7
 800562e:	bd90      	pop	{r4, r7, pc}

08005630 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_PCD_SetAddress+0x1a>
 8005646:	2302      	movs	r3, #2
 8005648:	e013      	b.n	8005672 <HAL_PCD_SetAddress+0x42>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	78fa      	ldrb	r2, [r7, #3]
 8005656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f003 ffba 	bl	80095dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	4608      	mov	r0, r1
 8005684:	4611      	mov	r1, r2
 8005686:	461a      	mov	r2, r3
 8005688:	4603      	mov	r3, r0
 800568a:	70fb      	strb	r3, [r7, #3]
 800568c:	460b      	mov	r3, r1
 800568e:	803b      	strh	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800569c:	2b00      	cmp	r3, #0
 800569e:	da0f      	bge.n	80056c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	f003 020f 	and.w	r2, r3, #15
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	3338      	adds	r3, #56	; 0x38
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	4413      	add	r3, r2
 80056b4:	3304      	adds	r3, #4
 80056b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	705a      	strb	r2, [r3, #1]
 80056be:	e00f      	b.n	80056e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	f003 020f 	and.w	r2, r3, #15
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	3304      	adds	r3, #4
 80056d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056ec:	883a      	ldrh	r2, [r7, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	78ba      	ldrb	r2, [r7, #2]
 80056f6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800570a:	78bb      	ldrb	r3, [r7, #2]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d102      	bne.n	8005716 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_PCD_EP_Open+0xaa>
 8005720:	2302      	movs	r3, #2
 8005722:	e00e      	b.n	8005742 <HAL_PCD_EP_Open+0xc8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68f9      	ldr	r1, [r7, #12]
 8005732:	4618      	mov	r0, r3
 8005734:	f003 f83a 	bl	80087ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005740:	7afb      	ldrb	r3, [r7, #11]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800575a:	2b00      	cmp	r3, #0
 800575c:	da0f      	bge.n	800577e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	3338      	adds	r3, #56	; 0x38
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	3304      	adds	r3, #4
 8005774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	705a      	strb	r2, [r3, #1]
 800577c:	e00f      	b.n	800579e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	4413      	add	r3, r2
 8005794:	3304      	adds	r3, #4
 8005796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_PCD_EP_Close+0x6e>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e00e      	b.n	80057d6 <HAL_PCD_EP_Close+0x8c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68f9      	ldr	r1, [r7, #12]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f003 f878 	bl	80088bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	460b      	mov	r3, r1
 80057ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2200      	movs	r2, #0
 8005818:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005820:	7afb      	ldrb	r3, [r7, #11]
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	b2da      	uxtb	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d102      	bne.n	800583a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	6979      	ldr	r1, [r7, #20]
 8005852:	f003 fb57 	bl	8008f04 <USB_EP0StartXfer>
 8005856:	e008      	b.n	800586a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	6979      	ldr	r1, [r7, #20]
 8005866:	f003 f905 	bl	8008a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005896:	681b      	ldr	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	460b      	mov	r3, r1
 80058b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058b4:	7afb      	ldrb	r3, [r7, #11]
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	4613      	mov	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	3338      	adds	r3, #56	; 0x38
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	3304      	adds	r3, #4
 80058ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2201      	movs	r2, #1
 80058e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	6979      	ldr	r1, [r7, #20]
 8005916:	f003 faf5 	bl	8008f04 <USB_EP0StartXfer>
 800591a:	e008      	b.n	800592e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	6979      	ldr	r1, [r7, #20]
 800592a:	f003 f8a3 	bl	8008a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	f003 020f 	and.w	r2, r3, #15
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	d901      	bls.n	8005956 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e050      	b.n	80059f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800595a:	2b00      	cmp	r3, #0
 800595c:	da0f      	bge.n	800597e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800595e:	78fb      	ldrb	r3, [r7, #3]
 8005960:	f003 020f 	and.w	r2, r3, #15
 8005964:	4613      	mov	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	3338      	adds	r3, #56	; 0x38
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	3304      	adds	r3, #4
 8005974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	705a      	strb	r2, [r3, #1]
 800597c:	e00d      	b.n	800599a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	4613      	mov	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4413      	add	r3, r2
 8005990:	3304      	adds	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_PCD_EP_SetStall+0x82>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e01e      	b.n	80059f8 <HAL_PCD_EP_SetStall+0xc0>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f003 fd33 	bl	8009434 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	b2d9      	uxtb	r1, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059e8:	461a      	mov	r2, r3
 80059ea:	f003 ff23 	bl	8009834 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d901      	bls.n	8005a1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e042      	b.n	8005aa4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da0f      	bge.n	8005a46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	f003 020f 	and.w	r2, r3, #15
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	3338      	adds	r3, #56	; 0x38
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	705a      	strb	r2, [r3, #1]
 8005a44:	e00f      	b.n	8005a66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	f003 020f 	and.w	r2, r3, #15
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_PCD_EP_ClrStall+0x86>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e00e      	b.n	8005aa4 <HAL_PCD_EP_ClrStall+0xa4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f003 fd3b 	bl	8009510 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da0c      	bge.n	8005ada <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 020f 	and.w	r2, r3, #15
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	3338      	adds	r3, #56	; 0x38
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	e00c      	b.n	8005af4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	3304      	adds	r3, #4
 8005af2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f003 fb5a 	bl	80091b4 <USB_EPStopXfer>
 8005b00:	4603      	mov	r3, r0
 8005b02:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b04:	7afb      	ldrb	r3, [r7, #11]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b08a      	sub	sp, #40	; 0x28
 8005b12:	af02      	add	r7, sp, #8
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	3338      	adds	r3, #56	; 0x38
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	3304      	adds	r3, #4
 8005b34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1a      	ldr	r2, [r3, #32]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d901      	bls.n	8005b46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e06c      	b.n	8005c20 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d902      	bls.n	8005b62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3303      	adds	r3, #3
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b6a:	e02b      	b.n	8005bc4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	699a      	ldr	r2, [r3, #24]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d902      	bls.n	8005b88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3303      	adds	r3, #3
 8005b8c:	089b      	lsrs	r3, r3, #2
 8005b8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6919      	ldr	r1, [r3, #16]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	6978      	ldr	r0, [r7, #20]
 8005ba8:	f003 fbae 	bl	8009308 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	441a      	add	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	441a      	add	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d809      	bhi.n	8005bee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d203      	bcs.n	8005bee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1be      	bne.n	8005b6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d811      	bhi.n	8005c1e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	2201      	movs	r2, #1
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	6939      	ldr	r1, [r7, #16]
 8005c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	333c      	adds	r3, #60	; 0x3c
 8005c40:	3304      	adds	r3, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d17b      	bne.n	8005d56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d015      	beq.n	8005c94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4a61      	ldr	r2, [pc, #388]	; (8005df0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	f240 80b9 	bls.w	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80b3 	beq.w	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c90:	6093      	str	r3, [r2, #8]
 8005c92:	e0a7      	b.n	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	461a      	mov	r2, r3
 8005cac:	2320      	movs	r3, #32
 8005cae:	6093      	str	r3, [r2, #8]
 8005cb0:	e098      	b.n	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f040 8093 	bne.w	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4a4b      	ldr	r2, [pc, #300]	; (8005df0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d90f      	bls.n	8005ce6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce2:	6093      	str	r3, [r2, #8]
 8005ce4:	e07e      	b.n	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	0159      	lsls	r1, r3, #5
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	440b      	add	r3, r1
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d12:	1ad2      	subs	r2, r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d114      	bne.n	8005d48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d30:	461a      	mov	r2, r3
 8005d32:	2101      	movs	r1, #1
 8005d34:	f003 fd7e 	bl	8009834 <USB_EP0_OutStart>
 8005d38:	e006      	b.n	8005d48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	441a      	add	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f007 faac 	bl	800d2ac <HAL_PCD_DataOutStageCallback>
 8005d54:	e046      	b.n	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4a26      	ldr	r2, [pc, #152]	; (8005df4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d124      	bne.n	8005da8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	461a      	mov	r2, r3
 8005d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7a:	6093      	str	r3, [r2, #8]
 8005d7c:	e032      	b.n	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	461a      	mov	r2, r3
 8005d96:	2320      	movs	r3, #32
 8005d98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f007 fa83 	bl	800d2ac <HAL_PCD_DataOutStageCallback>
 8005da6:	e01d      	b.n	8005de4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d114      	bne.n	8005dd8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	f003 fd2e 	bl	8009834 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f007 fa64 	bl	800d2ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	4f54300a 	.word	0x4f54300a
 8005df4:	4f54310a 	.word	0x4f54310a

08005df8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	333c      	adds	r3, #60	; 0x3c
 8005e10:	3304      	adds	r3, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d90e      	bls.n	8005e4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	461a      	mov	r2, r3
 8005e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f007 fa1b 	bl	800d288 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d90c      	bls.n	8005e74 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d108      	bne.n	8005e74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2101      	movs	r1, #1
 8005e70:	f003 fce0 	bl	8009834 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	4f54300a 	.word	0x4f54300a

08005e84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
 8005e90:	4613      	mov	r3, r2
 8005e92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d107      	bne.n	8005eb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ea2:	883b      	ldrh	r3, [r7, #0]
 8005ea4:	0419      	lsls	r1, r3, #16
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
 8005eb0:	e028      	b.n	8005f04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
 8005ec4:	e00d      	b.n	8005ee2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	3340      	adds	r3, #64	; 0x40
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	0c1b      	lsrs	r3, r3, #16
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	4413      	add	r3, r2
 8005eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
 8005ee2:	7bfa      	ldrb	r2, [r7, #15]
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d3ec      	bcc.n	8005ec6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005eec:	883b      	ldrh	r3, [r7, #0]
 8005eee:	0418      	lsls	r0, r3, #16
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	4302      	orrs	r2, r0
 8005efc:	3340      	adds	r3, #64	; 0x40
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	887a      	ldrh	r2, [r7, #2]
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e267      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d075      	beq.n	8006056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f6a:	4b88      	ldr	r3, [pc, #544]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d00c      	beq.n	8005f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f76:	4b85      	ldr	r3, [pc, #532]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d112      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f82:	4b82      	ldr	r3, [pc, #520]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f8e:	d10b      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f90:	4b7e      	ldr	r3, [pc, #504]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d05b      	beq.n	8006054 <HAL_RCC_OscConfig+0x108>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d157      	bne.n	8006054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e242      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x74>
 8005fb2:	4b76      	ldr	r3, [pc, #472]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a75      	ldr	r2, [pc, #468]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e01d      	b.n	8005ffc <HAL_RCC_OscConfig+0xb0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x98>
 8005fca:	4b70      	ldr	r3, [pc, #448]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6f      	ldr	r2, [pc, #444]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	4b6d      	ldr	r3, [pc, #436]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a6c      	ldr	r2, [pc, #432]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e00b      	b.n	8005ffc <HAL_RCC_OscConfig+0xb0>
 8005fe4:	4b69      	ldr	r3, [pc, #420]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a68      	ldr	r2, [pc, #416]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4b66      	ldr	r3, [pc, #408]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a65      	ldr	r2, [pc, #404]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8005ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d013      	beq.n	800602c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006004:	f7fd fa14 	bl	8003430 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800600c:	f7fd fa10 	bl	8003430 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e207      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601e:	4b5b      	ldr	r3, [pc, #364]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0xc0>
 800602a:	e014      	b.n	8006056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7fd fa00 	bl	8003430 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006034:	f7fd f9fc 	bl	8003430 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e1f3      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006046:	4b51      	ldr	r3, [pc, #324]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0xe8>
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d063      	beq.n	800612a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006062:	4b4a      	ldr	r3, [pc, #296]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 030c 	and.w	r3, r3, #12
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800606e:	4b47      	ldr	r3, [pc, #284]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006076:	2b08      	cmp	r3, #8
 8006078:	d11c      	bne.n	80060b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800607a:	4b44      	ldr	r3, [pc, #272]	; (800618c <HAL_RCC_OscConfig+0x240>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d116      	bne.n	80060b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006086:	4b41      	ldr	r3, [pc, #260]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_RCC_OscConfig+0x152>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d001      	beq.n	800609e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e1c7      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609e:	4b3b      	ldr	r3, [pc, #236]	; (800618c <HAL_RCC_OscConfig+0x240>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4937      	ldr	r1, [pc, #220]	; (800618c <HAL_RCC_OscConfig+0x240>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b2:	e03a      	b.n	800612a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d020      	beq.n	80060fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060bc:	4b34      	ldr	r3, [pc, #208]	; (8006190 <HAL_RCC_OscConfig+0x244>)
 80060be:	2201      	movs	r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c2:	f7fd f9b5 	bl	8003430 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ca:	f7fd f9b1 	bl	8003430 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e1a8      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060dc:	4b2b      	ldr	r3, [pc, #172]	; (800618c <HAL_RCC_OscConfig+0x240>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0f0      	beq.n	80060ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e8:	4b28      	ldr	r3, [pc, #160]	; (800618c <HAL_RCC_OscConfig+0x240>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4925      	ldr	r1, [pc, #148]	; (800618c <HAL_RCC_OscConfig+0x240>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]
 80060fc:	e015      	b.n	800612a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060fe:	4b24      	ldr	r3, [pc, #144]	; (8006190 <HAL_RCC_OscConfig+0x244>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fd f994 	bl	8003430 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610c:	f7fd f990 	bl	8003430 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e187      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800611e:	4b1b      	ldr	r3, [pc, #108]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d036      	beq.n	80061a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d016      	beq.n	800616c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <HAL_RCC_OscConfig+0x248>)
 8006140:	2201      	movs	r2, #1
 8006142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fd f974 	bl	8003430 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800614c:	f7fd f970 	bl	8003430 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e167      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800615e:	4b0b      	ldr	r3, [pc, #44]	; (800618c <HAL_RCC_OscConfig+0x240>)
 8006160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCC_OscConfig+0x200>
 800616a:	e01b      	b.n	80061a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800616c:	4b09      	ldr	r3, [pc, #36]	; (8006194 <HAL_RCC_OscConfig+0x248>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006172:	f7fd f95d 	bl	8003430 <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006178:	e00e      	b.n	8006198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800617a:	f7fd f959 	bl	8003430 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d907      	bls.n	8006198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e150      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
 800618c:	40023800 	.word	0x40023800
 8006190:	42470000 	.word	0x42470000
 8006194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006198:	4b88      	ldr	r3, [pc, #544]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 800619a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ea      	bne.n	800617a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8097 	beq.w	80062e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b2:	2300      	movs	r3, #0
 80061b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b6:	4b81      	ldr	r3, [pc, #516]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10f      	bne.n	80061e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c2:	2300      	movs	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	4b7d      	ldr	r3, [pc, #500]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	4a7c      	ldr	r2, [pc, #496]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80061cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d0:	6413      	str	r3, [r2, #64]	; 0x40
 80061d2:	4b7a      	ldr	r3, [pc, #488]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061da:	60bb      	str	r3, [r7, #8]
 80061dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e2:	4b77      	ldr	r3, [pc, #476]	; (80063c0 <HAL_RCC_OscConfig+0x474>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d118      	bne.n	8006220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ee:	4b74      	ldr	r3, [pc, #464]	; (80063c0 <HAL_RCC_OscConfig+0x474>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a73      	ldr	r2, [pc, #460]	; (80063c0 <HAL_RCC_OscConfig+0x474>)
 80061f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061fa:	f7fd f919 	bl	8003430 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006202:	f7fd f915 	bl	8003430 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e10c      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006214:	4b6a      	ldr	r3, [pc, #424]	; (80063c0 <HAL_RCC_OscConfig+0x474>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d106      	bne.n	8006236 <HAL_RCC_OscConfig+0x2ea>
 8006228:	4b64      	ldr	r3, [pc, #400]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 800622a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622c:	4a63      	ldr	r2, [pc, #396]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	6713      	str	r3, [r2, #112]	; 0x70
 8006234:	e01c      	b.n	8006270 <HAL_RCC_OscConfig+0x324>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b05      	cmp	r3, #5
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0x30c>
 800623e:	4b5f      	ldr	r3, [pc, #380]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	4a5e      	ldr	r2, [pc, #376]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006244:	f043 0304 	orr.w	r3, r3, #4
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
 800624a:	4b5c      	ldr	r3, [pc, #368]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	4a5b      	ldr	r2, [pc, #364]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	6713      	str	r3, [r2, #112]	; 0x70
 8006256:	e00b      	b.n	8006270 <HAL_RCC_OscConfig+0x324>
 8006258:	4b58      	ldr	r3, [pc, #352]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	4a57      	ldr	r2, [pc, #348]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	6713      	str	r3, [r2, #112]	; 0x70
 8006264:	4b55      	ldr	r3, [pc, #340]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	4a54      	ldr	r2, [pc, #336]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 800626a:	f023 0304 	bic.w	r3, r3, #4
 800626e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d015      	beq.n	80062a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006278:	f7fd f8da 	bl	8003430 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800627e:	e00a      	b.n	8006296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006280:	f7fd f8d6 	bl	8003430 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e0cb      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006296:	4b49      	ldr	r3, [pc, #292]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0ee      	beq.n	8006280 <HAL_RCC_OscConfig+0x334>
 80062a2:	e014      	b.n	80062ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062a4:	f7fd f8c4 	bl	8003430 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062aa:	e00a      	b.n	80062c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ac:	f7fd f8c0 	bl	8003430 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e0b5      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c2:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1ee      	bne.n	80062ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d105      	bne.n	80062e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062d4:	4b39      	ldr	r3, [pc, #228]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	4a38      	ldr	r2, [pc, #224]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80062da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80a1 	beq.w	800642c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062ea:	4b34      	ldr	r3, [pc, #208]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 030c 	and.w	r3, r3, #12
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d05c      	beq.n	80063b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d141      	bne.n	8006382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_RCC_OscConfig+0x478>)
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006304:	f7fd f894 	bl	8003430 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800630c:	f7fd f890 	bl	8003430 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e087      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631e:	4b27      	ldr	r3, [pc, #156]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69da      	ldr	r2, [r3, #28]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	019b      	lsls	r3, r3, #6
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	3b01      	subs	r3, #1
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	061b      	lsls	r3, r3, #24
 800634e:	491b      	ldr	r1, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006350:	4313      	orrs	r3, r2
 8006352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <HAL_RCC_OscConfig+0x478>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635a:	f7fd f869 	bl	8003430 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006362:	f7fd f865 	bl	8003430 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e05c      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006374:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x416>
 8006380:	e054      	b.n	800642c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <HAL_RCC_OscConfig+0x478>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7fd f852 	bl	8003430 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006390:	f7fd f84e 	bl	8003430 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e045      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a2:	4b06      	ldr	r3, [pc, #24]	; (80063bc <HAL_RCC_OscConfig+0x470>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x444>
 80063ae:	e03d      	b.n	800642c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d107      	bne.n	80063c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e038      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40007000 	.word	0x40007000
 80063c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063c8:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <HAL_RCC_OscConfig+0x4ec>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d028      	beq.n	8006428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d121      	bne.n	8006428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d11a      	bne.n	8006428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063f8:	4013      	ands	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006400:	4293      	cmp	r3, r2
 8006402:	d111      	bne.n	8006428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	3b01      	subs	r3, #1
 8006412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006414:	429a      	cmp	r2, r3
 8006416:	d107      	bne.n	8006428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800

0800643c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0cc      	b.n	80065ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006450:	4b68      	ldr	r3, [pc, #416]	; (80065f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d90c      	bls.n	8006478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645e:	4b65      	ldr	r3, [pc, #404]	; (80065f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b63      	ldr	r3, [pc, #396]	; (80065f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e0b8      	b.n	80065ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d020      	beq.n	80064c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006490:	4b59      	ldr	r3, [pc, #356]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	4a58      	ldr	r2, [pc, #352]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800649a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064a8:	4b53      	ldr	r3, [pc, #332]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4a52      	ldr	r2, [pc, #328]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b4:	4b50      	ldr	r3, [pc, #320]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	494d      	ldr	r1, [pc, #308]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d044      	beq.n	800655c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d107      	bne.n	80064ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	4b47      	ldr	r3, [pc, #284]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d119      	bne.n	800651a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e07f      	b.n	80065ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d003      	beq.n	80064fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d107      	bne.n	800650a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fa:	4b3f      	ldr	r3, [pc, #252]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e06f      	b.n	80065ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650a:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e067      	b.n	80065ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800651a:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f023 0203 	bic.w	r2, r3, #3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4934      	ldr	r1, [pc, #208]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	4313      	orrs	r3, r2
 800652a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800652c:	f7fc ff80 	bl	8003430 <HAL_GetTick>
 8006530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006532:	e00a      	b.n	800654a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006534:	f7fc ff7c 	bl	8003430 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e04f      	b.n	80065ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654a:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 020c 	and.w	r2, r3, #12
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	429a      	cmp	r2, r3
 800655a:	d1eb      	bne.n	8006534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800655c:	4b25      	ldr	r3, [pc, #148]	; (80065f4 <HAL_RCC_ClockConfig+0x1b8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d20c      	bcs.n	8006584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656a:	4b22      	ldr	r3, [pc, #136]	; (80065f4 <HAL_RCC_ClockConfig+0x1b8>)
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d001      	beq.n	8006584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e032      	b.n	80065ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	4916      	ldr	r1, [pc, #88]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	490e      	ldr	r1, [pc, #56]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065c2:	f000 f821 	bl	8006608 <HAL_RCC_GetSysClockFreq>
 80065c6:	4602      	mov	r2, r0
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	091b      	lsrs	r3, r3, #4
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	490a      	ldr	r1, [pc, #40]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 80065d4:	5ccb      	ldrb	r3, [r1, r3]
 80065d6:	fa22 f303 	lsr.w	r3, r2, r3
 80065da:	4a09      	ldr	r2, [pc, #36]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80065dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065de:	4b09      	ldr	r3, [pc, #36]	; (8006604 <HAL_RCC_ClockConfig+0x1c8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fa ff88 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40023c00 	.word	0x40023c00
 80065f8:	40023800 	.word	0x40023800
 80065fc:	0801070c 	.word	0x0801070c
 8006600:	20000030 	.word	0x20000030
 8006604:	200000b0 	.word	0x200000b0

08006608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800660c:	b094      	sub	sp, #80	; 0x50
 800660e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
 8006614:	2300      	movs	r3, #0
 8006616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006618:	2300      	movs	r3, #0
 800661a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006620:	4b79      	ldr	r3, [pc, #484]	; (8006808 <HAL_RCC_GetSysClockFreq+0x200>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 030c 	and.w	r3, r3, #12
 8006628:	2b08      	cmp	r3, #8
 800662a:	d00d      	beq.n	8006648 <HAL_RCC_GetSysClockFreq+0x40>
 800662c:	2b08      	cmp	r3, #8
 800662e:	f200 80e1 	bhi.w	80067f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_RCC_GetSysClockFreq+0x34>
 8006636:	2b04      	cmp	r3, #4
 8006638:	d003      	beq.n	8006642 <HAL_RCC_GetSysClockFreq+0x3a>
 800663a:	e0db      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800663c:	4b73      	ldr	r3, [pc, #460]	; (800680c <HAL_RCC_GetSysClockFreq+0x204>)
 800663e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006640:	e0db      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006642:	4b73      	ldr	r3, [pc, #460]	; (8006810 <HAL_RCC_GetSysClockFreq+0x208>)
 8006644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006646:	e0d8      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006648:	4b6f      	ldr	r3, [pc, #444]	; (8006808 <HAL_RCC_GetSysClockFreq+0x200>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006650:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006652:	4b6d      	ldr	r3, [pc, #436]	; (8006808 <HAL_RCC_GetSysClockFreq+0x200>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d063      	beq.n	8006726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800665e:	4b6a      	ldr	r3, [pc, #424]	; (8006808 <HAL_RCC_GetSysClockFreq+0x200>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	099b      	lsrs	r3, r3, #6
 8006664:	2200      	movs	r2, #0
 8006666:	63bb      	str	r3, [r7, #56]	; 0x38
 8006668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006670:	633b      	str	r3, [r7, #48]	; 0x30
 8006672:	2300      	movs	r3, #0
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
 8006676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800667a:	4622      	mov	r2, r4
 800667c:	462b      	mov	r3, r5
 800667e:	f04f 0000 	mov.w	r0, #0
 8006682:	f04f 0100 	mov.w	r1, #0
 8006686:	0159      	lsls	r1, r3, #5
 8006688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800668c:	0150      	lsls	r0, r2, #5
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4621      	mov	r1, r4
 8006694:	1a51      	subs	r1, r2, r1
 8006696:	6139      	str	r1, [r7, #16]
 8006698:	4629      	mov	r1, r5
 800669a:	eb63 0301 	sbc.w	r3, r3, r1
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066ac:	4659      	mov	r1, fp
 80066ae:	018b      	lsls	r3, r1, #6
 80066b0:	4651      	mov	r1, sl
 80066b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066b6:	4651      	mov	r1, sl
 80066b8:	018a      	lsls	r2, r1, #6
 80066ba:	4651      	mov	r1, sl
 80066bc:	ebb2 0801 	subs.w	r8, r2, r1
 80066c0:	4659      	mov	r1, fp
 80066c2:	eb63 0901 	sbc.w	r9, r3, r1
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066da:	4690      	mov	r8, r2
 80066dc:	4699      	mov	r9, r3
 80066de:	4623      	mov	r3, r4
 80066e0:	eb18 0303 	adds.w	r3, r8, r3
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	462b      	mov	r3, r5
 80066e8:	eb49 0303 	adc.w	r3, r9, r3
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066fa:	4629      	mov	r1, r5
 80066fc:	024b      	lsls	r3, r1, #9
 80066fe:	4621      	mov	r1, r4
 8006700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006704:	4621      	mov	r1, r4
 8006706:	024a      	lsls	r2, r1, #9
 8006708:	4610      	mov	r0, r2
 800670a:	4619      	mov	r1, r3
 800670c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670e:	2200      	movs	r2, #0
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
 8006712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006718:	f7fa fa56 	bl	8000bc8 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4613      	mov	r3, r2
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	e058      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006726:	4b38      	ldr	r3, [pc, #224]	; (8006808 <HAL_RCC_GetSysClockFreq+0x200>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	099b      	lsrs	r3, r3, #6
 800672c:	2200      	movs	r2, #0
 800672e:	4618      	mov	r0, r3
 8006730:	4611      	mov	r1, r2
 8006732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006736:	623b      	str	r3, [r7, #32]
 8006738:	2300      	movs	r3, #0
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
 800673c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006740:	4642      	mov	r2, r8
 8006742:	464b      	mov	r3, r9
 8006744:	f04f 0000 	mov.w	r0, #0
 8006748:	f04f 0100 	mov.w	r1, #0
 800674c:	0159      	lsls	r1, r3, #5
 800674e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006752:	0150      	lsls	r0, r2, #5
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4641      	mov	r1, r8
 800675a:	ebb2 0a01 	subs.w	sl, r2, r1
 800675e:	4649      	mov	r1, r9
 8006760:	eb63 0b01 	sbc.w	fp, r3, r1
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006778:	ebb2 040a 	subs.w	r4, r2, sl
 800677c:	eb63 050b 	sbc.w	r5, r3, fp
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	00eb      	lsls	r3, r5, #3
 800678a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800678e:	00e2      	lsls	r2, r4, #3
 8006790:	4614      	mov	r4, r2
 8006792:	461d      	mov	r5, r3
 8006794:	4643      	mov	r3, r8
 8006796:	18e3      	adds	r3, r4, r3
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	464b      	mov	r3, r9
 800679c:	eb45 0303 	adc.w	r3, r5, r3
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ae:	4629      	mov	r1, r5
 80067b0:	028b      	lsls	r3, r1, #10
 80067b2:	4621      	mov	r1, r4
 80067b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067b8:	4621      	mov	r1, r4
 80067ba:	028a      	lsls	r2, r1, #10
 80067bc:	4610      	mov	r0, r2
 80067be:	4619      	mov	r1, r3
 80067c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c2:	2200      	movs	r2, #0
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067cc:	f7fa f9fc 	bl	8000bc8 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4613      	mov	r3, r2
 80067d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <HAL_RCC_GetSysClockFreq+0x200>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	3301      	adds	r3, #1
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80067e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067f2:	e002      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <HAL_RCC_GetSysClockFreq+0x204>)
 80067f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3750      	adds	r7, #80	; 0x50
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006806:	bf00      	nop
 8006808:	40023800 	.word	0x40023800
 800680c:	00f42400 	.word	0x00f42400
 8006810:	007a1200 	.word	0x007a1200

08006814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006818:	4b03      	ldr	r3, [pc, #12]	; (8006828 <HAL_RCC_GetHCLKFreq+0x14>)
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000030 	.word	0x20000030

0800682c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006830:	f7ff fff0 	bl	8006814 <HAL_RCC_GetHCLKFreq>
 8006834:	4602      	mov	r2, r0
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	0a9b      	lsrs	r3, r3, #10
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4903      	ldr	r1, [pc, #12]	; (8006850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006842:	5ccb      	ldrb	r3, [r1, r3]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40023800 	.word	0x40023800
 8006850:	0801071c 	.word	0x0801071c

08006854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	220f      	movs	r2, #15
 8006862:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0203 	and.w	r2, r3, #3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800687c:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	08db      	lsrs	r3, r3, #3
 800688e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <HAL_RCC_GetClockConfig+0x60>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 020f 	and.w	r2, r3, #15
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	601a      	str	r2, [r3, #0]
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40023c00 	.word	0x40023c00

080068b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10b      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d105      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d075      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068ec:	4b91      	ldr	r3, [pc, #580]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068f2:	f7fc fd9d 	bl	8003430 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068f8:	e008      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068fa:	f7fc fd99 	bl	8003430 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e189      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800690c:	4b8a      	ldr	r3, [pc, #552]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f0      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	019a      	lsls	r2, r3, #6
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	071b      	lsls	r3, r3, #28
 8006930:	4981      	ldr	r1, [pc, #516]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01f      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006944:	4b7c      	ldr	r3, [pc, #496]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694a:	0f1b      	lsrs	r3, r3, #28
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	019a      	lsls	r2, r3, #6
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	431a      	orrs	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	071b      	lsls	r3, r3, #28
 8006964:	4974      	ldr	r1, [pc, #464]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800696c:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800696e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006972:	f023 021f 	bic.w	r2, r3, #31
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	3b01      	subs	r3, #1
 800697c:	496e      	ldr	r1, [pc, #440]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	019a      	lsls	r2, r3, #6
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	061b      	lsls	r3, r3, #24
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	071b      	lsls	r3, r3, #28
 80069a4:	4964      	ldr	r1, [pc, #400]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069ac:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069b2:	f7fc fd3d 	bl	8003430 <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069b8:	e008      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069ba:	f7fc fd39 	bl	8003430 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e129      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069cc:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d079      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069f0:	4b52      	ldr	r3, [pc, #328]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069f6:	f7fc fd1b 	bl	8003430 <HAL_GetTick>
 80069fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069fc:	e008      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80069fe:	f7fc fd17 	bl	8003430 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e107      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a10:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a1c:	d0ef      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d020      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a2a:	4b43      	ldr	r3, [pc, #268]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a30:	0f1b      	lsrs	r3, r3, #28
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	019a      	lsls	r2, r3, #6
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	061b      	lsls	r3, r3, #24
 8006a44:	431a      	orrs	r2, r3
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	071b      	lsls	r3, r3, #28
 8006a4a:	493b      	ldr	r1, [pc, #236]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a52:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	4934      	ldr	r1, [pc, #208]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0308 	and.w	r3, r3, #8
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01e      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a78:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7e:	0e1b      	lsrs	r3, r3, #24
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	019a      	lsls	r2, r3, #6
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	061b      	lsls	r3, r3, #24
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	071b      	lsls	r3, r3, #28
 8006a98:	4927      	ldr	r1, [pc, #156]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	4922      	ldr	r1, [pc, #136]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ab6:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006abc:	f7fc fcb8 	bl	8003430 <HAL_GetTick>
 8006ac0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ac4:	f7fc fcb4 	bl	8003430 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e0a4      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ad6:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae2:	d1ef      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 808b 	beq.w	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	4a0f      	ldr	r2, [pc, #60]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b00:	6413      	str	r3, [r2, #64]	; 0x40
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a0b      	ldr	r2, [pc, #44]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b1a:	f7fc fc89 	bl	8003430 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b20:	e010      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b22:	f7fc fc85 	bl	8003430 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d909      	bls.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e075      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006b34:	42470068 	.word	0x42470068
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	42470070 	.word	0x42470070
 8006b40:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b44:	4b38      	ldr	r3, [pc, #224]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0e8      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b50:	4b36      	ldr	r3, [pc, #216]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d02f      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d028      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b6e:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b78:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b7e:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b84:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b8a:	4b28      	ldr	r3, [pc, #160]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d114      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fc fc4b 	bl	8003430 <HAL_GetTick>
 8006b9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b9e:	f7fc fc47 	bl	8003430 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e035      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb4:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0ee      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bcc:	d10d      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006bce:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be2:	4912      	ldr	r1, [pc, #72]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	608b      	str	r3, [r1, #8]
 8006be8:	e005      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	4a0f      	ldr	r2, [pc, #60]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bf0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bf4:	6093      	str	r3, [r2, #8]
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c02:	490a      	ldr	r1, [pc, #40]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006c1c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40007000 	.word	0x40007000
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	42470e40 	.word	0x42470e40
 8006c34:	424711e0 	.word	0x424711e0

08006c38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e025      	b.n	8006c98 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f81d 	bl	8006ca0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f001 f905 	bl	8007e88 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	461a      	mov	r2, r3
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	f001 f95a 	bl	8007f42 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cc6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d101      	bne.n	8006cd2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e021      	b.n	8006d16 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_SDRAM_SendCommand+0x2a>
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d118      	bne.n	8006d10 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 f990 	bl	8008014 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d104      	bne.n	8006d06 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2205      	movs	r2, #5
 8006d00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006d04:	e006      	b.n	8006d14 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006d0e:	e001      	b.n	8006d14 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d101      	bne.n	8006d38 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e016      	b.n	8006d66 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d10f      	bne.n	8006d64 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f99b 	bl	800808e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	e000      	b.n	8006d66 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e07b      	b.n	8006e78 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d90:	d009      	beq.n	8006da6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	61da      	str	r2, [r3, #28]
 8006d98:	e005      	b.n	8006da6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fa fb33 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ddc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2a:	ea42 0103 	orr.w	r1, r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	f003 0104 	and.w	r1, r3, #4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	f003 0210 	and.w	r2, r3, #16
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69da      	ldr	r2, [r3, #28]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e01a      	b.n	8006ec8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa fb06 	bl	80014bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_SPI_Transmit+0x22>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e126      	b.n	8007140 <HAL_SPI_Transmit+0x270>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006efa:	f7fc fa99 	bl	8003430 <HAL_GetTick>
 8006efe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d002      	beq.n	8006f16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
 8006f12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f14:	e10b      	b.n	800712e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_SPI_Transmit+0x52>
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f26:	e102      	b.n	800712e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6e:	d10f      	bne.n	8006f90 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d007      	beq.n	8006fae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb6:	d14b      	bne.n	8007050 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Transmit+0xf6>
 8006fc0:	8afb      	ldrh	r3, [r7, #22]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d13e      	bne.n	8007044 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	881a      	ldrh	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	1c9a      	adds	r2, r3, #2
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fea:	e02b      	b.n	8007044 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d112      	bne.n	8007020 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	881a      	ldrh	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	86da      	strh	r2, [r3, #54]	; 0x36
 800701e:	e011      	b.n	8007044 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007020:	f7fc fa06 	bl	8003430 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d803      	bhi.n	8007038 <HAL_SPI_Transmit+0x168>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d102      	bne.n	800703e <HAL_SPI_Transmit+0x16e>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007042:	e074      	b.n	800712e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1ce      	bne.n	8006fec <HAL_SPI_Transmit+0x11c>
 800704e:	e04c      	b.n	80070ea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_SPI_Transmit+0x18e>
 8007058:	8afb      	ldrh	r3, [r7, #22]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d140      	bne.n	80070e0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	7812      	ldrb	r2, [r2, #0]
 800706a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007084:	e02c      	b.n	80070e0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d113      	bne.n	80070bc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	330c      	adds	r3, #12
 800709e:	7812      	ldrb	r2, [r2, #0]
 80070a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80070ba:	e011      	b.n	80070e0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070bc:	f7fc f9b8 	bl	8003430 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d803      	bhi.n	80070d4 <HAL_SPI_Transmit+0x204>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d2:	d102      	bne.n	80070da <HAL_SPI_Transmit+0x20a>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d102      	bne.n	80070e0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070de:	e026      	b.n	800712e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1cd      	bne.n	8007086 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fbda 	bl	80078a8 <SPI_EndRxTxTransaction>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e000      	b.n	800712e <HAL_SPI_Transmit+0x25e>
  }

error:
 800712c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800713e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007164:	d112      	bne.n	800718c <HAL_SPI_Receive+0x44>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10e      	bne.n	800718c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2204      	movs	r2, #4
 8007172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007176:	88fa      	ldrh	r2, [r7, #6]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f8f1 	bl	800736a <HAL_SPI_TransmitReceive>
 8007188:	4603      	mov	r3, r0
 800718a:	e0ea      	b.n	8007362 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_SPI_Receive+0x52>
 8007196:	2302      	movs	r3, #2
 8007198:	e0e3      	b.n	8007362 <HAL_SPI_Receive+0x21a>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071a2:	f7fc f945 	bl	8003430 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d002      	beq.n	80071ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80071b4:	2302      	movs	r3, #2
 80071b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071b8:	e0ca      	b.n	8007350 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_SPI_Receive+0x7e>
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071ca:	e0c1      	b.n	8007350 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2204      	movs	r2, #4
 80071d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	88fa      	ldrh	r2, [r7, #6]
 80071e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007212:	d10f      	bne.n	8007234 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007222:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007232:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d007      	beq.n	8007252 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007250:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d162      	bne.n	8007320 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800725a:	e02e      	b.n	80072ba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b01      	cmp	r3, #1
 8007268:	d115      	bne.n	8007296 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f103 020c 	add.w	r2, r3, #12
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007294:	e011      	b.n	80072ba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007296:	f7fc f8cb 	bl	8003430 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d803      	bhi.n	80072ae <HAL_SPI_Receive+0x166>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d102      	bne.n	80072b4 <HAL_SPI_Receive+0x16c>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072b8:	e04a      	b.n	8007350 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1cb      	bne.n	800725c <HAL_SPI_Receive+0x114>
 80072c4:	e031      	b.n	800732a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d113      	bne.n	80072fc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	b292      	uxth	r2, r2
 80072e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	1c9a      	adds	r2, r3, #2
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072fa:	e011      	b.n	8007320 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072fc:	f7fc f898 	bl	8003430 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d803      	bhi.n	8007314 <HAL_SPI_Receive+0x1cc>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d102      	bne.n	800731a <HAL_SPI_Receive+0x1d2>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d102      	bne.n	8007320 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800731e:	e017      	b.n	8007350 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1cd      	bne.n	80072c6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fa54 	bl	80077dc <SPI_EndRxTransaction>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
 800734c:	e000      	b.n	8007350 <HAL_SPI_Receive+0x208>
  }

error :
 800734e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b08c      	sub	sp, #48	; 0x30
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007378:	2301      	movs	r3, #1
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_SPI_TransmitReceive+0x26>
 800738c:	2302      	movs	r3, #2
 800738e:	e18a      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x33c>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007398:	f7fc f84a 	bl	8003430 <HAL_GetTick>
 800739c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073ae:	887b      	ldrh	r3, [r7, #2]
 80073b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d00f      	beq.n	80073da <HAL_SPI_TransmitReceive+0x70>
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073c0:	d107      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x68>
 80073ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d003      	beq.n	80073da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
 80073d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073d8:	e15b      	b.n	8007692 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x82>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x82>
 80073e6:	887b      	ldrh	r3, [r7, #2]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073f2:	e14e      	b.n	8007692 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d003      	beq.n	8007408 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2205      	movs	r2, #5
 8007404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	887a      	ldrh	r2, [r7, #2]
 8007418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	887a      	ldrh	r2, [r7, #2]
 800741e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	887a      	ldrh	r2, [r7, #2]
 800742a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	887a      	ldrh	r2, [r7, #2]
 8007430:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	d007      	beq.n	800745c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800745a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007464:	d178      	bne.n	8007558 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <HAL_SPI_TransmitReceive+0x10a>
 800746e:	8b7b      	ldrh	r3, [r7, #26]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d166      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	881a      	ldrh	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	1c9a      	adds	r2, r3, #2
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007498:	e053      	b.n	8007542 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d11b      	bne.n	80074e0 <HAL_SPI_TransmitReceive+0x176>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d016      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x176>
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d113      	bne.n	80074e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	881a      	ldrh	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	1c9a      	adds	r2, r3, #2
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d119      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x1b8>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d014      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	b292      	uxth	r2, r2
 8007504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800751e:	2301      	movs	r3, #1
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007522:	f7fb ff85 	bl	8003430 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800752e:	429a      	cmp	r2, r3
 8007530:	d807      	bhi.n	8007542 <HAL_SPI_TransmitReceive+0x1d8>
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d003      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007540:	e0a7      	b.n	8007692 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1a6      	bne.n	800749a <HAL_SPI_TransmitReceive+0x130>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1a1      	bne.n	800749a <HAL_SPI_TransmitReceive+0x130>
 8007556:	e07c      	b.n	8007652 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x1fc>
 8007560:	8b7b      	ldrh	r3, [r7, #26]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d16b      	bne.n	800763e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758c:	e057      	b.n	800763e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b02      	cmp	r3, #2
 800759a:	d11c      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x26c>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d017      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x26c>
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d114      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d119      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x2ae>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007614:	2301      	movs	r3, #1
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007618:	f7fb ff0a 	bl	8003430 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007624:	429a      	cmp	r2, r3
 8007626:	d803      	bhi.n	8007630 <HAL_SPI_TransmitReceive+0x2c6>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d102      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x2cc>
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800763c:	e029      	b.n	8007692 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1a2      	bne.n	800758e <HAL_SPI_TransmitReceive+0x224>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d19d      	bne.n	800758e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f926 	bl	80078a8 <SPI_EndRxTxTransaction>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d006      	beq.n	8007670 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800766e:	e010      	b.n	8007692 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	e000      	b.n	8007692 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007690:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3730      	adds	r7, #48	; 0x30
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076bc:	b2db      	uxtb	r3, r3
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
	...

080076cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	4613      	mov	r3, r2
 80076da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076dc:	f7fb fea8 	bl	8003430 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	4413      	add	r3, r2
 80076ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076ec:	f7fb fea0 	bl	8003430 <HAL_GetTick>
 80076f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076f2:	4b39      	ldr	r3, [pc, #228]	; (80077d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	015b      	lsls	r3, r3, #5
 80076f8:	0d1b      	lsrs	r3, r3, #20
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	fb02 f303 	mul.w	r3, r2, r3
 8007700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007702:	e054      	b.n	80077ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d050      	beq.n	80077ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800770c:	f7fb fe90 	bl	8003430 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	429a      	cmp	r2, r3
 800771a:	d902      	bls.n	8007722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d13d      	bne.n	800779e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800773a:	d111      	bne.n	8007760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007744:	d004      	beq.n	8007750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774e:	d107      	bne.n	8007760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800775e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007768:	d10f      	bne.n	800778a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e017      	b.n	80077ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4013      	ands	r3, r2
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	bf0c      	ite	eq
 80077be:	2301      	moveq	r3, #1
 80077c0:	2300      	movne	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d19b      	bne.n	8007704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000030 	.word	0x20000030

080077dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f0:	d111      	bne.n	8007816 <SPI_EndRxTransaction+0x3a>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fa:	d004      	beq.n	8007806 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007804:	d107      	bne.n	8007816 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007814:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781e:	d12a      	bne.n	8007876 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007828:	d012      	beq.n	8007850 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	2180      	movs	r1, #128	; 0x80
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff ff49 	bl	80076cc <SPI_WaitFlagStateUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d02d      	beq.n	800789c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e026      	b.n	800789e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	2101      	movs	r1, #1
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff ff36 	bl	80076cc <SPI_WaitFlagStateUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01a      	beq.n	800789c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f043 0220 	orr.w	r2, r3, #32
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e013      	b.n	800789e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	2101      	movs	r1, #1
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff ff23 	bl	80076cc <SPI_WaitFlagStateUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007890:	f043 0220 	orr.w	r2, r3, #32
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e000      	b.n	800789e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078b4:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <SPI_EndRxTxTransaction+0x7c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1b      	ldr	r2, [pc, #108]	; (8007928 <SPI_EndRxTxTransaction+0x80>)
 80078ba:	fba2 2303 	umull	r2, r3, r2, r3
 80078be:	0d5b      	lsrs	r3, r3, #21
 80078c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078c4:	fb02 f303 	mul.w	r3, r2, r3
 80078c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d2:	d112      	bne.n	80078fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	2180      	movs	r1, #128	; 0x80
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff fef4 	bl	80076cc <SPI_WaitFlagStateUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	f043 0220 	orr.w	r2, r3, #32
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e00f      	b.n	800791a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	3b01      	subs	r3, #1
 8007904:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007910:	2b80      	cmp	r3, #128	; 0x80
 8007912:	d0f2      	beq.n	80078fa <SPI_EndRxTxTransaction+0x52>
 8007914:	e000      	b.n	8007918 <SPI_EndRxTxTransaction+0x70>
        break;
 8007916:	bf00      	nop
  }

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000030 	.word	0x20000030
 8007928:	165e9f81 	.word	0x165e9f81

0800792c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e041      	b.n	80079c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f839 	bl	80079ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f000 f9d8 	bl	8007d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d001      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e04e      	b.n	8007a96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a23      	ldr	r2, [pc, #140]	; (8007aa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a22:	d01d      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a1f      	ldr	r2, [pc, #124]	; (8007aa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <HAL_TIM_Base_Start_IT+0xcc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a19      	ldr	r2, [pc, #100]	; (8007ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a18      	ldr	r2, [pc, #96]	; (8007abc <HAL_TIM_Base_Start_IT+0xdc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d111      	bne.n	8007a84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d010      	beq.n	8007a94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0201 	orr.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a82:	e007      	b.n	8007a94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40000400 	.word	0x40000400
 8007aac:	40000800 	.word	0x40000800
 8007ab0:	40000c00 	.word	0x40000c00
 8007ab4:	40010400 	.word	0x40010400
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40001800 	.word	0x40001800

08007ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d122      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d11b      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0202 	mvn.w	r2, #2
 8007aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f8ee 	bl	8007ce4 <HAL_TIM_IC_CaptureCallback>
 8007b08:	e005      	b.n	8007b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f8e0 	bl	8007cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f8f1 	bl	8007cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d122      	bne.n	8007b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d11b      	bne.n	8007b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0204 	mvn.w	r2, #4
 8007b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2202      	movs	r2, #2
 8007b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8c4 	bl	8007ce4 <HAL_TIM_IC_CaptureCallback>
 8007b5c:	e005      	b.n	8007b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8b6 	bl	8007cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f8c7 	bl	8007cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d122      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0208 	mvn.w	r2, #8
 8007b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2204      	movs	r2, #4
 8007b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f89a 	bl	8007ce4 <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f88c 	bl	8007cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f89d 	bl	8007cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0310 	and.w	r3, r3, #16
 8007bce:	2b10      	cmp	r3, #16
 8007bd0:	d122      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d11b      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0210 	mvn.w	r2, #16
 8007be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2208      	movs	r2, #8
 8007bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f870 	bl	8007ce4 <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f862 	bl	8007cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f873 	bl	8007cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d10e      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d107      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0201 	mvn.w	r2, #1
 8007c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7f9 fbb0 	bl	80013a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	2b80      	cmp	r3, #128	; 0x80
 8007c50:	d10e      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5c:	2b80      	cmp	r3, #128	; 0x80
 8007c5e:	d107      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f902 	bl	8007e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d10e      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c88:	2b40      	cmp	r3, #64	; 0x40
 8007c8a:	d107      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f838 	bl	8007d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d107      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0220 	mvn.w	r2, #32
 8007cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f8cc 	bl	8007e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a40      	ldr	r2, [pc, #256]	; (8007e34 <TIM_Base_SetConfig+0x114>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d013      	beq.n	8007d60 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3e:	d00f      	beq.n	8007d60 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a3d      	ldr	r2, [pc, #244]	; (8007e38 <TIM_Base_SetConfig+0x118>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00b      	beq.n	8007d60 <TIM_Base_SetConfig+0x40>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a3c      	ldr	r2, [pc, #240]	; (8007e3c <TIM_Base_SetConfig+0x11c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d007      	beq.n	8007d60 <TIM_Base_SetConfig+0x40>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a3b      	ldr	r2, [pc, #236]	; (8007e40 <TIM_Base_SetConfig+0x120>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_Base_SetConfig+0x40>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a3a      	ldr	r2, [pc, #232]	; (8007e44 <TIM_Base_SetConfig+0x124>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d108      	bne.n	8007d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2f      	ldr	r2, [pc, #188]	; (8007e34 <TIM_Base_SetConfig+0x114>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d02b      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d80:	d027      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2c      	ldr	r2, [pc, #176]	; (8007e38 <TIM_Base_SetConfig+0x118>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d023      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2b      	ldr	r2, [pc, #172]	; (8007e3c <TIM_Base_SetConfig+0x11c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01f      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <TIM_Base_SetConfig+0x120>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01b      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a29      	ldr	r2, [pc, #164]	; (8007e44 <TIM_Base_SetConfig+0x124>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d017      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a28      	ldr	r2, [pc, #160]	; (8007e48 <TIM_Base_SetConfig+0x128>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d013      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a27      	ldr	r2, [pc, #156]	; (8007e4c <TIM_Base_SetConfig+0x12c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00f      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a26      	ldr	r2, [pc, #152]	; (8007e50 <TIM_Base_SetConfig+0x130>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00b      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a25      	ldr	r2, [pc, #148]	; (8007e54 <TIM_Base_SetConfig+0x134>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d007      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a24      	ldr	r2, [pc, #144]	; (8007e58 <TIM_Base_SetConfig+0x138>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_Base_SetConfig+0xb2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a23      	ldr	r2, [pc, #140]	; (8007e5c <TIM_Base_SetConfig+0x13c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d108      	bne.n	8007de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a0a      	ldr	r2, [pc, #40]	; (8007e34 <TIM_Base_SetConfig+0x114>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_Base_SetConfig+0xf8>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <TIM_Base_SetConfig+0x124>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d103      	bne.n	8007e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	615a      	str	r2, [r3, #20]
}
 8007e26:	bf00      	nop
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40010000 	.word	0x40010000
 8007e38:	40000400 	.word	0x40000400
 8007e3c:	40000800 	.word	0x40000800
 8007e40:	40000c00 	.word	0x40000c00
 8007e44:	40010400 	.word	0x40010400
 8007e48:	40014000 	.word	0x40014000
 8007e4c:	40014400 	.word	0x40014400
 8007e50:	40014800 	.word	0x40014800
 8007e54:	40001800 	.word	0x40001800
 8007e58:	40001c00 	.word	0x40001c00
 8007e5c:	40002000 	.word	0x40002000

08007e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d123      	bne.n	8007ee2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ea2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	6851      	ldr	r1, [r2, #4]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	6892      	ldr	r2, [r2, #8]
 8007eae:	4311      	orrs	r1, r2
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	68d2      	ldr	r2, [r2, #12]
 8007eb4:	4311      	orrs	r1, r2
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	6912      	ldr	r2, [r2, #16]
 8007eba:	4311      	orrs	r1, r2
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	6952      	ldr	r2, [r2, #20]
 8007ec0:	4311      	orrs	r1, r2
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	6992      	ldr	r2, [r2, #24]
 8007ec6:	4311      	orrs	r1, r2
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	69d2      	ldr	r2, [r2, #28]
 8007ecc:	4311      	orrs	r1, r2
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	6a12      	ldr	r2, [r2, #32]
 8007ed2:	4311      	orrs	r1, r2
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	e028      	b.n	8007f34 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	69d9      	ldr	r1, [r3, #28]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	4319      	orrs	r1, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007f08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	6851      	ldr	r1, [r2, #4]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	6892      	ldr	r2, [r2, #8]
 8007f14:	4311      	orrs	r1, r2
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	68d2      	ldr	r2, [r2, #12]
 8007f1a:	4311      	orrs	r1, r2
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	6912      	ldr	r2, [r2, #16]
 8007f20:	4311      	orrs	r1, r2
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	6952      	ldr	r2, [r2, #20]
 8007f26:	4311      	orrs	r1, r2
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	6992      	ldr	r2, [r2, #24]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d128      	bne.n	8007fa6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	1e59      	subs	r1, r3, #1
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	4319      	orrs	r1, r3
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	4319      	orrs	r1, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	031b      	lsls	r3, r3, #12
 8007f7e:	4319      	orrs	r1, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	4319      	orrs	r1, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	051b      	lsls	r3, r3, #20
 8007f92:	4319      	orrs	r1, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	061b      	lsls	r3, r3, #24
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]
 8007fa4:	e02f      	b.n	8008006 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	68d2      	ldr	r2, [r2, #12]
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	0311      	lsls	r1, r2, #12
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	6952      	ldr	r2, [r2, #20]
 8007fbe:	3a01      	subs	r2, #1
 8007fc0:	0512      	lsls	r2, r2, #20
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	1e59      	subs	r1, r3, #1
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	4319      	orrs	r1, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	4319      	orrs	r1, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	4319      	orrs	r1, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	061b      	lsls	r3, r3, #24
 8007ffe:	430b      	orrs	r3, r1
 8008000:	431a      	orrs	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	0d9b      	lsrs	r3, r3, #22
 800802a:	059b      	lsls	r3, r3, #22
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	6811      	ldr	r1, [r2, #0]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	6852      	ldr	r2, [r2, #4]
 8008034:	4311      	orrs	r1, r2
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	6892      	ldr	r2, [r2, #8]
 800803a:	3a01      	subs	r2, #1
 800803c:	0152      	lsls	r2, r2, #5
 800803e:	4311      	orrs	r1, r2
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	68d2      	ldr	r2, [r2, #12]
 8008044:	0252      	lsls	r2, r2, #9
 8008046:	430a      	orrs	r2, r1
 8008048:	431a      	orrs	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800804e:	f7fb f9ef 	bl	8003430 <HAL_GetTick>
 8008052:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008054:	e010      	b.n	8008078 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	d00c      	beq.n	8008078 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d007      	beq.n	8008074 <FMC_SDRAM_SendCommand+0x60>
 8008064:	f7fb f9e4 	bl	8003430 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d201      	bcs.n	8008078 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e006      	b.n	8008086 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b20      	cmp	r3, #32
 8008082:	d0e8      	beq.n	8008056 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80080a0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	0052      	lsls	r2, r2, #1
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080bc:	b084      	sub	sp, #16
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	f107 001c 	add.w	r0, r7, #28
 80080ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d122      	bne.n	800811a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d105      	bne.n	800810e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fbee 	bl	80098f0 <USB_CoreReset>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	e01a      	b.n	8008150 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fbe2 	bl	80098f0 <USB_CoreReset>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
 8008142:	e005      	b.n	8008150 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10b      	bne.n	800816e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f043 0206 	orr.w	r2, r3, #6
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800817a:	b004      	add	sp, #16
 800817c:	4770      	bx	lr
	...

08008180 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d165      	bne.n	8008260 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a41      	ldr	r2, [pc, #260]	; (800829c <USB_SetTurnaroundTime+0x11c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d906      	bls.n	80081aa <USB_SetTurnaroundTime+0x2a>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4a40      	ldr	r2, [pc, #256]	; (80082a0 <USB_SetTurnaroundTime+0x120>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d202      	bcs.n	80081aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80081a4:	230f      	movs	r3, #15
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e062      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a3c      	ldr	r2, [pc, #240]	; (80082a0 <USB_SetTurnaroundTime+0x120>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d306      	bcc.n	80081c0 <USB_SetTurnaroundTime+0x40>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a3b      	ldr	r2, [pc, #236]	; (80082a4 <USB_SetTurnaroundTime+0x124>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d202      	bcs.n	80081c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081ba:	230e      	movs	r3, #14
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e057      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a38      	ldr	r2, [pc, #224]	; (80082a4 <USB_SetTurnaroundTime+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d306      	bcc.n	80081d6 <USB_SetTurnaroundTime+0x56>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a37      	ldr	r2, [pc, #220]	; (80082a8 <USB_SetTurnaroundTime+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d202      	bcs.n	80081d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081d0:	230d      	movs	r3, #13
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e04c      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a33      	ldr	r2, [pc, #204]	; (80082a8 <USB_SetTurnaroundTime+0x128>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d306      	bcc.n	80081ec <USB_SetTurnaroundTime+0x6c>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4a32      	ldr	r2, [pc, #200]	; (80082ac <USB_SetTurnaroundTime+0x12c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d802      	bhi.n	80081ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081e6:	230c      	movs	r3, #12
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e041      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a2f      	ldr	r2, [pc, #188]	; (80082ac <USB_SetTurnaroundTime+0x12c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d906      	bls.n	8008202 <USB_SetTurnaroundTime+0x82>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4a2e      	ldr	r2, [pc, #184]	; (80082b0 <USB_SetTurnaroundTime+0x130>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d802      	bhi.n	8008202 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081fc:	230b      	movs	r3, #11
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e036      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4a2a      	ldr	r2, [pc, #168]	; (80082b0 <USB_SetTurnaroundTime+0x130>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d906      	bls.n	8008218 <USB_SetTurnaroundTime+0x98>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	4a29      	ldr	r2, [pc, #164]	; (80082b4 <USB_SetTurnaroundTime+0x134>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d802      	bhi.n	8008218 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008212:	230a      	movs	r3, #10
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e02b      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4a26      	ldr	r2, [pc, #152]	; (80082b4 <USB_SetTurnaroundTime+0x134>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d906      	bls.n	800822e <USB_SetTurnaroundTime+0xae>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4a25      	ldr	r2, [pc, #148]	; (80082b8 <USB_SetTurnaroundTime+0x138>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d202      	bcs.n	800822e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008228:	2309      	movs	r3, #9
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	e020      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4a21      	ldr	r2, [pc, #132]	; (80082b8 <USB_SetTurnaroundTime+0x138>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d306      	bcc.n	8008244 <USB_SetTurnaroundTime+0xc4>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	4a20      	ldr	r2, [pc, #128]	; (80082bc <USB_SetTurnaroundTime+0x13c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d802      	bhi.n	8008244 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800823e:	2308      	movs	r3, #8
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	e015      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <USB_SetTurnaroundTime+0x13c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d906      	bls.n	800825a <USB_SetTurnaroundTime+0xda>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <USB_SetTurnaroundTime+0x140>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d202      	bcs.n	800825a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008254:	2307      	movs	r3, #7
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e00a      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800825a:	2306      	movs	r3, #6
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e007      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008266:	2309      	movs	r3, #9
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e001      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800826c:	2309      	movs	r3, #9
 800826e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	029b      	lsls	r3, r3, #10
 8008284:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008288:	431a      	orrs	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	00d8acbf 	.word	0x00d8acbf
 80082a0:	00e4e1c0 	.word	0x00e4e1c0
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	01067380 	.word	0x01067380
 80082ac:	011a499f 	.word	0x011a499f
 80082b0:	01312cff 	.word	0x01312cff
 80082b4:	014ca43f 	.word	0x014ca43f
 80082b8:	016e3600 	.word	0x016e3600
 80082bc:	01a6ab1f 	.word	0x01a6ab1f
 80082c0:	01e84800 	.word	0x01e84800

080082c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f043 0201 	orr.w	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f023 0201 	bic.w	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d115      	bne.n	8008356 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008336:	2001      	movs	r0, #1
 8008338:	f7fb f886 	bl	8003448 <HAL_Delay>
      ms++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fa45 	bl	80097d2 <USB_GetMode>
 8008348:	4603      	mov	r3, r0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d01e      	beq.n	800838c <USB_SetCurrentMode+0x84>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b31      	cmp	r3, #49	; 0x31
 8008352:	d9f0      	bls.n	8008336 <USB_SetCurrentMode+0x2e>
 8008354:	e01a      	b.n	800838c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d115      	bne.n	8008388 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008368:	2001      	movs	r0, #1
 800836a:	f7fb f86d 	bl	8003448 <HAL_Delay>
      ms++;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fa2c 	bl	80097d2 <USB_GetMode>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <USB_SetCurrentMode+0x84>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b31      	cmp	r3, #49	; 0x31
 8008384:	d9f0      	bls.n	8008368 <USB_SetCurrentMode+0x60>
 8008386:	e001      	b.n	800838c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e005      	b.n	8008398 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b32      	cmp	r3, #50	; 0x32
 8008390:	d101      	bne.n	8008396 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083a0:	b084      	sub	sp, #16
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80083ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083ba:	2300      	movs	r3, #0
 80083bc:	613b      	str	r3, [r7, #16]
 80083be:	e009      	b.n	80083d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3340      	adds	r3, #64	; 0x40
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	2200      	movs	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	3301      	adds	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b0e      	cmp	r3, #14
 80083d8:	d9f2      	bls.n	80083c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d11c      	bne.n	800841a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ee:	f043 0302 	orr.w	r3, r3, #2
 80083f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	639a      	str	r2, [r3, #56]	; 0x38
 8008418:	e00b      	b.n	8008432 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008438:	461a      	mov	r2, r3
 800843a:	2300      	movs	r3, #0
 800843c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008444:	4619      	mov	r1, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844c:	461a      	mov	r2, r3
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	2b01      	cmp	r3, #1
 8008456:	d10c      	bne.n	8008472 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d104      	bne.n	8008468 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800845e:	2100      	movs	r1, #0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f965 	bl	8008730 <USB_SetDevSpeed>
 8008466:	e008      	b.n	800847a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008468:	2101      	movs	r1, #1
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f960 	bl	8008730 <USB_SetDevSpeed>
 8008470:	e003      	b.n	800847a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008472:	2103      	movs	r1, #3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f95b 	bl	8008730 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800847a:	2110      	movs	r1, #16
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8f3 	bl	8008668 <USB_FlushTxFifo>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f91f 	bl	80086d0 <USB_FlushRxFifo>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a2:	461a      	mov	r2, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ae:	461a      	mov	r2, r3
 80084b0:	2300      	movs	r3, #0
 80084b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	461a      	mov	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	e043      	b.n	800854e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084dc:	d118      	bne.n	8008510 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	461a      	mov	r2, r3
 80084f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	e013      	b.n	8008522 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008506:	461a      	mov	r2, r3
 8008508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	e008      	b.n	8008522 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	461a      	mov	r2, r3
 800851e:	2300      	movs	r3, #0
 8008520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852e:	461a      	mov	r2, r3
 8008530:	2300      	movs	r3, #0
 8008532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008540:	461a      	mov	r2, r3
 8008542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	3301      	adds	r3, #1
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	429a      	cmp	r2, r3
 8008554:	d3b7      	bcc.n	80084c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	e043      	b.n	80085e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800856e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008572:	d118      	bne.n	80085a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	461a      	mov	r2, r3
 8008588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e013      	b.n	80085b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859c:	461a      	mov	r2, r3
 800859e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	e008      	b.n	80085b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	461a      	mov	r2, r3
 80085b4:	2300      	movs	r3, #0
 80085b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c4:	461a      	mov	r2, r3
 80085c6:	2300      	movs	r3, #0
 80085c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d6:	461a      	mov	r2, r3
 80085d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3301      	adds	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3b7      	bcc.n	800855c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800860c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	f043 0210 	orr.w	r2, r3, #16
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699a      	ldr	r2, [r3, #24]
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <USB_DevInit+0x2c4>)
 8008626:	4313      	orrs	r3, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800862c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f043 0208 	orr.w	r2, r3, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800863e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008640:	2b01      	cmp	r3, #1
 8008642:	d107      	bne.n	8008654 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800864c:	f043 0304 	orr.w	r3, r3, #4
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008654:	7dfb      	ldrb	r3, [r7, #23]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008660:	b004      	add	sp, #16
 8008662:	4770      	bx	lr
 8008664:	803c3800 	.word	0x803c3800

08008668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a13      	ldr	r2, [pc, #76]	; (80086cc <USB_FlushTxFifo+0x64>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d901      	bls.n	8008688 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e01b      	b.n	80086c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	daf2      	bge.n	8008676 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	019b      	lsls	r3, r3, #6
 8008698:	f043 0220 	orr.w	r2, r3, #32
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3301      	adds	r3, #1
 80086a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a08      	ldr	r2, [pc, #32]	; (80086cc <USB_FlushTxFifo+0x64>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d901      	bls.n	80086b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e006      	b.n	80086c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d0f0      	beq.n	80086a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	00030d40 	.word	0x00030d40

080086d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a11      	ldr	r2, [pc, #68]	; (800872c <USB_FlushRxFifo+0x5c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e018      	b.n	8008720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	daf2      	bge.n	80086dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2210      	movs	r2, #16
 80086fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4a08      	ldr	r2, [pc, #32]	; (800872c <USB_FlushRxFifo+0x5c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d901      	bls.n	8008712 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e006      	b.n	8008720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b10      	cmp	r3, #16
 800871c:	d0f0      	beq.n	8008700 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	00030d40 	.word	0x00030d40

08008730 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008750:	4313      	orrs	r3, r2
 8008752:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008762:	b480      	push	{r7}
 8008764:	b087      	sub	sp, #28
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0306 	and.w	r3, r3, #6
 800877a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008782:	2300      	movs	r3, #0
 8008784:	75fb      	strb	r3, [r7, #23]
 8008786:	e00a      	b.n	800879e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d002      	beq.n	8008794 <USB_GetDevSpeed+0x32>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b06      	cmp	r3, #6
 8008792:	d102      	bne.n	800879a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008794:	2302      	movs	r3, #2
 8008796:	75fb      	strb	r3, [r7, #23]
 8008798:	e001      	b.n	800879e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800879a:	230f      	movs	r3, #15
 800879c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	371c      	adds	r7, #28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d13a      	bne.n	800883e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	2101      	movs	r1, #1
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	b29b      	uxth	r3, r3
 80087e0:	68f9      	ldr	r1, [r7, #12]
 80087e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d155      	bne.n	80088ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	791b      	ldrb	r3, [r3, #4]
 800881a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800881c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	059b      	lsls	r3, r3, #22
 8008822:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008824:	4313      	orrs	r3, r2
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	e036      	b.n	80088ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	2101      	movs	r1, #1
 8008850:	fa01 f303 	lsl.w	r3, r1, r3
 8008854:	041b      	lsls	r3, r3, #16
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800885c:	4313      	orrs	r3, r2
 800885e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d11a      	bne.n	80088ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	791b      	ldrb	r3, [r3, #4]
 8008890:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008892:	430b      	orrs	r3, r1
 8008894:	4313      	orrs	r3, r2
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
	...

080088bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d161      	bne.n	800899c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ee:	d11f      	bne.n	8008930 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	0151      	lsls	r1, r2, #5
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	440a      	add	r2, r1
 8008906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800890a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800890e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	440a      	add	r2, r1
 8008926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800892a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800892e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	2101      	movs	r1, #1
 8008942:	fa01 f303 	lsl.w	r3, r1, r3
 8008946:	b29b      	uxth	r3, r3
 8008948:	43db      	mvns	r3, r3
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008950:	4013      	ands	r3, r2
 8008952:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895a:	69da      	ldr	r2, [r3, #28]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	2101      	movs	r1, #1
 8008966:	fa01 f303 	lsl.w	r3, r1, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	43db      	mvns	r3, r3
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008974:	4013      	ands	r3, r2
 8008976:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	0159      	lsls	r1, r3, #5
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	440b      	add	r3, r1
 800898e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008992:	4619      	mov	r1, r3
 8008994:	4b35      	ldr	r3, [pc, #212]	; (8008a6c <USB_DeactivateEndpoint+0x1b0>)
 8008996:	4013      	ands	r3, r2
 8008998:	600b      	str	r3, [r1, #0]
 800899a:	e060      	b.n	8008a5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089b2:	d11f      	bne.n	80089f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	2101      	movs	r1, #1
 8008a06:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	68f9      	ldr	r1, [r7, #12]
 8008a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a14:	4013      	ands	r3, r2
 8008a16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	2101      	movs	r1, #1
 8008a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2e:	041b      	lsls	r3, r3, #16
 8008a30:	43db      	mvns	r3, r3
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a38:	4013      	ands	r3, r2
 8008a3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	0159      	lsls	r1, r3, #5
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	440b      	add	r3, r1
 8008a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a56:	4619      	mov	r1, r3
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <USB_DeactivateEndpoint+0x1b4>)
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	ec337800 	.word	0xec337800
 8008a70:	eff37800 	.word	0xeff37800

08008a74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08a      	sub	sp, #40	; 0x28
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	f040 815c 	bne.w	8008d4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d132      	bne.n	8008b04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008abc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ac0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	0151      	lsls	r1, r2, #5
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	440a      	add	r2, r1
 8008ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008afc:	0cdb      	lsrs	r3, r3, #19
 8008afe:	04db      	lsls	r3, r3, #19
 8008b00:	6113      	str	r3, [r2, #16]
 8008b02:	e074      	b.n	8008bee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b1e:	0cdb      	lsrs	r3, r3, #19
 8008b20:	04db      	lsls	r3, r3, #19
 8008b22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6999      	ldr	r1, [r3, #24]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	440b      	add	r3, r1
 8008b60:	1e59      	subs	r1, r3, #1
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b6c:	4b9d      	ldr	r3, [pc, #628]	; (8008de4 <USB_EPStartXfer+0x370>)
 8008b6e:	400b      	ands	r3, r1
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	0148      	lsls	r0, r1, #5
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	4401      	add	r1, r0
 8008b78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8c:	691a      	ldr	r2, [r3, #16]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b96:	69b9      	ldr	r1, [r7, #24]
 8008b98:	0148      	lsls	r0, r1, #5
 8008b9a:	69f9      	ldr	r1, [r7, #28]
 8008b9c:	4401      	add	r1, r0
 8008b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	791b      	ldrb	r3, [r3, #4]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d11f      	bne.n	8008bee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008bcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d14b      	bne.n	8008c8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c08:	461a      	mov	r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	791b      	ldrb	r3, [r3, #4]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d128      	bne.n	8008c6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d110      	bne.n	8008c4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	e00f      	b.n	8008c6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	0151      	lsls	r1, r2, #5
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	440a      	add	r2, r1
 8008c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	e133      	b.n	8008ef4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008caa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	791b      	ldrb	r3, [r3, #4]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d015      	beq.n	8008ce0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 811b 	beq.w	8008ef4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	2101      	movs	r1, #1
 8008cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd4:	69f9      	ldr	r1, [r7, #28]
 8008cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	634b      	str	r3, [r1, #52]	; 0x34
 8008cde:	e109      	b.n	8008ef4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d110      	bne.n	8008d12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	e00f      	b.n	8008d32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	0151      	lsls	r1, r2, #5
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	440a      	add	r2, r1
 8008d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6919      	ldr	r1, [r3, #16]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	b298      	uxth	r0, r3
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	4603      	mov	r3, r0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fade 	bl	8009308 <USB_WritePacket>
 8008d4c:	e0d2      	b.n	8008ef4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	0151      	lsls	r1, r2, #5
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	440a      	add	r2, r1
 8008d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d68:	0cdb      	lsrs	r3, r3, #19
 8008d6a:	04db      	lsls	r3, r3, #19
 8008d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d126      	bne.n	8008de8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db0:	69b9      	ldr	r1, [r7, #24]
 8008db2:	0148      	lsls	r0, r1, #5
 8008db4:	69f9      	ldr	r1, [r7, #28]
 8008db6:	4401      	add	r1, r0
 8008db8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	0151      	lsls	r1, r2, #5
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	440a      	add	r2, r1
 8008dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dde:	6113      	str	r3, [r2, #16]
 8008de0:	e03a      	b.n	8008e58 <USB_EPStartXfer+0x3e4>
 8008de2:	bf00      	nop
 8008de4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	4413      	add	r3, r2
 8008df2:	1e5a      	subs	r2, r3, #1
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	8afa      	ldrh	r2, [r7, #22]
 8008e04:	fb03 f202 	mul.w	r2, r3, r2
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e18:	691a      	ldr	r2, [r3, #16]
 8008e1a:	8afb      	ldrh	r3, [r7, #22]
 8008e1c:	04d9      	lsls	r1, r3, #19
 8008e1e:	4b38      	ldr	r3, [pc, #224]	; (8008f00 <USB_EPStartXfer+0x48c>)
 8008e20:	400b      	ands	r3, r1
 8008e22:	69b9      	ldr	r1, [r7, #24]
 8008e24:	0148      	lsls	r0, r1, #5
 8008e26:	69f9      	ldr	r1, [r7, #28]
 8008e28:	4401      	add	r1, r0
 8008e2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3e:	691a      	ldr	r2, [r3, #16]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e48:	69b9      	ldr	r1, [r7, #24]
 8008e4a:	0148      	lsls	r0, r1, #5
 8008e4c:	69f9      	ldr	r1, [r7, #28]
 8008e4e:	4401      	add	r1, r0
 8008e50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e54:	4313      	orrs	r3, r2
 8008e56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d10d      	bne.n	8008e7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6919      	ldr	r1, [r3, #16]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e76:	460a      	mov	r2, r1
 8008e78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	791b      	ldrb	r3, [r3, #4]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d128      	bne.n	8008ed4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d110      	bne.n	8008eb4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e00f      	b.n	8008ed4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	1ff80000 	.word	0x1ff80000

08008f04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	785b      	ldrb	r3, [r3, #1]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	f040 80ce 	bne.w	80090c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d132      	bne.n	8008f94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f8c:	0cdb      	lsrs	r3, r3, #19
 8008f8e:	04db      	lsls	r3, r3, #19
 8008f90:	6113      	str	r3, [r2, #16]
 8008f92:	e04e      	b.n	8009032 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fae:	0cdb      	lsrs	r3, r3, #19
 8008fb0:	04db      	lsls	r3, r3, #19
 8008fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	699a      	ldr	r2, [r3, #24]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d903      	bls.n	8008fec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	0151      	lsls	r1, r2, #5
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	440a      	add	r2, r1
 8009002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800900a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	691a      	ldr	r2, [r3, #16]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009022:	6939      	ldr	r1, [r7, #16]
 8009024:	0148      	lsls	r0, r1, #5
 8009026:	6979      	ldr	r1, [r7, #20]
 8009028:	4401      	add	r1, r0
 800902a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800902e:	4313      	orrs	r3, r2
 8009030:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d11e      	bne.n	8009076 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904c:	461a      	mov	r2, r3
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	440a      	add	r2, r1
 800906a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800906e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	e097      	b.n	80091a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009090:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009094:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8083 	beq.w	80091a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	2101      	movs	r1, #1
 80090b2:	fa01 f303 	lsl.w	r3, r1, r3
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090bc:	4313      	orrs	r3, r2
 80090be:	634b      	str	r3, [r1, #52]	; 0x34
 80090c0:	e071      	b.n	80091a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090dc:	0cdb      	lsrs	r3, r3, #19
 80090de:	04db      	lsls	r3, r3, #19
 80090e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	0151      	lsls	r1, r2, #5
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	440a      	add	r2, r1
 80090f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009104:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800913c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009154:	6939      	ldr	r1, [r7, #16]
 8009156:	0148      	lsls	r0, r1, #5
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	4401      	add	r1, r0
 800915c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009160:	4313      	orrs	r3, r2
 8009162:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d10d      	bne.n	8009186 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d009      	beq.n	8009186 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6919      	ldr	r1, [r3, #16]
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009182:	460a      	mov	r2, r1
 8009184:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d14a      	bne.n	8009268 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ea:	f040 8086 	bne.w	80092fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	440a      	add	r2, r1
 8009208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800920c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009210:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	7812      	ldrb	r2, [r2, #0]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009234:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009242:	4293      	cmp	r3, r2
 8009244:	d902      	bls.n	800924c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	75fb      	strb	r3, [r7, #23]
          break;
 800924a:	e056      	b.n	80092fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009264:	d0e7      	beq.n	8009236 <USB_EPStopXfer+0x82>
 8009266:	e048      	b.n	80092fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800927c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009280:	d13b      	bne.n	80092fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	0151      	lsls	r1, r2, #5
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	440a      	add	r2, r1
 800929c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	7812      	ldrb	r2, [r2, #0]
 80092ba:	0151      	lsls	r1, r2, #5
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	440a      	add	r2, r1
 80092c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d902      	bls.n	80092e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	75fb      	strb	r3, [r7, #23]
          break;
 80092de:	e00c      	b.n	80092fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092f8:	d0e7      	beq.n	80092ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009308:	b480      	push	{r7}
 800930a:	b089      	sub	sp, #36	; 0x24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4611      	mov	r1, r2
 8009314:	461a      	mov	r2, r3
 8009316:	460b      	mov	r3, r1
 8009318:	71fb      	strb	r3, [r7, #7]
 800931a:	4613      	mov	r3, r2
 800931c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800932a:	2b00      	cmp	r3, #0
 800932c:	d123      	bne.n	8009376 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800932e:	88bb      	ldrh	r3, [r7, #4]
 8009330:	3303      	adds	r3, #3
 8009332:	089b      	lsrs	r3, r3, #2
 8009334:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009336:	2300      	movs	r3, #0
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	e018      	b.n	800936e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	031a      	lsls	r2, r3, #12
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	4413      	add	r3, r2
 8009344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009348:	461a      	mov	r2, r3
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	3301      	adds	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3301      	adds	r3, #1
 800935a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	3301      	adds	r3, #1
 8009360:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3301      	adds	r3, #1
 8009366:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	3301      	adds	r3, #1
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	429a      	cmp	r2, r3
 8009374:	d3e2      	bcc.n	800933c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3724      	adds	r7, #36	; 0x24
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009384:	b480      	push	{r7}
 8009386:	b08b      	sub	sp, #44	; 0x2c
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	089b      	lsrs	r3, r3, #2
 800939e:	b29b      	uxth	r3, r3
 80093a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	623b      	str	r3, [r7, #32]
 80093ae:	e014      	b.n	80093da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	3301      	adds	r3, #1
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	3301      	adds	r3, #1
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	3301      	adds	r3, #1
 80093cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	3301      	adds	r3, #1
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	3301      	adds	r3, #1
 80093d8:	623b      	str	r3, [r7, #32]
 80093da:	6a3a      	ldr	r2, [r7, #32]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3e6      	bcc.n	80093b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093e2:	8bfb      	ldrh	r3, [r7, #30]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01e      	beq.n	8009426 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f2:	461a      	mov	r2, r3
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	fa22 f303 	lsr.w	r3, r2, r3
 8009408:	b2da      	uxtb	r2, r3
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	701a      	strb	r2, [r3, #0]
      i++;
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	3301      	adds	r3, #1
 8009412:	623b      	str	r3, [r7, #32]
      pDest++;
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	3301      	adds	r3, #1
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800941a:	8bfb      	ldrh	r3, [r7, #30]
 800941c:	3b01      	subs	r3, #1
 800941e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009420:	8bfb      	ldrh	r3, [r7, #30]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1ea      	bne.n	80093fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009428:	4618      	mov	r0, r3
 800942a:	372c      	adds	r7, #44	; 0x2c
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d12c      	bne.n	80094aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	db12      	blt.n	8009488 <USB_EPSetStall+0x54>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	0151      	lsls	r1, r2, #5
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	440a      	add	r2, r1
 800947e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009482:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009486:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	440a      	add	r2, r1
 800949e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	e02b      	b.n	8009502 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db12      	blt.n	80094e2 <USB_EPSetStall+0xae>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00f      	beq.n	80094e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009500:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d128      	bne.n	800957e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4413      	add	r3, r2
 8009534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	0151      	lsls	r1, r2, #5
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	440a      	add	r2, r1
 8009542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800954a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	791b      	ldrb	r3, [r3, #4]
 8009550:	2b03      	cmp	r3, #3
 8009552:	d003      	beq.n	800955c <USB_EPClearStall+0x4c>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	791b      	ldrb	r3, [r3, #4]
 8009558:	2b02      	cmp	r3, #2
 800955a:	d138      	bne.n	80095ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	440a      	add	r2, r1
 8009572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	e027      	b.n	80095ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009598:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800959c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	791b      	ldrb	r3, [r3, #4]
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d003      	beq.n	80095ae <USB_EPClearStall+0x9e>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	791b      	ldrb	r3, [r3, #4]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d10f      	bne.n	80095ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80095fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009610:	68f9      	ldr	r1, [r7, #12]
 8009612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009616:	4313      	orrs	r3, r2
 8009618:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009656:	f023 0302 	bic.w	r3, r3, #2
 800965a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800966a:	b480      	push	{r7}
 800966c:	b085      	sub	sp, #20
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009684:	f023 0303 	bic.w	r3, r3, #3
 8009688:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009698:	f043 0302 	orr.w	r3, r3, #2
 800969c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4013      	ands	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096c4:	68fb      	ldr	r3, [r7, #12]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	4013      	ands	r3, r2
 80096f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	0c1b      	lsrs	r3, r3, #16
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009706:	b480      	push	{r7}
 8009708:	b085      	sub	sp, #20
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4013      	ands	r3, r2
 8009728:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	b29b      	uxth	r3, r3
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800973a:	b480      	push	{r7}
 800973c:	b085      	sub	sp, #20
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	4013      	ands	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009768:	68bb      	ldr	r3, [r7, #8]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009776:	b480      	push	{r7}
 8009778:	b087      	sub	sp, #28
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009798:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	fa22 f303 	lsr.w	r3, r2, r3
 80097a6:	01db      	lsls	r3, r3, #7
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	4013      	ands	r3, r2
 80097c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097c4:	68bb      	ldr	r3, [r7, #8]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f003 0301 	and.w	r3, r3, #1
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009808:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800980c:	f023 0307 	bic.w	r3, r3, #7
 8009810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	460b      	mov	r3, r1
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	333c      	adds	r3, #60	; 0x3c
 800984a:	3304      	adds	r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	4a26      	ldr	r2, [pc, #152]	; (80098ec <USB_EP0_OutStart+0xb8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d90a      	bls.n	800986e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009868:	d101      	bne.n	800986e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	e037      	b.n	80098de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009874:	461a      	mov	r2, r3
 8009876:	2300      	movs	r3, #0
 8009878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800988c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800989c:	f043 0318 	orr.w	r3, r3, #24
 80098a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80098b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d10f      	bne.n	80098dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c2:	461a      	mov	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80098da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	4f54300a 	.word	0x4f54300a

080098f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a13      	ldr	r2, [pc, #76]	; (8009954 <USB_CoreReset+0x64>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d901      	bls.n	800990e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e01b      	b.n	8009946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	daf2      	bge.n	80098fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f043 0201 	orr.w	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4a09      	ldr	r2, [pc, #36]	; (8009954 <USB_CoreReset+0x64>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d901      	bls.n	8009938 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e006      	b.n	8009946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b01      	cmp	r3, #1
 8009942:	d0f0      	beq.n	8009926 <USB_CoreReset+0x36>

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	00030d40 	.word	0x00030d40

08009958 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800996a:	2b84      	cmp	r3, #132	; 0x84
 800996c:	d005      	beq.n	800997a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800996e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4413      	add	r3, r2
 8009976:	3303      	adds	r3, #3
 8009978:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800997a:	68fb      	ldr	r3, [r7, #12]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800998c:	f000 fedc 	bl	800a748 <vTaskStartScheduler>
  
  return osOK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	bd80      	pop	{r7, pc}

08009996 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009998:	b089      	sub	sp, #36	; 0x24
 800999a:	af04      	add	r7, sp, #16
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d020      	beq.n	80099ea <osThreadCreate+0x54>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01c      	beq.n	80099ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685c      	ldr	r4, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681d      	ldr	r5, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691e      	ldr	r6, [r3, #16]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff ffc8 	bl	8009958 <makeFreeRtosPriority>
 80099c8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099d2:	9202      	str	r2, [sp, #8]
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	9100      	str	r1, [sp, #0]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	4632      	mov	r2, r6
 80099dc:	4629      	mov	r1, r5
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 fcea 	bl	800a3b8 <xTaskCreateStatic>
 80099e4:	4603      	mov	r3, r0
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	e01c      	b.n	8009a24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685c      	ldr	r4, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099f6:	b29e      	uxth	r6, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff ffaa 	bl	8009958 <makeFreeRtosPriority>
 8009a04:	4602      	mov	r2, r0
 8009a06:	f107 030c 	add.w	r3, r7, #12
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	9200      	str	r2, [sp, #0]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	4632      	mov	r2, r6
 8009a12:	4629      	mov	r1, r5
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 fd2c 	bl	800a472 <xTaskCreate>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d001      	beq.n	8009a24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	e000      	b.n	8009a26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a24:	68fb      	ldr	r3, [r7, #12]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <osDelay+0x16>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	e000      	b.n	8009a46 <osDelay+0x18>
 8009a44:	2301      	movs	r3, #1
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fe4a 	bl	800a6e0 <vTaskDelay>
  
  return osOK;
 8009a4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08a      	sub	sp, #40	; 0x28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a64:	f000 fed0 	bl	800a808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a68:	4b5b      	ldr	r3, [pc, #364]	; (8009bd8 <pvPortMalloc+0x180>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a70:	f000 f920 	bl	8009cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a74:	4b59      	ldr	r3, [pc, #356]	; (8009bdc <pvPortMalloc+0x184>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 8093 	bne.w	8009ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01d      	beq.n	8009ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a88:	2208      	movs	r2, #8
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d014      	beq.n	8009ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f023 0307 	bic.w	r3, r3, #7
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d06e      	beq.n	8009ba8 <pvPortMalloc+0x150>
 8009aca:	4b45      	ldr	r3, [pc, #276]	; (8009be0 <pvPortMalloc+0x188>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d869      	bhi.n	8009ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ad4:	4b43      	ldr	r3, [pc, #268]	; (8009be4 <pvPortMalloc+0x18c>)
 8009ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ad8:	4b42      	ldr	r3, [pc, #264]	; (8009be4 <pvPortMalloc+0x18c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ade:	e004      	b.n	8009aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d903      	bls.n	8009afc <pvPortMalloc+0xa4>
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f1      	bne.n	8009ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009afc:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <pvPortMalloc+0x180>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d050      	beq.n	8009ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2208      	movs	r2, #8
 8009b0c:	4413      	add	r3, r2
 8009b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	2308      	movs	r3, #8
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d91f      	bls.n	8009b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <pvPortMalloc+0xf8>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	613b      	str	r3, [r7, #16]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b62:	69b8      	ldr	r0, [r7, #24]
 8009b64:	f000 f908 	bl	8009d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b68:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <pvPortMalloc+0x188>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <pvPortMalloc+0x188>)
 8009b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b76:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <pvPortMalloc+0x188>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <pvPortMalloc+0x190>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d203      	bcs.n	8009b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b82:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <pvPortMalloc+0x188>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <pvPortMalloc+0x190>)
 8009b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <pvPortMalloc+0x184>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	431a      	orrs	r2, r3
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <pvPortMalloc+0x194>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	4a11      	ldr	r2, [pc, #68]	; (8009bec <pvPortMalloc+0x194>)
 8009ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ba8:	f000 fe3c 	bl	800a824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <pvPortMalloc+0x174>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	60fb      	str	r3, [r7, #12]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <pvPortMalloc+0x172>
	return pvReturn;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3728      	adds	r7, #40	; 0x28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20004574 	.word	0x20004574
 8009bdc:	20004588 	.word	0x20004588
 8009be0:	20004578 	.word	0x20004578
 8009be4:	2000456c 	.word	0x2000456c
 8009be8:	2000457c 	.word	0x2000457c
 8009bec:	20004580 	.word	0x20004580

08009bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d04d      	beq.n	8009c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c02:	2308      	movs	r3, #8
 8009c04:	425b      	negs	r3, r3
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4413      	add	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <vPortFree+0xb8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4013      	ands	r3, r2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <vPortFree+0x44>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60fb      	str	r3, [r7, #12]
}
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <vPortFree+0x62>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	60bb      	str	r3, [r7, #8]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <vPortFree+0xb8>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01e      	beq.n	8009c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d11a      	bne.n	8009c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ca8 <vPortFree+0xb8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	43db      	mvns	r3, r3
 8009c72:	401a      	ands	r2, r3
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c78:	f000 fdc6 	bl	800a808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <vPortFree+0xbc>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4413      	add	r3, r2
 8009c86:	4a09      	ldr	r2, [pc, #36]	; (8009cac <vPortFree+0xbc>)
 8009c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c8a:	6938      	ldr	r0, [r7, #16]
 8009c8c:	f000 f874 	bl	8009d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c90:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <vPortFree+0xc0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3301      	adds	r3, #1
 8009c96:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <vPortFree+0xc0>)
 8009c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c9a:	f000 fdc3 	bl	800a824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c9e:	bf00      	nop
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20004588 	.word	0x20004588
 8009cac:	20004578 	.word	0x20004578
 8009cb0:	20004584 	.word	0x20004584

08009cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cc0:	4b27      	ldr	r3, [pc, #156]	; (8009d60 <prvHeapInit+0xac>)
 8009cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00c      	beq.n	8009ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3307      	adds	r3, #7
 8009cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0307 	bic.w	r3, r3, #7
 8009cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <prvHeapInit+0xac>)
 8009ce4:	4413      	add	r3, r2
 8009ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cec:	4a1d      	ldr	r2, [pc, #116]	; (8009d64 <prvHeapInit+0xb0>)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <prvHeapInit+0xb0>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d00:	2208      	movs	r2, #8
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0307 	bic.w	r3, r3, #7
 8009d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <prvHeapInit+0xb4>)
 8009d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <prvHeapInit+0xb4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d1e:	4b12      	ldr	r3, [pc, #72]	; (8009d68 <prvHeapInit+0xb4>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvHeapInit+0xb4>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4a0a      	ldr	r2, [pc, #40]	; (8009d6c <prvHeapInit+0xb8>)
 8009d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <prvHeapInit+0xbc>)
 8009d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d4c:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <prvHeapInit+0xc0>)
 8009d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	2000096c 	.word	0x2000096c
 8009d64:	2000456c 	.word	0x2000456c
 8009d68:	20004574 	.word	0x20004574
 8009d6c:	2000457c 	.word	0x2000457c
 8009d70:	20004578 	.word	0x20004578
 8009d74:	20004588 	.word	0x20004588

08009d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d80:	4b28      	ldr	r3, [pc, #160]	; (8009e24 <prvInsertBlockIntoFreeList+0xac>)
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	e002      	b.n	8009d8c <prvInsertBlockIntoFreeList+0x14>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d8f7      	bhi.n	8009d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d108      	bne.n	8009dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	441a      	add	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	441a      	add	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d118      	bne.n	8009e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <prvInsertBlockIntoFreeList+0xb0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d00d      	beq.n	8009df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	441a      	add	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e008      	b.n	8009e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <prvInsertBlockIntoFreeList+0xb0>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	e003      	b.n	8009e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d002      	beq.n	8009e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e16:	bf00      	nop
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	2000456c 	.word	0x2000456c
 8009e28:	20004574 	.word	0x20004574

08009e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f103 0208 	add.w	r2, r3, #8
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f103 0208 	add.w	r2, r3, #8
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f103 0208 	add.w	r2, r3, #8
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e7a:	bf00      	nop
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	601a      	str	r2, [r3, #0]
}
 8009ec2:	bf00      	nop
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d103      	bne.n	8009eee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	e00c      	b.n	8009f08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	e002      	b.n	8009efc <vListInsert+0x2e>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d2f6      	bcs.n	8009ef6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	601a      	str	r2, [r3, #0]
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6892      	ldr	r2, [r2, #8]
 8009f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6852      	ldr	r2, [r2, #4]
 8009f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d103      	bne.n	8009f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	1e5a      	subs	r2, r3, #1
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3b04      	subs	r3, #4
 8009fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3b04      	subs	r3, #4
 8009fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f023 0201 	bic.w	r2, r3, #1
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3b04      	subs	r3, #4
 8009fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fc4:	4a0c      	ldr	r2, [pc, #48]	; (8009ff8 <pxPortInitialiseStack+0x64>)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3b14      	subs	r3, #20
 8009fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3b04      	subs	r3, #4
 8009fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f06f 0202 	mvn.w	r2, #2
 8009fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3b20      	subs	r3, #32
 8009fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fea:	68fb      	ldr	r3, [r7, #12]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	08009ffd 	.word	0x08009ffd

08009ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a006:	4b12      	ldr	r3, [pc, #72]	; (800a050 <prvTaskExitError+0x54>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00e:	d00a      	beq.n	800a026 <prvTaskExitError+0x2a>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	60fb      	str	r3, [r7, #12]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <prvTaskExitError+0x28>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60bb      	str	r3, [r7, #8]
}
 800a038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a03a:	bf00      	nop
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0fc      	beq.n	800a03c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a042:	bf00      	nop
 800a044:	bf00      	nop
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	200000b8 	.word	0x200000b8
	...

0800a060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a060:	4b07      	ldr	r3, [pc, #28]	; (800a080 <pxCurrentTCBConst2>)
 800a062:	6819      	ldr	r1, [r3, #0]
 800a064:	6808      	ldr	r0, [r1, #0]
 800a066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06a:	f380 8809 	msr	PSP, r0
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f04f 0000 	mov.w	r0, #0
 800a076:	f380 8811 	msr	BASEPRI, r0
 800a07a:	4770      	bx	lr
 800a07c:	f3af 8000 	nop.w

0800a080 <pxCurrentTCBConst2>:
 800a080:	20004594 	.word	0x20004594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop

0800a088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a088:	4808      	ldr	r0, [pc, #32]	; (800a0ac <prvPortStartFirstTask+0x24>)
 800a08a:	6800      	ldr	r0, [r0, #0]
 800a08c:	6800      	ldr	r0, [r0, #0]
 800a08e:	f380 8808 	msr	MSP, r0
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f380 8814 	msr	CONTROL, r0
 800a09a:	b662      	cpsie	i
 800a09c:	b661      	cpsie	f
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	df00      	svc	0
 800a0a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0aa:	bf00      	nop
 800a0ac:	e000ed08 	.word	0xe000ed08

0800a0b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0b6:	4b46      	ldr	r3, [pc, #280]	; (800a1d0 <xPortStartScheduler+0x120>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a46      	ldr	r2, [pc, #280]	; (800a1d4 <xPortStartScheduler+0x124>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d10a      	bne.n	800a0d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	613b      	str	r3, [r7, #16]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0d6:	4b3e      	ldr	r3, [pc, #248]	; (800a1d0 <xPortStartScheduler+0x120>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a3f      	ldr	r2, [pc, #252]	; (800a1d8 <xPortStartScheduler+0x128>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d10a      	bne.n	800a0f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	60fb      	str	r3, [r7, #12]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0f6:	4b39      	ldr	r3, [pc, #228]	; (800a1dc <xPortStartScheduler+0x12c>)
 800a0f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	22ff      	movs	r2, #255	; 0xff
 800a106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <xPortStartScheduler+0x130>)
 800a11c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a11e:	4b31      	ldr	r3, [pc, #196]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a120:	2207      	movs	r2, #7
 800a122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a124:	e009      	b.n	800a13a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a126:	4b2f      	ldr	r3, [pc, #188]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	4a2d      	ldr	r2, [pc, #180]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a12e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	b2db      	uxtb	r3, r3
 800a138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a13a:	78fb      	ldrb	r3, [r7, #3]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a142:	2b80      	cmp	r3, #128	; 0x80
 800a144:	d0ef      	beq.n	800a126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a146:	4b27      	ldr	r3, [pc, #156]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f1c3 0307 	rsb	r3, r3, #7
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d00a      	beq.n	800a168 <xPortStartScheduler+0xb8>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	60bb      	str	r3, [r7, #8]
}
 800a164:	bf00      	nop
 800a166:	e7fe      	b.n	800a166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a168:	4b1e      	ldr	r3, [pc, #120]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	021b      	lsls	r3, r3, #8
 800a16e:	4a1d      	ldr	r2, [pc, #116]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a172:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a17a:	4a1a      	ldr	r2, [pc, #104]	; (800a1e4 <xPortStartScheduler+0x134>)
 800a17c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	b2da      	uxtb	r2, r3
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a186:	4b18      	ldr	r3, [pc, #96]	; (800a1e8 <xPortStartScheduler+0x138>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a17      	ldr	r2, [pc, #92]	; (800a1e8 <xPortStartScheduler+0x138>)
 800a18c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a192:	4b15      	ldr	r3, [pc, #84]	; (800a1e8 <xPortStartScheduler+0x138>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a14      	ldr	r2, [pc, #80]	; (800a1e8 <xPortStartScheduler+0x138>)
 800a198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a19c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a19e:	f000 f8dd 	bl	800a35c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1a2:	4b12      	ldr	r3, [pc, #72]	; (800a1ec <xPortStartScheduler+0x13c>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1a8:	f000 f8fc 	bl	800a3a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1ac:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <xPortStartScheduler+0x140>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a0f      	ldr	r2, [pc, #60]	; (800a1f0 <xPortStartScheduler+0x140>)
 800a1b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1b8:	f7ff ff66 	bl	800a088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1bc:	f000 fc86 	bl	800aacc <vTaskSwitchContext>
	prvTaskExitError();
 800a1c0:	f7ff ff1c 	bl	8009ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	e000ed00 	.word	0xe000ed00
 800a1d4:	410fc271 	.word	0x410fc271
 800a1d8:	410fc270 	.word	0x410fc270
 800a1dc:	e000e400 	.word	0xe000e400
 800a1e0:	2000458c 	.word	0x2000458c
 800a1e4:	20004590 	.word	0x20004590
 800a1e8:	e000ed20 	.word	0xe000ed20
 800a1ec:	200000b8 	.word	0x200000b8
 800a1f0:	e000ef34 	.word	0xe000ef34

0800a1f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	607b      	str	r3, [r7, #4]
}
 800a20c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <vPortEnterCritical+0x58>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	4a0d      	ldr	r2, [pc, #52]	; (800a24c <vPortEnterCritical+0x58>)
 800a216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a218:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <vPortEnterCritical+0x58>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d10f      	bne.n	800a240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a220:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <vPortEnterCritical+0x5c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00a      	beq.n	800a240 <vPortEnterCritical+0x4c>
	__asm volatile
 800a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	603b      	str	r3, [r7, #0]
}
 800a23c:	bf00      	nop
 800a23e:	e7fe      	b.n	800a23e <vPortEnterCritical+0x4a>
	}
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	200000b8 	.word	0x200000b8
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a25a:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <vPortExitCritical+0x50>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <vPortExitCritical+0x24>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	607b      	str	r3, [r7, #4]
}
 800a274:	bf00      	nop
 800a276:	e7fe      	b.n	800a276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <vPortExitCritical+0x50>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	4a09      	ldr	r2, [pc, #36]	; (800a2a4 <vPortExitCritical+0x50>)
 800a280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a282:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <vPortExitCritical+0x50>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d105      	bne.n	800a296 <vPortExitCritical+0x42>
 800a28a:	2300      	movs	r3, #0
 800a28c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a296:	bf00      	nop
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	200000b8 	.word	0x200000b8
	...

0800a2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2b0:	f3ef 8009 	mrs	r0, PSP
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	4b15      	ldr	r3, [pc, #84]	; (800a310 <pxCurrentTCBConst>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	f01e 0f10 	tst.w	lr, #16
 800a2c0:	bf08      	it	eq
 800a2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ca:	6010      	str	r0, [r2, #0]
 800a2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2d4:	f380 8811 	msr	BASEPRI, r0
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f000 fbf4 	bl	800aacc <vTaskSwitchContext>
 800a2e4:	f04f 0000 	mov.w	r0, #0
 800a2e8:	f380 8811 	msr	BASEPRI, r0
 800a2ec:	bc09      	pop	{r0, r3}
 800a2ee:	6819      	ldr	r1, [r3, #0]
 800a2f0:	6808      	ldr	r0, [r1, #0]
 800a2f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f6:	f01e 0f10 	tst.w	lr, #16
 800a2fa:	bf08      	it	eq
 800a2fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a300:	f380 8809 	msr	PSP, r0
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	f3af 8000 	nop.w

0800a310 <pxCurrentTCBConst>:
 800a310:	20004594 	.word	0x20004594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop

0800a318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	607b      	str	r3, [r7, #4]
}
 800a330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a332:	f000 fb13 	bl	800a95c <xTaskIncrementTick>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d003      	beq.n	800a344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a33c:	4b06      	ldr	r3, [pc, #24]	; (800a358 <SysTick_Handler+0x40>)
 800a33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	2300      	movs	r3, #0
 800a346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	f383 8811 	msr	BASEPRI, r3
}
 800a34e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	e000ed04 	.word	0xe000ed04

0800a35c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <vPortSetupTimerInterrupt+0x34>)
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a366:	4b0b      	ldr	r3, [pc, #44]	; (800a394 <vPortSetupTimerInterrupt+0x38>)
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a36c:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <vPortSetupTimerInterrupt+0x3c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a0a      	ldr	r2, [pc, #40]	; (800a39c <vPortSetupTimerInterrupt+0x40>)
 800a372:	fba2 2303 	umull	r2, r3, r2, r3
 800a376:	099b      	lsrs	r3, r3, #6
 800a378:	4a09      	ldr	r2, [pc, #36]	; (800a3a0 <vPortSetupTimerInterrupt+0x44>)
 800a37a:	3b01      	subs	r3, #1
 800a37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a37e:	4b04      	ldr	r3, [pc, #16]	; (800a390 <vPortSetupTimerInterrupt+0x34>)
 800a380:	2207      	movs	r2, #7
 800a382:	601a      	str	r2, [r3, #0]
}
 800a384:	bf00      	nop
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	e000e010 	.word	0xe000e010
 800a394:	e000e018 	.word	0xe000e018
 800a398:	20000030 	.word	0x20000030
 800a39c:	10624dd3 	.word	0x10624dd3
 800a3a0:	e000e014 	.word	0xe000e014

0800a3a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3b4 <vPortEnableVFP+0x10>
 800a3a8:	6801      	ldr	r1, [r0, #0]
 800a3aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3ae:	6001      	str	r1, [r0, #0]
 800a3b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3b2:	bf00      	nop
 800a3b4:	e000ed88 	.word	0xe000ed88

0800a3b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08e      	sub	sp, #56	; 0x38
 800a3bc:	af04      	add	r7, sp, #16
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	623b      	str	r3, [r7, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xTaskCreateStatic+0x46>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	61fb      	str	r3, [r7, #28]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3fe:	2354      	movs	r3, #84	; 0x54
 800a400:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	2b54      	cmp	r3, #84	; 0x54
 800a406:	d00a      	beq.n	800a41e <xTaskCreateStatic+0x66>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	61bb      	str	r3, [r7, #24]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a41e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01e      	beq.n	800a464 <xTaskCreateStatic+0xac>
 800a426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01b      	beq.n	800a464 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a434:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	2202      	movs	r2, #2
 800a43a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a43e:	2300      	movs	r3, #0
 800a440:	9303      	str	r3, [sp, #12]
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	9302      	str	r3, [sp, #8]
 800a446:	f107 0314 	add.w	r3, r7, #20
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 f850 	bl	800a4fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a45c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a45e:	f000 f8d5 	bl	800a60c <prvAddNewTaskToReadyList>
 800a462:	e001      	b.n	800a468 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a468:	697b      	ldr	r3, [r7, #20]
	}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3728      	adds	r7, #40	; 0x28
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a472:	b580      	push	{r7, lr}
 800a474:	b08c      	sub	sp, #48	; 0x30
 800a476:	af04      	add	r7, sp, #16
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	603b      	str	r3, [r7, #0]
 800a47e:	4613      	mov	r3, r2
 800a480:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff fae6 	bl	8009a58 <pvPortMalloc>
 800a48c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00e      	beq.n	800a4b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a494:	2054      	movs	r0, #84	; 0x54
 800a496:	f7ff fadf 	bl	8009a58 <pvPortMalloc>
 800a49a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	631a      	str	r2, [r3, #48]	; 0x30
 800a4a8:	e005      	b.n	800a4b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4aa:	6978      	ldr	r0, [r7, #20]
 800a4ac:	f7ff fba0 	bl	8009bf0 <vPortFree>
 800a4b0:	e001      	b.n	800a4b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d017      	beq.n	800a4ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4c4:	88fa      	ldrh	r2, [r7, #6]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 f80e 	bl	800a4fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4e0:	69f8      	ldr	r0, [r7, #28]
 800a4e2:	f000 f893 	bl	800a60c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	61bb      	str	r3, [r7, #24]
 800a4ea:	e002      	b.n	800a4f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
	}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3720      	adds	r7, #32
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a514:	3b01      	subs	r3, #1
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f023 0307 	bic.w	r3, r3, #7
 800a522:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	617b      	str	r3, [r7, #20]
}
 800a540:	bf00      	nop
 800a542:	e7fe      	b.n	800a542 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d01f      	beq.n	800a58a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a54a:	2300      	movs	r3, #0
 800a54c:	61fb      	str	r3, [r7, #28]
 800a54e:	e012      	b.n	800a576 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	4413      	add	r3, r2
 800a556:	7819      	ldrb	r1, [r3, #0]
 800a558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4413      	add	r3, r2
 800a55e:	3334      	adds	r3, #52	; 0x34
 800a560:	460a      	mov	r2, r1
 800a562:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	4413      	add	r3, r2
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d006      	beq.n	800a57e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	3301      	adds	r3, #1
 800a574:	61fb      	str	r3, [r7, #28]
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2b0f      	cmp	r3, #15
 800a57a:	d9e9      	bls.n	800a550 <prvInitialiseNewTask+0x54>
 800a57c:	e000      	b.n	800a580 <prvInitialiseNewTask+0x84>
			{
				break;
 800a57e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a588:	e003      	b.n	800a592 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	2b06      	cmp	r3, #6
 800a596:	d901      	bls.n	800a59c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a598:	2306      	movs	r3, #6
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fc5a 	bl	8009e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	3318      	adds	r3, #24
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fc55 	bl	8009e6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	f1c3 0207 	rsb	r2, r3, #7
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	2200      	movs	r2, #0
 800a5dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	68f9      	ldr	r1, [r7, #12]
 800a5ea:	69b8      	ldr	r0, [r7, #24]
 800a5ec:	f7ff fcd2 	bl	8009f94 <pxPortInitialiseStack>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a602:	bf00      	nop
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a614:	f7ff fdee 	bl	800a1f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a618:	4b2a      	ldr	r3, [pc, #168]	; (800a6c4 <prvAddNewTaskToReadyList+0xb8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3301      	adds	r3, #1
 800a61e:	4a29      	ldr	r2, [pc, #164]	; (800a6c4 <prvAddNewTaskToReadyList+0xb8>)
 800a620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a622:	4b29      	ldr	r3, [pc, #164]	; (800a6c8 <prvAddNewTaskToReadyList+0xbc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d109      	bne.n	800a63e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a62a:	4a27      	ldr	r2, [pc, #156]	; (800a6c8 <prvAddNewTaskToReadyList+0xbc>)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a630:	4b24      	ldr	r3, [pc, #144]	; (800a6c4 <prvAddNewTaskToReadyList+0xb8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d110      	bne.n	800a65a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a638:	f000 fabc 	bl	800abb4 <prvInitialiseTaskLists>
 800a63c:	e00d      	b.n	800a65a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a63e:	4b23      	ldr	r3, [pc, #140]	; (800a6cc <prvAddNewTaskToReadyList+0xc0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d109      	bne.n	800a65a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a646:	4b20      	ldr	r3, [pc, #128]	; (800a6c8 <prvAddNewTaskToReadyList+0xbc>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	429a      	cmp	r2, r3
 800a652:	d802      	bhi.n	800a65a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a654:	4a1c      	ldr	r2, [pc, #112]	; (800a6c8 <prvAddNewTaskToReadyList+0xbc>)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a65a:	4b1d      	ldr	r3, [pc, #116]	; (800a6d0 <prvAddNewTaskToReadyList+0xc4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	4a1b      	ldr	r2, [pc, #108]	; (800a6d0 <prvAddNewTaskToReadyList+0xc4>)
 800a662:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a668:	2201      	movs	r2, #1
 800a66a:	409a      	lsls	r2, r3
 800a66c:	4b19      	ldr	r3, [pc, #100]	; (800a6d4 <prvAddNewTaskToReadyList+0xc8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4313      	orrs	r3, r2
 800a672:	4a18      	ldr	r2, [pc, #96]	; (800a6d4 <prvAddNewTaskToReadyList+0xc8>)
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a67a:	4613      	mov	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <prvAddNewTaskToReadyList+0xcc>)
 800a684:	441a      	add	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3304      	adds	r3, #4
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f7ff fbfa 	bl	8009e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a692:	f7ff fddf 	bl	800a254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a696:	4b0d      	ldr	r3, [pc, #52]	; (800a6cc <prvAddNewTaskToReadyList+0xc0>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00e      	beq.n	800a6bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a69e:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <prvAddNewTaskToReadyList+0xbc>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d207      	bcs.n	800a6bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <prvAddNewTaskToReadyList+0xd0>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20004694 	.word	0x20004694
 800a6c8:	20004594 	.word	0x20004594
 800a6cc:	200046a0 	.word	0x200046a0
 800a6d0:	200046b0 	.word	0x200046b0
 800a6d4:	2000469c 	.word	0x2000469c
 800a6d8:	20004598 	.word	0x20004598
 800a6dc:	e000ed04 	.word	0xe000ed04

0800a6e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d017      	beq.n	800a722 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6f2:	4b13      	ldr	r3, [pc, #76]	; (800a740 <vTaskDelay+0x60>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <vTaskDelay+0x30>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	60bb      	str	r3, [r7, #8]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a710:	f000 f87a 	bl	800a808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a714:	2100      	movs	r1, #0
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fb0a 	bl	800ad30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a71c:	f000 f882 	bl	800a824 <xTaskResumeAll>
 800a720:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d107      	bne.n	800a738 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a728:	4b06      	ldr	r3, [pc, #24]	; (800a744 <vTaskDelay+0x64>)
 800a72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a738:	bf00      	nop
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200046bc 	.word	0x200046bc
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08a      	sub	sp, #40	; 0x28
 800a74c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a752:	2300      	movs	r3, #0
 800a754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a756:	463a      	mov	r2, r7
 800a758:	1d39      	adds	r1, r7, #4
 800a75a:	f107 0308 	add.w	r3, r7, #8
 800a75e:	4618      	mov	r0, r3
 800a760:	f7f6 fbb4 	bl	8000ecc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	9202      	str	r2, [sp, #8]
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	2300      	movs	r3, #0
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	460a      	mov	r2, r1
 800a776:	491e      	ldr	r1, [pc, #120]	; (800a7f0 <vTaskStartScheduler+0xa8>)
 800a778:	481e      	ldr	r0, [pc, #120]	; (800a7f4 <vTaskStartScheduler+0xac>)
 800a77a:	f7ff fe1d 	bl	800a3b8 <xTaskCreateStatic>
 800a77e:	4603      	mov	r3, r0
 800a780:	4a1d      	ldr	r2, [pc, #116]	; (800a7f8 <vTaskStartScheduler+0xb0>)
 800a782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a784:	4b1c      	ldr	r3, [pc, #112]	; (800a7f8 <vTaskStartScheduler+0xb0>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a78c:	2301      	movs	r3, #1
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	e001      	b.n	800a796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d116      	bne.n	800a7ca <vTaskStartScheduler+0x82>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	613b      	str	r3, [r7, #16]
}
 800a7ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7b0:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <vTaskStartScheduler+0xb4>)
 800a7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7b8:	4b11      	ldr	r3, [pc, #68]	; (800a800 <vTaskStartScheduler+0xb8>)
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7be:	4b11      	ldr	r3, [pc, #68]	; (800a804 <vTaskStartScheduler+0xbc>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7c4:	f7ff fc74 	bl	800a0b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7c8:	e00e      	b.n	800a7e8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d0:	d10a      	bne.n	800a7e8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	60fb      	str	r3, [r7, #12]
}
 800a7e4:	bf00      	nop
 800a7e6:	e7fe      	b.n	800a7e6 <vTaskStartScheduler+0x9e>
}
 800a7e8:	bf00      	nop
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	080106bc 	.word	0x080106bc
 800a7f4:	0800ab85 	.word	0x0800ab85
 800a7f8:	200046b8 	.word	0x200046b8
 800a7fc:	200046b4 	.word	0x200046b4
 800a800:	200046a0 	.word	0x200046a0
 800a804:	20004698 	.word	0x20004698

0800a808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a808:	b480      	push	{r7}
 800a80a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a80c:	4b04      	ldr	r3, [pc, #16]	; (800a820 <vTaskSuspendAll+0x18>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3301      	adds	r3, #1
 800a812:	4a03      	ldr	r2, [pc, #12]	; (800a820 <vTaskSuspendAll+0x18>)
 800a814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a816:	bf00      	nop
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	200046bc 	.word	0x200046bc

0800a824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a82e:	2300      	movs	r3, #0
 800a830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a832:	4b41      	ldr	r3, [pc, #260]	; (800a938 <xTaskResumeAll+0x114>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <xTaskResumeAll+0x2c>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	603b      	str	r3, [r7, #0]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a850:	f7ff fcd0 	bl	800a1f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a854:	4b38      	ldr	r3, [pc, #224]	; (800a938 <xTaskResumeAll+0x114>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3b01      	subs	r3, #1
 800a85a:	4a37      	ldr	r2, [pc, #220]	; (800a938 <xTaskResumeAll+0x114>)
 800a85c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a85e:	4b36      	ldr	r3, [pc, #216]	; (800a938 <xTaskResumeAll+0x114>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d161      	bne.n	800a92a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a866:	4b35      	ldr	r3, [pc, #212]	; (800a93c <xTaskResumeAll+0x118>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d05d      	beq.n	800a92a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a86e:	e02e      	b.n	800a8ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a870:	4b33      	ldr	r3, [pc, #204]	; (800a940 <xTaskResumeAll+0x11c>)
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3318      	adds	r3, #24
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fb5f 	bl	8009f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3304      	adds	r3, #4
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff fb5a 	bl	8009f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	2201      	movs	r2, #1
 800a892:	409a      	lsls	r2, r3
 800a894:	4b2b      	ldr	r3, [pc, #172]	; (800a944 <xTaskResumeAll+0x120>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4313      	orrs	r3, r2
 800a89a:	4a2a      	ldr	r2, [pc, #168]	; (800a944 <xTaskResumeAll+0x120>)
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4a27      	ldr	r2, [pc, #156]	; (800a948 <xTaskResumeAll+0x124>)
 800a8ac:	441a      	add	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	f7ff fae6 	bl	8009e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8be:	4b23      	ldr	r3, [pc, #140]	; (800a94c <xTaskResumeAll+0x128>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d302      	bcc.n	800a8ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a8c8:	4b21      	ldr	r3, [pc, #132]	; (800a950 <xTaskResumeAll+0x12c>)
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8ce:	4b1c      	ldr	r3, [pc, #112]	; (800a940 <xTaskResumeAll+0x11c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1cc      	bne.n	800a870 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8dc:	f000 fa08 	bl	800acf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8e0:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <xTaskResumeAll+0x130>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d010      	beq.n	800a90e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8ec:	f000 f836 	bl	800a95c <xTaskIncrementTick>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a8f6:	4b16      	ldr	r3, [pc, #88]	; (800a950 <xTaskResumeAll+0x12c>)
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f1      	bne.n	800a8ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a908:	4b12      	ldr	r3, [pc, #72]	; (800a954 <xTaskResumeAll+0x130>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a90e:	4b10      	ldr	r3, [pc, #64]	; (800a950 <xTaskResumeAll+0x12c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d009      	beq.n	800a92a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a916:	2301      	movs	r3, #1
 800a918:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a91a:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <xTaskResumeAll+0x134>)
 800a91c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a92a:	f7ff fc93 	bl	800a254 <vPortExitCritical>

	return xAlreadyYielded;
 800a92e:	68bb      	ldr	r3, [r7, #8]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	200046bc 	.word	0x200046bc
 800a93c:	20004694 	.word	0x20004694
 800a940:	20004654 	.word	0x20004654
 800a944:	2000469c 	.word	0x2000469c
 800a948:	20004598 	.word	0x20004598
 800a94c:	20004594 	.word	0x20004594
 800a950:	200046a8 	.word	0x200046a8
 800a954:	200046a4 	.word	0x200046a4
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a966:	4b4e      	ldr	r3, [pc, #312]	; (800aaa0 <xTaskIncrementTick+0x144>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f040 808e 	bne.w	800aa8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a970:	4b4c      	ldr	r3, [pc, #304]	; (800aaa4 <xTaskIncrementTick+0x148>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3301      	adds	r3, #1
 800a976:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a978:	4a4a      	ldr	r2, [pc, #296]	; (800aaa4 <xTaskIncrementTick+0x148>)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d120      	bne.n	800a9c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a984:	4b48      	ldr	r3, [pc, #288]	; (800aaa8 <xTaskIncrementTick+0x14c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00a      	beq.n	800a9a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	603b      	str	r3, [r7, #0]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <xTaskIncrementTick+0x46>
 800a9a4:	4b40      	ldr	r3, [pc, #256]	; (800aaa8 <xTaskIncrementTick+0x14c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	4b40      	ldr	r3, [pc, #256]	; (800aaac <xTaskIncrementTick+0x150>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a3e      	ldr	r2, [pc, #248]	; (800aaa8 <xTaskIncrementTick+0x14c>)
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	4a3e      	ldr	r2, [pc, #248]	; (800aaac <xTaskIncrementTick+0x150>)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	4b3d      	ldr	r3, [pc, #244]	; (800aab0 <xTaskIncrementTick+0x154>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	4a3c      	ldr	r2, [pc, #240]	; (800aab0 <xTaskIncrementTick+0x154>)
 800a9c0:	6013      	str	r3, [r2, #0]
 800a9c2:	f000 f995 	bl	800acf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9c6:	4b3b      	ldr	r3, [pc, #236]	; (800aab4 <xTaskIncrementTick+0x158>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d348      	bcc.n	800aa62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9d0:	4b35      	ldr	r3, [pc, #212]	; (800aaa8 <xTaskIncrementTick+0x14c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d104      	bne.n	800a9e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9da:	4b36      	ldr	r3, [pc, #216]	; (800aab4 <xTaskIncrementTick+0x158>)
 800a9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e0:	601a      	str	r2, [r3, #0]
					break;
 800a9e2:	e03e      	b.n	800aa62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e4:	4b30      	ldr	r3, [pc, #192]	; (800aaa8 <xTaskIncrementTick+0x14c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d203      	bcs.n	800aa04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9fc:	4a2d      	ldr	r2, [pc, #180]	; (800aab4 <xTaskIncrementTick+0x158>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa02:	e02e      	b.n	800aa62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	3304      	adds	r3, #4
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff fa99 	bl	8009f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	3318      	adds	r3, #24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fa90 	bl	8009f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	2201      	movs	r2, #1
 800aa26:	409a      	lsls	r2, r3
 800aa28:	4b23      	ldr	r3, [pc, #140]	; (800aab8 <xTaskIncrementTick+0x15c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	4a22      	ldr	r2, [pc, #136]	; (800aab8 <xTaskIncrementTick+0x15c>)
 800aa30:	6013      	str	r3, [r2, #0]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4a1f      	ldr	r2, [pc, #124]	; (800aabc <xTaskIncrementTick+0x160>)
 800aa40:	441a      	add	r2, r3
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	3304      	adds	r3, #4
 800aa46:	4619      	mov	r1, r3
 800aa48:	4610      	mov	r0, r2
 800aa4a:	f7ff fa1c 	bl	8009e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa52:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <xTaskIncrementTick+0x164>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d3b9      	bcc.n	800a9d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa60:	e7b6      	b.n	800a9d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa62:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <xTaskIncrementTick+0x164>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa68:	4914      	ldr	r1, [pc, #80]	; (800aabc <xTaskIncrementTick+0x160>)
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	440b      	add	r3, r1
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d901      	bls.n	800aa7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <xTaskIncrementTick+0x168>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800aa86:	2301      	movs	r3, #1
 800aa88:	617b      	str	r3, [r7, #20]
 800aa8a:	e004      	b.n	800aa96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <xTaskIncrementTick+0x16c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	4a0d      	ldr	r2, [pc, #52]	; (800aac8 <xTaskIncrementTick+0x16c>)
 800aa94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa96:	697b      	ldr	r3, [r7, #20]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	200046bc 	.word	0x200046bc
 800aaa4:	20004698 	.word	0x20004698
 800aaa8:	2000464c 	.word	0x2000464c
 800aaac:	20004650 	.word	0x20004650
 800aab0:	200046ac 	.word	0x200046ac
 800aab4:	200046b4 	.word	0x200046b4
 800aab8:	2000469c 	.word	0x2000469c
 800aabc:	20004598 	.word	0x20004598
 800aac0:	20004594 	.word	0x20004594
 800aac4:	200046a8 	.word	0x200046a8
 800aac8:	200046a4 	.word	0x200046a4

0800aacc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aad2:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <vTaskSwitchContext+0xa4>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aada:	4b26      	ldr	r3, [pc, #152]	; (800ab74 <vTaskSwitchContext+0xa8>)
 800aadc:	2201      	movs	r2, #1
 800aade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aae0:	e03f      	b.n	800ab62 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800aae2:	4b24      	ldr	r3, [pc, #144]	; (800ab74 <vTaskSwitchContext+0xa8>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	4b23      	ldr	r3, [pc, #140]	; (800ab78 <vTaskSwitchContext+0xac>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	fab3 f383 	clz	r3, r3
 800aaf4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aaf6:	7afb      	ldrb	r3, [r7, #11]
 800aaf8:	f1c3 031f 	rsb	r3, r3, #31
 800aafc:	617b      	str	r3, [r7, #20]
 800aafe:	491f      	ldr	r1, [pc, #124]	; (800ab7c <vTaskSwitchContext+0xb0>)
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4613      	mov	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10a      	bne.n	800ab28 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	607b      	str	r3, [r7, #4]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <vTaskSwitchContext+0x5a>
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4a12      	ldr	r2, [pc, #72]	; (800ab7c <vTaskSwitchContext+0xb0>)
 800ab34:	4413      	add	r3, r2
 800ab36:	613b      	str	r3, [r7, #16]
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	605a      	str	r2, [r3, #4]
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	3308      	adds	r3, #8
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d104      	bne.n	800ab58 <vTaskSwitchContext+0x8c>
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	605a      	str	r2, [r3, #4]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <vTaskSwitchContext+0xb4>)
 800ab60:	6013      	str	r3, [r2, #0]
}
 800ab62:	bf00      	nop
 800ab64:	371c      	adds	r7, #28
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	200046bc 	.word	0x200046bc
 800ab74:	200046a8 	.word	0x200046a8
 800ab78:	2000469c 	.word	0x2000469c
 800ab7c:	20004598 	.word	0x20004598
 800ab80:	20004594 	.word	0x20004594

0800ab84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab8c:	f000 f852 	bl	800ac34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <prvIdleTask+0x28>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d9f9      	bls.n	800ab8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab98:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <prvIdleTask+0x2c>)
 800ab9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aba8:	e7f0      	b.n	800ab8c <prvIdleTask+0x8>
 800abaa:	bf00      	nop
 800abac:	20004598 	.word	0x20004598
 800abb0:	e000ed04 	.word	0xe000ed04

0800abb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abba:	2300      	movs	r3, #0
 800abbc:	607b      	str	r3, [r7, #4]
 800abbe:	e00c      	b.n	800abda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4a12      	ldr	r2, [pc, #72]	; (800ac14 <prvInitialiseTaskLists+0x60>)
 800abcc:	4413      	add	r3, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff f92c 	bl	8009e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3301      	adds	r3, #1
 800abd8:	607b      	str	r3, [r7, #4]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b06      	cmp	r3, #6
 800abde:	d9ef      	bls.n	800abc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abe0:	480d      	ldr	r0, [pc, #52]	; (800ac18 <prvInitialiseTaskLists+0x64>)
 800abe2:	f7ff f923 	bl	8009e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abe6:	480d      	ldr	r0, [pc, #52]	; (800ac1c <prvInitialiseTaskLists+0x68>)
 800abe8:	f7ff f920 	bl	8009e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abec:	480c      	ldr	r0, [pc, #48]	; (800ac20 <prvInitialiseTaskLists+0x6c>)
 800abee:	f7ff f91d 	bl	8009e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abf2:	480c      	ldr	r0, [pc, #48]	; (800ac24 <prvInitialiseTaskLists+0x70>)
 800abf4:	f7ff f91a 	bl	8009e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abf8:	480b      	ldr	r0, [pc, #44]	; (800ac28 <prvInitialiseTaskLists+0x74>)
 800abfa:	f7ff f917 	bl	8009e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <prvInitialiseTaskLists+0x78>)
 800ac00:	4a05      	ldr	r2, [pc, #20]	; (800ac18 <prvInitialiseTaskLists+0x64>)
 800ac02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <prvInitialiseTaskLists+0x7c>)
 800ac06:	4a05      	ldr	r2, [pc, #20]	; (800ac1c <prvInitialiseTaskLists+0x68>)
 800ac08:	601a      	str	r2, [r3, #0]
}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20004598 	.word	0x20004598
 800ac18:	20004624 	.word	0x20004624
 800ac1c:	20004638 	.word	0x20004638
 800ac20:	20004654 	.word	0x20004654
 800ac24:	20004668 	.word	0x20004668
 800ac28:	20004680 	.word	0x20004680
 800ac2c:	2000464c 	.word	0x2000464c
 800ac30:	20004650 	.word	0x20004650

0800ac34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac3a:	e019      	b.n	800ac70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac3c:	f7ff fada 	bl	800a1f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac40:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <prvCheckTasksWaitingTermination+0x50>)
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff f977 	bl	8009f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac52:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <prvCheckTasksWaitingTermination+0x54>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a0b      	ldr	r2, [pc, #44]	; (800ac88 <prvCheckTasksWaitingTermination+0x54>)
 800ac5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4a0a      	ldr	r2, [pc, #40]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac66:	f7ff faf5 	bl	800a254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f810 	bl	800ac90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac70:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e1      	bne.n	800ac3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20004668 	.word	0x20004668
 800ac88:	20004694 	.word	0x20004694
 800ac8c:	2000467c 	.word	0x2000467c

0800ac90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d108      	bne.n	800acb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe ffa2 	bl	8009bf0 <vPortFree>
				vPortFree( pxTCB );
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7fe ff9f 	bl	8009bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acb2:	e018      	b.n	800ace6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d103      	bne.n	800acc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fe ff96 	bl	8009bf0 <vPortFree>
	}
 800acc4:	e00f      	b.n	800ace6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800accc:	2b02      	cmp	r3, #2
 800acce:	d00a      	beq.n	800ace6 <prvDeleteTCB+0x56>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60fb      	str	r3, [r7, #12]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <prvDeleteTCB+0x54>
	}
 800ace6:	bf00      	nop
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
	...

0800acf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acf6:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <prvResetNextTaskUnblockTime+0x38>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d104      	bne.n	800ad0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <prvResetNextTaskUnblockTime+0x3c>)
 800ad02:	f04f 32ff 	mov.w	r2, #4294967295
 800ad06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad08:	e008      	b.n	800ad1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad0a:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <prvResetNextTaskUnblockTime+0x38>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	4a04      	ldr	r2, [pc, #16]	; (800ad2c <prvResetNextTaskUnblockTime+0x3c>)
 800ad1a:	6013      	str	r3, [r2, #0]
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	2000464c 	.word	0x2000464c
 800ad2c:	200046b4 	.word	0x200046b4

0800ad30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad3a:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad40:	4b28      	ldr	r3, [pc, #160]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3304      	adds	r3, #4
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff f8fa 	bl	8009f40 <uxListRemove>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10b      	bne.n	800ad6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ad52:	4b24      	ldr	r3, [pc, #144]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	2201      	movs	r2, #1
 800ad5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad5e:	43da      	mvns	r2, r3
 800ad60:	4b21      	ldr	r3, [pc, #132]	; (800ade8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4013      	ands	r3, r2
 800ad66:	4a20      	ldr	r2, [pc, #128]	; (800ade8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad70:	d10a      	bne.n	800ad88 <prvAddCurrentTaskToDelayedList+0x58>
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d007      	beq.n	800ad88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad78:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	4619      	mov	r1, r3
 800ad80:	481a      	ldr	r0, [pc, #104]	; (800adec <prvAddCurrentTaskToDelayedList+0xbc>)
 800ad82:	f7ff f880 	bl	8009e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad86:	e026      	b.n	800add6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad90:	4b14      	ldr	r3, [pc, #80]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d209      	bcs.n	800adb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ada0:	4b13      	ldr	r3, [pc, #76]	; (800adf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	4b0f      	ldr	r3, [pc, #60]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3304      	adds	r3, #4
 800adaa:	4619      	mov	r1, r3
 800adac:	4610      	mov	r0, r2
 800adae:	f7ff f88e 	bl	8009ece <vListInsert>
}
 800adb2:	e010      	b.n	800add6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb4:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3304      	adds	r3, #4
 800adbe:	4619      	mov	r1, r3
 800adc0:	4610      	mov	r0, r2
 800adc2:	f7ff f884 	bl	8009ece <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d202      	bcs.n	800add6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800add0:	4a09      	ldr	r2, [pc, #36]	; (800adf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6013      	str	r3, [r2, #0]
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20004698 	.word	0x20004698
 800ade4:	20004594 	.word	0x20004594
 800ade8:	2000469c 	.word	0x2000469c
 800adec:	20004680 	.word	0x20004680
 800adf0:	20004650 	.word	0x20004650
 800adf4:	2000464c 	.word	0x2000464c
 800adf8:	200046b4 	.word	0x200046b4

0800adfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae0c:	f002 fcbe 	bl	800d78c <USBD_static_malloc>
 800ae10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d109      	bne.n	800ae2c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	32b0      	adds	r2, #176	; 0xb0
 800ae22:	2100      	movs	r1, #0
 800ae24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	e0d4      	b.n	800afd6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae2c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ae30:	2100      	movs	r1, #0
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f002 fd26 	bl	800d884 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	32b0      	adds	r2, #176	; 0xb0
 800ae42:	68f9      	ldr	r1, [r7, #12]
 800ae44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	32b0      	adds	r2, #176	; 0xb0
 800ae52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	7c1b      	ldrb	r3, [r3, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d138      	bne.n	800aed6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae64:	4b5e      	ldr	r3, [pc, #376]	; (800afe0 <USBD_CDC_Init+0x1e4>)
 800ae66:	7819      	ldrb	r1, [r3, #0]
 800ae68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f002 fb69 	bl	800d546 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae74:	4b5a      	ldr	r3, [pc, #360]	; (800afe0 <USBD_CDC_Init+0x1e4>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	f003 020f 	and.w	r2, r3, #15
 800ae7c:	6879      	ldr	r1, [r7, #4]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	440b      	add	r3, r1
 800ae88:	3324      	adds	r3, #36	; 0x24
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae8e:	4b55      	ldr	r3, [pc, #340]	; (800afe4 <USBD_CDC_Init+0x1e8>)
 800ae90:	7819      	ldrb	r1, [r3, #0]
 800ae92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae96:	2202      	movs	r2, #2
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f002 fb54 	bl	800d546 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae9e:	4b51      	ldr	r3, [pc, #324]	; (800afe4 <USBD_CDC_Init+0x1e8>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	f003 020f 	and.w	r2, r3, #15
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aeba:	4b4b      	ldr	r3, [pc, #300]	; (800afe8 <USBD_CDC_Init+0x1ec>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	f003 020f 	and.w	r2, r3, #15
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	4613      	mov	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	440b      	add	r3, r1
 800aece:	3326      	adds	r3, #38	; 0x26
 800aed0:	2210      	movs	r2, #16
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	e035      	b.n	800af42 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aed6:	4b42      	ldr	r3, [pc, #264]	; (800afe0 <USBD_CDC_Init+0x1e4>)
 800aed8:	7819      	ldrb	r1, [r3, #0]
 800aeda:	2340      	movs	r3, #64	; 0x40
 800aedc:	2202      	movs	r2, #2
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f002 fb31 	bl	800d546 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aee4:	4b3e      	ldr	r3, [pc, #248]	; (800afe0 <USBD_CDC_Init+0x1e4>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	f003 020f 	and.w	r2, r3, #15
 800aeec:	6879      	ldr	r1, [r7, #4]
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	440b      	add	r3, r1
 800aef8:	3324      	adds	r3, #36	; 0x24
 800aefa:	2201      	movs	r2, #1
 800aefc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aefe:	4b39      	ldr	r3, [pc, #228]	; (800afe4 <USBD_CDC_Init+0x1e8>)
 800af00:	7819      	ldrb	r1, [r3, #0]
 800af02:	2340      	movs	r3, #64	; 0x40
 800af04:	2202      	movs	r2, #2
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f002 fb1d 	bl	800d546 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af0c:	4b35      	ldr	r3, [pc, #212]	; (800afe4 <USBD_CDC_Init+0x1e8>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 020f 	and.w	r2, r3, #15
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	440b      	add	r3, r1
 800af20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af24:	2201      	movs	r2, #1
 800af26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af28:	4b2f      	ldr	r3, [pc, #188]	; (800afe8 <USBD_CDC_Init+0x1ec>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f003 020f 	and.w	r2, r3, #15
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	440b      	add	r3, r1
 800af3c:	3326      	adds	r3, #38	; 0x26
 800af3e:	2210      	movs	r2, #16
 800af40:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af42:	4b29      	ldr	r3, [pc, #164]	; (800afe8 <USBD_CDC_Init+0x1ec>)
 800af44:	7819      	ldrb	r1, [r3, #0]
 800af46:	2308      	movs	r3, #8
 800af48:	2203      	movs	r2, #3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f002 fafb 	bl	800d546 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af50:	4b25      	ldr	r3, [pc, #148]	; (800afe8 <USBD_CDC_Init+0x1ec>)
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	f003 020f 	and.w	r2, r3, #15
 800af58:	6879      	ldr	r1, [r7, #4]
 800af5a:	4613      	mov	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	440b      	add	r3, r1
 800af64:	3324      	adds	r3, #36	; 0x24
 800af66:	2201      	movs	r2, #1
 800af68:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	33b0      	adds	r3, #176	; 0xb0
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800afa0:	2302      	movs	r3, #2
 800afa2:	e018      	b.n	800afd6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	7c1b      	ldrb	r3, [r3, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10a      	bne.n	800afc2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <USBD_CDC_Init+0x1e8>)
 800afae:	7819      	ldrb	r1, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f002 fbb2 	bl	800d724 <USBD_LL_PrepareReceive>
 800afc0:	e008      	b.n	800afd4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afc2:	4b08      	ldr	r3, [pc, #32]	; (800afe4 <USBD_CDC_Init+0x1e8>)
 800afc4:	7819      	ldrb	r1, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afcc:	2340      	movs	r3, #64	; 0x40
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f002 fba8 	bl	800d724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000143 	.word	0x20000143
 800afe4:	20000144 	.word	0x20000144
 800afe8:	20000145 	.word	0x20000145

0800afec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aff8:	4b3a      	ldr	r3, [pc, #232]	; (800b0e4 <USBD_CDC_DeInit+0xf8>)
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f002 fac7 	bl	800d592 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b004:	4b37      	ldr	r3, [pc, #220]	; (800b0e4 <USBD_CDC_DeInit+0xf8>)
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	f003 020f 	and.w	r2, r3, #15
 800b00c:	6879      	ldr	r1, [r7, #4]
 800b00e:	4613      	mov	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	440b      	add	r3, r1
 800b018:	3324      	adds	r3, #36	; 0x24
 800b01a:	2200      	movs	r2, #0
 800b01c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b01e:	4b32      	ldr	r3, [pc, #200]	; (800b0e8 <USBD_CDC_DeInit+0xfc>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f002 fab4 	bl	800d592 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b02a:	4b2f      	ldr	r3, [pc, #188]	; (800b0e8 <USBD_CDC_DeInit+0xfc>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 020f 	and.w	r2, r3, #15
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	4613      	mov	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	440b      	add	r3, r1
 800b03e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b042:	2200      	movs	r2, #0
 800b044:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b046:	4b29      	ldr	r3, [pc, #164]	; (800b0ec <USBD_CDC_DeInit+0x100>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f002 faa0 	bl	800d592 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b052:	4b26      	ldr	r3, [pc, #152]	; (800b0ec <USBD_CDC_DeInit+0x100>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	f003 020f 	and.w	r2, r3, #15
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	440b      	add	r3, r1
 800b066:	3324      	adds	r3, #36	; 0x24
 800b068:	2200      	movs	r2, #0
 800b06a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b06c:	4b1f      	ldr	r3, [pc, #124]	; (800b0ec <USBD_CDC_DeInit+0x100>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f003 020f 	and.w	r2, r3, #15
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	440b      	add	r3, r1
 800b080:	3326      	adds	r3, #38	; 0x26
 800b082:	2200      	movs	r2, #0
 800b084:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	32b0      	adds	r2, #176	; 0xb0
 800b090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01f      	beq.n	800b0d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	33b0      	adds	r3, #176	; 0xb0
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	32b0      	adds	r2, #176	; 0xb0
 800b0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f002 fb74 	bl	800d7a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	32b0      	adds	r2, #176	; 0xb0
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000143 	.word	0x20000143
 800b0e8:	20000144 	.word	0x20000144
 800b0ec:	20000145 	.word	0x20000145

0800b0f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	32b0      	adds	r2, #176	; 0xb0
 800b104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b108:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e0bf      	b.n	800b2a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d050      	beq.n	800b1ce <USBD_CDC_Setup+0xde>
 800b12c:	2b20      	cmp	r3, #32
 800b12e:	f040 80af 	bne.w	800b290 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	88db      	ldrh	r3, [r3, #6]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d03a      	beq.n	800b1b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	b25b      	sxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	da1b      	bge.n	800b17c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	33b0      	adds	r3, #176	; 0xb0
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b15a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	88d2      	ldrh	r2, [r2, #6]
 800b160:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	88db      	ldrh	r3, [r3, #6]
 800b166:	2b07      	cmp	r3, #7
 800b168:	bf28      	it	cs
 800b16a:	2307      	movcs	r3, #7
 800b16c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	89fa      	ldrh	r2, [r7, #14]
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 fd89 	bl	800cc8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b17a:	e090      	b.n	800b29e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	785a      	ldrb	r2, [r3, #1]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	88db      	ldrh	r3, [r3, #6]
 800b18a:	2b3f      	cmp	r3, #63	; 0x3f
 800b18c:	d803      	bhi.n	800b196 <USBD_CDC_Setup+0xa6>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	88db      	ldrh	r3, [r3, #6]
 800b192:	b2da      	uxtb	r2, r3
 800b194:	e000      	b.n	800b198 <USBD_CDC_Setup+0xa8>
 800b196:	2240      	movs	r2, #64	; 0x40
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b19e:	6939      	ldr	r1, [r7, #16]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f001 fd9b 	bl	800cce4 <USBD_CtlPrepareRx>
      break;
 800b1ae:	e076      	b.n	800b29e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	33b0      	adds	r3, #176	; 0xb0
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	7850      	ldrb	r0, [r2, #1]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	4798      	blx	r3
      break;
 800b1cc:	e067      	b.n	800b29e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	2b0b      	cmp	r3, #11
 800b1d4:	d851      	bhi.n	800b27a <USBD_CDC_Setup+0x18a>
 800b1d6:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <USBD_CDC_Setup+0xec>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b20d 	.word	0x0800b20d
 800b1e0:	0800b289 	.word	0x0800b289
 800b1e4:	0800b27b 	.word	0x0800b27b
 800b1e8:	0800b27b 	.word	0x0800b27b
 800b1ec:	0800b27b 	.word	0x0800b27b
 800b1f0:	0800b27b 	.word	0x0800b27b
 800b1f4:	0800b27b 	.word	0x0800b27b
 800b1f8:	0800b27b 	.word	0x0800b27b
 800b1fc:	0800b27b 	.word	0x0800b27b
 800b200:	0800b27b 	.word	0x0800b27b
 800b204:	0800b237 	.word	0x0800b237
 800b208:	0800b261 	.word	0x0800b261
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b03      	cmp	r3, #3
 800b216:	d107      	bne.n	800b228 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b218:	f107 030a 	add.w	r3, r7, #10
 800b21c:	2202      	movs	r2, #2
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f001 fd33 	bl	800cc8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b226:	e032      	b.n	800b28e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 fcbd 	bl	800cbaa <USBD_CtlError>
            ret = USBD_FAIL;
 800b230:	2303      	movs	r3, #3
 800b232:	75fb      	strb	r3, [r7, #23]
          break;
 800b234:	e02b      	b.n	800b28e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d107      	bne.n	800b252 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b242:	f107 030d 	add.w	r3, r7, #13
 800b246:	2201      	movs	r2, #1
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 fd1e 	bl	800cc8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b250:	e01d      	b.n	800b28e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 fca8 	bl	800cbaa <USBD_CtlError>
            ret = USBD_FAIL;
 800b25a:	2303      	movs	r3, #3
 800b25c:	75fb      	strb	r3, [r7, #23]
          break;
 800b25e:	e016      	b.n	800b28e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d00f      	beq.n	800b28c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f001 fc9b 	bl	800cbaa <USBD_CtlError>
            ret = USBD_FAIL;
 800b274:	2303      	movs	r3, #3
 800b276:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b278:	e008      	b.n	800b28c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f001 fc94 	bl	800cbaa <USBD_CtlError>
          ret = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	75fb      	strb	r3, [r7, #23]
          break;
 800b286:	e002      	b.n	800b28e <USBD_CDC_Setup+0x19e>
          break;
 800b288:	bf00      	nop
 800b28a:	e008      	b.n	800b29e <USBD_CDC_Setup+0x1ae>
          break;
 800b28c:	bf00      	nop
      }
      break;
 800b28e:	e006      	b.n	800b29e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f001 fc89 	bl	800cbaa <USBD_CtlError>
      ret = USBD_FAIL;
 800b298:	2303      	movs	r3, #3
 800b29a:	75fb      	strb	r3, [r7, #23]
      break;
 800b29c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3718      	adds	r7, #24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	32b0      	adds	r2, #176	; 0xb0
 800b2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	e065      	b.n	800b39e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	32b0      	adds	r2, #176	; 0xb0
 800b2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b2e2:	78fb      	ldrb	r3, [r7, #3]
 800b2e4:	f003 020f 	and.w	r2, r3, #15
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3318      	adds	r3, #24
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d02f      	beq.n	800b35c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	f003 020f 	and.w	r2, r3, #15
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	3318      	adds	r3, #24
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	78fb      	ldrb	r3, [r7, #3]
 800b314:	f003 010f 	and.w	r1, r3, #15
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	460b      	mov	r3, r1
 800b31c:	00db      	lsls	r3, r3, #3
 800b31e:	440b      	add	r3, r1
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4403      	add	r3, r0
 800b324:	3348      	adds	r3, #72	; 0x48
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	fbb2 f1f3 	udiv	r1, r2, r3
 800b32c:	fb01 f303 	mul.w	r3, r1, r3
 800b330:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b332:	2b00      	cmp	r3, #0
 800b334:	d112      	bne.n	800b35c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b336:	78fb      	ldrb	r3, [r7, #3]
 800b338:	f003 020f 	and.w	r2, r3, #15
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	440b      	add	r3, r1
 800b348:	3318      	adds	r3, #24
 800b34a:	2200      	movs	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b34e:	78f9      	ldrb	r1, [r7, #3]
 800b350:	2300      	movs	r3, #0
 800b352:	2200      	movs	r2, #0
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f002 f9c4 	bl	800d6e2 <USBD_LL_Transmit>
 800b35a:	e01f      	b.n	800b39c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2200      	movs	r2, #0
 800b360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	33b0      	adds	r3, #176	; 0xb0
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d010      	beq.n	800b39c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	33b0      	adds	r3, #176	; 0xb0
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b398:	78fa      	ldrb	r2, [r7, #3]
 800b39a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	32b0      	adds	r2, #176	; 0xb0
 800b3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	32b0      	adds	r2, #176	; 0xb0
 800b3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e01a      	b.n	800b40e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3d8:	78fb      	ldrb	r3, [r7, #3]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f002 f9c2 	bl	800d766 <USBD_LL_GetRxDataSize>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	33b0      	adds	r3, #176	; 0xb0
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b408:	4611      	mov	r1, r2
 800b40a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b084      	sub	sp, #16
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	32b0      	adds	r2, #176	; 0xb0
 800b428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b434:	2303      	movs	r3, #3
 800b436:	e025      	b.n	800b484 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	33b0      	adds	r3, #176	; 0xb0
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01a      	beq.n	800b482 <USBD_CDC_EP0_RxReady+0x6c>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b452:	2bff      	cmp	r3, #255	; 0xff
 800b454:	d015      	beq.n	800b482 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	33b0      	adds	r3, #176	; 0xb0
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b46e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b476:	b292      	uxth	r2, r2
 800b478:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	22ff      	movs	r2, #255	; 0xff
 800b47e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b494:	2182      	movs	r1, #130	; 0x82
 800b496:	4818      	ldr	r0, [pc, #96]	; (800b4f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b498:	f000 fd4f 	bl	800bf3a <USBD_GetEpDesc>
 800b49c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b49e:	2101      	movs	r1, #1
 800b4a0:	4815      	ldr	r0, [pc, #84]	; (800b4f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4a2:	f000 fd4a 	bl	800bf3a <USBD_GetEpDesc>
 800b4a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4a8:	2181      	movs	r1, #129	; 0x81
 800b4aa:	4813      	ldr	r0, [pc, #76]	; (800b4f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4ac:	f000 fd45 	bl	800bf3a <USBD_GetEpDesc>
 800b4b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2210      	movs	r2, #16
 800b4bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d006      	beq.n	800b4d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4cc:	711a      	strb	r2, [r3, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d006      	beq.n	800b4e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4e0:	711a      	strb	r2, [r3, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2243      	movs	r2, #67	; 0x43
 800b4ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4ec:	4b02      	ldr	r3, [pc, #8]	; (800b4f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000100 	.word	0x20000100

0800b4fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b504:	2182      	movs	r1, #130	; 0x82
 800b506:	4818      	ldr	r0, [pc, #96]	; (800b568 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b508:	f000 fd17 	bl	800bf3a <USBD_GetEpDesc>
 800b50c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b50e:	2101      	movs	r1, #1
 800b510:	4815      	ldr	r0, [pc, #84]	; (800b568 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b512:	f000 fd12 	bl	800bf3a <USBD_GetEpDesc>
 800b516:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b518:	2181      	movs	r1, #129	; 0x81
 800b51a:	4813      	ldr	r0, [pc, #76]	; (800b568 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b51c:	f000 fd0d 	bl	800bf3a <USBD_GetEpDesc>
 800b520:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	2210      	movs	r2, #16
 800b52c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d006      	beq.n	800b542 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	2200      	movs	r2, #0
 800b538:	711a      	strb	r2, [r3, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f042 0202 	orr.w	r2, r2, #2
 800b540:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d006      	beq.n	800b556 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	711a      	strb	r2, [r3, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f042 0202 	orr.w	r2, r2, #2
 800b554:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2243      	movs	r2, #67	; 0x43
 800b55a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b55c:	4b02      	ldr	r3, [pc, #8]	; (800b568 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20000100 	.word	0x20000100

0800b56c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b574:	2182      	movs	r1, #130	; 0x82
 800b576:	4818      	ldr	r0, [pc, #96]	; (800b5d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b578:	f000 fcdf 	bl	800bf3a <USBD_GetEpDesc>
 800b57c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b57e:	2101      	movs	r1, #1
 800b580:	4815      	ldr	r0, [pc, #84]	; (800b5d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b582:	f000 fcda 	bl	800bf3a <USBD_GetEpDesc>
 800b586:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b588:	2181      	movs	r1, #129	; 0x81
 800b58a:	4813      	ldr	r0, [pc, #76]	; (800b5d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b58c:	f000 fcd5 	bl	800bf3a <USBD_GetEpDesc>
 800b590:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2210      	movs	r2, #16
 800b59c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5ac:	711a      	strb	r2, [r3, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d006      	beq.n	800b5c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5c0:	711a      	strb	r2, [r3, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2243      	movs	r2, #67	; 0x43
 800b5ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5cc:	4b02      	ldr	r3, [pc, #8]	; (800b5d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20000100 	.word	0x20000100

0800b5dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	220a      	movs	r2, #10
 800b5e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5ea:	4b03      	ldr	r3, [pc, #12]	; (800b5f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	200000bc 	.word	0x200000bc

0800b5fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e009      	b.n	800b624 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	33b0      	adds	r3, #176	; 0xb0
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	32b0      	adds	r2, #176	; 0xb0
 800b646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b652:	2303      	movs	r3, #3
 800b654:	e008      	b.n	800b668 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	371c      	adds	r7, #28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	32b0      	adds	r2, #176	; 0xb0
 800b688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b68c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d101      	bne.n	800b698 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b694:	2303      	movs	r3, #3
 800b696:	e004      	b.n	800b6a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
	...

0800b6b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	32b0      	adds	r2, #176	; 0xb0
 800b6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	32b0      	adds	r2, #176	; 0xb0
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e025      	b.n	800b72e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d11f      	bne.n	800b72c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b6f4:	4b10      	ldr	r3, [pc, #64]	; (800b738 <USBD_CDC_TransmitPacket+0x88>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	f003 020f 	and.w	r2, r3, #15
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4403      	add	r3, r0
 800b70e:	3318      	adds	r3, #24
 800b710:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b712:	4b09      	ldr	r3, [pc, #36]	; (800b738 <USBD_CDC_TransmitPacket+0x88>)
 800b714:	7819      	ldrb	r1, [r3, #0]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 ffdd 	bl	800d6e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20000143 	.word	0x20000143

0800b73c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	32b0      	adds	r2, #176	; 0xb0
 800b74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b752:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	32b0      	adds	r2, #176	; 0xb0
 800b75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b766:	2303      	movs	r3, #3
 800b768:	e018      	b.n	800b79c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	7c1b      	ldrb	r3, [r3, #16]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10a      	bne.n	800b788 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b772:	4b0c      	ldr	r3, [pc, #48]	; (800b7a4 <USBD_CDC_ReceivePacket+0x68>)
 800b774:	7819      	ldrb	r1, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b77c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f001 ffcf 	bl	800d724 <USBD_LL_PrepareReceive>
 800b786:	e008      	b.n	800b79a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b788:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <USBD_CDC_ReceivePacket+0x68>)
 800b78a:	7819      	ldrb	r1, [r3, #0]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b792:	2340      	movs	r3, #64	; 0x40
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f001 ffc5 	bl	800d724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20000144 	.word	0x20000144

0800b7a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e01f      	b.n	800b800 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	79fa      	ldrb	r2, [r7, #7]
 800b7f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f001 fe39 	bl	800d46c <USBD_LL_Init>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e025      	b.n	800b86c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	32ae      	adds	r2, #174	; 0xae
 800b832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00f      	beq.n	800b85c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	32ae      	adds	r2, #174	; 0xae
 800b846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	f107 020e 	add.w	r2, r7, #14
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	4602      	mov	r2, r0
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f001 fe47 	bl	800d510 <USBD_LL_Start>
 800b882:	4603      	mov	r3, r0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b894:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b896:	4618      	mov	r0, r3
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d009      	beq.n	800b8d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	78fa      	ldrb	r2, [r7, #3]
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	4798      	blx	r3
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	78fa      	ldrb	r2, [r7, #3]
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b900:	2303      	movs	r3, #3
 800b902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b904:	7bfb      	ldrb	r3, [r7, #15]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b084      	sub	sp, #16
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
 800b916:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	4618      	mov	r0, r3
 800b922:	f001 f908 	bl	800cb36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b934:	461a      	mov	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b942:	f003 031f 	and.w	r3, r3, #31
 800b946:	2b02      	cmp	r3, #2
 800b948:	d01a      	beq.n	800b980 <USBD_LL_SetupStage+0x72>
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d822      	bhi.n	800b994 <USBD_LL_SetupStage+0x86>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <USBD_LL_SetupStage+0x4a>
 800b952:	2b01      	cmp	r3, #1
 800b954:	d00a      	beq.n	800b96c <USBD_LL_SetupStage+0x5e>
 800b956:	e01d      	b.n	800b994 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fb5f 	bl	800c024 <USBD_StdDevReq>
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]
      break;
 800b96a:	e020      	b.n	800b9ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fbc7 	bl	800c108 <USBD_StdItfReq>
 800b97a:	4603      	mov	r3, r0
 800b97c:	73fb      	strb	r3, [r7, #15]
      break;
 800b97e:	e016      	b.n	800b9ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fc29 	bl	800c1e0 <USBD_StdEPReq>
 800b98e:	4603      	mov	r3, r0
 800b990:	73fb      	strb	r3, [r7, #15]
      break;
 800b992:	e00c      	b.n	800b9ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b99a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f001 fe14 	bl	800d5d0 <USBD_LL_StallEP>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ac:	bf00      	nop
  }

  return ret;
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b9ca:	7afb      	ldrb	r3, [r7, #11]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d16e      	bne.n	800baae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	f040 8098 	bne.w	800bb14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d913      	bls.n	800ba18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	689a      	ldr	r2, [r3, #8]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	1ad2      	subs	r2, r2, r3
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	68da      	ldr	r2, [r3, #12]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	4293      	cmp	r3, r2
 800ba08:	bf28      	it	cs
 800ba0a:	4613      	movcs	r3, r2
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f001 f984 	bl	800cd1e <USBD_CtlContinueRx>
 800ba16:	e07d      	b.n	800bb14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba1e:	f003 031f 	and.w	r3, r3, #31
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d014      	beq.n	800ba50 <USBD_LL_DataOutStage+0x98>
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d81d      	bhi.n	800ba66 <USBD_LL_DataOutStage+0xae>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <USBD_LL_DataOutStage+0x7c>
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d003      	beq.n	800ba3a <USBD_LL_DataOutStage+0x82>
 800ba32:	e018      	b.n	800ba66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba34:	2300      	movs	r3, #0
 800ba36:	75bb      	strb	r3, [r7, #22]
            break;
 800ba38:	e018      	b.n	800ba6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	4619      	mov	r1, r3
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f000 fa5e 	bl	800bf06 <USBD_CoreFindIF>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	75bb      	strb	r3, [r7, #22]
            break;
 800ba4e:	e00d      	b.n	800ba6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	4619      	mov	r1, r3
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f000 fa60 	bl	800bf20 <USBD_CoreFindEP>
 800ba60:	4603      	mov	r3, r0
 800ba62:	75bb      	strb	r3, [r7, #22]
            break;
 800ba64:	e002      	b.n	800ba6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	75bb      	strb	r3, [r7, #22]
            break;
 800ba6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ba6c:	7dbb      	ldrb	r3, [r7, #22]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d119      	bne.n	800baa6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d113      	bne.n	800baa6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ba7e:	7dba      	ldrb	r2, [r7, #22]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	32ae      	adds	r2, #174	; 0xae
 800ba84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00b      	beq.n	800baa6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ba8e:	7dba      	ldrb	r2, [r7, #22]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ba96:	7dba      	ldrb	r2, [r7, #22]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	32ae      	adds	r2, #174	; 0xae
 800ba9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f001 f94a 	bl	800cd40 <USBD_CtlSendStatus>
 800baac:	e032      	b.n	800bb14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	4619      	mov	r1, r3
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fa31 	bl	800bf20 <USBD_CoreFindEP>
 800babe:	4603      	mov	r3, r0
 800bac0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bac2:	7dbb      	ldrb	r3, [r7, #22]
 800bac4:	2bff      	cmp	r3, #255	; 0xff
 800bac6:	d025      	beq.n	800bb14 <USBD_LL_DataOutStage+0x15c>
 800bac8:	7dbb      	ldrb	r3, [r7, #22]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d122      	bne.n	800bb14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d117      	bne.n	800bb0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bada:	7dba      	ldrb	r2, [r7, #22]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	32ae      	adds	r2, #174	; 0xae
 800bae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00f      	beq.n	800bb0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800baea:	7dba      	ldrb	r2, [r7, #22]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800baf2:	7dba      	ldrb	r2, [r7, #22]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	32ae      	adds	r2, #174	; 0xae
 800baf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	7afa      	ldrb	r2, [r7, #11]
 800bb00:	4611      	mov	r1, r2
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	4798      	blx	r3
 800bb06:	4603      	mov	r3, r0
 800bb08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	e000      	b.n	800bb16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b086      	sub	sp, #24
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	60f8      	str	r0, [r7, #12]
 800bb26:	460b      	mov	r3, r1
 800bb28:	607a      	str	r2, [r7, #4]
 800bb2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bb2c:	7afb      	ldrb	r3, [r7, #11]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d16f      	bne.n	800bc12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3314      	adds	r3, #20
 800bb36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d15a      	bne.n	800bbf8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d914      	bls.n	800bb78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	689a      	ldr	r2, [r3, #8]
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	1ad2      	subs	r2, r2, r3
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6879      	ldr	r1, [r7, #4]
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f001 f8ac 	bl	800ccc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	2100      	movs	r1, #0
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f001 fdd7 	bl	800d724 <USBD_LL_PrepareReceive>
 800bb76:	e03f      	b.n	800bbf8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	68da      	ldr	r2, [r3, #12]
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d11c      	bne.n	800bbbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d316      	bcc.n	800bbbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d20f      	bcs.n	800bbbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f001 f88d 	bl	800ccc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f001 fdb4 	bl	800d724 <USBD_LL_PrepareReceive>
 800bbbc:	e01c      	b.n	800bbf8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d10f      	bne.n	800bbea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d009      	beq.n	800bbea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbea:	2180      	movs	r1, #128	; 0x80
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f001 fcef 	bl	800d5d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f001 f8b7 	bl	800cd66 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d03a      	beq.n	800bc78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff fe42 	bl	800b88c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bc10:	e032      	b.n	800bc78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc12:	7afb      	ldrb	r3, [r7, #11]
 800bc14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 f97f 	bl	800bf20 <USBD_CoreFindEP>
 800bc22:	4603      	mov	r3, r0
 800bc24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
 800bc28:	2bff      	cmp	r3, #255	; 0xff
 800bc2a:	d025      	beq.n	800bc78 <USBD_LL_DataInStage+0x15a>
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d122      	bne.n	800bc78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d11c      	bne.n	800bc78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bc3e:	7dfa      	ldrb	r2, [r7, #23]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	32ae      	adds	r2, #174	; 0xae
 800bc44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d014      	beq.n	800bc78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bc4e:	7dfa      	ldrb	r2, [r7, #23]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc56:	7dfa      	ldrb	r2, [r7, #23]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	32ae      	adds	r2, #174	; 0xae
 800bc5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	7afa      	ldrb	r2, [r7, #11]
 800bc64:	4611      	mov	r1, r2
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	4798      	blx	r3
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bc6e:	7dbb      	ldrb	r3, [r7, #22]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bc74:	7dbb      	ldrb	r3, [r7, #22]
 800bc76:	e000      	b.n	800bc7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d014      	beq.n	800bce8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00e      	beq.n	800bce8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	6852      	ldr	r2, [r2, #4]
 800bcd6:	b2d2      	uxtb	r2, r2
 800bcd8:	4611      	mov	r1, r2
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	4798      	blx	r3
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bce4:	2303      	movs	r3, #3
 800bce6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bce8:	2340      	movs	r3, #64	; 0x40
 800bcea:	2200      	movs	r2, #0
 800bcec:	2100      	movs	r1, #0
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f001 fc29 	bl	800d546 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2240      	movs	r2, #64	; 0x40
 800bd00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd04:	2340      	movs	r3, #64	; 0x40
 800bd06:	2200      	movs	r2, #0
 800bd08:	2180      	movs	r1, #128	; 0x80
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f001 fc1b 	bl	800d546 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2240      	movs	r2, #64	; 0x40
 800bd1a:	621a      	str	r2, [r3, #32]

  return ret;
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	78fa      	ldrb	r2, [r7, #3]
 800bd36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd54:	b2da      	uxtb	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2204      	movs	r2, #4
 800bd60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	d106      	bne.n	800bd94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d110      	bne.n	800bdd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00b      	beq.n	800bdd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d005      	beq.n	800bdd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b082      	sub	sp, #8
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
 800bdea:	460b      	mov	r3, r1
 800bdec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	32ae      	adds	r2, #174	; 0xae
 800bdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be00:	2303      	movs	r3, #3
 800be02:	e01c      	b.n	800be3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b03      	cmp	r3, #3
 800be0e:	d115      	bne.n	800be3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	32ae      	adds	r2, #174	; 0xae
 800be1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1e:	6a1b      	ldr	r3, [r3, #32]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	32ae      	adds	r2, #174	; 0xae
 800be2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	78fa      	ldrb	r2, [r7, #3]
 800be36:	4611      	mov	r1, r2
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b082      	sub	sp, #8
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
 800be4e:	460b      	mov	r3, r1
 800be50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	32ae      	adds	r2, #174	; 0xae
 800be5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800be64:	2303      	movs	r3, #3
 800be66:	e01c      	b.n	800bea2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b03      	cmp	r3, #3
 800be72:	d115      	bne.n	800bea0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	32ae      	adds	r2, #174	; 0xae
 800be7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00b      	beq.n	800bea0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	32ae      	adds	r2, #174	; 0xae
 800be92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be98:	78fa      	ldrb	r2, [r7, #3]
 800be9a:	4611      	mov	r1, r2
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800beaa:	b480      	push	{r7}
 800beac:	b083      	sub	sp, #12
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00e      	beq.n	800befc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	6852      	ldr	r2, [r2, #4]
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	4611      	mov	r1, r2
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	4798      	blx	r3
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bef8:	2303      	movs	r3, #3
 800befa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b086      	sub	sp, #24
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	460b      	mov	r3, r1
 800bf44:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d920      	bls.n	800bfa4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bf6a:	e013      	b.n	800bf94 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bf6c:	f107 030a 	add.w	r3, r7, #10
 800bf70:	4619      	mov	r1, r3
 800bf72:	6978      	ldr	r0, [r7, #20]
 800bf74:	f000 f81b 	bl	800bfae <USBD_GetNextDesc>
 800bf78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	785b      	ldrb	r3, [r3, #1]
 800bf7e:	2b05      	cmp	r3, #5
 800bf80:	d108      	bne.n	800bf94 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	789b      	ldrb	r3, [r3, #2]
 800bf8a:	78fa      	ldrb	r2, [r7, #3]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d008      	beq.n	800bfa2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bf90:	2300      	movs	r3, #0
 800bf92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	885b      	ldrh	r3, [r3, #2]
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	897b      	ldrh	r3, [r7, #10]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d8e5      	bhi.n	800bf6c <USBD_GetEpDesc+0x32>
 800bfa0:	e000      	b.n	800bfa4 <USBD_GetEpDesc+0x6a>
          break;
 800bfa2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bfa4:	693b      	ldr	r3, [r7, #16]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b085      	sub	sp, #20
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	881a      	ldrh	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	4413      	add	r3, r2
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bfda:	68fb      	ldr	r3, [r7, #12]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	3301      	adds	r3, #1
 800bffe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c006:	8a3b      	ldrh	r3, [r7, #16]
 800c008:	021b      	lsls	r3, r3, #8
 800c00a:	b21a      	sxth	r2, r3
 800c00c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c010:	4313      	orrs	r3, r2
 800c012:	b21b      	sxth	r3, r3
 800c014:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c016:	89fb      	ldrh	r3, [r7, #14]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	371c      	adds	r7, #28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c03a:	2b40      	cmp	r3, #64	; 0x40
 800c03c:	d005      	beq.n	800c04a <USBD_StdDevReq+0x26>
 800c03e:	2b40      	cmp	r3, #64	; 0x40
 800c040:	d857      	bhi.n	800c0f2 <USBD_StdDevReq+0xce>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00f      	beq.n	800c066 <USBD_StdDevReq+0x42>
 800c046:	2b20      	cmp	r3, #32
 800c048:	d153      	bne.n	800c0f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	32ae      	adds	r2, #174	; 0xae
 800c054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	4798      	blx	r3
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]
      break;
 800c064:	e04a      	b.n	800c0fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	785b      	ldrb	r3, [r3, #1]
 800c06a:	2b09      	cmp	r3, #9
 800c06c:	d83b      	bhi.n	800c0e6 <USBD_StdDevReq+0xc2>
 800c06e:	a201      	add	r2, pc, #4	; (adr r2, 800c074 <USBD_StdDevReq+0x50>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c0c9 	.word	0x0800c0c9
 800c078:	0800c0dd 	.word	0x0800c0dd
 800c07c:	0800c0e7 	.word	0x0800c0e7
 800c080:	0800c0d3 	.word	0x0800c0d3
 800c084:	0800c0e7 	.word	0x0800c0e7
 800c088:	0800c0a7 	.word	0x0800c0a7
 800c08c:	0800c09d 	.word	0x0800c09d
 800c090:	0800c0e7 	.word	0x0800c0e7
 800c094:	0800c0bf 	.word	0x0800c0bf
 800c098:	0800c0b1 	.word	0x0800c0b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fa3c 	bl	800c51c <USBD_GetDescriptor>
          break;
 800c0a4:	e024      	b.n	800c0f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fba1 	bl	800c7f0 <USBD_SetAddress>
          break;
 800c0ae:	e01f      	b.n	800c0f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fbe0 	bl	800c878 <USBD_SetConfig>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	73fb      	strb	r3, [r7, #15]
          break;
 800c0bc:	e018      	b.n	800c0f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fc83 	bl	800c9cc <USBD_GetConfig>
          break;
 800c0c6:	e013      	b.n	800c0f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fcb4 	bl	800ca38 <USBD_GetStatus>
          break;
 800c0d0:	e00e      	b.n	800c0f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fce3 	bl	800caa0 <USBD_SetFeature>
          break;
 800c0da:	e009      	b.n	800c0f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fd07 	bl	800caf2 <USBD_ClrFeature>
          break;
 800c0e4:	e004      	b.n	800c0f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fd5e 	bl	800cbaa <USBD_CtlError>
          break;
 800c0ee:	bf00      	nop
      }
      break;
 800c0f0:	e004      	b.n	800c0fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fd58 	bl	800cbaa <USBD_CtlError>
      break;
 800c0fa:	bf00      	nop
  }

  return ret;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop

0800c108 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c11e:	2b40      	cmp	r3, #64	; 0x40
 800c120:	d005      	beq.n	800c12e <USBD_StdItfReq+0x26>
 800c122:	2b40      	cmp	r3, #64	; 0x40
 800c124:	d852      	bhi.n	800c1cc <USBD_StdItfReq+0xc4>
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <USBD_StdItfReq+0x26>
 800c12a:	2b20      	cmp	r3, #32
 800c12c:	d14e      	bne.n	800c1cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c134:	b2db      	uxtb	r3, r3
 800c136:	3b01      	subs	r3, #1
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d840      	bhi.n	800c1be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	889b      	ldrh	r3, [r3, #4]
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b01      	cmp	r3, #1
 800c144:	d836      	bhi.n	800c1b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	889b      	ldrh	r3, [r3, #4]
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fed9 	bl	800bf06 <USBD_CoreFindIF>
 800c154:	4603      	mov	r3, r0
 800c156:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c158:	7bbb      	ldrb	r3, [r7, #14]
 800c15a:	2bff      	cmp	r3, #255	; 0xff
 800c15c:	d01d      	beq.n	800c19a <USBD_StdItfReq+0x92>
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11a      	bne.n	800c19a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c164:	7bba      	ldrb	r2, [r7, #14]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	32ae      	adds	r2, #174	; 0xae
 800c16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00f      	beq.n	800c194 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c174:	7bba      	ldrb	r2, [r7, #14]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c17c:	7bba      	ldrb	r2, [r7, #14]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32ae      	adds	r2, #174	; 0xae
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	4798      	blx	r3
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c192:	e004      	b.n	800c19e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c194:	2303      	movs	r3, #3
 800c196:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c198:	e001      	b.n	800c19e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c19a:	2303      	movs	r3, #3
 800c19c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	88db      	ldrh	r3, [r3, #6]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d110      	bne.n	800c1c8 <USBD_StdItfReq+0xc0>
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10d      	bne.n	800c1c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fdc7 	bl	800cd40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c1b2:	e009      	b.n	800c1c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fcf7 	bl	800cbaa <USBD_CtlError>
          break;
 800c1bc:	e004      	b.n	800c1c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fcf2 	bl	800cbaa <USBD_CtlError>
          break;
 800c1c6:	e000      	b.n	800c1ca <USBD_StdItfReq+0xc2>
          break;
 800c1c8:	bf00      	nop
      }
      break;
 800c1ca:	e004      	b.n	800c1d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fceb 	bl	800cbaa <USBD_CtlError>
      break;
 800c1d4:	bf00      	nop
  }

  return ret;
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	889b      	ldrh	r3, [r3, #4]
 800c1f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1fc:	2b40      	cmp	r3, #64	; 0x40
 800c1fe:	d007      	beq.n	800c210 <USBD_StdEPReq+0x30>
 800c200:	2b40      	cmp	r3, #64	; 0x40
 800c202:	f200 817f 	bhi.w	800c504 <USBD_StdEPReq+0x324>
 800c206:	2b00      	cmp	r3, #0
 800c208:	d02a      	beq.n	800c260 <USBD_StdEPReq+0x80>
 800c20a:	2b20      	cmp	r3, #32
 800c20c:	f040 817a 	bne.w	800c504 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff fe83 	bl	800bf20 <USBD_CoreFindEP>
 800c21a:	4603      	mov	r3, r0
 800c21c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c21e:	7b7b      	ldrb	r3, [r7, #13]
 800c220:	2bff      	cmp	r3, #255	; 0xff
 800c222:	f000 8174 	beq.w	800c50e <USBD_StdEPReq+0x32e>
 800c226:	7b7b      	ldrb	r3, [r7, #13]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f040 8170 	bne.w	800c50e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c22e:	7b7a      	ldrb	r2, [r7, #13]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c236:	7b7a      	ldrb	r2, [r7, #13]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	32ae      	adds	r2, #174	; 0xae
 800c23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 8163 	beq.w	800c50e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c248:	7b7a      	ldrb	r2, [r7, #13]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	32ae      	adds	r2, #174	; 0xae
 800c24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	4798      	blx	r3
 800c25a:	4603      	mov	r3, r0
 800c25c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c25e:	e156      	b.n	800c50e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	785b      	ldrb	r3, [r3, #1]
 800c264:	2b03      	cmp	r3, #3
 800c266:	d008      	beq.n	800c27a <USBD_StdEPReq+0x9a>
 800c268:	2b03      	cmp	r3, #3
 800c26a:	f300 8145 	bgt.w	800c4f8 <USBD_StdEPReq+0x318>
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 809b 	beq.w	800c3aa <USBD_StdEPReq+0x1ca>
 800c274:	2b01      	cmp	r3, #1
 800c276:	d03c      	beq.n	800c2f2 <USBD_StdEPReq+0x112>
 800c278:	e13e      	b.n	800c4f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b02      	cmp	r3, #2
 800c284:	d002      	beq.n	800c28c <USBD_StdEPReq+0xac>
 800c286:	2b03      	cmp	r3, #3
 800c288:	d016      	beq.n	800c2b8 <USBD_StdEPReq+0xd8>
 800c28a:	e02c      	b.n	800c2e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00d      	beq.n	800c2ae <USBD_StdEPReq+0xce>
 800c292:	7bbb      	ldrb	r3, [r7, #14]
 800c294:	2b80      	cmp	r3, #128	; 0x80
 800c296:	d00a      	beq.n	800c2ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 f997 	bl	800d5d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2a2:	2180      	movs	r1, #128	; 0x80
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f001 f993 	bl	800d5d0 <USBD_LL_StallEP>
 800c2aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2ac:	e020      	b.n	800c2f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fc7a 	bl	800cbaa <USBD_CtlError>
              break;
 800c2b6:	e01b      	b.n	800c2f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	885b      	ldrh	r3, [r3, #2]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10e      	bne.n	800c2de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00b      	beq.n	800c2de <USBD_StdEPReq+0xfe>
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
 800c2c8:	2b80      	cmp	r3, #128	; 0x80
 800c2ca:	d008      	beq.n	800c2de <USBD_StdEPReq+0xfe>
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	88db      	ldrh	r3, [r3, #6]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d104      	bne.n	800c2de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 f979 	bl	800d5d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fd2e 	bl	800cd40 <USBD_CtlSendStatus>

              break;
 800c2e4:	e004      	b.n	800c2f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fc5e 	bl	800cbaa <USBD_CtlError>
              break;
 800c2ee:	bf00      	nop
          }
          break;
 800c2f0:	e107      	b.n	800c502 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d002      	beq.n	800c304 <USBD_StdEPReq+0x124>
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d016      	beq.n	800c330 <USBD_StdEPReq+0x150>
 800c302:	e04b      	b.n	800c39c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00d      	beq.n	800c326 <USBD_StdEPReq+0x146>
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	2b80      	cmp	r3, #128	; 0x80
 800c30e:	d00a      	beq.n	800c326 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f001 f95b 	bl	800d5d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c31a:	2180      	movs	r1, #128	; 0x80
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f001 f957 	bl	800d5d0 <USBD_LL_StallEP>
 800c322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c324:	e040      	b.n	800c3a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fc3e 	bl	800cbaa <USBD_CtlError>
              break;
 800c32e:	e03b      	b.n	800c3a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	885b      	ldrh	r3, [r3, #2]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d136      	bne.n	800c3a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d004      	beq.n	800c34c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f001 f961 	bl	800d60e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fcf7 	bl	800cd40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c352:	7bbb      	ldrb	r3, [r7, #14]
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fde2 	bl	800bf20 <USBD_CoreFindEP>
 800c35c:	4603      	mov	r3, r0
 800c35e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c360:	7b7b      	ldrb	r3, [r7, #13]
 800c362:	2bff      	cmp	r3, #255	; 0xff
 800c364:	d01f      	beq.n	800c3a6 <USBD_StdEPReq+0x1c6>
 800c366:	7b7b      	ldrb	r3, [r7, #13]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d11c      	bne.n	800c3a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c36c:	7b7a      	ldrb	r2, [r7, #13]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c374:	7b7a      	ldrb	r2, [r7, #13]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	32ae      	adds	r2, #174	; 0xae
 800c37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d010      	beq.n	800c3a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c384:	7b7a      	ldrb	r2, [r7, #13]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	32ae      	adds	r2, #174	; 0xae
 800c38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	4798      	blx	r3
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c39a:	e004      	b.n	800c3a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fc03 	bl	800cbaa <USBD_CtlError>
              break;
 800c3a4:	e000      	b.n	800c3a8 <USBD_StdEPReq+0x1c8>
              break;
 800c3a6:	bf00      	nop
          }
          break;
 800c3a8:	e0ab      	b.n	800c502 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d002      	beq.n	800c3bc <USBD_StdEPReq+0x1dc>
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d032      	beq.n	800c420 <USBD_StdEPReq+0x240>
 800c3ba:	e097      	b.n	800c4ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <USBD_StdEPReq+0x1f2>
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	2b80      	cmp	r3, #128	; 0x80
 800c3c6:	d004      	beq.n	800c3d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fbed 	bl	800cbaa <USBD_CtlError>
                break;
 800c3d0:	e091      	b.n	800c4f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	da0b      	bge.n	800c3f2 <USBD_StdEPReq+0x212>
 800c3da:	7bbb      	ldrb	r3, [r7, #14]
 800c3dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	3310      	adds	r3, #16
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	e00b      	b.n	800c40a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	4413      	add	r3, r2
 800c408:	3304      	adds	r3, #4
 800c40a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2200      	movs	r2, #0
 800c410:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	2202      	movs	r2, #2
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fc37 	bl	800cc8c <USBD_CtlSendData>
              break;
 800c41e:	e06a      	b.n	800c4f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c424:	2b00      	cmp	r3, #0
 800c426:	da11      	bge.n	800c44c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c428:	7bbb      	ldrb	r3, [r7, #14]
 800c42a:	f003 020f 	and.w	r2, r3, #15
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	4613      	mov	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4413      	add	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	440b      	add	r3, r1
 800c43a:	3324      	adds	r3, #36	; 0x24
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d117      	bne.n	800c472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fbb0 	bl	800cbaa <USBD_CtlError>
                  break;
 800c44a:	e054      	b.n	800c4f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	f003 020f 	and.w	r2, r3, #15
 800c452:	6879      	ldr	r1, [r7, #4]
 800c454:	4613      	mov	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	440b      	add	r3, r1
 800c45e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c462:	881b      	ldrh	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d104      	bne.n	800c472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fb9d 	bl	800cbaa <USBD_CtlError>
                  break;
 800c470:	e041      	b.n	800c4f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c476:	2b00      	cmp	r3, #0
 800c478:	da0b      	bge.n	800c492 <USBD_StdEPReq+0x2b2>
 800c47a:	7bbb      	ldrb	r3, [r7, #14]
 800c47c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c480:	4613      	mov	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	3310      	adds	r3, #16
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	4413      	add	r3, r2
 800c48e:	3304      	adds	r3, #4
 800c490:	e00b      	b.n	800c4aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c498:	4613      	mov	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4ac:	7bbb      	ldrb	r3, [r7, #14]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <USBD_StdEPReq+0x2d8>
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	2b80      	cmp	r3, #128	; 0x80
 800c4b6:	d103      	bne.n	800c4c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	e00e      	b.n	800c4de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f001 f8c1 	bl	800d64c <USBD_LL_IsStallEP>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d003      	beq.n	800c4d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	e002      	b.n	800c4de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fbd1 	bl	800cc8c <USBD_CtlSendData>
              break;
 800c4ea:	e004      	b.n	800c4f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fb5b 	bl	800cbaa <USBD_CtlError>
              break;
 800c4f4:	bf00      	nop
          }
          break;
 800c4f6:	e004      	b.n	800c502 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fb55 	bl	800cbaa <USBD_CtlError>
          break;
 800c500:	bf00      	nop
      }
      break;
 800c502:	e005      	b.n	800c510 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fb4f 	bl	800cbaa <USBD_CtlError>
      break;
 800c50c:	e000      	b.n	800c510 <USBD_StdEPReq+0x330>
      break;
 800c50e:	bf00      	nop
  }

  return ret;
 800c510:	7bfb      	ldrb	r3, [r7, #15]
}
 800c512:	4618      	mov	r0, r3
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
	...

0800c51c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c526:	2300      	movs	r3, #0
 800c528:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	885b      	ldrh	r3, [r3, #2]
 800c536:	0a1b      	lsrs	r3, r3, #8
 800c538:	b29b      	uxth	r3, r3
 800c53a:	3b01      	subs	r3, #1
 800c53c:	2b06      	cmp	r3, #6
 800c53e:	f200 8128 	bhi.w	800c792 <USBD_GetDescriptor+0x276>
 800c542:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <USBD_GetDescriptor+0x2c>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c565 	.word	0x0800c565
 800c54c:	0800c57d 	.word	0x0800c57d
 800c550:	0800c5bd 	.word	0x0800c5bd
 800c554:	0800c793 	.word	0x0800c793
 800c558:	0800c793 	.word	0x0800c793
 800c55c:	0800c733 	.word	0x0800c733
 800c560:	0800c75f 	.word	0x0800c75f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	7c12      	ldrb	r2, [r2, #16]
 800c570:	f107 0108 	add.w	r1, r7, #8
 800c574:	4610      	mov	r0, r2
 800c576:	4798      	blx	r3
 800c578:	60f8      	str	r0, [r7, #12]
      break;
 800c57a:	e112      	b.n	800c7a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	7c1b      	ldrb	r3, [r3, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10d      	bne.n	800c5a0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	f107 0208 	add.w	r2, r7, #8
 800c590:	4610      	mov	r0, r2
 800c592:	4798      	blx	r3
 800c594:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3301      	adds	r3, #1
 800c59a:	2202      	movs	r2, #2
 800c59c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c59e:	e100      	b.n	800c7a2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	f107 0208 	add.w	r2, r7, #8
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	4798      	blx	r3
 800c5b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	2202      	movs	r2, #2
 800c5b8:	701a      	strb	r2, [r3, #0]
      break;
 800c5ba:	e0f2      	b.n	800c7a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	885b      	ldrh	r3, [r3, #2]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	f200 80ac 	bhi.w	800c720 <USBD_GetDescriptor+0x204>
 800c5c8:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <USBD_GetDescriptor+0xb4>)
 800c5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ce:	bf00      	nop
 800c5d0:	0800c5e9 	.word	0x0800c5e9
 800c5d4:	0800c61d 	.word	0x0800c61d
 800c5d8:	0800c651 	.word	0x0800c651
 800c5dc:	0800c685 	.word	0x0800c685
 800c5e0:	0800c6b9 	.word	0x0800c6b9
 800c5e4:	0800c6ed 	.word	0x0800c6ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00b      	beq.n	800c60c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	7c12      	ldrb	r2, [r2, #16]
 800c600:	f107 0108 	add.w	r1, r7, #8
 800c604:	4610      	mov	r0, r2
 800c606:	4798      	blx	r3
 800c608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c60a:	e091      	b.n	800c730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 facb 	bl	800cbaa <USBD_CtlError>
            err++;
 800c614:	7afb      	ldrb	r3, [r7, #11]
 800c616:	3301      	adds	r3, #1
 800c618:	72fb      	strb	r3, [r7, #11]
          break;
 800c61a:	e089      	b.n	800c730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00b      	beq.n	800c640 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	7c12      	ldrb	r2, [r2, #16]
 800c634:	f107 0108 	add.w	r1, r7, #8
 800c638:	4610      	mov	r0, r2
 800c63a:	4798      	blx	r3
 800c63c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c63e:	e077      	b.n	800c730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fab1 	bl	800cbaa <USBD_CtlError>
            err++;
 800c648:	7afb      	ldrb	r3, [r7, #11]
 800c64a:	3301      	adds	r3, #1
 800c64c:	72fb      	strb	r3, [r7, #11]
          break;
 800c64e:	e06f      	b.n	800c730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00b      	beq.n	800c674 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	7c12      	ldrb	r2, [r2, #16]
 800c668:	f107 0108 	add.w	r1, r7, #8
 800c66c:	4610      	mov	r0, r2
 800c66e:	4798      	blx	r3
 800c670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c672:	e05d      	b.n	800c730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fa97 	bl	800cbaa <USBD_CtlError>
            err++;
 800c67c:	7afb      	ldrb	r3, [r7, #11]
 800c67e:	3301      	adds	r3, #1
 800c680:	72fb      	strb	r3, [r7, #11]
          break;
 800c682:	e055      	b.n	800c730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00b      	beq.n	800c6a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	7c12      	ldrb	r2, [r2, #16]
 800c69c:	f107 0108 	add.w	r1, r7, #8
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4798      	blx	r3
 800c6a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6a6:	e043      	b.n	800c730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6a8:	6839      	ldr	r1, [r7, #0]
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fa7d 	bl	800cbaa <USBD_CtlError>
            err++;
 800c6b0:	7afb      	ldrb	r3, [r7, #11]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6b6:	e03b      	b.n	800c730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6be:	695b      	ldr	r3, [r3, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00b      	beq.n	800c6dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	7c12      	ldrb	r2, [r2, #16]
 800c6d0:	f107 0108 	add.w	r1, r7, #8
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4798      	blx	r3
 800c6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6da:	e029      	b.n	800c730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fa63 	bl	800cbaa <USBD_CtlError>
            err++;
 800c6e4:	7afb      	ldrb	r3, [r7, #11]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ea:	e021      	b.n	800c730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	7c12      	ldrb	r2, [r2, #16]
 800c704:	f107 0108 	add.w	r1, r7, #8
 800c708:	4610      	mov	r0, r2
 800c70a:	4798      	blx	r3
 800c70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c70e:	e00f      	b.n	800c730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa49 	bl	800cbaa <USBD_CtlError>
            err++;
 800c718:	7afb      	ldrb	r3, [r7, #11]
 800c71a:	3301      	adds	r3, #1
 800c71c:	72fb      	strb	r3, [r7, #11]
          break;
 800c71e:	e007      	b.n	800c730 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fa41 	bl	800cbaa <USBD_CtlError>
          err++;
 800c728:	7afb      	ldrb	r3, [r7, #11]
 800c72a:	3301      	adds	r3, #1
 800c72c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c72e:	bf00      	nop
      }
      break;
 800c730:	e037      	b.n	800c7a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	7c1b      	ldrb	r3, [r3, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d109      	bne.n	800c74e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c742:	f107 0208 	add.w	r2, r7, #8
 800c746:	4610      	mov	r0, r2
 800c748:	4798      	blx	r3
 800c74a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c74c:	e029      	b.n	800c7a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fa2a 	bl	800cbaa <USBD_CtlError>
        err++;
 800c756:	7afb      	ldrb	r3, [r7, #11]
 800c758:	3301      	adds	r3, #1
 800c75a:	72fb      	strb	r3, [r7, #11]
      break;
 800c75c:	e021      	b.n	800c7a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	7c1b      	ldrb	r3, [r3, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10d      	bne.n	800c782 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76e:	f107 0208 	add.w	r2, r7, #8
 800c772:	4610      	mov	r0, r2
 800c774:	4798      	blx	r3
 800c776:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3301      	adds	r3, #1
 800c77c:	2207      	movs	r2, #7
 800c77e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c780:	e00f      	b.n	800c7a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 fa10 	bl	800cbaa <USBD_CtlError>
        err++;
 800c78a:	7afb      	ldrb	r3, [r7, #11]
 800c78c:	3301      	adds	r3, #1
 800c78e:	72fb      	strb	r3, [r7, #11]
      break;
 800c790:	e007      	b.n	800c7a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fa08 	bl	800cbaa <USBD_CtlError>
      err++;
 800c79a:	7afb      	ldrb	r3, [r7, #11]
 800c79c:	3301      	adds	r3, #1
 800c79e:	72fb      	strb	r3, [r7, #11]
      break;
 800c7a0:	bf00      	nop
  }

  if (err != 0U)
 800c7a2:	7afb      	ldrb	r3, [r7, #11]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d11e      	bne.n	800c7e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	88db      	ldrh	r3, [r3, #6]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d016      	beq.n	800c7de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c7b0:	893b      	ldrh	r3, [r7, #8]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00e      	beq.n	800c7d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	88da      	ldrh	r2, [r3, #6]
 800c7ba:	893b      	ldrh	r3, [r7, #8]
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	bf28      	it	cs
 800c7c0:	4613      	movcs	r3, r2
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7c6:	893b      	ldrh	r3, [r7, #8]
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	68f9      	ldr	r1, [r7, #12]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fa5d 	bl	800cc8c <USBD_CtlSendData>
 800c7d2:	e009      	b.n	800c7e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f9e7 	bl	800cbaa <USBD_CtlError>
 800c7dc:	e004      	b.n	800c7e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 faae 	bl	800cd40 <USBD_CtlSendStatus>
 800c7e4:	e000      	b.n	800c7e8 <USBD_GetDescriptor+0x2cc>
    return;
 800c7e6:	bf00      	nop
  }
}
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop

0800c7f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	889b      	ldrh	r3, [r3, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d131      	bne.n	800c866 <USBD_SetAddress+0x76>
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	88db      	ldrh	r3, [r3, #6]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d12d      	bne.n	800c866 <USBD_SetAddress+0x76>
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	885b      	ldrh	r3, [r3, #2]
 800c80e:	2b7f      	cmp	r3, #127	; 0x7f
 800c810:	d829      	bhi.n	800c866 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	885b      	ldrh	r3, [r3, #2]
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b03      	cmp	r3, #3
 800c828:	d104      	bne.n	800c834 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f9bc 	bl	800cbaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c832:	e01d      	b.n	800c870 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	7bfa      	ldrb	r2, [r7, #15]
 800c838:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 ff2f 	bl	800d6a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa7a 	bl	800cd40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d004      	beq.n	800c85c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2202      	movs	r2, #2
 800c856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c85a:	e009      	b.n	800c870 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c864:	e004      	b.n	800c870 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c866:	6839      	ldr	r1, [r7, #0]
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f99e 	bl	800cbaa <USBD_CtlError>
  }
}
 800c86e:	bf00      	nop
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	885b      	ldrh	r3, [r3, #2]
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	4b4e      	ldr	r3, [pc, #312]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c88e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c890:	4b4d      	ldr	r3, [pc, #308]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d905      	bls.n	800c8a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 f985 	bl	800cbaa <USBD_CtlError>
    return USBD_FAIL;
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	e08c      	b.n	800c9be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d002      	beq.n	800c8b6 <USBD_SetConfig+0x3e>
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d029      	beq.n	800c908 <USBD_SetConfig+0x90>
 800c8b4:	e075      	b.n	800c9a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c8b6:	4b44      	ldr	r3, [pc, #272]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d020      	beq.n	800c900 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c8be:	4b42      	ldr	r3, [pc, #264]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8c8:	4b3f      	ldr	r3, [pc, #252]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7fe ffe7 	bl	800b8a2 <USBD_SetClassConfig>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d008      	beq.n	800c8f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f962 	bl	800cbaa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2202      	movs	r2, #2
 800c8ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8ee:	e065      	b.n	800c9bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fa25 	bl	800cd40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2203      	movs	r2, #3
 800c8fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c8fe:	e05d      	b.n	800c9bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fa1d 	bl	800cd40 <USBD_CtlSendStatus>
      break;
 800c906:	e059      	b.n	800c9bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c908:	4b2f      	ldr	r3, [pc, #188]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d112      	bne.n	800c936 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2202      	movs	r2, #2
 800c914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c918:	4b2b      	ldr	r3, [pc, #172]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c922:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7fe ffd6 	bl	800b8da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fa06 	bl	800cd40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c934:	e042      	b.n	800c9bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c936:	4b24      	ldr	r3, [pc, #144]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	461a      	mov	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	429a      	cmp	r2, r3
 800c942:	d02a      	beq.n	800c99a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f7fe ffc4 	bl	800b8da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c952:	4b1d      	ldr	r3, [pc, #116]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	461a      	mov	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c95c:	4b1a      	ldr	r3, [pc, #104]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	4619      	mov	r1, r3
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7fe ff9d 	bl	800b8a2 <USBD_SetClassConfig>
 800c968:	4603      	mov	r3, r0
 800c96a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00f      	beq.n	800c992 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f918 	bl	800cbaa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7fe ffa9 	bl	800b8da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2202      	movs	r2, #2
 800c98c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c990:	e014      	b.n	800c9bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f9d4 	bl	800cd40 <USBD_CtlSendStatus>
      break;
 800c998:	e010      	b.n	800c9bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f9d0 	bl	800cd40 <USBD_CtlSendStatus>
      break;
 800c9a0:	e00c      	b.n	800c9bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f900 	bl	800cbaa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9aa:	4b07      	ldr	r3, [pc, #28]	; (800c9c8 <USBD_SetConfig+0x150>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7fe ff92 	bl	800b8da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c9ba:	bf00      	nop
  }

  return ret;
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200046c0 	.word	0x200046c0

0800c9cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	88db      	ldrh	r3, [r3, #6]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d004      	beq.n	800c9e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c9de:	6839      	ldr	r1, [r7, #0]
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 f8e2 	bl	800cbaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c9e6:	e023      	b.n	800ca30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	dc02      	bgt.n	800c9fa <USBD_GetConfig+0x2e>
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	dc03      	bgt.n	800ca00 <USBD_GetConfig+0x34>
 800c9f8:	e015      	b.n	800ca26 <USBD_GetConfig+0x5a>
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d00b      	beq.n	800ca16 <USBD_GetConfig+0x4a>
 800c9fe:	e012      	b.n	800ca26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	3308      	adds	r3, #8
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f93c 	bl	800cc8c <USBD_CtlSendData>
        break;
 800ca14:	e00c      	b.n	800ca30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f934 	bl	800cc8c <USBD_CtlSendData>
        break;
 800ca24:	e004      	b.n	800ca30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f8be 	bl	800cbaa <USBD_CtlError>
        break;
 800ca2e:	bf00      	nop
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d81e      	bhi.n	800ca8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	88db      	ldrh	r3, [r3, #6]
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d004      	beq.n	800ca62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f8a5 	bl	800cbaa <USBD_CtlError>
        break;
 800ca60:	e01a      	b.n	800ca98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	f043 0202 	orr.w	r2, r3, #2
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	330c      	adds	r3, #12
 800ca82:	2202      	movs	r2, #2
 800ca84:	4619      	mov	r1, r3
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f900 	bl	800cc8c <USBD_CtlSendData>
      break;
 800ca8c:	e004      	b.n	800ca98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f88a 	bl	800cbaa <USBD_CtlError>
      break;
 800ca96:	bf00      	nop
  }
}
 800ca98:	bf00      	nop
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	885b      	ldrh	r3, [r3, #2]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d107      	bne.n	800cac2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f940 	bl	800cd40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cac0:	e013      	b.n	800caea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	885b      	ldrh	r3, [r3, #2]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d10b      	bne.n	800cae2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	889b      	ldrh	r3, [r3, #4]
 800cace:	0a1b      	lsrs	r3, r3, #8
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f930 	bl	800cd40 <USBD_CtlSendStatus>
}
 800cae0:	e003      	b.n	800caea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f860 	bl	800cbaa <USBD_CtlError>
}
 800caea:	bf00      	nop
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b082      	sub	sp, #8
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	3b01      	subs	r3, #1
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d80b      	bhi.n	800cb22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	885b      	ldrh	r3, [r3, #2]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d10c      	bne.n	800cb2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f910 	bl	800cd40 <USBD_CtlSendStatus>
      }
      break;
 800cb20:	e004      	b.n	800cb2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f840 	bl	800cbaa <USBD_CtlError>
      break;
 800cb2a:	e000      	b.n	800cb2e <USBD_ClrFeature+0x3c>
      break;
 800cb2c:	bf00      	nop
  }
}
 800cb2e:	bf00      	nop
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	781a      	ldrb	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	781a      	ldrb	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f7ff fa41 	bl	800bfe8 <SWAPBYTE>
 800cb66:	4603      	mov	r3, r0
 800cb68:	461a      	mov	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3301      	adds	r3, #1
 800cb72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	3301      	adds	r3, #1
 800cb78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f7ff fa34 	bl	800bfe8 <SWAPBYTE>
 800cb80:	4603      	mov	r3, r0
 800cb82:	461a      	mov	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3301      	adds	r3, #1
 800cb92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f7ff fa27 	bl	800bfe8 <SWAPBYTE>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	80da      	strh	r2, [r3, #6]
}
 800cba2:	bf00      	nop
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b082      	sub	sp, #8
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbb4:	2180      	movs	r1, #128	; 0x80
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fd0a 	bl	800d5d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fd06 	bl	800d5d0 <USBD_LL_StallEP>
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d036      	beq.n	800cc50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cbe6:	6938      	ldr	r0, [r7, #16]
 800cbe8:	f000 f836 	bl	800cc58 <USBD_GetLen>
 800cbec:	4603      	mov	r3, r0
 800cbee:	3301      	adds	r3, #1
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	4413      	add	r3, r2
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	7812      	ldrb	r2, [r2, #0]
 800cc04:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc06:	7dfb      	ldrb	r3, [r7, #23]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	4413      	add	r3, r2
 800cc12:	2203      	movs	r2, #3
 800cc14:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc1c:	e013      	b.n	800cc46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	4413      	add	r3, r2
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	7812      	ldrb	r2, [r2, #0]
 800cc28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	613b      	str	r3, [r7, #16]
    idx++;
 800cc30:	7dfb      	ldrb	r3, [r7, #23]
 800cc32:	3301      	adds	r3, #1
 800cc34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	3301      	adds	r3, #1
 800cc44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1e7      	bne.n	800cc1e <USBD_GetString+0x52>
 800cc4e:	e000      	b.n	800cc52 <USBD_GetString+0x86>
    return;
 800cc50:	bf00      	nop
  }
}
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc68:	e005      	b.n	800cc76 <USBD_GetLen+0x1e>
  {
    len++;
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	3301      	adds	r3, #1
 800cc74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1f5      	bne.n	800cc6a <USBD_GetLen+0x12>
  }

  return len;
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f000 fd15 	bl	800d6e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	60f8      	str	r0, [r7, #12]
 800ccca:	60b9      	str	r1, [r7, #8]
 800cccc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 fd04 	bl	800d6e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2203      	movs	r2, #3
 800ccf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f000 fd08 	bl	800d724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60f8      	str	r0, [r7, #12]
 800cd26:	60b9      	str	r1, [r7, #8]
 800cd28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	2100      	movs	r1, #0
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 fcf7 	bl	800d724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2204      	movs	r2, #4
 800cd4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd50:	2300      	movs	r3, #0
 800cd52:	2200      	movs	r2, #0
 800cd54:	2100      	movs	r1, #0
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fcc3 	bl	800d6e2 <USBD_LL_Transmit>

  return USBD_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b082      	sub	sp, #8
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2205      	movs	r2, #5
 800cd72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd76:	2300      	movs	r3, #0
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fcd1 	bl	800d724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800cd90:	2201      	movs	r2, #1
 800cd92:	4912      	ldr	r1, [pc, #72]	; (800cddc <MX_USB_DEVICE_Init+0x50>)
 800cd94:	4812      	ldr	r0, [pc, #72]	; (800cde0 <MX_USB_DEVICE_Init+0x54>)
 800cd96:	f7fe fd07 	bl	800b7a8 <USBD_Init>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d001      	beq.n	800cda4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cda0:	f7f4 fb12 	bl	80013c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800cda4:	490f      	ldr	r1, [pc, #60]	; (800cde4 <MX_USB_DEVICE_Init+0x58>)
 800cda6:	480e      	ldr	r0, [pc, #56]	; (800cde0 <MX_USB_DEVICE_Init+0x54>)
 800cda8:	f7fe fd2e 	bl	800b808 <USBD_RegisterClass>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cdb2:	f7f4 fb09 	bl	80013c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800cdb6:	490c      	ldr	r1, [pc, #48]	; (800cde8 <MX_USB_DEVICE_Init+0x5c>)
 800cdb8:	4809      	ldr	r0, [pc, #36]	; (800cde0 <MX_USB_DEVICE_Init+0x54>)
 800cdba:	f7fe fc1f 	bl	800b5fc <USBD_CDC_RegisterInterface>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cdc4:	f7f4 fb00 	bl	80013c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800cdc8:	4805      	ldr	r0, [pc, #20]	; (800cde0 <MX_USB_DEVICE_Init+0x54>)
 800cdca:	f7fe fd53 	bl	800b874 <USBD_Start>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cdd4:	f7f4 faf8 	bl	80013c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cdd8:	bf00      	nop
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	2000015c 	.word	0x2000015c
 800cde0:	200046c4 	.word	0x200046c4
 800cde4:	200000c8 	.word	0x200000c8
 800cde8:	20000148 	.word	0x20000148

0800cdec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	4905      	ldr	r1, [pc, #20]	; (800ce08 <CDC_Init_HS+0x1c>)
 800cdf4:	4805      	ldr	r0, [pc, #20]	; (800ce0c <CDC_Init_HS+0x20>)
 800cdf6:	f7fe fc1b 	bl	800b630 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800cdfa:	4905      	ldr	r1, [pc, #20]	; (800ce10 <CDC_Init_HS+0x24>)
 800cdfc:	4803      	ldr	r0, [pc, #12]	; (800ce0c <CDC_Init_HS+0x20>)
 800cdfe:	f7fe fc39 	bl	800b674 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce02:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	200051a0 	.word	0x200051a0
 800ce0c:	200046c4 	.word	0x200046c4
 800ce10:	200049a0 	.word	0x200049a0

0800ce14 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ce18:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	6039      	str	r1, [r7, #0]
 800ce2e:	71fb      	strb	r3, [r7, #7]
 800ce30:	4613      	mov	r3, r2
 800ce32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ce34:	79fb      	ldrb	r3, [r7, #7]
 800ce36:	2b23      	cmp	r3, #35	; 0x23
 800ce38:	d870      	bhi.n	800cf1c <CDC_Control_HS+0xf8>
 800ce3a:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <CDC_Control_HS+0x1c>)
 800ce3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce40:	0800cf1d 	.word	0x0800cf1d
 800ce44:	0800cf1d 	.word	0x0800cf1d
 800ce48:	0800cf1d 	.word	0x0800cf1d
 800ce4c:	0800cf1d 	.word	0x0800cf1d
 800ce50:	0800cf1d 	.word	0x0800cf1d
 800ce54:	0800cf1d 	.word	0x0800cf1d
 800ce58:	0800cf1d 	.word	0x0800cf1d
 800ce5c:	0800cf1d 	.word	0x0800cf1d
 800ce60:	0800cf1d 	.word	0x0800cf1d
 800ce64:	0800cf1d 	.word	0x0800cf1d
 800ce68:	0800cf1d 	.word	0x0800cf1d
 800ce6c:	0800cf1d 	.word	0x0800cf1d
 800ce70:	0800cf1d 	.word	0x0800cf1d
 800ce74:	0800cf1d 	.word	0x0800cf1d
 800ce78:	0800cf1d 	.word	0x0800cf1d
 800ce7c:	0800cf1d 	.word	0x0800cf1d
 800ce80:	0800cf1d 	.word	0x0800cf1d
 800ce84:	0800cf1d 	.word	0x0800cf1d
 800ce88:	0800cf1d 	.word	0x0800cf1d
 800ce8c:	0800cf1d 	.word	0x0800cf1d
 800ce90:	0800cf1d 	.word	0x0800cf1d
 800ce94:	0800cf1d 	.word	0x0800cf1d
 800ce98:	0800cf1d 	.word	0x0800cf1d
 800ce9c:	0800cf1d 	.word	0x0800cf1d
 800cea0:	0800cf1d 	.word	0x0800cf1d
 800cea4:	0800cf1d 	.word	0x0800cf1d
 800cea8:	0800cf1d 	.word	0x0800cf1d
 800ceac:	0800cf1d 	.word	0x0800cf1d
 800ceb0:	0800cf1d 	.word	0x0800cf1d
 800ceb4:	0800cf1d 	.word	0x0800cf1d
 800ceb8:	0800cf1d 	.word	0x0800cf1d
 800cebc:	0800cf1d 	.word	0x0800cf1d
 800cec0:	0800ced1 	.word	0x0800ced1
 800cec4:	0800cef7 	.word	0x0800cef7
 800cec8:	0800cf1d 	.word	0x0800cf1d
 800cecc:	0800cf1d 	.word	0x0800cf1d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
  case CDC_SET_LINE_CODING:
	  for (int i = 0; i < 7; i++){
 800ced0:	2300      	movs	r3, #0
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	e00b      	b.n	800ceee <CDC_Control_HS+0xca>
	  		  buff[i] = pbuf[i];
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	4413      	add	r3, r2
 800cedc:	7819      	ldrb	r1, [r3, #0]
 800cede:	4a13      	ldr	r2, [pc, #76]	; (800cf2c <CDC_Control_HS+0x108>)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4413      	add	r3, r2
 800cee4:	460a      	mov	r2, r1
 800cee6:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 7; i++){
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3301      	adds	r3, #1
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b06      	cmp	r3, #6
 800cef2:	ddf0      	ble.n	800ced6 <CDC_Control_HS+0xb2>
	  	  }

	      break;
 800cef4:	e013      	b.n	800cf1e <CDC_Control_HS+0xfa>

  case CDC_GET_LINE_CODING:
	  for (int i = 0; i < 7; i++){
 800cef6:	2300      	movs	r3, #0
 800cef8:	60bb      	str	r3, [r7, #8]
 800cefa:	e00b      	b.n	800cf14 <CDC_Control_HS+0xf0>
	  	  		  buff[i] = pbuf[i];
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	4413      	add	r3, r2
 800cf02:	7819      	ldrb	r1, [r3, #0]
 800cf04:	4a09      	ldr	r2, [pc, #36]	; (800cf2c <CDC_Control_HS+0x108>)
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	4413      	add	r3, r2
 800cf0a:	460a      	mov	r2, r1
 800cf0c:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 7; i++){
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	3301      	adds	r3, #1
 800cf12:	60bb      	str	r3, [r7, #8]
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2b06      	cmp	r3, #6
 800cf18:	ddf0      	ble.n	800cefc <CDC_Control_HS+0xd8>
	  	  	  }
    break;
 800cf1a:	e000      	b.n	800cf1e <CDC_Control_HS+0xfa>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf1c:	bf00      	nop
  }

  return (USBD_OK);
 800cf1e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	200059a0 	.word	0x200059a0

0800cf30 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	 USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4805      	ldr	r0, [pc, #20]	; (800cf54 <CDC_Receive_HS+0x24>)
 800cf3e:	f7fe fb99 	bl	800b674 <USBD_CDC_SetRxBuffer>
	 USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800cf42:	4804      	ldr	r0, [pc, #16]	; (800cf54 <CDC_Receive_HS+0x24>)
 800cf44:	f7fe fbfa 	bl	800b73c <USBD_CDC_ReceivePacket>
	 return (USBD_OK);
 800cf48:	2300      	movs	r3, #0

  /* USER CODE END 11 */
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	200046c4 	.word	0x200046c4

0800cf58 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800cf68:	4b0d      	ldr	r3, [pc, #52]	; (800cfa0 <CDC_Transmit_HS+0x48>)
 800cf6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d001      	beq.n	800cf7e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e00b      	b.n	800cf96 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800cf7e:	887b      	ldrh	r3, [r7, #2]
 800cf80:	461a      	mov	r2, r3
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	4806      	ldr	r0, [pc, #24]	; (800cfa0 <CDC_Transmit_HS+0x48>)
 800cf86:	f7fe fb53 	bl	800b630 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800cf8a:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <CDC_Transmit_HS+0x48>)
 800cf8c:	f7fe fb90 	bl	800b6b0 <USBD_CDC_TransmitPacket>
 800cf90:	4603      	mov	r3, r0
 800cf92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	200046c4 	.word	0x200046c4

0800cfa4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b087      	sub	sp, #28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800cfb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	371c      	adds	r7, #28
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
	...

0800cfc8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	6039      	str	r1, [r7, #0]
 800cfd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2212      	movs	r2, #18
 800cfd8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800cfda:	4b03      	ldr	r3, [pc, #12]	; (800cfe8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	20000178 	.word	0x20000178

0800cfec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	6039      	str	r1, [r7, #0]
 800cff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	2204      	movs	r2, #4
 800cffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cffe:	4b03      	ldr	r3, [pc, #12]	; (800d00c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	2000018c 	.word	0x2000018c

0800d010 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	4603      	mov	r3, r0
 800d018:	6039      	str	r1, [r7, #0]
 800d01a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d01c:	79fb      	ldrb	r3, [r7, #7]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d105      	bne.n	800d02e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	4907      	ldr	r1, [pc, #28]	; (800d044 <USBD_HS_ProductStrDescriptor+0x34>)
 800d026:	4808      	ldr	r0, [pc, #32]	; (800d048 <USBD_HS_ProductStrDescriptor+0x38>)
 800d028:	f7ff fdd0 	bl	800cbcc <USBD_GetString>
 800d02c:	e004      	b.n	800d038 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	4904      	ldr	r1, [pc, #16]	; (800d044 <USBD_HS_ProductStrDescriptor+0x34>)
 800d032:	4805      	ldr	r0, [pc, #20]	; (800d048 <USBD_HS_ProductStrDescriptor+0x38>)
 800d034:	f7ff fdca 	bl	800cbcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d038:	4b02      	ldr	r3, [pc, #8]	; (800d044 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	200059a8 	.word	0x200059a8
 800d048:	080106c4 	.word	0x080106c4

0800d04c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	4603      	mov	r3, r0
 800d054:	6039      	str	r1, [r7, #0]
 800d056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d058:	683a      	ldr	r2, [r7, #0]
 800d05a:	4904      	ldr	r1, [pc, #16]	; (800d06c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d05c:	4804      	ldr	r0, [pc, #16]	; (800d070 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d05e:	f7ff fdb5 	bl	800cbcc <USBD_GetString>
  return USBD_StrDesc;
 800d062:	4b02      	ldr	r3, [pc, #8]	; (800d06c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d064:	4618      	mov	r0, r3
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	200059a8 	.word	0x200059a8
 800d070:	080106dc 	.word	0x080106dc

0800d074 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	6039      	str	r1, [r7, #0]
 800d07e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	221a      	movs	r2, #26
 800d084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d086:	f000 f843 	bl	800d110 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d08a:	4b02      	ldr	r3, [pc, #8]	; (800d094 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	20000190 	.word	0x20000190

0800d098 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	6039      	str	r1, [r7, #0]
 800d0a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	4907      	ldr	r1, [pc, #28]	; (800d0cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800d0ae:	4808      	ldr	r0, [pc, #32]	; (800d0d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d0b0:	f7ff fd8c 	bl	800cbcc <USBD_GetString>
 800d0b4:	e004      	b.n	800d0c0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	4904      	ldr	r1, [pc, #16]	; (800d0cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800d0ba:	4805      	ldr	r0, [pc, #20]	; (800d0d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d0bc:	f7ff fd86 	bl	800cbcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0c0:	4b02      	ldr	r3, [pc, #8]	; (800d0cc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	200059a8 	.word	0x200059a8
 800d0d0:	080106f0 	.word	0x080106f0

0800d0d4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	6039      	str	r1, [r7, #0]
 800d0de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d105      	bne.n	800d0f2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	4907      	ldr	r1, [pc, #28]	; (800d108 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d0ea:	4808      	ldr	r0, [pc, #32]	; (800d10c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d0ec:	f7ff fd6e 	bl	800cbcc <USBD_GetString>
 800d0f0:	e004      	b.n	800d0fc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	4904      	ldr	r1, [pc, #16]	; (800d108 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d0f6:	4805      	ldr	r0, [pc, #20]	; (800d10c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d0f8:	f7ff fd68 	bl	800cbcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0fc:	4b02      	ldr	r3, [pc, #8]	; (800d108 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	200059a8 	.word	0x200059a8
 800d10c:	080106fc 	.word	0x080106fc

0800d110 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d116:	4b0f      	ldr	r3, [pc, #60]	; (800d154 <Get_SerialNum+0x44>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d11c:	4b0e      	ldr	r3, [pc, #56]	; (800d158 <Get_SerialNum+0x48>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d122:	4b0e      	ldr	r3, [pc, #56]	; (800d15c <Get_SerialNum+0x4c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4413      	add	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d009      	beq.n	800d14a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d136:	2208      	movs	r2, #8
 800d138:	4909      	ldr	r1, [pc, #36]	; (800d160 <Get_SerialNum+0x50>)
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f000 f814 	bl	800d168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d140:	2204      	movs	r2, #4
 800d142:	4908      	ldr	r1, [pc, #32]	; (800d164 <Get_SerialNum+0x54>)
 800d144:	68b8      	ldr	r0, [r7, #8]
 800d146:	f000 f80f 	bl	800d168 <IntToUnicode>
  }
}
 800d14a:	bf00      	nop
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	1fff7a10 	.word	0x1fff7a10
 800d158:	1fff7a14 	.word	0x1fff7a14
 800d15c:	1fff7a18 	.word	0x1fff7a18
 800d160:	20000192 	.word	0x20000192
 800d164:	200001a2 	.word	0x200001a2

0800d168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d168:	b480      	push	{r7}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d17a:	2300      	movs	r3, #0
 800d17c:	75fb      	strb	r3, [r7, #23]
 800d17e:	e027      	b.n	800d1d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	0f1b      	lsrs	r3, r3, #28
 800d184:	2b09      	cmp	r3, #9
 800d186:	d80b      	bhi.n	800d1a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	0f1b      	lsrs	r3, r3, #28
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	4619      	mov	r1, r3
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	440b      	add	r3, r1
 800d198:	3230      	adds	r2, #48	; 0x30
 800d19a:	b2d2      	uxtb	r2, r2
 800d19c:	701a      	strb	r2, [r3, #0]
 800d19e:	e00a      	b.n	800d1b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	0f1b      	lsrs	r3, r3, #28
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	005b      	lsls	r3, r3, #1
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	440b      	add	r3, r1
 800d1b0:	3237      	adds	r2, #55	; 0x37
 800d1b2:	b2d2      	uxtb	r2, r2
 800d1b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	011b      	lsls	r3, r3, #4
 800d1ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1bc:	7dfb      	ldrb	r3, [r7, #23]
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	75fb      	strb	r3, [r7, #23]
 800d1d0:	7dfa      	ldrb	r2, [r7, #23]
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d3d3      	bcc.n	800d180 <IntToUnicode+0x18>
  }
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	371c      	adds	r7, #28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
	...

0800d1e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b08a      	sub	sp, #40	; 0x28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1f0:	f107 0314 	add.w	r3, r7, #20
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	605a      	str	r2, [r3, #4]
 800d1fa:	609a      	str	r2, [r3, #8]
 800d1fc:	60da      	str	r2, [r3, #12]
 800d1fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a1d      	ldr	r2, [pc, #116]	; (800d27c <HAL_PCD_MspInit+0x94>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d134      	bne.n	800d274 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d20a:	2300      	movs	r3, #0
 800d20c:	613b      	str	r3, [r7, #16]
 800d20e:	4b1c      	ldr	r3, [pc, #112]	; (800d280 <HAL_PCD_MspInit+0x98>)
 800d210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d212:	4a1b      	ldr	r2, [pc, #108]	; (800d280 <HAL_PCD_MspInit+0x98>)
 800d214:	f043 0302 	orr.w	r3, r3, #2
 800d218:	6313      	str	r3, [r2, #48]	; 0x30
 800d21a:	4b19      	ldr	r3, [pc, #100]	; (800d280 <HAL_PCD_MspInit+0x98>)
 800d21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21e:	f003 0302 	and.w	r3, r3, #2
 800d222:	613b      	str	r3, [r7, #16]
 800d224:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800d226:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d22a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d22c:	2302      	movs	r3, #2
 800d22e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d230:	2300      	movs	r3, #0
 800d232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d234:	2303      	movs	r3, #3
 800d236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d238:	230c      	movs	r3, #12
 800d23a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d23c:	f107 0314 	add.w	r3, r7, #20
 800d240:	4619      	mov	r1, r3
 800d242:	4810      	ldr	r0, [pc, #64]	; (800d284 <HAL_PCD_MspInit+0x9c>)
 800d244:	f7f6 fe5a 	bl	8003efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]
 800d24c:	4b0c      	ldr	r3, [pc, #48]	; (800d280 <HAL_PCD_MspInit+0x98>)
 800d24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d250:	4a0b      	ldr	r2, [pc, #44]	; (800d280 <HAL_PCD_MspInit+0x98>)
 800d252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d256:	6313      	str	r3, [r2, #48]	; 0x30
 800d258:	4b09      	ldr	r3, [pc, #36]	; (800d280 <HAL_PCD_MspInit+0x98>)
 800d25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d260:	60fb      	str	r3, [r7, #12]
 800d262:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d264:	2200      	movs	r2, #0
 800d266:	2105      	movs	r1, #5
 800d268:	204d      	movs	r0, #77	; 0x4d
 800d26a:	f7f6 f9c9 	bl	8003600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d26e:	204d      	movs	r0, #77	; 0x4d
 800d270:	f7f6 f9e2 	bl	8003638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d274:	bf00      	nop
 800d276:	3728      	adds	r7, #40	; 0x28
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	40040000 	.word	0x40040000
 800d280:	40023800 	.word	0x40023800
 800d284:	40020400 	.word	0x40020400

0800d288 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d29c:	4619      	mov	r1, r3
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f7fe fb35 	bl	800b90e <USBD_LL_SetupStage>
}
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d2be:	78fa      	ldrb	r2, [r7, #3]
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	440b      	add	r3, r1
 800d2cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	78fb      	ldrb	r3, [r7, #3]
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	f7fe fb6f 	bl	800b9b8 <USBD_LL_DataOutStage>
}
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b082      	sub	sp, #8
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d2f4:	78fa      	ldrb	r2, [r7, #3]
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	440b      	add	r3, r1
 800d302:	334c      	adds	r3, #76	; 0x4c
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	78fb      	ldrb	r3, [r7, #3]
 800d308:	4619      	mov	r1, r3
 800d30a:	f7fe fc08 	bl	800bb1e <USBD_LL_DataInStage>
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b082      	sub	sp, #8
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d324:	4618      	mov	r0, r3
 800d326:	f7fe fd3c 	bl	800bda2 <USBD_LL_SOF>
}
 800d32a:	bf00      	nop
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d33a:	2301      	movs	r3, #1
 800d33c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d102      	bne.n	800d34c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d346:	2300      	movs	r3, #0
 800d348:	73fb      	strb	r3, [r7, #15]
 800d34a:	e008      	b.n	800d35e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	2b02      	cmp	r3, #2
 800d352:	d102      	bne.n	800d35a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d354:	2301      	movs	r3, #1
 800d356:	73fb      	strb	r3, [r7, #15]
 800d358:	e001      	b.n	800d35e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d35a:	f7f4 f835 	bl	80013c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d364:	7bfa      	ldrb	r2, [r7, #15]
 800d366:	4611      	mov	r1, r2
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fe fcdc 	bl	800bd26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fc84 	bl	800bc82 <USBD_LL_Reset>
}
 800d37a:	bf00      	nop
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
	...

0800d384 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fcd7 	bl	800bd46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	6812      	ldr	r2, [r2, #0]
 800d3a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3aa:	f043 0301 	orr.w	r3, r3, #1
 800d3ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a1b      	ldr	r3, [r3, #32]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d005      	beq.n	800d3c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3b8:	4b04      	ldr	r3, [pc, #16]	; (800d3cc <HAL_PCD_SuspendCallback+0x48>)
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	4a03      	ldr	r2, [pc, #12]	; (800d3cc <HAL_PCD_SuspendCallback+0x48>)
 800d3be:	f043 0306 	orr.w	r3, r3, #6
 800d3c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	e000ed00 	.word	0xe000ed00

0800d3d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fcc7 	bl	800bd72 <USBD_LL_Resume>
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3fe:	78fa      	ldrb	r2, [r7, #3]
 800d400:	4611      	mov	r1, r2
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe fd1f 	bl	800be46 <USBD_LL_IsoOUTIncomplete>
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d422:	78fa      	ldrb	r2, [r7, #3]
 800d424:	4611      	mov	r1, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fcdb 	bl	800bde2 <USBD_LL_IsoINIncomplete>
}
 800d42c:	bf00      	nop
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe fd31 	bl	800beaa <USBD_LL_DevConnected>
}
 800d448:	bf00      	nop
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fe fd2e 	bl	800bec0 <USBD_LL_DevDisconnected>
}
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d140      	bne.n	800d4fe <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d47c:	4a22      	ldr	r2, [pc, #136]	; (800d508 <USBD_LL_Init+0x9c>)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a20      	ldr	r2, [pc, #128]	; (800d508 <USBD_LL_Init+0x9c>)
 800d488:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d48c:	4b1e      	ldr	r3, [pc, #120]	; (800d508 <USBD_LL_Init+0x9c>)
 800d48e:	4a1f      	ldr	r2, [pc, #124]	; (800d50c <USBD_LL_Init+0xa0>)
 800d490:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800d492:	4b1d      	ldr	r3, [pc, #116]	; (800d508 <USBD_LL_Init+0x9c>)
 800d494:	2206      	movs	r2, #6
 800d496:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800d498:	4b1b      	ldr	r3, [pc, #108]	; (800d508 <USBD_LL_Init+0x9c>)
 800d49a:	2202      	movs	r2, #2
 800d49c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d49e:	4b1a      	ldr	r3, [pc, #104]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d4a4:	4b18      	ldr	r3, [pc, #96]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4a6:	2202      	movs	r2, #2
 800d4a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d4aa:	4b17      	ldr	r3, [pc, #92]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d4b0:	4b15      	ldr	r3, [pc, #84]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d4b6:	4b14      	ldr	r3, [pc, #80]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d4bc:	4b12      	ldr	r3, [pc, #72]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d4c2:	4b11      	ldr	r3, [pc, #68]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d4c8:	4b0f      	ldr	r3, [pc, #60]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d4ce:	480e      	ldr	r0, [pc, #56]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4d0:	f7f7 fabf 	bl	8004a52 <HAL_PCD_Init>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d4da:	f7f3 ff75 	bl	80013c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d4de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4e2:	4809      	ldr	r0, [pc, #36]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4e4:	f7f8 fd15 	bl	8005f12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d4e8:	2280      	movs	r2, #128	; 0x80
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	4806      	ldr	r0, [pc, #24]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4ee:	f7f8 fcc9 	bl	8005e84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d4f2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800d4f6:	2101      	movs	r1, #1
 800d4f8:	4803      	ldr	r0, [pc, #12]	; (800d508 <USBD_LL_Init+0x9c>)
 800d4fa:	f7f8 fcc3 	bl	8005e84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20005ba8 	.word	0x20005ba8
 800d50c:	40040000 	.word	0x40040000

0800d510 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d526:	4618      	mov	r0, r3
 800d528:	f7f7 fbb0 	bl	8004c8c <HAL_PCD_Start>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	4618      	mov	r0, r3
 800d534:	f000 f942 	bl	800d7bc <USBD_Get_USB_Status>
 800d538:	4603      	mov	r3, r0
 800d53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	4608      	mov	r0, r1
 800d550:	4611      	mov	r1, r2
 800d552:	461a      	mov	r2, r3
 800d554:	4603      	mov	r3, r0
 800d556:	70fb      	strb	r3, [r7, #3]
 800d558:	460b      	mov	r3, r1
 800d55a:	70bb      	strb	r3, [r7, #2]
 800d55c:	4613      	mov	r3, r2
 800d55e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d56e:	78bb      	ldrb	r3, [r7, #2]
 800d570:	883a      	ldrh	r2, [r7, #0]
 800d572:	78f9      	ldrb	r1, [r7, #3]
 800d574:	f7f8 f881 	bl	800567a <HAL_PCD_EP_Open>
 800d578:	4603      	mov	r3, r0
 800d57a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 f91c 	bl	800d7bc <USBD_Get_USB_Status>
 800d584:	4603      	mov	r3, r0
 800d586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d588:	7bbb      	ldrb	r3, [r7, #14]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b084      	sub	sp, #16
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	460b      	mov	r3, r1
 800d59c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5ac:	78fa      	ldrb	r2, [r7, #3]
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f8 f8ca 	bl	800574a <HAL_PCD_EP_Close>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 f8fd 	bl	800d7bc <USBD_Get_USB_Status>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5ea:	78fa      	ldrb	r2, [r7, #3]
 800d5ec:	4611      	mov	r1, r2
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7f8 f9a2 	bl	8005938 <HAL_PCD_EP_SetStall>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 f8de 	bl	800d7bc <USBD_Get_USB_Status>
 800d600:	4603      	mov	r3, r0
 800d602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d604:	7bbb      	ldrb	r3, [r7, #14]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	460b      	mov	r3, r1
 800d618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d61e:	2300      	movs	r3, #0
 800d620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d628:	78fa      	ldrb	r2, [r7, #3]
 800d62a:	4611      	mov	r1, r2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7f8 f9e7 	bl	8005a00 <HAL_PCD_EP_ClrStall>
 800d632:	4603      	mov	r3, r0
 800d634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 f8bf 	bl	800d7bc <USBD_Get_USB_Status>
 800d63e:	4603      	mov	r3, r0
 800d640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d642:	7bbb      	ldrb	r3, [r7, #14]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d65e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d664:	2b00      	cmp	r3, #0
 800d666:	da0b      	bge.n	800d680 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d668:	78fb      	ldrb	r3, [r7, #3]
 800d66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	4613      	mov	r3, r2
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	4413      	add	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	440b      	add	r3, r1
 800d67a:	333e      	adds	r3, #62	; 0x3e
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	e00b      	b.n	800d698 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d686:	68f9      	ldr	r1, [r7, #12]
 800d688:	4613      	mov	r3, r2
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	4413      	add	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	440b      	add	r3, r1
 800d692:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d696:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6be:	78fa      	ldrb	r2, [r7, #3]
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f7 ffb4 	bl	8005630 <HAL_PCD_SetAddress>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 f874 	bl	800d7bc <USBD_Get_USB_Status>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b086      	sub	sp, #24
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	60f8      	str	r0, [r7, #12]
 800d6ea:	607a      	str	r2, [r7, #4]
 800d6ec:	603b      	str	r3, [r7, #0]
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d700:	7af9      	ldrb	r1, [r7, #11]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	f7f8 f8cd 	bl	80058a4 <HAL_PCD_EP_Transmit>
 800d70a:	4603      	mov	r3, r0
 800d70c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
 800d710:	4618      	mov	r0, r3
 800d712:	f000 f853 	bl	800d7bc <USBD_Get_USB_Status>
 800d716:	4603      	mov	r3, r0
 800d718:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d71a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3718      	adds	r7, #24
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	607a      	str	r2, [r7, #4]
 800d72e:	603b      	str	r3, [r7, #0]
 800d730:	460b      	mov	r3, r1
 800d732:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d734:	2300      	movs	r3, #0
 800d736:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d742:	7af9      	ldrb	r1, [r7, #11]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	f7f8 f849 	bl	80057de <HAL_PCD_EP_Receive>
 800d74c:	4603      	mov	r3, r0
 800d74e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d750:	7dfb      	ldrb	r3, [r7, #23]
 800d752:	4618      	mov	r0, r3
 800d754:	f000 f832 	bl	800d7bc <USBD_Get_USB_Status>
 800d758:	4603      	mov	r3, r0
 800d75a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d75c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3718      	adds	r7, #24
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b082      	sub	sp, #8
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	460b      	mov	r3, r1
 800d770:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d778:	78fa      	ldrb	r2, [r7, #3]
 800d77a:	4611      	mov	r1, r2
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7f8 f879 	bl	8005874 <HAL_PCD_EP_GetRxCount>
 800d782:	4603      	mov	r3, r0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d794:	4b03      	ldr	r3, [pc, #12]	; (800d7a4 <USBD_static_malloc+0x18>)
}
 800d796:	4618      	mov	r0, r3
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	200060b4 	.word	0x200060b4

0800d7a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]

}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	2b03      	cmp	r3, #3
 800d7ce:	d817      	bhi.n	800d800 <USBD_Get_USB_Status+0x44>
 800d7d0:	a201      	add	r2, pc, #4	; (adr r2, 800d7d8 <USBD_Get_USB_Status+0x1c>)
 800d7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d6:	bf00      	nop
 800d7d8:	0800d7e9 	.word	0x0800d7e9
 800d7dc:	0800d7ef 	.word	0x0800d7ef
 800d7e0:	0800d7f5 	.word	0x0800d7f5
 800d7e4:	0800d7fb 	.word	0x0800d7fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ec:	e00b      	b.n	800d806 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f2:	e008      	b.n	800d806 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f8:	e005      	b.n	800d806 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d7fe:	e002      	b.n	800d806 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d800:	2303      	movs	r3, #3
 800d802:	73fb      	strb	r3, [r7, #15]
    break;
 800d804:	bf00      	nop
  }
  return usb_status;
 800d806:	7bfb      	ldrb	r3, [r7, #15]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3714      	adds	r7, #20
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <__errno>:
 800d814:	4b01      	ldr	r3, [pc, #4]	; (800d81c <__errno+0x8>)
 800d816:	6818      	ldr	r0, [r3, #0]
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	200001ac 	.word	0x200001ac

0800d820 <__libc_init_array>:
 800d820:	b570      	push	{r4, r5, r6, lr}
 800d822:	4d0d      	ldr	r5, [pc, #52]	; (800d858 <__libc_init_array+0x38>)
 800d824:	4c0d      	ldr	r4, [pc, #52]	; (800d85c <__libc_init_array+0x3c>)
 800d826:	1b64      	subs	r4, r4, r5
 800d828:	10a4      	asrs	r4, r4, #2
 800d82a:	2600      	movs	r6, #0
 800d82c:	42a6      	cmp	r6, r4
 800d82e:	d109      	bne.n	800d844 <__libc_init_array+0x24>
 800d830:	4d0b      	ldr	r5, [pc, #44]	; (800d860 <__libc_init_array+0x40>)
 800d832:	4c0c      	ldr	r4, [pc, #48]	; (800d864 <__libc_init_array+0x44>)
 800d834:	f002 ff02 	bl	801063c <_init>
 800d838:	1b64      	subs	r4, r4, r5
 800d83a:	10a4      	asrs	r4, r4, #2
 800d83c:	2600      	movs	r6, #0
 800d83e:	42a6      	cmp	r6, r4
 800d840:	d105      	bne.n	800d84e <__libc_init_array+0x2e>
 800d842:	bd70      	pop	{r4, r5, r6, pc}
 800d844:	f855 3b04 	ldr.w	r3, [r5], #4
 800d848:	4798      	blx	r3
 800d84a:	3601      	adds	r6, #1
 800d84c:	e7ee      	b.n	800d82c <__libc_init_array+0xc>
 800d84e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d852:	4798      	blx	r3
 800d854:	3601      	adds	r6, #1
 800d856:	e7f2      	b.n	800d83e <__libc_init_array+0x1e>
 800d858:	080125c4 	.word	0x080125c4
 800d85c:	080125c4 	.word	0x080125c4
 800d860:	080125c4 	.word	0x080125c4
 800d864:	080125c8 	.word	0x080125c8

0800d868 <memcpy>:
 800d868:	440a      	add	r2, r1
 800d86a:	4291      	cmp	r1, r2
 800d86c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d870:	d100      	bne.n	800d874 <memcpy+0xc>
 800d872:	4770      	bx	lr
 800d874:	b510      	push	{r4, lr}
 800d876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d87a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d87e:	4291      	cmp	r1, r2
 800d880:	d1f9      	bne.n	800d876 <memcpy+0xe>
 800d882:	bd10      	pop	{r4, pc}

0800d884 <memset>:
 800d884:	4402      	add	r2, r0
 800d886:	4603      	mov	r3, r0
 800d888:	4293      	cmp	r3, r2
 800d88a:	d100      	bne.n	800d88e <memset+0xa>
 800d88c:	4770      	bx	lr
 800d88e:	f803 1b01 	strb.w	r1, [r3], #1
 800d892:	e7f9      	b.n	800d888 <memset+0x4>

0800d894 <__cvt>:
 800d894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d898:	ec55 4b10 	vmov	r4, r5, d0
 800d89c:	2d00      	cmp	r5, #0
 800d89e:	460e      	mov	r6, r1
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	462b      	mov	r3, r5
 800d8a4:	bfbb      	ittet	lt
 800d8a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d8aa:	461d      	movlt	r5, r3
 800d8ac:	2300      	movge	r3, #0
 800d8ae:	232d      	movlt	r3, #45	; 0x2d
 800d8b0:	700b      	strb	r3, [r1, #0]
 800d8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d8b8:	4691      	mov	r9, r2
 800d8ba:	f023 0820 	bic.w	r8, r3, #32
 800d8be:	bfbc      	itt	lt
 800d8c0:	4622      	movlt	r2, r4
 800d8c2:	4614      	movlt	r4, r2
 800d8c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8c8:	d005      	beq.n	800d8d6 <__cvt+0x42>
 800d8ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d8ce:	d100      	bne.n	800d8d2 <__cvt+0x3e>
 800d8d0:	3601      	adds	r6, #1
 800d8d2:	2102      	movs	r1, #2
 800d8d4:	e000      	b.n	800d8d8 <__cvt+0x44>
 800d8d6:	2103      	movs	r1, #3
 800d8d8:	ab03      	add	r3, sp, #12
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	ab02      	add	r3, sp, #8
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	ec45 4b10 	vmov	d0, r4, r5
 800d8e4:	4653      	mov	r3, sl
 800d8e6:	4632      	mov	r2, r6
 800d8e8:	f000 fcea 	bl	800e2c0 <_dtoa_r>
 800d8ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8f0:	4607      	mov	r7, r0
 800d8f2:	d102      	bne.n	800d8fa <__cvt+0x66>
 800d8f4:	f019 0f01 	tst.w	r9, #1
 800d8f8:	d022      	beq.n	800d940 <__cvt+0xac>
 800d8fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8fe:	eb07 0906 	add.w	r9, r7, r6
 800d902:	d110      	bne.n	800d926 <__cvt+0x92>
 800d904:	783b      	ldrb	r3, [r7, #0]
 800d906:	2b30      	cmp	r3, #48	; 0x30
 800d908:	d10a      	bne.n	800d920 <__cvt+0x8c>
 800d90a:	2200      	movs	r2, #0
 800d90c:	2300      	movs	r3, #0
 800d90e:	4620      	mov	r0, r4
 800d910:	4629      	mov	r1, r5
 800d912:	f7f3 f8e9 	bl	8000ae8 <__aeabi_dcmpeq>
 800d916:	b918      	cbnz	r0, 800d920 <__cvt+0x8c>
 800d918:	f1c6 0601 	rsb	r6, r6, #1
 800d91c:	f8ca 6000 	str.w	r6, [sl]
 800d920:	f8da 3000 	ldr.w	r3, [sl]
 800d924:	4499      	add	r9, r3
 800d926:	2200      	movs	r2, #0
 800d928:	2300      	movs	r3, #0
 800d92a:	4620      	mov	r0, r4
 800d92c:	4629      	mov	r1, r5
 800d92e:	f7f3 f8db 	bl	8000ae8 <__aeabi_dcmpeq>
 800d932:	b108      	cbz	r0, 800d938 <__cvt+0xa4>
 800d934:	f8cd 900c 	str.w	r9, [sp, #12]
 800d938:	2230      	movs	r2, #48	; 0x30
 800d93a:	9b03      	ldr	r3, [sp, #12]
 800d93c:	454b      	cmp	r3, r9
 800d93e:	d307      	bcc.n	800d950 <__cvt+0xbc>
 800d940:	9b03      	ldr	r3, [sp, #12]
 800d942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d944:	1bdb      	subs	r3, r3, r7
 800d946:	4638      	mov	r0, r7
 800d948:	6013      	str	r3, [r2, #0]
 800d94a:	b004      	add	sp, #16
 800d94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d950:	1c59      	adds	r1, r3, #1
 800d952:	9103      	str	r1, [sp, #12]
 800d954:	701a      	strb	r2, [r3, #0]
 800d956:	e7f0      	b.n	800d93a <__cvt+0xa6>

0800d958 <__exponent>:
 800d958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d95a:	4603      	mov	r3, r0
 800d95c:	2900      	cmp	r1, #0
 800d95e:	bfb8      	it	lt
 800d960:	4249      	neglt	r1, r1
 800d962:	f803 2b02 	strb.w	r2, [r3], #2
 800d966:	bfb4      	ite	lt
 800d968:	222d      	movlt	r2, #45	; 0x2d
 800d96a:	222b      	movge	r2, #43	; 0x2b
 800d96c:	2909      	cmp	r1, #9
 800d96e:	7042      	strb	r2, [r0, #1]
 800d970:	dd2a      	ble.n	800d9c8 <__exponent+0x70>
 800d972:	f10d 0407 	add.w	r4, sp, #7
 800d976:	46a4      	mov	ip, r4
 800d978:	270a      	movs	r7, #10
 800d97a:	46a6      	mov	lr, r4
 800d97c:	460a      	mov	r2, r1
 800d97e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d982:	fb07 1516 	mls	r5, r7, r6, r1
 800d986:	3530      	adds	r5, #48	; 0x30
 800d988:	2a63      	cmp	r2, #99	; 0x63
 800d98a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d98e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d992:	4631      	mov	r1, r6
 800d994:	dcf1      	bgt.n	800d97a <__exponent+0x22>
 800d996:	3130      	adds	r1, #48	; 0x30
 800d998:	f1ae 0502 	sub.w	r5, lr, #2
 800d99c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d9a0:	1c44      	adds	r4, r0, #1
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	4561      	cmp	r1, ip
 800d9a6:	d30a      	bcc.n	800d9be <__exponent+0x66>
 800d9a8:	f10d 0209 	add.w	r2, sp, #9
 800d9ac:	eba2 020e 	sub.w	r2, r2, lr
 800d9b0:	4565      	cmp	r5, ip
 800d9b2:	bf88      	it	hi
 800d9b4:	2200      	movhi	r2, #0
 800d9b6:	4413      	add	r3, r2
 800d9b8:	1a18      	subs	r0, r3, r0
 800d9ba:	b003      	add	sp, #12
 800d9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d9c6:	e7ed      	b.n	800d9a4 <__exponent+0x4c>
 800d9c8:	2330      	movs	r3, #48	; 0x30
 800d9ca:	3130      	adds	r1, #48	; 0x30
 800d9cc:	7083      	strb	r3, [r0, #2]
 800d9ce:	70c1      	strb	r1, [r0, #3]
 800d9d0:	1d03      	adds	r3, r0, #4
 800d9d2:	e7f1      	b.n	800d9b8 <__exponent+0x60>

0800d9d4 <_printf_float>:
 800d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d8:	ed2d 8b02 	vpush	{d8}
 800d9dc:	b08d      	sub	sp, #52	; 0x34
 800d9de:	460c      	mov	r4, r1
 800d9e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d9e4:	4616      	mov	r6, r2
 800d9e6:	461f      	mov	r7, r3
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	f001 fa57 	bl	800ee9c <_localeconv_r>
 800d9ee:	f8d0 a000 	ldr.w	sl, [r0]
 800d9f2:	4650      	mov	r0, sl
 800d9f4:	f7f2 fbfc 	bl	80001f0 <strlen>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	9305      	str	r3, [sp, #20]
 800da00:	f8d8 3000 	ldr.w	r3, [r8]
 800da04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800da08:	3307      	adds	r3, #7
 800da0a:	f023 0307 	bic.w	r3, r3, #7
 800da0e:	f103 0208 	add.w	r2, r3, #8
 800da12:	f8c8 2000 	str.w	r2, [r8]
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da26:	9307      	str	r3, [sp, #28]
 800da28:	f8cd 8018 	str.w	r8, [sp, #24]
 800da2c:	ee08 0a10 	vmov	s16, r0
 800da30:	4b9f      	ldr	r3, [pc, #636]	; (800dcb0 <_printf_float+0x2dc>)
 800da32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da36:	f04f 32ff 	mov.w	r2, #4294967295
 800da3a:	f7f3 f887 	bl	8000b4c <__aeabi_dcmpun>
 800da3e:	bb88      	cbnz	r0, 800daa4 <_printf_float+0xd0>
 800da40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da44:	4b9a      	ldr	r3, [pc, #616]	; (800dcb0 <_printf_float+0x2dc>)
 800da46:	f04f 32ff 	mov.w	r2, #4294967295
 800da4a:	f7f3 f861 	bl	8000b10 <__aeabi_dcmple>
 800da4e:	bb48      	cbnz	r0, 800daa4 <_printf_float+0xd0>
 800da50:	2200      	movs	r2, #0
 800da52:	2300      	movs	r3, #0
 800da54:	4640      	mov	r0, r8
 800da56:	4649      	mov	r1, r9
 800da58:	f7f3 f850 	bl	8000afc <__aeabi_dcmplt>
 800da5c:	b110      	cbz	r0, 800da64 <_printf_float+0x90>
 800da5e:	232d      	movs	r3, #45	; 0x2d
 800da60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da64:	4b93      	ldr	r3, [pc, #588]	; (800dcb4 <_printf_float+0x2e0>)
 800da66:	4894      	ldr	r0, [pc, #592]	; (800dcb8 <_printf_float+0x2e4>)
 800da68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da6c:	bf94      	ite	ls
 800da6e:	4698      	movls	r8, r3
 800da70:	4680      	movhi	r8, r0
 800da72:	2303      	movs	r3, #3
 800da74:	6123      	str	r3, [r4, #16]
 800da76:	9b05      	ldr	r3, [sp, #20]
 800da78:	f023 0204 	bic.w	r2, r3, #4
 800da7c:	6022      	str	r2, [r4, #0]
 800da7e:	f04f 0900 	mov.w	r9, #0
 800da82:	9700      	str	r7, [sp, #0]
 800da84:	4633      	mov	r3, r6
 800da86:	aa0b      	add	r2, sp, #44	; 0x2c
 800da88:	4621      	mov	r1, r4
 800da8a:	4628      	mov	r0, r5
 800da8c:	f000 f9d8 	bl	800de40 <_printf_common>
 800da90:	3001      	adds	r0, #1
 800da92:	f040 8090 	bne.w	800dbb6 <_printf_float+0x1e2>
 800da96:	f04f 30ff 	mov.w	r0, #4294967295
 800da9a:	b00d      	add	sp, #52	; 0x34
 800da9c:	ecbd 8b02 	vpop	{d8}
 800daa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa4:	4642      	mov	r2, r8
 800daa6:	464b      	mov	r3, r9
 800daa8:	4640      	mov	r0, r8
 800daaa:	4649      	mov	r1, r9
 800daac:	f7f3 f84e 	bl	8000b4c <__aeabi_dcmpun>
 800dab0:	b140      	cbz	r0, 800dac4 <_printf_float+0xf0>
 800dab2:	464b      	mov	r3, r9
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	bfbc      	itt	lt
 800dab8:	232d      	movlt	r3, #45	; 0x2d
 800daba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dabe:	487f      	ldr	r0, [pc, #508]	; (800dcbc <_printf_float+0x2e8>)
 800dac0:	4b7f      	ldr	r3, [pc, #508]	; (800dcc0 <_printf_float+0x2ec>)
 800dac2:	e7d1      	b.n	800da68 <_printf_float+0x94>
 800dac4:	6863      	ldr	r3, [r4, #4]
 800dac6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800daca:	9206      	str	r2, [sp, #24]
 800dacc:	1c5a      	adds	r2, r3, #1
 800dace:	d13f      	bne.n	800db50 <_printf_float+0x17c>
 800dad0:	2306      	movs	r3, #6
 800dad2:	6063      	str	r3, [r4, #4]
 800dad4:	9b05      	ldr	r3, [sp, #20]
 800dad6:	6861      	ldr	r1, [r4, #4]
 800dad8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dadc:	2300      	movs	r3, #0
 800dade:	9303      	str	r3, [sp, #12]
 800dae0:	ab0a      	add	r3, sp, #40	; 0x28
 800dae2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dae6:	ab09      	add	r3, sp, #36	; 0x24
 800dae8:	ec49 8b10 	vmov	d0, r8, r9
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	6022      	str	r2, [r4, #0]
 800daf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800daf4:	4628      	mov	r0, r5
 800daf6:	f7ff fecd 	bl	800d894 <__cvt>
 800dafa:	9b06      	ldr	r3, [sp, #24]
 800dafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dafe:	2b47      	cmp	r3, #71	; 0x47
 800db00:	4680      	mov	r8, r0
 800db02:	d108      	bne.n	800db16 <_printf_float+0x142>
 800db04:	1cc8      	adds	r0, r1, #3
 800db06:	db02      	blt.n	800db0e <_printf_float+0x13a>
 800db08:	6863      	ldr	r3, [r4, #4]
 800db0a:	4299      	cmp	r1, r3
 800db0c:	dd41      	ble.n	800db92 <_printf_float+0x1be>
 800db0e:	f1ab 0b02 	sub.w	fp, fp, #2
 800db12:	fa5f fb8b 	uxtb.w	fp, fp
 800db16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db1a:	d820      	bhi.n	800db5e <_printf_float+0x18a>
 800db1c:	3901      	subs	r1, #1
 800db1e:	465a      	mov	r2, fp
 800db20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db24:	9109      	str	r1, [sp, #36]	; 0x24
 800db26:	f7ff ff17 	bl	800d958 <__exponent>
 800db2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db2c:	1813      	adds	r3, r2, r0
 800db2e:	2a01      	cmp	r2, #1
 800db30:	4681      	mov	r9, r0
 800db32:	6123      	str	r3, [r4, #16]
 800db34:	dc02      	bgt.n	800db3c <_printf_float+0x168>
 800db36:	6822      	ldr	r2, [r4, #0]
 800db38:	07d2      	lsls	r2, r2, #31
 800db3a:	d501      	bpl.n	800db40 <_printf_float+0x16c>
 800db3c:	3301      	adds	r3, #1
 800db3e:	6123      	str	r3, [r4, #16]
 800db40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db44:	2b00      	cmp	r3, #0
 800db46:	d09c      	beq.n	800da82 <_printf_float+0xae>
 800db48:	232d      	movs	r3, #45	; 0x2d
 800db4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db4e:	e798      	b.n	800da82 <_printf_float+0xae>
 800db50:	9a06      	ldr	r2, [sp, #24]
 800db52:	2a47      	cmp	r2, #71	; 0x47
 800db54:	d1be      	bne.n	800dad4 <_printf_float+0x100>
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1bc      	bne.n	800dad4 <_printf_float+0x100>
 800db5a:	2301      	movs	r3, #1
 800db5c:	e7b9      	b.n	800dad2 <_printf_float+0xfe>
 800db5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db62:	d118      	bne.n	800db96 <_printf_float+0x1c2>
 800db64:	2900      	cmp	r1, #0
 800db66:	6863      	ldr	r3, [r4, #4]
 800db68:	dd0b      	ble.n	800db82 <_printf_float+0x1ae>
 800db6a:	6121      	str	r1, [r4, #16]
 800db6c:	b913      	cbnz	r3, 800db74 <_printf_float+0x1a0>
 800db6e:	6822      	ldr	r2, [r4, #0]
 800db70:	07d0      	lsls	r0, r2, #31
 800db72:	d502      	bpl.n	800db7a <_printf_float+0x1a6>
 800db74:	3301      	adds	r3, #1
 800db76:	440b      	add	r3, r1
 800db78:	6123      	str	r3, [r4, #16]
 800db7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800db7c:	f04f 0900 	mov.w	r9, #0
 800db80:	e7de      	b.n	800db40 <_printf_float+0x16c>
 800db82:	b913      	cbnz	r3, 800db8a <_printf_float+0x1b6>
 800db84:	6822      	ldr	r2, [r4, #0]
 800db86:	07d2      	lsls	r2, r2, #31
 800db88:	d501      	bpl.n	800db8e <_printf_float+0x1ba>
 800db8a:	3302      	adds	r3, #2
 800db8c:	e7f4      	b.n	800db78 <_printf_float+0x1a4>
 800db8e:	2301      	movs	r3, #1
 800db90:	e7f2      	b.n	800db78 <_printf_float+0x1a4>
 800db92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db98:	4299      	cmp	r1, r3
 800db9a:	db05      	blt.n	800dba8 <_printf_float+0x1d4>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	6121      	str	r1, [r4, #16]
 800dba0:	07d8      	lsls	r0, r3, #31
 800dba2:	d5ea      	bpl.n	800db7a <_printf_float+0x1a6>
 800dba4:	1c4b      	adds	r3, r1, #1
 800dba6:	e7e7      	b.n	800db78 <_printf_float+0x1a4>
 800dba8:	2900      	cmp	r1, #0
 800dbaa:	bfd4      	ite	le
 800dbac:	f1c1 0202 	rsble	r2, r1, #2
 800dbb0:	2201      	movgt	r2, #1
 800dbb2:	4413      	add	r3, r2
 800dbb4:	e7e0      	b.n	800db78 <_printf_float+0x1a4>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	055a      	lsls	r2, r3, #21
 800dbba:	d407      	bmi.n	800dbcc <_printf_float+0x1f8>
 800dbbc:	6923      	ldr	r3, [r4, #16]
 800dbbe:	4642      	mov	r2, r8
 800dbc0:	4631      	mov	r1, r6
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	47b8      	blx	r7
 800dbc6:	3001      	adds	r0, #1
 800dbc8:	d12c      	bne.n	800dc24 <_printf_float+0x250>
 800dbca:	e764      	b.n	800da96 <_printf_float+0xc2>
 800dbcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dbd0:	f240 80e0 	bls.w	800dd94 <_printf_float+0x3c0>
 800dbd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f7f2 ff84 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d034      	beq.n	800dc4e <_printf_float+0x27a>
 800dbe4:	4a37      	ldr	r2, [pc, #220]	; (800dcc4 <_printf_float+0x2f0>)
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f43f af51 	beq.w	800da96 <_printf_float+0xc2>
 800dbf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	db02      	blt.n	800dc02 <_printf_float+0x22e>
 800dbfc:	6823      	ldr	r3, [r4, #0]
 800dbfe:	07d8      	lsls	r0, r3, #31
 800dc00:	d510      	bpl.n	800dc24 <_printf_float+0x250>
 800dc02:	ee18 3a10 	vmov	r3, s16
 800dc06:	4652      	mov	r2, sl
 800dc08:	4631      	mov	r1, r6
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	47b8      	blx	r7
 800dc0e:	3001      	adds	r0, #1
 800dc10:	f43f af41 	beq.w	800da96 <_printf_float+0xc2>
 800dc14:	f04f 0800 	mov.w	r8, #0
 800dc18:	f104 091a 	add.w	r9, r4, #26
 800dc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	4543      	cmp	r3, r8
 800dc22:	dc09      	bgt.n	800dc38 <_printf_float+0x264>
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	079b      	lsls	r3, r3, #30
 800dc28:	f100 8105 	bmi.w	800de36 <_printf_float+0x462>
 800dc2c:	68e0      	ldr	r0, [r4, #12]
 800dc2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc30:	4298      	cmp	r0, r3
 800dc32:	bfb8      	it	lt
 800dc34:	4618      	movlt	r0, r3
 800dc36:	e730      	b.n	800da9a <_printf_float+0xc6>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	464a      	mov	r2, r9
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	4628      	mov	r0, r5
 800dc40:	47b8      	blx	r7
 800dc42:	3001      	adds	r0, #1
 800dc44:	f43f af27 	beq.w	800da96 <_printf_float+0xc2>
 800dc48:	f108 0801 	add.w	r8, r8, #1
 800dc4c:	e7e6      	b.n	800dc1c <_printf_float+0x248>
 800dc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	dc39      	bgt.n	800dcc8 <_printf_float+0x2f4>
 800dc54:	4a1b      	ldr	r2, [pc, #108]	; (800dcc4 <_printf_float+0x2f0>)
 800dc56:	2301      	movs	r3, #1
 800dc58:	4631      	mov	r1, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b8      	blx	r7
 800dc5e:	3001      	adds	r0, #1
 800dc60:	f43f af19 	beq.w	800da96 <_printf_float+0xc2>
 800dc64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	d102      	bne.n	800dc72 <_printf_float+0x29e>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	07d9      	lsls	r1, r3, #31
 800dc70:	d5d8      	bpl.n	800dc24 <_printf_float+0x250>
 800dc72:	ee18 3a10 	vmov	r3, s16
 800dc76:	4652      	mov	r2, sl
 800dc78:	4631      	mov	r1, r6
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	47b8      	blx	r7
 800dc7e:	3001      	adds	r0, #1
 800dc80:	f43f af09 	beq.w	800da96 <_printf_float+0xc2>
 800dc84:	f04f 0900 	mov.w	r9, #0
 800dc88:	f104 0a1a 	add.w	sl, r4, #26
 800dc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc8e:	425b      	negs	r3, r3
 800dc90:	454b      	cmp	r3, r9
 800dc92:	dc01      	bgt.n	800dc98 <_printf_float+0x2c4>
 800dc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc96:	e792      	b.n	800dbbe <_printf_float+0x1ea>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	4652      	mov	r2, sl
 800dc9c:	4631      	mov	r1, r6
 800dc9e:	4628      	mov	r0, r5
 800dca0:	47b8      	blx	r7
 800dca2:	3001      	adds	r0, #1
 800dca4:	f43f aef7 	beq.w	800da96 <_printf_float+0xc2>
 800dca8:	f109 0901 	add.w	r9, r9, #1
 800dcac:	e7ee      	b.n	800dc8c <_printf_float+0x2b8>
 800dcae:	bf00      	nop
 800dcb0:	7fefffff 	.word	0x7fefffff
 800dcb4:	080121e8 	.word	0x080121e8
 800dcb8:	080121ec 	.word	0x080121ec
 800dcbc:	080121f4 	.word	0x080121f4
 800dcc0:	080121f0 	.word	0x080121f0
 800dcc4:	080121f8 	.word	0x080121f8
 800dcc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dccc:	429a      	cmp	r2, r3
 800dcce:	bfa8      	it	ge
 800dcd0:	461a      	movge	r2, r3
 800dcd2:	2a00      	cmp	r2, #0
 800dcd4:	4691      	mov	r9, r2
 800dcd6:	dc37      	bgt.n	800dd48 <_printf_float+0x374>
 800dcd8:	f04f 0b00 	mov.w	fp, #0
 800dcdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dce0:	f104 021a 	add.w	r2, r4, #26
 800dce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dce6:	9305      	str	r3, [sp, #20]
 800dce8:	eba3 0309 	sub.w	r3, r3, r9
 800dcec:	455b      	cmp	r3, fp
 800dcee:	dc33      	bgt.n	800dd58 <_printf_float+0x384>
 800dcf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	db3b      	blt.n	800dd70 <_printf_float+0x39c>
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	07da      	lsls	r2, r3, #31
 800dcfc:	d438      	bmi.n	800dd70 <_printf_float+0x39c>
 800dcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd00:	9a05      	ldr	r2, [sp, #20]
 800dd02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd04:	1a9a      	subs	r2, r3, r2
 800dd06:	eba3 0901 	sub.w	r9, r3, r1
 800dd0a:	4591      	cmp	r9, r2
 800dd0c:	bfa8      	it	ge
 800dd0e:	4691      	movge	r9, r2
 800dd10:	f1b9 0f00 	cmp.w	r9, #0
 800dd14:	dc35      	bgt.n	800dd82 <_printf_float+0x3ae>
 800dd16:	f04f 0800 	mov.w	r8, #0
 800dd1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd1e:	f104 0a1a 	add.w	sl, r4, #26
 800dd22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd26:	1a9b      	subs	r3, r3, r2
 800dd28:	eba3 0309 	sub.w	r3, r3, r9
 800dd2c:	4543      	cmp	r3, r8
 800dd2e:	f77f af79 	ble.w	800dc24 <_printf_float+0x250>
 800dd32:	2301      	movs	r3, #1
 800dd34:	4652      	mov	r2, sl
 800dd36:	4631      	mov	r1, r6
 800dd38:	4628      	mov	r0, r5
 800dd3a:	47b8      	blx	r7
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	f43f aeaa 	beq.w	800da96 <_printf_float+0xc2>
 800dd42:	f108 0801 	add.w	r8, r8, #1
 800dd46:	e7ec      	b.n	800dd22 <_printf_float+0x34e>
 800dd48:	4613      	mov	r3, r2
 800dd4a:	4631      	mov	r1, r6
 800dd4c:	4642      	mov	r2, r8
 800dd4e:	4628      	mov	r0, r5
 800dd50:	47b8      	blx	r7
 800dd52:	3001      	adds	r0, #1
 800dd54:	d1c0      	bne.n	800dcd8 <_printf_float+0x304>
 800dd56:	e69e      	b.n	800da96 <_printf_float+0xc2>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	4631      	mov	r1, r6
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	9205      	str	r2, [sp, #20]
 800dd60:	47b8      	blx	r7
 800dd62:	3001      	adds	r0, #1
 800dd64:	f43f ae97 	beq.w	800da96 <_printf_float+0xc2>
 800dd68:	9a05      	ldr	r2, [sp, #20]
 800dd6a:	f10b 0b01 	add.w	fp, fp, #1
 800dd6e:	e7b9      	b.n	800dce4 <_printf_float+0x310>
 800dd70:	ee18 3a10 	vmov	r3, s16
 800dd74:	4652      	mov	r2, sl
 800dd76:	4631      	mov	r1, r6
 800dd78:	4628      	mov	r0, r5
 800dd7a:	47b8      	blx	r7
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	d1be      	bne.n	800dcfe <_printf_float+0x32a>
 800dd80:	e689      	b.n	800da96 <_printf_float+0xc2>
 800dd82:	9a05      	ldr	r2, [sp, #20]
 800dd84:	464b      	mov	r3, r9
 800dd86:	4442      	add	r2, r8
 800dd88:	4631      	mov	r1, r6
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	47b8      	blx	r7
 800dd8e:	3001      	adds	r0, #1
 800dd90:	d1c1      	bne.n	800dd16 <_printf_float+0x342>
 800dd92:	e680      	b.n	800da96 <_printf_float+0xc2>
 800dd94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd96:	2a01      	cmp	r2, #1
 800dd98:	dc01      	bgt.n	800dd9e <_printf_float+0x3ca>
 800dd9a:	07db      	lsls	r3, r3, #31
 800dd9c:	d538      	bpl.n	800de10 <_printf_float+0x43c>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	4642      	mov	r2, r8
 800dda2:	4631      	mov	r1, r6
 800dda4:	4628      	mov	r0, r5
 800dda6:	47b8      	blx	r7
 800dda8:	3001      	adds	r0, #1
 800ddaa:	f43f ae74 	beq.w	800da96 <_printf_float+0xc2>
 800ddae:	ee18 3a10 	vmov	r3, s16
 800ddb2:	4652      	mov	r2, sl
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	47b8      	blx	r7
 800ddba:	3001      	adds	r0, #1
 800ddbc:	f43f ae6b 	beq.w	800da96 <_printf_float+0xc2>
 800ddc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	f7f2 fe8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ddcc:	b9d8      	cbnz	r0, 800de06 <_printf_float+0x432>
 800ddce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddd0:	f108 0201 	add.w	r2, r8, #1
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	4631      	mov	r1, r6
 800ddd8:	4628      	mov	r0, r5
 800ddda:	47b8      	blx	r7
 800dddc:	3001      	adds	r0, #1
 800ddde:	d10e      	bne.n	800ddfe <_printf_float+0x42a>
 800dde0:	e659      	b.n	800da96 <_printf_float+0xc2>
 800dde2:	2301      	movs	r3, #1
 800dde4:	4652      	mov	r2, sl
 800dde6:	4631      	mov	r1, r6
 800dde8:	4628      	mov	r0, r5
 800ddea:	47b8      	blx	r7
 800ddec:	3001      	adds	r0, #1
 800ddee:	f43f ae52 	beq.w	800da96 <_printf_float+0xc2>
 800ddf2:	f108 0801 	add.w	r8, r8, #1
 800ddf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	4543      	cmp	r3, r8
 800ddfc:	dcf1      	bgt.n	800dde2 <_printf_float+0x40e>
 800ddfe:	464b      	mov	r3, r9
 800de00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de04:	e6dc      	b.n	800dbc0 <_printf_float+0x1ec>
 800de06:	f04f 0800 	mov.w	r8, #0
 800de0a:	f104 0a1a 	add.w	sl, r4, #26
 800de0e:	e7f2      	b.n	800ddf6 <_printf_float+0x422>
 800de10:	2301      	movs	r3, #1
 800de12:	4642      	mov	r2, r8
 800de14:	e7df      	b.n	800ddd6 <_printf_float+0x402>
 800de16:	2301      	movs	r3, #1
 800de18:	464a      	mov	r2, r9
 800de1a:	4631      	mov	r1, r6
 800de1c:	4628      	mov	r0, r5
 800de1e:	47b8      	blx	r7
 800de20:	3001      	adds	r0, #1
 800de22:	f43f ae38 	beq.w	800da96 <_printf_float+0xc2>
 800de26:	f108 0801 	add.w	r8, r8, #1
 800de2a:	68e3      	ldr	r3, [r4, #12]
 800de2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de2e:	1a5b      	subs	r3, r3, r1
 800de30:	4543      	cmp	r3, r8
 800de32:	dcf0      	bgt.n	800de16 <_printf_float+0x442>
 800de34:	e6fa      	b.n	800dc2c <_printf_float+0x258>
 800de36:	f04f 0800 	mov.w	r8, #0
 800de3a:	f104 0919 	add.w	r9, r4, #25
 800de3e:	e7f4      	b.n	800de2a <_printf_float+0x456>

0800de40 <_printf_common>:
 800de40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de44:	4616      	mov	r6, r2
 800de46:	4699      	mov	r9, r3
 800de48:	688a      	ldr	r2, [r1, #8]
 800de4a:	690b      	ldr	r3, [r1, #16]
 800de4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de50:	4293      	cmp	r3, r2
 800de52:	bfb8      	it	lt
 800de54:	4613      	movlt	r3, r2
 800de56:	6033      	str	r3, [r6, #0]
 800de58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de5c:	4607      	mov	r7, r0
 800de5e:	460c      	mov	r4, r1
 800de60:	b10a      	cbz	r2, 800de66 <_printf_common+0x26>
 800de62:	3301      	adds	r3, #1
 800de64:	6033      	str	r3, [r6, #0]
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	0699      	lsls	r1, r3, #26
 800de6a:	bf42      	ittt	mi
 800de6c:	6833      	ldrmi	r3, [r6, #0]
 800de6e:	3302      	addmi	r3, #2
 800de70:	6033      	strmi	r3, [r6, #0]
 800de72:	6825      	ldr	r5, [r4, #0]
 800de74:	f015 0506 	ands.w	r5, r5, #6
 800de78:	d106      	bne.n	800de88 <_printf_common+0x48>
 800de7a:	f104 0a19 	add.w	sl, r4, #25
 800de7e:	68e3      	ldr	r3, [r4, #12]
 800de80:	6832      	ldr	r2, [r6, #0]
 800de82:	1a9b      	subs	r3, r3, r2
 800de84:	42ab      	cmp	r3, r5
 800de86:	dc26      	bgt.n	800ded6 <_printf_common+0x96>
 800de88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de8c:	1e13      	subs	r3, r2, #0
 800de8e:	6822      	ldr	r2, [r4, #0]
 800de90:	bf18      	it	ne
 800de92:	2301      	movne	r3, #1
 800de94:	0692      	lsls	r2, r2, #26
 800de96:	d42b      	bmi.n	800def0 <_printf_common+0xb0>
 800de98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de9c:	4649      	mov	r1, r9
 800de9e:	4638      	mov	r0, r7
 800dea0:	47c0      	blx	r8
 800dea2:	3001      	adds	r0, #1
 800dea4:	d01e      	beq.n	800dee4 <_printf_common+0xa4>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	68e5      	ldr	r5, [r4, #12]
 800deaa:	6832      	ldr	r2, [r6, #0]
 800deac:	f003 0306 	and.w	r3, r3, #6
 800deb0:	2b04      	cmp	r3, #4
 800deb2:	bf08      	it	eq
 800deb4:	1aad      	subeq	r5, r5, r2
 800deb6:	68a3      	ldr	r3, [r4, #8]
 800deb8:	6922      	ldr	r2, [r4, #16]
 800deba:	bf0c      	ite	eq
 800debc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dec0:	2500      	movne	r5, #0
 800dec2:	4293      	cmp	r3, r2
 800dec4:	bfc4      	itt	gt
 800dec6:	1a9b      	subgt	r3, r3, r2
 800dec8:	18ed      	addgt	r5, r5, r3
 800deca:	2600      	movs	r6, #0
 800decc:	341a      	adds	r4, #26
 800dece:	42b5      	cmp	r5, r6
 800ded0:	d11a      	bne.n	800df08 <_printf_common+0xc8>
 800ded2:	2000      	movs	r0, #0
 800ded4:	e008      	b.n	800dee8 <_printf_common+0xa8>
 800ded6:	2301      	movs	r3, #1
 800ded8:	4652      	mov	r2, sl
 800deda:	4649      	mov	r1, r9
 800dedc:	4638      	mov	r0, r7
 800dede:	47c0      	blx	r8
 800dee0:	3001      	adds	r0, #1
 800dee2:	d103      	bne.n	800deec <_printf_common+0xac>
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deec:	3501      	adds	r5, #1
 800deee:	e7c6      	b.n	800de7e <_printf_common+0x3e>
 800def0:	18e1      	adds	r1, r4, r3
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	2030      	movs	r0, #48	; 0x30
 800def6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800defa:	4422      	add	r2, r4
 800defc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df04:	3302      	adds	r3, #2
 800df06:	e7c7      	b.n	800de98 <_printf_common+0x58>
 800df08:	2301      	movs	r3, #1
 800df0a:	4622      	mov	r2, r4
 800df0c:	4649      	mov	r1, r9
 800df0e:	4638      	mov	r0, r7
 800df10:	47c0      	blx	r8
 800df12:	3001      	adds	r0, #1
 800df14:	d0e6      	beq.n	800dee4 <_printf_common+0xa4>
 800df16:	3601      	adds	r6, #1
 800df18:	e7d9      	b.n	800dece <_printf_common+0x8e>
	...

0800df1c <_printf_i>:
 800df1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df20:	7e0f      	ldrb	r7, [r1, #24]
 800df22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df24:	2f78      	cmp	r7, #120	; 0x78
 800df26:	4691      	mov	r9, r2
 800df28:	4680      	mov	r8, r0
 800df2a:	460c      	mov	r4, r1
 800df2c:	469a      	mov	sl, r3
 800df2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800df32:	d807      	bhi.n	800df44 <_printf_i+0x28>
 800df34:	2f62      	cmp	r7, #98	; 0x62
 800df36:	d80a      	bhi.n	800df4e <_printf_i+0x32>
 800df38:	2f00      	cmp	r7, #0
 800df3a:	f000 80d8 	beq.w	800e0ee <_printf_i+0x1d2>
 800df3e:	2f58      	cmp	r7, #88	; 0x58
 800df40:	f000 80a3 	beq.w	800e08a <_printf_i+0x16e>
 800df44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df4c:	e03a      	b.n	800dfc4 <_printf_i+0xa8>
 800df4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df52:	2b15      	cmp	r3, #21
 800df54:	d8f6      	bhi.n	800df44 <_printf_i+0x28>
 800df56:	a101      	add	r1, pc, #4	; (adr r1, 800df5c <_printf_i+0x40>)
 800df58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df5c:	0800dfb5 	.word	0x0800dfb5
 800df60:	0800dfc9 	.word	0x0800dfc9
 800df64:	0800df45 	.word	0x0800df45
 800df68:	0800df45 	.word	0x0800df45
 800df6c:	0800df45 	.word	0x0800df45
 800df70:	0800df45 	.word	0x0800df45
 800df74:	0800dfc9 	.word	0x0800dfc9
 800df78:	0800df45 	.word	0x0800df45
 800df7c:	0800df45 	.word	0x0800df45
 800df80:	0800df45 	.word	0x0800df45
 800df84:	0800df45 	.word	0x0800df45
 800df88:	0800e0d5 	.word	0x0800e0d5
 800df8c:	0800dff9 	.word	0x0800dff9
 800df90:	0800e0b7 	.word	0x0800e0b7
 800df94:	0800df45 	.word	0x0800df45
 800df98:	0800df45 	.word	0x0800df45
 800df9c:	0800e0f7 	.word	0x0800e0f7
 800dfa0:	0800df45 	.word	0x0800df45
 800dfa4:	0800dff9 	.word	0x0800dff9
 800dfa8:	0800df45 	.word	0x0800df45
 800dfac:	0800df45 	.word	0x0800df45
 800dfb0:	0800e0bf 	.word	0x0800e0bf
 800dfb4:	682b      	ldr	r3, [r5, #0]
 800dfb6:	1d1a      	adds	r2, r3, #4
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	602a      	str	r2, [r5, #0]
 800dfbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	e0a3      	b.n	800e110 <_printf_i+0x1f4>
 800dfc8:	6820      	ldr	r0, [r4, #0]
 800dfca:	6829      	ldr	r1, [r5, #0]
 800dfcc:	0606      	lsls	r6, r0, #24
 800dfce:	f101 0304 	add.w	r3, r1, #4
 800dfd2:	d50a      	bpl.n	800dfea <_printf_i+0xce>
 800dfd4:	680e      	ldr	r6, [r1, #0]
 800dfd6:	602b      	str	r3, [r5, #0]
 800dfd8:	2e00      	cmp	r6, #0
 800dfda:	da03      	bge.n	800dfe4 <_printf_i+0xc8>
 800dfdc:	232d      	movs	r3, #45	; 0x2d
 800dfde:	4276      	negs	r6, r6
 800dfe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfe4:	485e      	ldr	r0, [pc, #376]	; (800e160 <_printf_i+0x244>)
 800dfe6:	230a      	movs	r3, #10
 800dfe8:	e019      	b.n	800e01e <_printf_i+0x102>
 800dfea:	680e      	ldr	r6, [r1, #0]
 800dfec:	602b      	str	r3, [r5, #0]
 800dfee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dff2:	bf18      	it	ne
 800dff4:	b236      	sxthne	r6, r6
 800dff6:	e7ef      	b.n	800dfd8 <_printf_i+0xbc>
 800dff8:	682b      	ldr	r3, [r5, #0]
 800dffa:	6820      	ldr	r0, [r4, #0]
 800dffc:	1d19      	adds	r1, r3, #4
 800dffe:	6029      	str	r1, [r5, #0]
 800e000:	0601      	lsls	r1, r0, #24
 800e002:	d501      	bpl.n	800e008 <_printf_i+0xec>
 800e004:	681e      	ldr	r6, [r3, #0]
 800e006:	e002      	b.n	800e00e <_printf_i+0xf2>
 800e008:	0646      	lsls	r6, r0, #25
 800e00a:	d5fb      	bpl.n	800e004 <_printf_i+0xe8>
 800e00c:	881e      	ldrh	r6, [r3, #0]
 800e00e:	4854      	ldr	r0, [pc, #336]	; (800e160 <_printf_i+0x244>)
 800e010:	2f6f      	cmp	r7, #111	; 0x6f
 800e012:	bf0c      	ite	eq
 800e014:	2308      	moveq	r3, #8
 800e016:	230a      	movne	r3, #10
 800e018:	2100      	movs	r1, #0
 800e01a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e01e:	6865      	ldr	r5, [r4, #4]
 800e020:	60a5      	str	r5, [r4, #8]
 800e022:	2d00      	cmp	r5, #0
 800e024:	bfa2      	ittt	ge
 800e026:	6821      	ldrge	r1, [r4, #0]
 800e028:	f021 0104 	bicge.w	r1, r1, #4
 800e02c:	6021      	strge	r1, [r4, #0]
 800e02e:	b90e      	cbnz	r6, 800e034 <_printf_i+0x118>
 800e030:	2d00      	cmp	r5, #0
 800e032:	d04d      	beq.n	800e0d0 <_printf_i+0x1b4>
 800e034:	4615      	mov	r5, r2
 800e036:	fbb6 f1f3 	udiv	r1, r6, r3
 800e03a:	fb03 6711 	mls	r7, r3, r1, r6
 800e03e:	5dc7      	ldrb	r7, [r0, r7]
 800e040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e044:	4637      	mov	r7, r6
 800e046:	42bb      	cmp	r3, r7
 800e048:	460e      	mov	r6, r1
 800e04a:	d9f4      	bls.n	800e036 <_printf_i+0x11a>
 800e04c:	2b08      	cmp	r3, #8
 800e04e:	d10b      	bne.n	800e068 <_printf_i+0x14c>
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	07de      	lsls	r6, r3, #31
 800e054:	d508      	bpl.n	800e068 <_printf_i+0x14c>
 800e056:	6923      	ldr	r3, [r4, #16]
 800e058:	6861      	ldr	r1, [r4, #4]
 800e05a:	4299      	cmp	r1, r3
 800e05c:	bfde      	ittt	le
 800e05e:	2330      	movle	r3, #48	; 0x30
 800e060:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e064:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e068:	1b52      	subs	r2, r2, r5
 800e06a:	6122      	str	r2, [r4, #16]
 800e06c:	f8cd a000 	str.w	sl, [sp]
 800e070:	464b      	mov	r3, r9
 800e072:	aa03      	add	r2, sp, #12
 800e074:	4621      	mov	r1, r4
 800e076:	4640      	mov	r0, r8
 800e078:	f7ff fee2 	bl	800de40 <_printf_common>
 800e07c:	3001      	adds	r0, #1
 800e07e:	d14c      	bne.n	800e11a <_printf_i+0x1fe>
 800e080:	f04f 30ff 	mov.w	r0, #4294967295
 800e084:	b004      	add	sp, #16
 800e086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e08a:	4835      	ldr	r0, [pc, #212]	; (800e160 <_printf_i+0x244>)
 800e08c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e090:	6829      	ldr	r1, [r5, #0]
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	f851 6b04 	ldr.w	r6, [r1], #4
 800e098:	6029      	str	r1, [r5, #0]
 800e09a:	061d      	lsls	r5, r3, #24
 800e09c:	d514      	bpl.n	800e0c8 <_printf_i+0x1ac>
 800e09e:	07df      	lsls	r7, r3, #31
 800e0a0:	bf44      	itt	mi
 800e0a2:	f043 0320 	orrmi.w	r3, r3, #32
 800e0a6:	6023      	strmi	r3, [r4, #0]
 800e0a8:	b91e      	cbnz	r6, 800e0b2 <_printf_i+0x196>
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	f023 0320 	bic.w	r3, r3, #32
 800e0b0:	6023      	str	r3, [r4, #0]
 800e0b2:	2310      	movs	r3, #16
 800e0b4:	e7b0      	b.n	800e018 <_printf_i+0xfc>
 800e0b6:	6823      	ldr	r3, [r4, #0]
 800e0b8:	f043 0320 	orr.w	r3, r3, #32
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	2378      	movs	r3, #120	; 0x78
 800e0c0:	4828      	ldr	r0, [pc, #160]	; (800e164 <_printf_i+0x248>)
 800e0c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e0c6:	e7e3      	b.n	800e090 <_printf_i+0x174>
 800e0c8:	0659      	lsls	r1, r3, #25
 800e0ca:	bf48      	it	mi
 800e0cc:	b2b6      	uxthmi	r6, r6
 800e0ce:	e7e6      	b.n	800e09e <_printf_i+0x182>
 800e0d0:	4615      	mov	r5, r2
 800e0d2:	e7bb      	b.n	800e04c <_printf_i+0x130>
 800e0d4:	682b      	ldr	r3, [r5, #0]
 800e0d6:	6826      	ldr	r6, [r4, #0]
 800e0d8:	6961      	ldr	r1, [r4, #20]
 800e0da:	1d18      	adds	r0, r3, #4
 800e0dc:	6028      	str	r0, [r5, #0]
 800e0de:	0635      	lsls	r5, r6, #24
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	d501      	bpl.n	800e0e8 <_printf_i+0x1cc>
 800e0e4:	6019      	str	r1, [r3, #0]
 800e0e6:	e002      	b.n	800e0ee <_printf_i+0x1d2>
 800e0e8:	0670      	lsls	r0, r6, #25
 800e0ea:	d5fb      	bpl.n	800e0e4 <_printf_i+0x1c8>
 800e0ec:	8019      	strh	r1, [r3, #0]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	6123      	str	r3, [r4, #16]
 800e0f2:	4615      	mov	r5, r2
 800e0f4:	e7ba      	b.n	800e06c <_printf_i+0x150>
 800e0f6:	682b      	ldr	r3, [r5, #0]
 800e0f8:	1d1a      	adds	r2, r3, #4
 800e0fa:	602a      	str	r2, [r5, #0]
 800e0fc:	681d      	ldr	r5, [r3, #0]
 800e0fe:	6862      	ldr	r2, [r4, #4]
 800e100:	2100      	movs	r1, #0
 800e102:	4628      	mov	r0, r5
 800e104:	f7f2 f87c 	bl	8000200 <memchr>
 800e108:	b108      	cbz	r0, 800e10e <_printf_i+0x1f2>
 800e10a:	1b40      	subs	r0, r0, r5
 800e10c:	6060      	str	r0, [r4, #4]
 800e10e:	6863      	ldr	r3, [r4, #4]
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	2300      	movs	r3, #0
 800e114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e118:	e7a8      	b.n	800e06c <_printf_i+0x150>
 800e11a:	6923      	ldr	r3, [r4, #16]
 800e11c:	462a      	mov	r2, r5
 800e11e:	4649      	mov	r1, r9
 800e120:	4640      	mov	r0, r8
 800e122:	47d0      	blx	sl
 800e124:	3001      	adds	r0, #1
 800e126:	d0ab      	beq.n	800e080 <_printf_i+0x164>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	079b      	lsls	r3, r3, #30
 800e12c:	d413      	bmi.n	800e156 <_printf_i+0x23a>
 800e12e:	68e0      	ldr	r0, [r4, #12]
 800e130:	9b03      	ldr	r3, [sp, #12]
 800e132:	4298      	cmp	r0, r3
 800e134:	bfb8      	it	lt
 800e136:	4618      	movlt	r0, r3
 800e138:	e7a4      	b.n	800e084 <_printf_i+0x168>
 800e13a:	2301      	movs	r3, #1
 800e13c:	4632      	mov	r2, r6
 800e13e:	4649      	mov	r1, r9
 800e140:	4640      	mov	r0, r8
 800e142:	47d0      	blx	sl
 800e144:	3001      	adds	r0, #1
 800e146:	d09b      	beq.n	800e080 <_printf_i+0x164>
 800e148:	3501      	adds	r5, #1
 800e14a:	68e3      	ldr	r3, [r4, #12]
 800e14c:	9903      	ldr	r1, [sp, #12]
 800e14e:	1a5b      	subs	r3, r3, r1
 800e150:	42ab      	cmp	r3, r5
 800e152:	dcf2      	bgt.n	800e13a <_printf_i+0x21e>
 800e154:	e7eb      	b.n	800e12e <_printf_i+0x212>
 800e156:	2500      	movs	r5, #0
 800e158:	f104 0619 	add.w	r6, r4, #25
 800e15c:	e7f5      	b.n	800e14a <_printf_i+0x22e>
 800e15e:	bf00      	nop
 800e160:	080121fa 	.word	0x080121fa
 800e164:	0801220b 	.word	0x0801220b

0800e168 <siprintf>:
 800e168:	b40e      	push	{r1, r2, r3}
 800e16a:	b500      	push	{lr}
 800e16c:	b09c      	sub	sp, #112	; 0x70
 800e16e:	ab1d      	add	r3, sp, #116	; 0x74
 800e170:	9002      	str	r0, [sp, #8]
 800e172:	9006      	str	r0, [sp, #24]
 800e174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e178:	4809      	ldr	r0, [pc, #36]	; (800e1a0 <siprintf+0x38>)
 800e17a:	9107      	str	r1, [sp, #28]
 800e17c:	9104      	str	r1, [sp, #16]
 800e17e:	4909      	ldr	r1, [pc, #36]	; (800e1a4 <siprintf+0x3c>)
 800e180:	f853 2b04 	ldr.w	r2, [r3], #4
 800e184:	9105      	str	r1, [sp, #20]
 800e186:	6800      	ldr	r0, [r0, #0]
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	a902      	add	r1, sp, #8
 800e18c:	f001 fb68 	bl	800f860 <_svfiprintf_r>
 800e190:	9b02      	ldr	r3, [sp, #8]
 800e192:	2200      	movs	r2, #0
 800e194:	701a      	strb	r2, [r3, #0]
 800e196:	b01c      	add	sp, #112	; 0x70
 800e198:	f85d eb04 	ldr.w	lr, [sp], #4
 800e19c:	b003      	add	sp, #12
 800e19e:	4770      	bx	lr
 800e1a0:	200001ac 	.word	0x200001ac
 800e1a4:	ffff0208 	.word	0xffff0208

0800e1a8 <quorem>:
 800e1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	6903      	ldr	r3, [r0, #16]
 800e1ae:	690c      	ldr	r4, [r1, #16]
 800e1b0:	42a3      	cmp	r3, r4
 800e1b2:	4607      	mov	r7, r0
 800e1b4:	f2c0 8081 	blt.w	800e2ba <quorem+0x112>
 800e1b8:	3c01      	subs	r4, #1
 800e1ba:	f101 0814 	add.w	r8, r1, #20
 800e1be:	f100 0514 	add.w	r5, r0, #20
 800e1c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1c6:	9301      	str	r3, [sp, #4]
 800e1c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1e0:	d331      	bcc.n	800e246 <quorem+0x9e>
 800e1e2:	f04f 0e00 	mov.w	lr, #0
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	46ac      	mov	ip, r5
 800e1ea:	46f2      	mov	sl, lr
 800e1ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800e1f0:	b293      	uxth	r3, r2
 800e1f2:	fb06 e303 	mla	r3, r6, r3, lr
 800e1f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	ebaa 0303 	sub.w	r3, sl, r3
 800e200:	f8dc a000 	ldr.w	sl, [ip]
 800e204:	0c12      	lsrs	r2, r2, #16
 800e206:	fa13 f38a 	uxtah	r3, r3, sl
 800e20a:	fb06 e202 	mla	r2, r6, r2, lr
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	9b00      	ldr	r3, [sp, #0]
 800e212:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e216:	b292      	uxth	r2, r2
 800e218:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e21c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e220:	f8bd 3000 	ldrh.w	r3, [sp]
 800e224:	4581      	cmp	r9, r0
 800e226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e22a:	f84c 3b04 	str.w	r3, [ip], #4
 800e22e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e232:	d2db      	bcs.n	800e1ec <quorem+0x44>
 800e234:	f855 300b 	ldr.w	r3, [r5, fp]
 800e238:	b92b      	cbnz	r3, 800e246 <quorem+0x9e>
 800e23a:	9b01      	ldr	r3, [sp, #4]
 800e23c:	3b04      	subs	r3, #4
 800e23e:	429d      	cmp	r5, r3
 800e240:	461a      	mov	r2, r3
 800e242:	d32e      	bcc.n	800e2a2 <quorem+0xfa>
 800e244:	613c      	str	r4, [r7, #16]
 800e246:	4638      	mov	r0, r7
 800e248:	f001 f8b6 	bl	800f3b8 <__mcmp>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	db24      	blt.n	800e29a <quorem+0xf2>
 800e250:	3601      	adds	r6, #1
 800e252:	4628      	mov	r0, r5
 800e254:	f04f 0c00 	mov.w	ip, #0
 800e258:	f858 2b04 	ldr.w	r2, [r8], #4
 800e25c:	f8d0 e000 	ldr.w	lr, [r0]
 800e260:	b293      	uxth	r3, r2
 800e262:	ebac 0303 	sub.w	r3, ip, r3
 800e266:	0c12      	lsrs	r2, r2, #16
 800e268:	fa13 f38e 	uxtah	r3, r3, lr
 800e26c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e274:	b29b      	uxth	r3, r3
 800e276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e27a:	45c1      	cmp	r9, r8
 800e27c:	f840 3b04 	str.w	r3, [r0], #4
 800e280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e284:	d2e8      	bcs.n	800e258 <quorem+0xb0>
 800e286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e28a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e28e:	b922      	cbnz	r2, 800e29a <quorem+0xf2>
 800e290:	3b04      	subs	r3, #4
 800e292:	429d      	cmp	r5, r3
 800e294:	461a      	mov	r2, r3
 800e296:	d30a      	bcc.n	800e2ae <quorem+0x106>
 800e298:	613c      	str	r4, [r7, #16]
 800e29a:	4630      	mov	r0, r6
 800e29c:	b003      	add	sp, #12
 800e29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a2:	6812      	ldr	r2, [r2, #0]
 800e2a4:	3b04      	subs	r3, #4
 800e2a6:	2a00      	cmp	r2, #0
 800e2a8:	d1cc      	bne.n	800e244 <quorem+0x9c>
 800e2aa:	3c01      	subs	r4, #1
 800e2ac:	e7c7      	b.n	800e23e <quorem+0x96>
 800e2ae:	6812      	ldr	r2, [r2, #0]
 800e2b0:	3b04      	subs	r3, #4
 800e2b2:	2a00      	cmp	r2, #0
 800e2b4:	d1f0      	bne.n	800e298 <quorem+0xf0>
 800e2b6:	3c01      	subs	r4, #1
 800e2b8:	e7eb      	b.n	800e292 <quorem+0xea>
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	e7ee      	b.n	800e29c <quorem+0xf4>
	...

0800e2c0 <_dtoa_r>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	ed2d 8b04 	vpush	{d8-d9}
 800e2c8:	ec57 6b10 	vmov	r6, r7, d0
 800e2cc:	b093      	sub	sp, #76	; 0x4c
 800e2ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2d4:	9106      	str	r1, [sp, #24]
 800e2d6:	ee10 aa10 	vmov	sl, s0
 800e2da:	4604      	mov	r4, r0
 800e2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800e2de:	930c      	str	r3, [sp, #48]	; 0x30
 800e2e0:	46bb      	mov	fp, r7
 800e2e2:	b975      	cbnz	r5, 800e302 <_dtoa_r+0x42>
 800e2e4:	2010      	movs	r0, #16
 800e2e6:	f000 fddd 	bl	800eea4 <malloc>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	6260      	str	r0, [r4, #36]	; 0x24
 800e2ee:	b920      	cbnz	r0, 800e2fa <_dtoa_r+0x3a>
 800e2f0:	4ba7      	ldr	r3, [pc, #668]	; (800e590 <_dtoa_r+0x2d0>)
 800e2f2:	21ea      	movs	r1, #234	; 0xea
 800e2f4:	48a7      	ldr	r0, [pc, #668]	; (800e594 <_dtoa_r+0x2d4>)
 800e2f6:	f001 fbc3 	bl	800fa80 <__assert_func>
 800e2fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e2fe:	6005      	str	r5, [r0, #0]
 800e300:	60c5      	str	r5, [r0, #12]
 800e302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e304:	6819      	ldr	r1, [r3, #0]
 800e306:	b151      	cbz	r1, 800e31e <_dtoa_r+0x5e>
 800e308:	685a      	ldr	r2, [r3, #4]
 800e30a:	604a      	str	r2, [r1, #4]
 800e30c:	2301      	movs	r3, #1
 800e30e:	4093      	lsls	r3, r2
 800e310:	608b      	str	r3, [r1, #8]
 800e312:	4620      	mov	r0, r4
 800e314:	f000 fe0e 	bl	800ef34 <_Bfree>
 800e318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	1e3b      	subs	r3, r7, #0
 800e320:	bfaa      	itet	ge
 800e322:	2300      	movge	r3, #0
 800e324:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e328:	f8c8 3000 	strge.w	r3, [r8]
 800e32c:	4b9a      	ldr	r3, [pc, #616]	; (800e598 <_dtoa_r+0x2d8>)
 800e32e:	bfbc      	itt	lt
 800e330:	2201      	movlt	r2, #1
 800e332:	f8c8 2000 	strlt.w	r2, [r8]
 800e336:	ea33 030b 	bics.w	r3, r3, fp
 800e33a:	d11b      	bne.n	800e374 <_dtoa_r+0xb4>
 800e33c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e33e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e342:	6013      	str	r3, [r2, #0]
 800e344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e348:	4333      	orrs	r3, r6
 800e34a:	f000 8592 	beq.w	800ee72 <_dtoa_r+0xbb2>
 800e34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e350:	b963      	cbnz	r3, 800e36c <_dtoa_r+0xac>
 800e352:	4b92      	ldr	r3, [pc, #584]	; (800e59c <_dtoa_r+0x2dc>)
 800e354:	e022      	b.n	800e39c <_dtoa_r+0xdc>
 800e356:	4b92      	ldr	r3, [pc, #584]	; (800e5a0 <_dtoa_r+0x2e0>)
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	3308      	adds	r3, #8
 800e35c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e35e:	6013      	str	r3, [r2, #0]
 800e360:	9801      	ldr	r0, [sp, #4]
 800e362:	b013      	add	sp, #76	; 0x4c
 800e364:	ecbd 8b04 	vpop	{d8-d9}
 800e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36c:	4b8b      	ldr	r3, [pc, #556]	; (800e59c <_dtoa_r+0x2dc>)
 800e36e:	9301      	str	r3, [sp, #4]
 800e370:	3303      	adds	r3, #3
 800e372:	e7f3      	b.n	800e35c <_dtoa_r+0x9c>
 800e374:	2200      	movs	r2, #0
 800e376:	2300      	movs	r3, #0
 800e378:	4650      	mov	r0, sl
 800e37a:	4659      	mov	r1, fp
 800e37c:	f7f2 fbb4 	bl	8000ae8 <__aeabi_dcmpeq>
 800e380:	ec4b ab19 	vmov	d9, sl, fp
 800e384:	4680      	mov	r8, r0
 800e386:	b158      	cbz	r0, 800e3a0 <_dtoa_r+0xe0>
 800e388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e38a:	2301      	movs	r3, #1
 800e38c:	6013      	str	r3, [r2, #0]
 800e38e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 856b 	beq.w	800ee6c <_dtoa_r+0xbac>
 800e396:	4883      	ldr	r0, [pc, #524]	; (800e5a4 <_dtoa_r+0x2e4>)
 800e398:	6018      	str	r0, [r3, #0]
 800e39a:	1e43      	subs	r3, r0, #1
 800e39c:	9301      	str	r3, [sp, #4]
 800e39e:	e7df      	b.n	800e360 <_dtoa_r+0xa0>
 800e3a0:	ec4b ab10 	vmov	d0, sl, fp
 800e3a4:	aa10      	add	r2, sp, #64	; 0x40
 800e3a6:	a911      	add	r1, sp, #68	; 0x44
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f001 f8ab 	bl	800f504 <__d2b>
 800e3ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e3b2:	ee08 0a10 	vmov	s16, r0
 800e3b6:	2d00      	cmp	r5, #0
 800e3b8:	f000 8084 	beq.w	800e4c4 <_dtoa_r+0x204>
 800e3bc:	ee19 3a90 	vmov	r3, s19
 800e3c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e3c8:	4656      	mov	r6, sl
 800e3ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e3ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e3d6:	4b74      	ldr	r3, [pc, #464]	; (800e5a8 <_dtoa_r+0x2e8>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	4630      	mov	r0, r6
 800e3dc:	4639      	mov	r1, r7
 800e3de:	f7f1 ff63 	bl	80002a8 <__aeabi_dsub>
 800e3e2:	a365      	add	r3, pc, #404	; (adr r3, 800e578 <_dtoa_r+0x2b8>)
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	f7f2 f916 	bl	8000618 <__aeabi_dmul>
 800e3ec:	a364      	add	r3, pc, #400	; (adr r3, 800e580 <_dtoa_r+0x2c0>)
 800e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f2:	f7f1 ff5b 	bl	80002ac <__adddf3>
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	460f      	mov	r7, r1
 800e3fc:	f7f2 f8a2 	bl	8000544 <__aeabi_i2d>
 800e400:	a361      	add	r3, pc, #388	; (adr r3, 800e588 <_dtoa_r+0x2c8>)
 800e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e406:	f7f2 f907 	bl	8000618 <__aeabi_dmul>
 800e40a:	4602      	mov	r2, r0
 800e40c:	460b      	mov	r3, r1
 800e40e:	4630      	mov	r0, r6
 800e410:	4639      	mov	r1, r7
 800e412:	f7f1 ff4b 	bl	80002ac <__adddf3>
 800e416:	4606      	mov	r6, r0
 800e418:	460f      	mov	r7, r1
 800e41a:	f7f2 fbad 	bl	8000b78 <__aeabi_d2iz>
 800e41e:	2200      	movs	r2, #0
 800e420:	9000      	str	r0, [sp, #0]
 800e422:	2300      	movs	r3, #0
 800e424:	4630      	mov	r0, r6
 800e426:	4639      	mov	r1, r7
 800e428:	f7f2 fb68 	bl	8000afc <__aeabi_dcmplt>
 800e42c:	b150      	cbz	r0, 800e444 <_dtoa_r+0x184>
 800e42e:	9800      	ldr	r0, [sp, #0]
 800e430:	f7f2 f888 	bl	8000544 <__aeabi_i2d>
 800e434:	4632      	mov	r2, r6
 800e436:	463b      	mov	r3, r7
 800e438:	f7f2 fb56 	bl	8000ae8 <__aeabi_dcmpeq>
 800e43c:	b910      	cbnz	r0, 800e444 <_dtoa_r+0x184>
 800e43e:	9b00      	ldr	r3, [sp, #0]
 800e440:	3b01      	subs	r3, #1
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	9b00      	ldr	r3, [sp, #0]
 800e446:	2b16      	cmp	r3, #22
 800e448:	d85a      	bhi.n	800e500 <_dtoa_r+0x240>
 800e44a:	9a00      	ldr	r2, [sp, #0]
 800e44c:	4b57      	ldr	r3, [pc, #348]	; (800e5ac <_dtoa_r+0x2ec>)
 800e44e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	ec51 0b19 	vmov	r0, r1, d9
 800e45a:	f7f2 fb4f 	bl	8000afc <__aeabi_dcmplt>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d050      	beq.n	800e504 <_dtoa_r+0x244>
 800e462:	9b00      	ldr	r3, [sp, #0]
 800e464:	3b01      	subs	r3, #1
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	2300      	movs	r3, #0
 800e46a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e46e:	1b5d      	subs	r5, r3, r5
 800e470:	1e6b      	subs	r3, r5, #1
 800e472:	9305      	str	r3, [sp, #20]
 800e474:	bf45      	ittet	mi
 800e476:	f1c5 0301 	rsbmi	r3, r5, #1
 800e47a:	9304      	strmi	r3, [sp, #16]
 800e47c:	2300      	movpl	r3, #0
 800e47e:	2300      	movmi	r3, #0
 800e480:	bf4c      	ite	mi
 800e482:	9305      	strmi	r3, [sp, #20]
 800e484:	9304      	strpl	r3, [sp, #16]
 800e486:	9b00      	ldr	r3, [sp, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	db3d      	blt.n	800e508 <_dtoa_r+0x248>
 800e48c:	9b05      	ldr	r3, [sp, #20]
 800e48e:	9a00      	ldr	r2, [sp, #0]
 800e490:	920a      	str	r2, [sp, #40]	; 0x28
 800e492:	4413      	add	r3, r2
 800e494:	9305      	str	r3, [sp, #20]
 800e496:	2300      	movs	r3, #0
 800e498:	9307      	str	r3, [sp, #28]
 800e49a:	9b06      	ldr	r3, [sp, #24]
 800e49c:	2b09      	cmp	r3, #9
 800e49e:	f200 8089 	bhi.w	800e5b4 <_dtoa_r+0x2f4>
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	bfc4      	itt	gt
 800e4a6:	3b04      	subgt	r3, #4
 800e4a8:	9306      	strgt	r3, [sp, #24]
 800e4aa:	9b06      	ldr	r3, [sp, #24]
 800e4ac:	f1a3 0302 	sub.w	r3, r3, #2
 800e4b0:	bfcc      	ite	gt
 800e4b2:	2500      	movgt	r5, #0
 800e4b4:	2501      	movle	r5, #1
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	f200 8087 	bhi.w	800e5ca <_dtoa_r+0x30a>
 800e4bc:	e8df f003 	tbb	[pc, r3]
 800e4c0:	59383a2d 	.word	0x59383a2d
 800e4c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4c8:	441d      	add	r5, r3
 800e4ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4ce:	2b20      	cmp	r3, #32
 800e4d0:	bfc1      	itttt	gt
 800e4d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e4da:	fa0b f303 	lslgt.w	r3, fp, r3
 800e4de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e4e2:	bfda      	itte	le
 800e4e4:	f1c3 0320 	rsble	r3, r3, #32
 800e4e8:	fa06 f003 	lslle.w	r0, r6, r3
 800e4ec:	4318      	orrgt	r0, r3
 800e4ee:	f7f2 f819 	bl	8000524 <__aeabi_ui2d>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e4fa:	3d01      	subs	r5, #1
 800e4fc:	930e      	str	r3, [sp, #56]	; 0x38
 800e4fe:	e76a      	b.n	800e3d6 <_dtoa_r+0x116>
 800e500:	2301      	movs	r3, #1
 800e502:	e7b2      	b.n	800e46a <_dtoa_r+0x1aa>
 800e504:	900b      	str	r0, [sp, #44]	; 0x2c
 800e506:	e7b1      	b.n	800e46c <_dtoa_r+0x1ac>
 800e508:	9b04      	ldr	r3, [sp, #16]
 800e50a:	9a00      	ldr	r2, [sp, #0]
 800e50c:	1a9b      	subs	r3, r3, r2
 800e50e:	9304      	str	r3, [sp, #16]
 800e510:	4253      	negs	r3, r2
 800e512:	9307      	str	r3, [sp, #28]
 800e514:	2300      	movs	r3, #0
 800e516:	930a      	str	r3, [sp, #40]	; 0x28
 800e518:	e7bf      	b.n	800e49a <_dtoa_r+0x1da>
 800e51a:	2300      	movs	r3, #0
 800e51c:	9308      	str	r3, [sp, #32]
 800e51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e520:	2b00      	cmp	r3, #0
 800e522:	dc55      	bgt.n	800e5d0 <_dtoa_r+0x310>
 800e524:	2301      	movs	r3, #1
 800e526:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e52a:	461a      	mov	r2, r3
 800e52c:	9209      	str	r2, [sp, #36]	; 0x24
 800e52e:	e00c      	b.n	800e54a <_dtoa_r+0x28a>
 800e530:	2301      	movs	r3, #1
 800e532:	e7f3      	b.n	800e51c <_dtoa_r+0x25c>
 800e534:	2300      	movs	r3, #0
 800e536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e538:	9308      	str	r3, [sp, #32]
 800e53a:	9b00      	ldr	r3, [sp, #0]
 800e53c:	4413      	add	r3, r2
 800e53e:	9302      	str	r3, [sp, #8]
 800e540:	3301      	adds	r3, #1
 800e542:	2b01      	cmp	r3, #1
 800e544:	9303      	str	r3, [sp, #12]
 800e546:	bfb8      	it	lt
 800e548:	2301      	movlt	r3, #1
 800e54a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e54c:	2200      	movs	r2, #0
 800e54e:	6042      	str	r2, [r0, #4]
 800e550:	2204      	movs	r2, #4
 800e552:	f102 0614 	add.w	r6, r2, #20
 800e556:	429e      	cmp	r6, r3
 800e558:	6841      	ldr	r1, [r0, #4]
 800e55a:	d93d      	bls.n	800e5d8 <_dtoa_r+0x318>
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 fca9 	bl	800eeb4 <_Balloc>
 800e562:	9001      	str	r0, [sp, #4]
 800e564:	2800      	cmp	r0, #0
 800e566:	d13b      	bne.n	800e5e0 <_dtoa_r+0x320>
 800e568:	4b11      	ldr	r3, [pc, #68]	; (800e5b0 <_dtoa_r+0x2f0>)
 800e56a:	4602      	mov	r2, r0
 800e56c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e570:	e6c0      	b.n	800e2f4 <_dtoa_r+0x34>
 800e572:	2301      	movs	r3, #1
 800e574:	e7df      	b.n	800e536 <_dtoa_r+0x276>
 800e576:	bf00      	nop
 800e578:	636f4361 	.word	0x636f4361
 800e57c:	3fd287a7 	.word	0x3fd287a7
 800e580:	8b60c8b3 	.word	0x8b60c8b3
 800e584:	3fc68a28 	.word	0x3fc68a28
 800e588:	509f79fb 	.word	0x509f79fb
 800e58c:	3fd34413 	.word	0x3fd34413
 800e590:	08012229 	.word	0x08012229
 800e594:	08012240 	.word	0x08012240
 800e598:	7ff00000 	.word	0x7ff00000
 800e59c:	08012225 	.word	0x08012225
 800e5a0:	0801221c 	.word	0x0801221c
 800e5a4:	080121f9 	.word	0x080121f9
 800e5a8:	3ff80000 	.word	0x3ff80000
 800e5ac:	08012330 	.word	0x08012330
 800e5b0:	0801229b 	.word	0x0801229b
 800e5b4:	2501      	movs	r5, #1
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	9306      	str	r3, [sp, #24]
 800e5ba:	9508      	str	r5, [sp, #32]
 800e5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	2312      	movs	r3, #18
 800e5c8:	e7b0      	b.n	800e52c <_dtoa_r+0x26c>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	9308      	str	r3, [sp, #32]
 800e5ce:	e7f5      	b.n	800e5bc <_dtoa_r+0x2fc>
 800e5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5d6:	e7b8      	b.n	800e54a <_dtoa_r+0x28a>
 800e5d8:	3101      	adds	r1, #1
 800e5da:	6041      	str	r1, [r0, #4]
 800e5dc:	0052      	lsls	r2, r2, #1
 800e5de:	e7b8      	b.n	800e552 <_dtoa_r+0x292>
 800e5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5e2:	9a01      	ldr	r2, [sp, #4]
 800e5e4:	601a      	str	r2, [r3, #0]
 800e5e6:	9b03      	ldr	r3, [sp, #12]
 800e5e8:	2b0e      	cmp	r3, #14
 800e5ea:	f200 809d 	bhi.w	800e728 <_dtoa_r+0x468>
 800e5ee:	2d00      	cmp	r5, #0
 800e5f0:	f000 809a 	beq.w	800e728 <_dtoa_r+0x468>
 800e5f4:	9b00      	ldr	r3, [sp, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	dd32      	ble.n	800e660 <_dtoa_r+0x3a0>
 800e5fa:	4ab7      	ldr	r2, [pc, #732]	; (800e8d8 <_dtoa_r+0x618>)
 800e5fc:	f003 030f 	and.w	r3, r3, #15
 800e600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e604:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e608:	9b00      	ldr	r3, [sp, #0]
 800e60a:	05d8      	lsls	r0, r3, #23
 800e60c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e610:	d516      	bpl.n	800e640 <_dtoa_r+0x380>
 800e612:	4bb2      	ldr	r3, [pc, #712]	; (800e8dc <_dtoa_r+0x61c>)
 800e614:	ec51 0b19 	vmov	r0, r1, d9
 800e618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e61c:	f7f2 f926 	bl	800086c <__aeabi_ddiv>
 800e620:	f007 070f 	and.w	r7, r7, #15
 800e624:	4682      	mov	sl, r0
 800e626:	468b      	mov	fp, r1
 800e628:	2503      	movs	r5, #3
 800e62a:	4eac      	ldr	r6, [pc, #688]	; (800e8dc <_dtoa_r+0x61c>)
 800e62c:	b957      	cbnz	r7, 800e644 <_dtoa_r+0x384>
 800e62e:	4642      	mov	r2, r8
 800e630:	464b      	mov	r3, r9
 800e632:	4650      	mov	r0, sl
 800e634:	4659      	mov	r1, fp
 800e636:	f7f2 f919 	bl	800086c <__aeabi_ddiv>
 800e63a:	4682      	mov	sl, r0
 800e63c:	468b      	mov	fp, r1
 800e63e:	e028      	b.n	800e692 <_dtoa_r+0x3d2>
 800e640:	2502      	movs	r5, #2
 800e642:	e7f2      	b.n	800e62a <_dtoa_r+0x36a>
 800e644:	07f9      	lsls	r1, r7, #31
 800e646:	d508      	bpl.n	800e65a <_dtoa_r+0x39a>
 800e648:	4640      	mov	r0, r8
 800e64a:	4649      	mov	r1, r9
 800e64c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e650:	f7f1 ffe2 	bl	8000618 <__aeabi_dmul>
 800e654:	3501      	adds	r5, #1
 800e656:	4680      	mov	r8, r0
 800e658:	4689      	mov	r9, r1
 800e65a:	107f      	asrs	r7, r7, #1
 800e65c:	3608      	adds	r6, #8
 800e65e:	e7e5      	b.n	800e62c <_dtoa_r+0x36c>
 800e660:	f000 809b 	beq.w	800e79a <_dtoa_r+0x4da>
 800e664:	9b00      	ldr	r3, [sp, #0]
 800e666:	4f9d      	ldr	r7, [pc, #628]	; (800e8dc <_dtoa_r+0x61c>)
 800e668:	425e      	negs	r6, r3
 800e66a:	4b9b      	ldr	r3, [pc, #620]	; (800e8d8 <_dtoa_r+0x618>)
 800e66c:	f006 020f 	and.w	r2, r6, #15
 800e670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	ec51 0b19 	vmov	r0, r1, d9
 800e67c:	f7f1 ffcc 	bl	8000618 <__aeabi_dmul>
 800e680:	1136      	asrs	r6, r6, #4
 800e682:	4682      	mov	sl, r0
 800e684:	468b      	mov	fp, r1
 800e686:	2300      	movs	r3, #0
 800e688:	2502      	movs	r5, #2
 800e68a:	2e00      	cmp	r6, #0
 800e68c:	d17a      	bne.n	800e784 <_dtoa_r+0x4c4>
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1d3      	bne.n	800e63a <_dtoa_r+0x37a>
 800e692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 8082 	beq.w	800e79e <_dtoa_r+0x4de>
 800e69a:	4b91      	ldr	r3, [pc, #580]	; (800e8e0 <_dtoa_r+0x620>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	4650      	mov	r0, sl
 800e6a0:	4659      	mov	r1, fp
 800e6a2:	f7f2 fa2b 	bl	8000afc <__aeabi_dcmplt>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d079      	beq.n	800e79e <_dtoa_r+0x4de>
 800e6aa:	9b03      	ldr	r3, [sp, #12]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d076      	beq.n	800e79e <_dtoa_r+0x4de>
 800e6b0:	9b02      	ldr	r3, [sp, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	dd36      	ble.n	800e724 <_dtoa_r+0x464>
 800e6b6:	9b00      	ldr	r3, [sp, #0]
 800e6b8:	4650      	mov	r0, sl
 800e6ba:	4659      	mov	r1, fp
 800e6bc:	1e5f      	subs	r7, r3, #1
 800e6be:	2200      	movs	r2, #0
 800e6c0:	4b88      	ldr	r3, [pc, #544]	; (800e8e4 <_dtoa_r+0x624>)
 800e6c2:	f7f1 ffa9 	bl	8000618 <__aeabi_dmul>
 800e6c6:	9e02      	ldr	r6, [sp, #8]
 800e6c8:	4682      	mov	sl, r0
 800e6ca:	468b      	mov	fp, r1
 800e6cc:	3501      	adds	r5, #1
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	f7f1 ff38 	bl	8000544 <__aeabi_i2d>
 800e6d4:	4652      	mov	r2, sl
 800e6d6:	465b      	mov	r3, fp
 800e6d8:	f7f1 ff9e 	bl	8000618 <__aeabi_dmul>
 800e6dc:	4b82      	ldr	r3, [pc, #520]	; (800e8e8 <_dtoa_r+0x628>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f7f1 fde4 	bl	80002ac <__adddf3>
 800e6e4:	46d0      	mov	r8, sl
 800e6e6:	46d9      	mov	r9, fp
 800e6e8:	4682      	mov	sl, r0
 800e6ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e6ee:	2e00      	cmp	r6, #0
 800e6f0:	d158      	bne.n	800e7a4 <_dtoa_r+0x4e4>
 800e6f2:	4b7e      	ldr	r3, [pc, #504]	; (800e8ec <_dtoa_r+0x62c>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	f7f1 fdd5 	bl	80002a8 <__aeabi_dsub>
 800e6fe:	4652      	mov	r2, sl
 800e700:	465b      	mov	r3, fp
 800e702:	4680      	mov	r8, r0
 800e704:	4689      	mov	r9, r1
 800e706:	f7f2 fa17 	bl	8000b38 <__aeabi_dcmpgt>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	f040 8295 	bne.w	800ec3a <_dtoa_r+0x97a>
 800e710:	4652      	mov	r2, sl
 800e712:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e716:	4640      	mov	r0, r8
 800e718:	4649      	mov	r1, r9
 800e71a:	f7f2 f9ef 	bl	8000afc <__aeabi_dcmplt>
 800e71e:	2800      	cmp	r0, #0
 800e720:	f040 8289 	bne.w	800ec36 <_dtoa_r+0x976>
 800e724:	ec5b ab19 	vmov	sl, fp, d9
 800e728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f2c0 8148 	blt.w	800e9c0 <_dtoa_r+0x700>
 800e730:	9a00      	ldr	r2, [sp, #0]
 800e732:	2a0e      	cmp	r2, #14
 800e734:	f300 8144 	bgt.w	800e9c0 <_dtoa_r+0x700>
 800e738:	4b67      	ldr	r3, [pc, #412]	; (800e8d8 <_dtoa_r+0x618>)
 800e73a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e73e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e744:	2b00      	cmp	r3, #0
 800e746:	f280 80d5 	bge.w	800e8f4 <_dtoa_r+0x634>
 800e74a:	9b03      	ldr	r3, [sp, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f300 80d1 	bgt.w	800e8f4 <_dtoa_r+0x634>
 800e752:	f040 826f 	bne.w	800ec34 <_dtoa_r+0x974>
 800e756:	4b65      	ldr	r3, [pc, #404]	; (800e8ec <_dtoa_r+0x62c>)
 800e758:	2200      	movs	r2, #0
 800e75a:	4640      	mov	r0, r8
 800e75c:	4649      	mov	r1, r9
 800e75e:	f7f1 ff5b 	bl	8000618 <__aeabi_dmul>
 800e762:	4652      	mov	r2, sl
 800e764:	465b      	mov	r3, fp
 800e766:	f7f2 f9dd 	bl	8000b24 <__aeabi_dcmpge>
 800e76a:	9e03      	ldr	r6, [sp, #12]
 800e76c:	4637      	mov	r7, r6
 800e76e:	2800      	cmp	r0, #0
 800e770:	f040 8245 	bne.w	800ebfe <_dtoa_r+0x93e>
 800e774:	9d01      	ldr	r5, [sp, #4]
 800e776:	2331      	movs	r3, #49	; 0x31
 800e778:	f805 3b01 	strb.w	r3, [r5], #1
 800e77c:	9b00      	ldr	r3, [sp, #0]
 800e77e:	3301      	adds	r3, #1
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	e240      	b.n	800ec06 <_dtoa_r+0x946>
 800e784:	07f2      	lsls	r2, r6, #31
 800e786:	d505      	bpl.n	800e794 <_dtoa_r+0x4d4>
 800e788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e78c:	f7f1 ff44 	bl	8000618 <__aeabi_dmul>
 800e790:	3501      	adds	r5, #1
 800e792:	2301      	movs	r3, #1
 800e794:	1076      	asrs	r6, r6, #1
 800e796:	3708      	adds	r7, #8
 800e798:	e777      	b.n	800e68a <_dtoa_r+0x3ca>
 800e79a:	2502      	movs	r5, #2
 800e79c:	e779      	b.n	800e692 <_dtoa_r+0x3d2>
 800e79e:	9f00      	ldr	r7, [sp, #0]
 800e7a0:	9e03      	ldr	r6, [sp, #12]
 800e7a2:	e794      	b.n	800e6ce <_dtoa_r+0x40e>
 800e7a4:	9901      	ldr	r1, [sp, #4]
 800e7a6:	4b4c      	ldr	r3, [pc, #304]	; (800e8d8 <_dtoa_r+0x618>)
 800e7a8:	4431      	add	r1, r6
 800e7aa:	910d      	str	r1, [sp, #52]	; 0x34
 800e7ac:	9908      	ldr	r1, [sp, #32]
 800e7ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7b6:	2900      	cmp	r1, #0
 800e7b8:	d043      	beq.n	800e842 <_dtoa_r+0x582>
 800e7ba:	494d      	ldr	r1, [pc, #308]	; (800e8f0 <_dtoa_r+0x630>)
 800e7bc:	2000      	movs	r0, #0
 800e7be:	f7f2 f855 	bl	800086c <__aeabi_ddiv>
 800e7c2:	4652      	mov	r2, sl
 800e7c4:	465b      	mov	r3, fp
 800e7c6:	f7f1 fd6f 	bl	80002a8 <__aeabi_dsub>
 800e7ca:	9d01      	ldr	r5, [sp, #4]
 800e7cc:	4682      	mov	sl, r0
 800e7ce:	468b      	mov	fp, r1
 800e7d0:	4649      	mov	r1, r9
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	f7f2 f9d0 	bl	8000b78 <__aeabi_d2iz>
 800e7d8:	4606      	mov	r6, r0
 800e7da:	f7f1 feb3 	bl	8000544 <__aeabi_i2d>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	4649      	mov	r1, r9
 800e7e6:	f7f1 fd5f 	bl	80002a8 <__aeabi_dsub>
 800e7ea:	3630      	adds	r6, #48	; 0x30
 800e7ec:	f805 6b01 	strb.w	r6, [r5], #1
 800e7f0:	4652      	mov	r2, sl
 800e7f2:	465b      	mov	r3, fp
 800e7f4:	4680      	mov	r8, r0
 800e7f6:	4689      	mov	r9, r1
 800e7f8:	f7f2 f980 	bl	8000afc <__aeabi_dcmplt>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d163      	bne.n	800e8c8 <_dtoa_r+0x608>
 800e800:	4642      	mov	r2, r8
 800e802:	464b      	mov	r3, r9
 800e804:	4936      	ldr	r1, [pc, #216]	; (800e8e0 <_dtoa_r+0x620>)
 800e806:	2000      	movs	r0, #0
 800e808:	f7f1 fd4e 	bl	80002a8 <__aeabi_dsub>
 800e80c:	4652      	mov	r2, sl
 800e80e:	465b      	mov	r3, fp
 800e810:	f7f2 f974 	bl	8000afc <__aeabi_dcmplt>
 800e814:	2800      	cmp	r0, #0
 800e816:	f040 80b5 	bne.w	800e984 <_dtoa_r+0x6c4>
 800e81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e81c:	429d      	cmp	r5, r3
 800e81e:	d081      	beq.n	800e724 <_dtoa_r+0x464>
 800e820:	4b30      	ldr	r3, [pc, #192]	; (800e8e4 <_dtoa_r+0x624>)
 800e822:	2200      	movs	r2, #0
 800e824:	4650      	mov	r0, sl
 800e826:	4659      	mov	r1, fp
 800e828:	f7f1 fef6 	bl	8000618 <__aeabi_dmul>
 800e82c:	4b2d      	ldr	r3, [pc, #180]	; (800e8e4 <_dtoa_r+0x624>)
 800e82e:	4682      	mov	sl, r0
 800e830:	468b      	mov	fp, r1
 800e832:	4640      	mov	r0, r8
 800e834:	4649      	mov	r1, r9
 800e836:	2200      	movs	r2, #0
 800e838:	f7f1 feee 	bl	8000618 <__aeabi_dmul>
 800e83c:	4680      	mov	r8, r0
 800e83e:	4689      	mov	r9, r1
 800e840:	e7c6      	b.n	800e7d0 <_dtoa_r+0x510>
 800e842:	4650      	mov	r0, sl
 800e844:	4659      	mov	r1, fp
 800e846:	f7f1 fee7 	bl	8000618 <__aeabi_dmul>
 800e84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e84c:	9d01      	ldr	r5, [sp, #4]
 800e84e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e850:	4682      	mov	sl, r0
 800e852:	468b      	mov	fp, r1
 800e854:	4649      	mov	r1, r9
 800e856:	4640      	mov	r0, r8
 800e858:	f7f2 f98e 	bl	8000b78 <__aeabi_d2iz>
 800e85c:	4606      	mov	r6, r0
 800e85e:	f7f1 fe71 	bl	8000544 <__aeabi_i2d>
 800e862:	3630      	adds	r6, #48	; 0x30
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	4640      	mov	r0, r8
 800e86a:	4649      	mov	r1, r9
 800e86c:	f7f1 fd1c 	bl	80002a8 <__aeabi_dsub>
 800e870:	f805 6b01 	strb.w	r6, [r5], #1
 800e874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e876:	429d      	cmp	r5, r3
 800e878:	4680      	mov	r8, r0
 800e87a:	4689      	mov	r9, r1
 800e87c:	f04f 0200 	mov.w	r2, #0
 800e880:	d124      	bne.n	800e8cc <_dtoa_r+0x60c>
 800e882:	4b1b      	ldr	r3, [pc, #108]	; (800e8f0 <_dtoa_r+0x630>)
 800e884:	4650      	mov	r0, sl
 800e886:	4659      	mov	r1, fp
 800e888:	f7f1 fd10 	bl	80002ac <__adddf3>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	4640      	mov	r0, r8
 800e892:	4649      	mov	r1, r9
 800e894:	f7f2 f950 	bl	8000b38 <__aeabi_dcmpgt>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d173      	bne.n	800e984 <_dtoa_r+0x6c4>
 800e89c:	4652      	mov	r2, sl
 800e89e:	465b      	mov	r3, fp
 800e8a0:	4913      	ldr	r1, [pc, #76]	; (800e8f0 <_dtoa_r+0x630>)
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	f7f1 fd00 	bl	80002a8 <__aeabi_dsub>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	4640      	mov	r0, r8
 800e8ae:	4649      	mov	r1, r9
 800e8b0:	f7f2 f924 	bl	8000afc <__aeabi_dcmplt>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	f43f af35 	beq.w	800e724 <_dtoa_r+0x464>
 800e8ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8bc:	1e6b      	subs	r3, r5, #1
 800e8be:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8c4:	2b30      	cmp	r3, #48	; 0x30
 800e8c6:	d0f8      	beq.n	800e8ba <_dtoa_r+0x5fa>
 800e8c8:	9700      	str	r7, [sp, #0]
 800e8ca:	e049      	b.n	800e960 <_dtoa_r+0x6a0>
 800e8cc:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <_dtoa_r+0x624>)
 800e8ce:	f7f1 fea3 	bl	8000618 <__aeabi_dmul>
 800e8d2:	4680      	mov	r8, r0
 800e8d4:	4689      	mov	r9, r1
 800e8d6:	e7bd      	b.n	800e854 <_dtoa_r+0x594>
 800e8d8:	08012330 	.word	0x08012330
 800e8dc:	08012308 	.word	0x08012308
 800e8e0:	3ff00000 	.word	0x3ff00000
 800e8e4:	40240000 	.word	0x40240000
 800e8e8:	401c0000 	.word	0x401c0000
 800e8ec:	40140000 	.word	0x40140000
 800e8f0:	3fe00000 	.word	0x3fe00000
 800e8f4:	9d01      	ldr	r5, [sp, #4]
 800e8f6:	4656      	mov	r6, sl
 800e8f8:	465f      	mov	r7, fp
 800e8fa:	4642      	mov	r2, r8
 800e8fc:	464b      	mov	r3, r9
 800e8fe:	4630      	mov	r0, r6
 800e900:	4639      	mov	r1, r7
 800e902:	f7f1 ffb3 	bl	800086c <__aeabi_ddiv>
 800e906:	f7f2 f937 	bl	8000b78 <__aeabi_d2iz>
 800e90a:	4682      	mov	sl, r0
 800e90c:	f7f1 fe1a 	bl	8000544 <__aeabi_i2d>
 800e910:	4642      	mov	r2, r8
 800e912:	464b      	mov	r3, r9
 800e914:	f7f1 fe80 	bl	8000618 <__aeabi_dmul>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	4630      	mov	r0, r6
 800e91e:	4639      	mov	r1, r7
 800e920:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e924:	f7f1 fcc0 	bl	80002a8 <__aeabi_dsub>
 800e928:	f805 6b01 	strb.w	r6, [r5], #1
 800e92c:	9e01      	ldr	r6, [sp, #4]
 800e92e:	9f03      	ldr	r7, [sp, #12]
 800e930:	1bae      	subs	r6, r5, r6
 800e932:	42b7      	cmp	r7, r6
 800e934:	4602      	mov	r2, r0
 800e936:	460b      	mov	r3, r1
 800e938:	d135      	bne.n	800e9a6 <_dtoa_r+0x6e6>
 800e93a:	f7f1 fcb7 	bl	80002ac <__adddf3>
 800e93e:	4642      	mov	r2, r8
 800e940:	464b      	mov	r3, r9
 800e942:	4606      	mov	r6, r0
 800e944:	460f      	mov	r7, r1
 800e946:	f7f2 f8f7 	bl	8000b38 <__aeabi_dcmpgt>
 800e94a:	b9d0      	cbnz	r0, 800e982 <_dtoa_r+0x6c2>
 800e94c:	4642      	mov	r2, r8
 800e94e:	464b      	mov	r3, r9
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f2 f8c8 	bl	8000ae8 <__aeabi_dcmpeq>
 800e958:	b110      	cbz	r0, 800e960 <_dtoa_r+0x6a0>
 800e95a:	f01a 0f01 	tst.w	sl, #1
 800e95e:	d110      	bne.n	800e982 <_dtoa_r+0x6c2>
 800e960:	4620      	mov	r0, r4
 800e962:	ee18 1a10 	vmov	r1, s16
 800e966:	f000 fae5 	bl	800ef34 <_Bfree>
 800e96a:	2300      	movs	r3, #0
 800e96c:	9800      	ldr	r0, [sp, #0]
 800e96e:	702b      	strb	r3, [r5, #0]
 800e970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e972:	3001      	adds	r0, #1
 800e974:	6018      	str	r0, [r3, #0]
 800e976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f43f acf1 	beq.w	800e360 <_dtoa_r+0xa0>
 800e97e:	601d      	str	r5, [r3, #0]
 800e980:	e4ee      	b.n	800e360 <_dtoa_r+0xa0>
 800e982:	9f00      	ldr	r7, [sp, #0]
 800e984:	462b      	mov	r3, r5
 800e986:	461d      	mov	r5, r3
 800e988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e98c:	2a39      	cmp	r2, #57	; 0x39
 800e98e:	d106      	bne.n	800e99e <_dtoa_r+0x6de>
 800e990:	9a01      	ldr	r2, [sp, #4]
 800e992:	429a      	cmp	r2, r3
 800e994:	d1f7      	bne.n	800e986 <_dtoa_r+0x6c6>
 800e996:	9901      	ldr	r1, [sp, #4]
 800e998:	2230      	movs	r2, #48	; 0x30
 800e99a:	3701      	adds	r7, #1
 800e99c:	700a      	strb	r2, [r1, #0]
 800e99e:	781a      	ldrb	r2, [r3, #0]
 800e9a0:	3201      	adds	r2, #1
 800e9a2:	701a      	strb	r2, [r3, #0]
 800e9a4:	e790      	b.n	800e8c8 <_dtoa_r+0x608>
 800e9a6:	4ba6      	ldr	r3, [pc, #664]	; (800ec40 <_dtoa_r+0x980>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f7f1 fe35 	bl	8000618 <__aeabi_dmul>
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4606      	mov	r6, r0
 800e9b4:	460f      	mov	r7, r1
 800e9b6:	f7f2 f897 	bl	8000ae8 <__aeabi_dcmpeq>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d09d      	beq.n	800e8fa <_dtoa_r+0x63a>
 800e9be:	e7cf      	b.n	800e960 <_dtoa_r+0x6a0>
 800e9c0:	9a08      	ldr	r2, [sp, #32]
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	f000 80d7 	beq.w	800eb76 <_dtoa_r+0x8b6>
 800e9c8:	9a06      	ldr	r2, [sp, #24]
 800e9ca:	2a01      	cmp	r2, #1
 800e9cc:	f300 80ba 	bgt.w	800eb44 <_dtoa_r+0x884>
 800e9d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9d2:	2a00      	cmp	r2, #0
 800e9d4:	f000 80b2 	beq.w	800eb3c <_dtoa_r+0x87c>
 800e9d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9dc:	9e07      	ldr	r6, [sp, #28]
 800e9de:	9d04      	ldr	r5, [sp, #16]
 800e9e0:	9a04      	ldr	r2, [sp, #16]
 800e9e2:	441a      	add	r2, r3
 800e9e4:	9204      	str	r2, [sp, #16]
 800e9e6:	9a05      	ldr	r2, [sp, #20]
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	441a      	add	r2, r3
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	9205      	str	r2, [sp, #20]
 800e9f0:	f000 fb58 	bl	800f0a4 <__i2b>
 800e9f4:	4607      	mov	r7, r0
 800e9f6:	2d00      	cmp	r5, #0
 800e9f8:	dd0c      	ble.n	800ea14 <_dtoa_r+0x754>
 800e9fa:	9b05      	ldr	r3, [sp, #20]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	dd09      	ble.n	800ea14 <_dtoa_r+0x754>
 800ea00:	42ab      	cmp	r3, r5
 800ea02:	9a04      	ldr	r2, [sp, #16]
 800ea04:	bfa8      	it	ge
 800ea06:	462b      	movge	r3, r5
 800ea08:	1ad2      	subs	r2, r2, r3
 800ea0a:	9204      	str	r2, [sp, #16]
 800ea0c:	9a05      	ldr	r2, [sp, #20]
 800ea0e:	1aed      	subs	r5, r5, r3
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	9305      	str	r3, [sp, #20]
 800ea14:	9b07      	ldr	r3, [sp, #28]
 800ea16:	b31b      	cbz	r3, 800ea60 <_dtoa_r+0x7a0>
 800ea18:	9b08      	ldr	r3, [sp, #32]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 80af 	beq.w	800eb7e <_dtoa_r+0x8be>
 800ea20:	2e00      	cmp	r6, #0
 800ea22:	dd13      	ble.n	800ea4c <_dtoa_r+0x78c>
 800ea24:	4639      	mov	r1, r7
 800ea26:	4632      	mov	r2, r6
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f000 fbfb 	bl	800f224 <__pow5mult>
 800ea2e:	ee18 2a10 	vmov	r2, s16
 800ea32:	4601      	mov	r1, r0
 800ea34:	4607      	mov	r7, r0
 800ea36:	4620      	mov	r0, r4
 800ea38:	f000 fb4a 	bl	800f0d0 <__multiply>
 800ea3c:	ee18 1a10 	vmov	r1, s16
 800ea40:	4680      	mov	r8, r0
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 fa76 	bl	800ef34 <_Bfree>
 800ea48:	ee08 8a10 	vmov	s16, r8
 800ea4c:	9b07      	ldr	r3, [sp, #28]
 800ea4e:	1b9a      	subs	r2, r3, r6
 800ea50:	d006      	beq.n	800ea60 <_dtoa_r+0x7a0>
 800ea52:	ee18 1a10 	vmov	r1, s16
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 fbe4 	bl	800f224 <__pow5mult>
 800ea5c:	ee08 0a10 	vmov	s16, r0
 800ea60:	2101      	movs	r1, #1
 800ea62:	4620      	mov	r0, r4
 800ea64:	f000 fb1e 	bl	800f0a4 <__i2b>
 800ea68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	f340 8088 	ble.w	800eb82 <_dtoa_r+0x8c2>
 800ea72:	461a      	mov	r2, r3
 800ea74:	4601      	mov	r1, r0
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 fbd4 	bl	800f224 <__pow5mult>
 800ea7c:	9b06      	ldr	r3, [sp, #24]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	4606      	mov	r6, r0
 800ea82:	f340 8081 	ble.w	800eb88 <_dtoa_r+0x8c8>
 800ea86:	f04f 0800 	mov.w	r8, #0
 800ea8a:	6933      	ldr	r3, [r6, #16]
 800ea8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ea90:	6918      	ldr	r0, [r3, #16]
 800ea92:	f000 fab7 	bl	800f004 <__hi0bits>
 800ea96:	f1c0 0020 	rsb	r0, r0, #32
 800ea9a:	9b05      	ldr	r3, [sp, #20]
 800ea9c:	4418      	add	r0, r3
 800ea9e:	f010 001f 	ands.w	r0, r0, #31
 800eaa2:	f000 8092 	beq.w	800ebca <_dtoa_r+0x90a>
 800eaa6:	f1c0 0320 	rsb	r3, r0, #32
 800eaaa:	2b04      	cmp	r3, #4
 800eaac:	f340 808a 	ble.w	800ebc4 <_dtoa_r+0x904>
 800eab0:	f1c0 001c 	rsb	r0, r0, #28
 800eab4:	9b04      	ldr	r3, [sp, #16]
 800eab6:	4403      	add	r3, r0
 800eab8:	9304      	str	r3, [sp, #16]
 800eaba:	9b05      	ldr	r3, [sp, #20]
 800eabc:	4403      	add	r3, r0
 800eabe:	4405      	add	r5, r0
 800eac0:	9305      	str	r3, [sp, #20]
 800eac2:	9b04      	ldr	r3, [sp, #16]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	dd07      	ble.n	800ead8 <_dtoa_r+0x818>
 800eac8:	ee18 1a10 	vmov	r1, s16
 800eacc:	461a      	mov	r2, r3
 800eace:	4620      	mov	r0, r4
 800ead0:	f000 fc02 	bl	800f2d8 <__lshift>
 800ead4:	ee08 0a10 	vmov	s16, r0
 800ead8:	9b05      	ldr	r3, [sp, #20]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	dd05      	ble.n	800eaea <_dtoa_r+0x82a>
 800eade:	4631      	mov	r1, r6
 800eae0:	461a      	mov	r2, r3
 800eae2:	4620      	mov	r0, r4
 800eae4:	f000 fbf8 	bl	800f2d8 <__lshift>
 800eae8:	4606      	mov	r6, r0
 800eaea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d06e      	beq.n	800ebce <_dtoa_r+0x90e>
 800eaf0:	ee18 0a10 	vmov	r0, s16
 800eaf4:	4631      	mov	r1, r6
 800eaf6:	f000 fc5f 	bl	800f3b8 <__mcmp>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	da67      	bge.n	800ebce <_dtoa_r+0x90e>
 800eafe:	9b00      	ldr	r3, [sp, #0]
 800eb00:	3b01      	subs	r3, #1
 800eb02:	ee18 1a10 	vmov	r1, s16
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	220a      	movs	r2, #10
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f000 fa33 	bl	800ef78 <__multadd>
 800eb12:	9b08      	ldr	r3, [sp, #32]
 800eb14:	ee08 0a10 	vmov	s16, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f000 81b1 	beq.w	800ee80 <_dtoa_r+0xbc0>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	4639      	mov	r1, r7
 800eb22:	220a      	movs	r2, #10
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fa27 	bl	800ef78 <__multadd>
 800eb2a:	9b02      	ldr	r3, [sp, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	4607      	mov	r7, r0
 800eb30:	f300 808e 	bgt.w	800ec50 <_dtoa_r+0x990>
 800eb34:	9b06      	ldr	r3, [sp, #24]
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	dc51      	bgt.n	800ebde <_dtoa_r+0x91e>
 800eb3a:	e089      	b.n	800ec50 <_dtoa_r+0x990>
 800eb3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb42:	e74b      	b.n	800e9dc <_dtoa_r+0x71c>
 800eb44:	9b03      	ldr	r3, [sp, #12]
 800eb46:	1e5e      	subs	r6, r3, #1
 800eb48:	9b07      	ldr	r3, [sp, #28]
 800eb4a:	42b3      	cmp	r3, r6
 800eb4c:	bfbf      	itttt	lt
 800eb4e:	9b07      	ldrlt	r3, [sp, #28]
 800eb50:	9607      	strlt	r6, [sp, #28]
 800eb52:	1af2      	sublt	r2, r6, r3
 800eb54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eb56:	bfb6      	itet	lt
 800eb58:	189b      	addlt	r3, r3, r2
 800eb5a:	1b9e      	subge	r6, r3, r6
 800eb5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eb5e:	9b03      	ldr	r3, [sp, #12]
 800eb60:	bfb8      	it	lt
 800eb62:	2600      	movlt	r6, #0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	bfb7      	itett	lt
 800eb68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eb6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eb70:	1a9d      	sublt	r5, r3, r2
 800eb72:	2300      	movlt	r3, #0
 800eb74:	e734      	b.n	800e9e0 <_dtoa_r+0x720>
 800eb76:	9e07      	ldr	r6, [sp, #28]
 800eb78:	9d04      	ldr	r5, [sp, #16]
 800eb7a:	9f08      	ldr	r7, [sp, #32]
 800eb7c:	e73b      	b.n	800e9f6 <_dtoa_r+0x736>
 800eb7e:	9a07      	ldr	r2, [sp, #28]
 800eb80:	e767      	b.n	800ea52 <_dtoa_r+0x792>
 800eb82:	9b06      	ldr	r3, [sp, #24]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	dc18      	bgt.n	800ebba <_dtoa_r+0x8fa>
 800eb88:	f1ba 0f00 	cmp.w	sl, #0
 800eb8c:	d115      	bne.n	800ebba <_dtoa_r+0x8fa>
 800eb8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb92:	b993      	cbnz	r3, 800ebba <_dtoa_r+0x8fa>
 800eb94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb98:	0d1b      	lsrs	r3, r3, #20
 800eb9a:	051b      	lsls	r3, r3, #20
 800eb9c:	b183      	cbz	r3, 800ebc0 <_dtoa_r+0x900>
 800eb9e:	9b04      	ldr	r3, [sp, #16]
 800eba0:	3301      	adds	r3, #1
 800eba2:	9304      	str	r3, [sp, #16]
 800eba4:	9b05      	ldr	r3, [sp, #20]
 800eba6:	3301      	adds	r3, #1
 800eba8:	9305      	str	r3, [sp, #20]
 800ebaa:	f04f 0801 	mov.w	r8, #1
 800ebae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f47f af6a 	bne.w	800ea8a <_dtoa_r+0x7ca>
 800ebb6:	2001      	movs	r0, #1
 800ebb8:	e76f      	b.n	800ea9a <_dtoa_r+0x7da>
 800ebba:	f04f 0800 	mov.w	r8, #0
 800ebbe:	e7f6      	b.n	800ebae <_dtoa_r+0x8ee>
 800ebc0:	4698      	mov	r8, r3
 800ebc2:	e7f4      	b.n	800ebae <_dtoa_r+0x8ee>
 800ebc4:	f43f af7d 	beq.w	800eac2 <_dtoa_r+0x802>
 800ebc8:	4618      	mov	r0, r3
 800ebca:	301c      	adds	r0, #28
 800ebcc:	e772      	b.n	800eab4 <_dtoa_r+0x7f4>
 800ebce:	9b03      	ldr	r3, [sp, #12]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	dc37      	bgt.n	800ec44 <_dtoa_r+0x984>
 800ebd4:	9b06      	ldr	r3, [sp, #24]
 800ebd6:	2b02      	cmp	r3, #2
 800ebd8:	dd34      	ble.n	800ec44 <_dtoa_r+0x984>
 800ebda:	9b03      	ldr	r3, [sp, #12]
 800ebdc:	9302      	str	r3, [sp, #8]
 800ebde:	9b02      	ldr	r3, [sp, #8]
 800ebe0:	b96b      	cbnz	r3, 800ebfe <_dtoa_r+0x93e>
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	2205      	movs	r2, #5
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f000 f9c6 	bl	800ef78 <__multadd>
 800ebec:	4601      	mov	r1, r0
 800ebee:	4606      	mov	r6, r0
 800ebf0:	ee18 0a10 	vmov	r0, s16
 800ebf4:	f000 fbe0 	bl	800f3b8 <__mcmp>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	f73f adbb 	bgt.w	800e774 <_dtoa_r+0x4b4>
 800ebfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec00:	9d01      	ldr	r5, [sp, #4]
 800ec02:	43db      	mvns	r3, r3
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	f04f 0800 	mov.w	r8, #0
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f000 f991 	bl	800ef34 <_Bfree>
 800ec12:	2f00      	cmp	r7, #0
 800ec14:	f43f aea4 	beq.w	800e960 <_dtoa_r+0x6a0>
 800ec18:	f1b8 0f00 	cmp.w	r8, #0
 800ec1c:	d005      	beq.n	800ec2a <_dtoa_r+0x96a>
 800ec1e:	45b8      	cmp	r8, r7
 800ec20:	d003      	beq.n	800ec2a <_dtoa_r+0x96a>
 800ec22:	4641      	mov	r1, r8
 800ec24:	4620      	mov	r0, r4
 800ec26:	f000 f985 	bl	800ef34 <_Bfree>
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f000 f981 	bl	800ef34 <_Bfree>
 800ec32:	e695      	b.n	800e960 <_dtoa_r+0x6a0>
 800ec34:	2600      	movs	r6, #0
 800ec36:	4637      	mov	r7, r6
 800ec38:	e7e1      	b.n	800ebfe <_dtoa_r+0x93e>
 800ec3a:	9700      	str	r7, [sp, #0]
 800ec3c:	4637      	mov	r7, r6
 800ec3e:	e599      	b.n	800e774 <_dtoa_r+0x4b4>
 800ec40:	40240000 	.word	0x40240000
 800ec44:	9b08      	ldr	r3, [sp, #32]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 80ca 	beq.w	800ede0 <_dtoa_r+0xb20>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	9302      	str	r3, [sp, #8]
 800ec50:	2d00      	cmp	r5, #0
 800ec52:	dd05      	ble.n	800ec60 <_dtoa_r+0x9a0>
 800ec54:	4639      	mov	r1, r7
 800ec56:	462a      	mov	r2, r5
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fb3d 	bl	800f2d8 <__lshift>
 800ec5e:	4607      	mov	r7, r0
 800ec60:	f1b8 0f00 	cmp.w	r8, #0
 800ec64:	d05b      	beq.n	800ed1e <_dtoa_r+0xa5e>
 800ec66:	6879      	ldr	r1, [r7, #4]
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f000 f923 	bl	800eeb4 <_Balloc>
 800ec6e:	4605      	mov	r5, r0
 800ec70:	b928      	cbnz	r0, 800ec7e <_dtoa_r+0x9be>
 800ec72:	4b87      	ldr	r3, [pc, #540]	; (800ee90 <_dtoa_r+0xbd0>)
 800ec74:	4602      	mov	r2, r0
 800ec76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec7a:	f7ff bb3b 	b.w	800e2f4 <_dtoa_r+0x34>
 800ec7e:	693a      	ldr	r2, [r7, #16]
 800ec80:	3202      	adds	r2, #2
 800ec82:	0092      	lsls	r2, r2, #2
 800ec84:	f107 010c 	add.w	r1, r7, #12
 800ec88:	300c      	adds	r0, #12
 800ec8a:	f7fe fded 	bl	800d868 <memcpy>
 800ec8e:	2201      	movs	r2, #1
 800ec90:	4629      	mov	r1, r5
 800ec92:	4620      	mov	r0, r4
 800ec94:	f000 fb20 	bl	800f2d8 <__lshift>
 800ec98:	9b01      	ldr	r3, [sp, #4]
 800ec9a:	f103 0901 	add.w	r9, r3, #1
 800ec9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eca2:	4413      	add	r3, r2
 800eca4:	9305      	str	r3, [sp, #20]
 800eca6:	f00a 0301 	and.w	r3, sl, #1
 800ecaa:	46b8      	mov	r8, r7
 800ecac:	9304      	str	r3, [sp, #16]
 800ecae:	4607      	mov	r7, r0
 800ecb0:	4631      	mov	r1, r6
 800ecb2:	ee18 0a10 	vmov	r0, s16
 800ecb6:	f7ff fa77 	bl	800e1a8 <quorem>
 800ecba:	4641      	mov	r1, r8
 800ecbc:	9002      	str	r0, [sp, #8]
 800ecbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecc2:	ee18 0a10 	vmov	r0, s16
 800ecc6:	f000 fb77 	bl	800f3b8 <__mcmp>
 800ecca:	463a      	mov	r2, r7
 800eccc:	9003      	str	r0, [sp, #12]
 800ecce:	4631      	mov	r1, r6
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 fb8d 	bl	800f3f0 <__mdiff>
 800ecd6:	68c2      	ldr	r2, [r0, #12]
 800ecd8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ecdc:	4605      	mov	r5, r0
 800ecde:	bb02      	cbnz	r2, 800ed22 <_dtoa_r+0xa62>
 800ece0:	4601      	mov	r1, r0
 800ece2:	ee18 0a10 	vmov	r0, s16
 800ece6:	f000 fb67 	bl	800f3b8 <__mcmp>
 800ecea:	4602      	mov	r2, r0
 800ecec:	4629      	mov	r1, r5
 800ecee:	4620      	mov	r0, r4
 800ecf0:	9207      	str	r2, [sp, #28]
 800ecf2:	f000 f91f 	bl	800ef34 <_Bfree>
 800ecf6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ecfa:	ea43 0102 	orr.w	r1, r3, r2
 800ecfe:	9b04      	ldr	r3, [sp, #16]
 800ed00:	430b      	orrs	r3, r1
 800ed02:	464d      	mov	r5, r9
 800ed04:	d10f      	bne.n	800ed26 <_dtoa_r+0xa66>
 800ed06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed0a:	d02a      	beq.n	800ed62 <_dtoa_r+0xaa2>
 800ed0c:	9b03      	ldr	r3, [sp, #12]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	dd02      	ble.n	800ed18 <_dtoa_r+0xa58>
 800ed12:	9b02      	ldr	r3, [sp, #8]
 800ed14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ed18:	f88b a000 	strb.w	sl, [fp]
 800ed1c:	e775      	b.n	800ec0a <_dtoa_r+0x94a>
 800ed1e:	4638      	mov	r0, r7
 800ed20:	e7ba      	b.n	800ec98 <_dtoa_r+0x9d8>
 800ed22:	2201      	movs	r2, #1
 800ed24:	e7e2      	b.n	800ecec <_dtoa_r+0xa2c>
 800ed26:	9b03      	ldr	r3, [sp, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	db04      	blt.n	800ed36 <_dtoa_r+0xa76>
 800ed2c:	9906      	ldr	r1, [sp, #24]
 800ed2e:	430b      	orrs	r3, r1
 800ed30:	9904      	ldr	r1, [sp, #16]
 800ed32:	430b      	orrs	r3, r1
 800ed34:	d122      	bne.n	800ed7c <_dtoa_r+0xabc>
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	ddee      	ble.n	800ed18 <_dtoa_r+0xa58>
 800ed3a:	ee18 1a10 	vmov	r1, s16
 800ed3e:	2201      	movs	r2, #1
 800ed40:	4620      	mov	r0, r4
 800ed42:	f000 fac9 	bl	800f2d8 <__lshift>
 800ed46:	4631      	mov	r1, r6
 800ed48:	ee08 0a10 	vmov	s16, r0
 800ed4c:	f000 fb34 	bl	800f3b8 <__mcmp>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	dc03      	bgt.n	800ed5c <_dtoa_r+0xa9c>
 800ed54:	d1e0      	bne.n	800ed18 <_dtoa_r+0xa58>
 800ed56:	f01a 0f01 	tst.w	sl, #1
 800ed5a:	d0dd      	beq.n	800ed18 <_dtoa_r+0xa58>
 800ed5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed60:	d1d7      	bne.n	800ed12 <_dtoa_r+0xa52>
 800ed62:	2339      	movs	r3, #57	; 0x39
 800ed64:	f88b 3000 	strb.w	r3, [fp]
 800ed68:	462b      	mov	r3, r5
 800ed6a:	461d      	mov	r5, r3
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed72:	2a39      	cmp	r2, #57	; 0x39
 800ed74:	d071      	beq.n	800ee5a <_dtoa_r+0xb9a>
 800ed76:	3201      	adds	r2, #1
 800ed78:	701a      	strb	r2, [r3, #0]
 800ed7a:	e746      	b.n	800ec0a <_dtoa_r+0x94a>
 800ed7c:	2a00      	cmp	r2, #0
 800ed7e:	dd07      	ble.n	800ed90 <_dtoa_r+0xad0>
 800ed80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed84:	d0ed      	beq.n	800ed62 <_dtoa_r+0xaa2>
 800ed86:	f10a 0301 	add.w	r3, sl, #1
 800ed8a:	f88b 3000 	strb.w	r3, [fp]
 800ed8e:	e73c      	b.n	800ec0a <_dtoa_r+0x94a>
 800ed90:	9b05      	ldr	r3, [sp, #20]
 800ed92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ed96:	4599      	cmp	r9, r3
 800ed98:	d047      	beq.n	800ee2a <_dtoa_r+0xb6a>
 800ed9a:	ee18 1a10 	vmov	r1, s16
 800ed9e:	2300      	movs	r3, #0
 800eda0:	220a      	movs	r2, #10
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 f8e8 	bl	800ef78 <__multadd>
 800eda8:	45b8      	cmp	r8, r7
 800edaa:	ee08 0a10 	vmov	s16, r0
 800edae:	f04f 0300 	mov.w	r3, #0
 800edb2:	f04f 020a 	mov.w	r2, #10
 800edb6:	4641      	mov	r1, r8
 800edb8:	4620      	mov	r0, r4
 800edba:	d106      	bne.n	800edca <_dtoa_r+0xb0a>
 800edbc:	f000 f8dc 	bl	800ef78 <__multadd>
 800edc0:	4680      	mov	r8, r0
 800edc2:	4607      	mov	r7, r0
 800edc4:	f109 0901 	add.w	r9, r9, #1
 800edc8:	e772      	b.n	800ecb0 <_dtoa_r+0x9f0>
 800edca:	f000 f8d5 	bl	800ef78 <__multadd>
 800edce:	4639      	mov	r1, r7
 800edd0:	4680      	mov	r8, r0
 800edd2:	2300      	movs	r3, #0
 800edd4:	220a      	movs	r2, #10
 800edd6:	4620      	mov	r0, r4
 800edd8:	f000 f8ce 	bl	800ef78 <__multadd>
 800eddc:	4607      	mov	r7, r0
 800edde:	e7f1      	b.n	800edc4 <_dtoa_r+0xb04>
 800ede0:	9b03      	ldr	r3, [sp, #12]
 800ede2:	9302      	str	r3, [sp, #8]
 800ede4:	9d01      	ldr	r5, [sp, #4]
 800ede6:	ee18 0a10 	vmov	r0, s16
 800edea:	4631      	mov	r1, r6
 800edec:	f7ff f9dc 	bl	800e1a8 <quorem>
 800edf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800edf4:	9b01      	ldr	r3, [sp, #4]
 800edf6:	f805 ab01 	strb.w	sl, [r5], #1
 800edfa:	1aea      	subs	r2, r5, r3
 800edfc:	9b02      	ldr	r3, [sp, #8]
 800edfe:	4293      	cmp	r3, r2
 800ee00:	dd09      	ble.n	800ee16 <_dtoa_r+0xb56>
 800ee02:	ee18 1a10 	vmov	r1, s16
 800ee06:	2300      	movs	r3, #0
 800ee08:	220a      	movs	r2, #10
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f000 f8b4 	bl	800ef78 <__multadd>
 800ee10:	ee08 0a10 	vmov	s16, r0
 800ee14:	e7e7      	b.n	800ede6 <_dtoa_r+0xb26>
 800ee16:	9b02      	ldr	r3, [sp, #8]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	bfc8      	it	gt
 800ee1c:	461d      	movgt	r5, r3
 800ee1e:	9b01      	ldr	r3, [sp, #4]
 800ee20:	bfd8      	it	le
 800ee22:	2501      	movle	r5, #1
 800ee24:	441d      	add	r5, r3
 800ee26:	f04f 0800 	mov.w	r8, #0
 800ee2a:	ee18 1a10 	vmov	r1, s16
 800ee2e:	2201      	movs	r2, #1
 800ee30:	4620      	mov	r0, r4
 800ee32:	f000 fa51 	bl	800f2d8 <__lshift>
 800ee36:	4631      	mov	r1, r6
 800ee38:	ee08 0a10 	vmov	s16, r0
 800ee3c:	f000 fabc 	bl	800f3b8 <__mcmp>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	dc91      	bgt.n	800ed68 <_dtoa_r+0xaa8>
 800ee44:	d102      	bne.n	800ee4c <_dtoa_r+0xb8c>
 800ee46:	f01a 0f01 	tst.w	sl, #1
 800ee4a:	d18d      	bne.n	800ed68 <_dtoa_r+0xaa8>
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	461d      	mov	r5, r3
 800ee50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee54:	2a30      	cmp	r2, #48	; 0x30
 800ee56:	d0fa      	beq.n	800ee4e <_dtoa_r+0xb8e>
 800ee58:	e6d7      	b.n	800ec0a <_dtoa_r+0x94a>
 800ee5a:	9a01      	ldr	r2, [sp, #4]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d184      	bne.n	800ed6a <_dtoa_r+0xaaa>
 800ee60:	9b00      	ldr	r3, [sp, #0]
 800ee62:	3301      	adds	r3, #1
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	2331      	movs	r3, #49	; 0x31
 800ee68:	7013      	strb	r3, [r2, #0]
 800ee6a:	e6ce      	b.n	800ec0a <_dtoa_r+0x94a>
 800ee6c:	4b09      	ldr	r3, [pc, #36]	; (800ee94 <_dtoa_r+0xbd4>)
 800ee6e:	f7ff ba95 	b.w	800e39c <_dtoa_r+0xdc>
 800ee72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f47f aa6e 	bne.w	800e356 <_dtoa_r+0x96>
 800ee7a:	4b07      	ldr	r3, [pc, #28]	; (800ee98 <_dtoa_r+0xbd8>)
 800ee7c:	f7ff ba8e 	b.w	800e39c <_dtoa_r+0xdc>
 800ee80:	9b02      	ldr	r3, [sp, #8]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dcae      	bgt.n	800ede4 <_dtoa_r+0xb24>
 800ee86:	9b06      	ldr	r3, [sp, #24]
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	f73f aea8 	bgt.w	800ebde <_dtoa_r+0x91e>
 800ee8e:	e7a9      	b.n	800ede4 <_dtoa_r+0xb24>
 800ee90:	0801229b 	.word	0x0801229b
 800ee94:	080121f8 	.word	0x080121f8
 800ee98:	0801221c 	.word	0x0801221c

0800ee9c <_localeconv_r>:
 800ee9c:	4800      	ldr	r0, [pc, #0]	; (800eea0 <_localeconv_r+0x4>)
 800ee9e:	4770      	bx	lr
 800eea0:	20000300 	.word	0x20000300

0800eea4 <malloc>:
 800eea4:	4b02      	ldr	r3, [pc, #8]	; (800eeb0 <malloc+0xc>)
 800eea6:	4601      	mov	r1, r0
 800eea8:	6818      	ldr	r0, [r3, #0]
 800eeaa:	f000 bc09 	b.w	800f6c0 <_malloc_r>
 800eeae:	bf00      	nop
 800eeb0:	200001ac 	.word	0x200001ac

0800eeb4 <_Balloc>:
 800eeb4:	b570      	push	{r4, r5, r6, lr}
 800eeb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eeb8:	4604      	mov	r4, r0
 800eeba:	460d      	mov	r5, r1
 800eebc:	b976      	cbnz	r6, 800eedc <_Balloc+0x28>
 800eebe:	2010      	movs	r0, #16
 800eec0:	f7ff fff0 	bl	800eea4 <malloc>
 800eec4:	4602      	mov	r2, r0
 800eec6:	6260      	str	r0, [r4, #36]	; 0x24
 800eec8:	b920      	cbnz	r0, 800eed4 <_Balloc+0x20>
 800eeca:	4b18      	ldr	r3, [pc, #96]	; (800ef2c <_Balloc+0x78>)
 800eecc:	4818      	ldr	r0, [pc, #96]	; (800ef30 <_Balloc+0x7c>)
 800eece:	2166      	movs	r1, #102	; 0x66
 800eed0:	f000 fdd6 	bl	800fa80 <__assert_func>
 800eed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eed8:	6006      	str	r6, [r0, #0]
 800eeda:	60c6      	str	r6, [r0, #12]
 800eedc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eede:	68f3      	ldr	r3, [r6, #12]
 800eee0:	b183      	cbz	r3, 800ef04 <_Balloc+0x50>
 800eee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eeea:	b9b8      	cbnz	r0, 800ef1c <_Balloc+0x68>
 800eeec:	2101      	movs	r1, #1
 800eeee:	fa01 f605 	lsl.w	r6, r1, r5
 800eef2:	1d72      	adds	r2, r6, #5
 800eef4:	0092      	lsls	r2, r2, #2
 800eef6:	4620      	mov	r0, r4
 800eef8:	f000 fb60 	bl	800f5bc <_calloc_r>
 800eefc:	b160      	cbz	r0, 800ef18 <_Balloc+0x64>
 800eefe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef02:	e00e      	b.n	800ef22 <_Balloc+0x6e>
 800ef04:	2221      	movs	r2, #33	; 0x21
 800ef06:	2104      	movs	r1, #4
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f000 fb57 	bl	800f5bc <_calloc_r>
 800ef0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef10:	60f0      	str	r0, [r6, #12]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1e4      	bne.n	800eee2 <_Balloc+0x2e>
 800ef18:	2000      	movs	r0, #0
 800ef1a:	bd70      	pop	{r4, r5, r6, pc}
 800ef1c:	6802      	ldr	r2, [r0, #0]
 800ef1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef22:	2300      	movs	r3, #0
 800ef24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef28:	e7f7      	b.n	800ef1a <_Balloc+0x66>
 800ef2a:	bf00      	nop
 800ef2c:	08012229 	.word	0x08012229
 800ef30:	080122ac 	.word	0x080122ac

0800ef34 <_Bfree>:
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef38:	4605      	mov	r5, r0
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	b976      	cbnz	r6, 800ef5c <_Bfree+0x28>
 800ef3e:	2010      	movs	r0, #16
 800ef40:	f7ff ffb0 	bl	800eea4 <malloc>
 800ef44:	4602      	mov	r2, r0
 800ef46:	6268      	str	r0, [r5, #36]	; 0x24
 800ef48:	b920      	cbnz	r0, 800ef54 <_Bfree+0x20>
 800ef4a:	4b09      	ldr	r3, [pc, #36]	; (800ef70 <_Bfree+0x3c>)
 800ef4c:	4809      	ldr	r0, [pc, #36]	; (800ef74 <_Bfree+0x40>)
 800ef4e:	218a      	movs	r1, #138	; 0x8a
 800ef50:	f000 fd96 	bl	800fa80 <__assert_func>
 800ef54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef58:	6006      	str	r6, [r0, #0]
 800ef5a:	60c6      	str	r6, [r0, #12]
 800ef5c:	b13c      	cbz	r4, 800ef6e <_Bfree+0x3a>
 800ef5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef60:	6862      	ldr	r2, [r4, #4]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef68:	6021      	str	r1, [r4, #0]
 800ef6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}
 800ef70:	08012229 	.word	0x08012229
 800ef74:	080122ac 	.word	0x080122ac

0800ef78 <__multadd>:
 800ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7c:	690d      	ldr	r5, [r1, #16]
 800ef7e:	4607      	mov	r7, r0
 800ef80:	460c      	mov	r4, r1
 800ef82:	461e      	mov	r6, r3
 800ef84:	f101 0c14 	add.w	ip, r1, #20
 800ef88:	2000      	movs	r0, #0
 800ef8a:	f8dc 3000 	ldr.w	r3, [ip]
 800ef8e:	b299      	uxth	r1, r3
 800ef90:	fb02 6101 	mla	r1, r2, r1, r6
 800ef94:	0c1e      	lsrs	r6, r3, #16
 800ef96:	0c0b      	lsrs	r3, r1, #16
 800ef98:	fb02 3306 	mla	r3, r2, r6, r3
 800ef9c:	b289      	uxth	r1, r1
 800ef9e:	3001      	adds	r0, #1
 800efa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800efa4:	4285      	cmp	r5, r0
 800efa6:	f84c 1b04 	str.w	r1, [ip], #4
 800efaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800efae:	dcec      	bgt.n	800ef8a <__multadd+0x12>
 800efb0:	b30e      	cbz	r6, 800eff6 <__multadd+0x7e>
 800efb2:	68a3      	ldr	r3, [r4, #8]
 800efb4:	42ab      	cmp	r3, r5
 800efb6:	dc19      	bgt.n	800efec <__multadd+0x74>
 800efb8:	6861      	ldr	r1, [r4, #4]
 800efba:	4638      	mov	r0, r7
 800efbc:	3101      	adds	r1, #1
 800efbe:	f7ff ff79 	bl	800eeb4 <_Balloc>
 800efc2:	4680      	mov	r8, r0
 800efc4:	b928      	cbnz	r0, 800efd2 <__multadd+0x5a>
 800efc6:	4602      	mov	r2, r0
 800efc8:	4b0c      	ldr	r3, [pc, #48]	; (800effc <__multadd+0x84>)
 800efca:	480d      	ldr	r0, [pc, #52]	; (800f000 <__multadd+0x88>)
 800efcc:	21b5      	movs	r1, #181	; 0xb5
 800efce:	f000 fd57 	bl	800fa80 <__assert_func>
 800efd2:	6922      	ldr	r2, [r4, #16]
 800efd4:	3202      	adds	r2, #2
 800efd6:	f104 010c 	add.w	r1, r4, #12
 800efda:	0092      	lsls	r2, r2, #2
 800efdc:	300c      	adds	r0, #12
 800efde:	f7fe fc43 	bl	800d868 <memcpy>
 800efe2:	4621      	mov	r1, r4
 800efe4:	4638      	mov	r0, r7
 800efe6:	f7ff ffa5 	bl	800ef34 <_Bfree>
 800efea:	4644      	mov	r4, r8
 800efec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eff0:	3501      	adds	r5, #1
 800eff2:	615e      	str	r6, [r3, #20]
 800eff4:	6125      	str	r5, [r4, #16]
 800eff6:	4620      	mov	r0, r4
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	0801229b 	.word	0x0801229b
 800f000:	080122ac 	.word	0x080122ac

0800f004 <__hi0bits>:
 800f004:	0c03      	lsrs	r3, r0, #16
 800f006:	041b      	lsls	r3, r3, #16
 800f008:	b9d3      	cbnz	r3, 800f040 <__hi0bits+0x3c>
 800f00a:	0400      	lsls	r0, r0, #16
 800f00c:	2310      	movs	r3, #16
 800f00e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f012:	bf04      	itt	eq
 800f014:	0200      	lsleq	r0, r0, #8
 800f016:	3308      	addeq	r3, #8
 800f018:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f01c:	bf04      	itt	eq
 800f01e:	0100      	lsleq	r0, r0, #4
 800f020:	3304      	addeq	r3, #4
 800f022:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f026:	bf04      	itt	eq
 800f028:	0080      	lsleq	r0, r0, #2
 800f02a:	3302      	addeq	r3, #2
 800f02c:	2800      	cmp	r0, #0
 800f02e:	db05      	blt.n	800f03c <__hi0bits+0x38>
 800f030:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f034:	f103 0301 	add.w	r3, r3, #1
 800f038:	bf08      	it	eq
 800f03a:	2320      	moveq	r3, #32
 800f03c:	4618      	mov	r0, r3
 800f03e:	4770      	bx	lr
 800f040:	2300      	movs	r3, #0
 800f042:	e7e4      	b.n	800f00e <__hi0bits+0xa>

0800f044 <__lo0bits>:
 800f044:	6803      	ldr	r3, [r0, #0]
 800f046:	f013 0207 	ands.w	r2, r3, #7
 800f04a:	4601      	mov	r1, r0
 800f04c:	d00b      	beq.n	800f066 <__lo0bits+0x22>
 800f04e:	07da      	lsls	r2, r3, #31
 800f050:	d423      	bmi.n	800f09a <__lo0bits+0x56>
 800f052:	0798      	lsls	r0, r3, #30
 800f054:	bf49      	itett	mi
 800f056:	085b      	lsrmi	r3, r3, #1
 800f058:	089b      	lsrpl	r3, r3, #2
 800f05a:	2001      	movmi	r0, #1
 800f05c:	600b      	strmi	r3, [r1, #0]
 800f05e:	bf5c      	itt	pl
 800f060:	600b      	strpl	r3, [r1, #0]
 800f062:	2002      	movpl	r0, #2
 800f064:	4770      	bx	lr
 800f066:	b298      	uxth	r0, r3
 800f068:	b9a8      	cbnz	r0, 800f096 <__lo0bits+0x52>
 800f06a:	0c1b      	lsrs	r3, r3, #16
 800f06c:	2010      	movs	r0, #16
 800f06e:	b2da      	uxtb	r2, r3
 800f070:	b90a      	cbnz	r2, 800f076 <__lo0bits+0x32>
 800f072:	3008      	adds	r0, #8
 800f074:	0a1b      	lsrs	r3, r3, #8
 800f076:	071a      	lsls	r2, r3, #28
 800f078:	bf04      	itt	eq
 800f07a:	091b      	lsreq	r3, r3, #4
 800f07c:	3004      	addeq	r0, #4
 800f07e:	079a      	lsls	r2, r3, #30
 800f080:	bf04      	itt	eq
 800f082:	089b      	lsreq	r3, r3, #2
 800f084:	3002      	addeq	r0, #2
 800f086:	07da      	lsls	r2, r3, #31
 800f088:	d403      	bmi.n	800f092 <__lo0bits+0x4e>
 800f08a:	085b      	lsrs	r3, r3, #1
 800f08c:	f100 0001 	add.w	r0, r0, #1
 800f090:	d005      	beq.n	800f09e <__lo0bits+0x5a>
 800f092:	600b      	str	r3, [r1, #0]
 800f094:	4770      	bx	lr
 800f096:	4610      	mov	r0, r2
 800f098:	e7e9      	b.n	800f06e <__lo0bits+0x2a>
 800f09a:	2000      	movs	r0, #0
 800f09c:	4770      	bx	lr
 800f09e:	2020      	movs	r0, #32
 800f0a0:	4770      	bx	lr
	...

0800f0a4 <__i2b>:
 800f0a4:	b510      	push	{r4, lr}
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	2101      	movs	r1, #1
 800f0aa:	f7ff ff03 	bl	800eeb4 <_Balloc>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	b928      	cbnz	r0, 800f0be <__i2b+0x1a>
 800f0b2:	4b05      	ldr	r3, [pc, #20]	; (800f0c8 <__i2b+0x24>)
 800f0b4:	4805      	ldr	r0, [pc, #20]	; (800f0cc <__i2b+0x28>)
 800f0b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f0ba:	f000 fce1 	bl	800fa80 <__assert_func>
 800f0be:	2301      	movs	r3, #1
 800f0c0:	6144      	str	r4, [r0, #20]
 800f0c2:	6103      	str	r3, [r0, #16]
 800f0c4:	bd10      	pop	{r4, pc}
 800f0c6:	bf00      	nop
 800f0c8:	0801229b 	.word	0x0801229b
 800f0cc:	080122ac 	.word	0x080122ac

0800f0d0 <__multiply>:
 800f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	4691      	mov	r9, r2
 800f0d6:	690a      	ldr	r2, [r1, #16]
 800f0d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	bfb8      	it	lt
 800f0e0:	460b      	movlt	r3, r1
 800f0e2:	460c      	mov	r4, r1
 800f0e4:	bfbc      	itt	lt
 800f0e6:	464c      	movlt	r4, r9
 800f0e8:	4699      	movlt	r9, r3
 800f0ea:	6927      	ldr	r7, [r4, #16]
 800f0ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	6861      	ldr	r1, [r4, #4]
 800f0f4:	eb07 060a 	add.w	r6, r7, sl
 800f0f8:	42b3      	cmp	r3, r6
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	bfb8      	it	lt
 800f0fe:	3101      	addlt	r1, #1
 800f100:	f7ff fed8 	bl	800eeb4 <_Balloc>
 800f104:	b930      	cbnz	r0, 800f114 <__multiply+0x44>
 800f106:	4602      	mov	r2, r0
 800f108:	4b44      	ldr	r3, [pc, #272]	; (800f21c <__multiply+0x14c>)
 800f10a:	4845      	ldr	r0, [pc, #276]	; (800f220 <__multiply+0x150>)
 800f10c:	f240 115d 	movw	r1, #349	; 0x15d
 800f110:	f000 fcb6 	bl	800fa80 <__assert_func>
 800f114:	f100 0514 	add.w	r5, r0, #20
 800f118:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f11c:	462b      	mov	r3, r5
 800f11e:	2200      	movs	r2, #0
 800f120:	4543      	cmp	r3, r8
 800f122:	d321      	bcc.n	800f168 <__multiply+0x98>
 800f124:	f104 0314 	add.w	r3, r4, #20
 800f128:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f12c:	f109 0314 	add.w	r3, r9, #20
 800f130:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f134:	9202      	str	r2, [sp, #8]
 800f136:	1b3a      	subs	r2, r7, r4
 800f138:	3a15      	subs	r2, #21
 800f13a:	f022 0203 	bic.w	r2, r2, #3
 800f13e:	3204      	adds	r2, #4
 800f140:	f104 0115 	add.w	r1, r4, #21
 800f144:	428f      	cmp	r7, r1
 800f146:	bf38      	it	cc
 800f148:	2204      	movcc	r2, #4
 800f14a:	9201      	str	r2, [sp, #4]
 800f14c:	9a02      	ldr	r2, [sp, #8]
 800f14e:	9303      	str	r3, [sp, #12]
 800f150:	429a      	cmp	r2, r3
 800f152:	d80c      	bhi.n	800f16e <__multiply+0x9e>
 800f154:	2e00      	cmp	r6, #0
 800f156:	dd03      	ble.n	800f160 <__multiply+0x90>
 800f158:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d05a      	beq.n	800f216 <__multiply+0x146>
 800f160:	6106      	str	r6, [r0, #16]
 800f162:	b005      	add	sp, #20
 800f164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f168:	f843 2b04 	str.w	r2, [r3], #4
 800f16c:	e7d8      	b.n	800f120 <__multiply+0x50>
 800f16e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f172:	f1ba 0f00 	cmp.w	sl, #0
 800f176:	d024      	beq.n	800f1c2 <__multiply+0xf2>
 800f178:	f104 0e14 	add.w	lr, r4, #20
 800f17c:	46a9      	mov	r9, r5
 800f17e:	f04f 0c00 	mov.w	ip, #0
 800f182:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f186:	f8d9 1000 	ldr.w	r1, [r9]
 800f18a:	fa1f fb82 	uxth.w	fp, r2
 800f18e:	b289      	uxth	r1, r1
 800f190:	fb0a 110b 	mla	r1, sl, fp, r1
 800f194:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f198:	f8d9 2000 	ldr.w	r2, [r9]
 800f19c:	4461      	add	r1, ip
 800f19e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f1a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1aa:	b289      	uxth	r1, r1
 800f1ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1b0:	4577      	cmp	r7, lr
 800f1b2:	f849 1b04 	str.w	r1, [r9], #4
 800f1b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1ba:	d8e2      	bhi.n	800f182 <__multiply+0xb2>
 800f1bc:	9a01      	ldr	r2, [sp, #4]
 800f1be:	f845 c002 	str.w	ip, [r5, r2]
 800f1c2:	9a03      	ldr	r2, [sp, #12]
 800f1c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	f1b9 0f00 	cmp.w	r9, #0
 800f1ce:	d020      	beq.n	800f212 <__multiply+0x142>
 800f1d0:	6829      	ldr	r1, [r5, #0]
 800f1d2:	f104 0c14 	add.w	ip, r4, #20
 800f1d6:	46ae      	mov	lr, r5
 800f1d8:	f04f 0a00 	mov.w	sl, #0
 800f1dc:	f8bc b000 	ldrh.w	fp, [ip]
 800f1e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f1e4:	fb09 220b 	mla	r2, r9, fp, r2
 800f1e8:	4492      	add	sl, r2
 800f1ea:	b289      	uxth	r1, r1
 800f1ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f1f0:	f84e 1b04 	str.w	r1, [lr], #4
 800f1f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f1f8:	f8be 1000 	ldrh.w	r1, [lr]
 800f1fc:	0c12      	lsrs	r2, r2, #16
 800f1fe:	fb09 1102 	mla	r1, r9, r2, r1
 800f202:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f206:	4567      	cmp	r7, ip
 800f208:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f20c:	d8e6      	bhi.n	800f1dc <__multiply+0x10c>
 800f20e:	9a01      	ldr	r2, [sp, #4]
 800f210:	50a9      	str	r1, [r5, r2]
 800f212:	3504      	adds	r5, #4
 800f214:	e79a      	b.n	800f14c <__multiply+0x7c>
 800f216:	3e01      	subs	r6, #1
 800f218:	e79c      	b.n	800f154 <__multiply+0x84>
 800f21a:	bf00      	nop
 800f21c:	0801229b 	.word	0x0801229b
 800f220:	080122ac 	.word	0x080122ac

0800f224 <__pow5mult>:
 800f224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f228:	4615      	mov	r5, r2
 800f22a:	f012 0203 	ands.w	r2, r2, #3
 800f22e:	4606      	mov	r6, r0
 800f230:	460f      	mov	r7, r1
 800f232:	d007      	beq.n	800f244 <__pow5mult+0x20>
 800f234:	4c25      	ldr	r4, [pc, #148]	; (800f2cc <__pow5mult+0xa8>)
 800f236:	3a01      	subs	r2, #1
 800f238:	2300      	movs	r3, #0
 800f23a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f23e:	f7ff fe9b 	bl	800ef78 <__multadd>
 800f242:	4607      	mov	r7, r0
 800f244:	10ad      	asrs	r5, r5, #2
 800f246:	d03d      	beq.n	800f2c4 <__pow5mult+0xa0>
 800f248:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f24a:	b97c      	cbnz	r4, 800f26c <__pow5mult+0x48>
 800f24c:	2010      	movs	r0, #16
 800f24e:	f7ff fe29 	bl	800eea4 <malloc>
 800f252:	4602      	mov	r2, r0
 800f254:	6270      	str	r0, [r6, #36]	; 0x24
 800f256:	b928      	cbnz	r0, 800f264 <__pow5mult+0x40>
 800f258:	4b1d      	ldr	r3, [pc, #116]	; (800f2d0 <__pow5mult+0xac>)
 800f25a:	481e      	ldr	r0, [pc, #120]	; (800f2d4 <__pow5mult+0xb0>)
 800f25c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f260:	f000 fc0e 	bl	800fa80 <__assert_func>
 800f264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f268:	6004      	str	r4, [r0, #0]
 800f26a:	60c4      	str	r4, [r0, #12]
 800f26c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f274:	b94c      	cbnz	r4, 800f28a <__pow5mult+0x66>
 800f276:	f240 2171 	movw	r1, #625	; 0x271
 800f27a:	4630      	mov	r0, r6
 800f27c:	f7ff ff12 	bl	800f0a4 <__i2b>
 800f280:	2300      	movs	r3, #0
 800f282:	f8c8 0008 	str.w	r0, [r8, #8]
 800f286:	4604      	mov	r4, r0
 800f288:	6003      	str	r3, [r0, #0]
 800f28a:	f04f 0900 	mov.w	r9, #0
 800f28e:	07eb      	lsls	r3, r5, #31
 800f290:	d50a      	bpl.n	800f2a8 <__pow5mult+0x84>
 800f292:	4639      	mov	r1, r7
 800f294:	4622      	mov	r2, r4
 800f296:	4630      	mov	r0, r6
 800f298:	f7ff ff1a 	bl	800f0d0 <__multiply>
 800f29c:	4639      	mov	r1, r7
 800f29e:	4680      	mov	r8, r0
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f7ff fe47 	bl	800ef34 <_Bfree>
 800f2a6:	4647      	mov	r7, r8
 800f2a8:	106d      	asrs	r5, r5, #1
 800f2aa:	d00b      	beq.n	800f2c4 <__pow5mult+0xa0>
 800f2ac:	6820      	ldr	r0, [r4, #0]
 800f2ae:	b938      	cbnz	r0, 800f2c0 <__pow5mult+0x9c>
 800f2b0:	4622      	mov	r2, r4
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	f7ff ff0b 	bl	800f0d0 <__multiply>
 800f2ba:	6020      	str	r0, [r4, #0]
 800f2bc:	f8c0 9000 	str.w	r9, [r0]
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	e7e4      	b.n	800f28e <__pow5mult+0x6a>
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ca:	bf00      	nop
 800f2cc:	080123f8 	.word	0x080123f8
 800f2d0:	08012229 	.word	0x08012229
 800f2d4:	080122ac 	.word	0x080122ac

0800f2d8 <__lshift>:
 800f2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2dc:	460c      	mov	r4, r1
 800f2de:	6849      	ldr	r1, [r1, #4]
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2e6:	68a3      	ldr	r3, [r4, #8]
 800f2e8:	4607      	mov	r7, r0
 800f2ea:	4691      	mov	r9, r2
 800f2ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2f0:	f108 0601 	add.w	r6, r8, #1
 800f2f4:	42b3      	cmp	r3, r6
 800f2f6:	db0b      	blt.n	800f310 <__lshift+0x38>
 800f2f8:	4638      	mov	r0, r7
 800f2fa:	f7ff fddb 	bl	800eeb4 <_Balloc>
 800f2fe:	4605      	mov	r5, r0
 800f300:	b948      	cbnz	r0, 800f316 <__lshift+0x3e>
 800f302:	4602      	mov	r2, r0
 800f304:	4b2a      	ldr	r3, [pc, #168]	; (800f3b0 <__lshift+0xd8>)
 800f306:	482b      	ldr	r0, [pc, #172]	; (800f3b4 <__lshift+0xdc>)
 800f308:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f30c:	f000 fbb8 	bl	800fa80 <__assert_func>
 800f310:	3101      	adds	r1, #1
 800f312:	005b      	lsls	r3, r3, #1
 800f314:	e7ee      	b.n	800f2f4 <__lshift+0x1c>
 800f316:	2300      	movs	r3, #0
 800f318:	f100 0114 	add.w	r1, r0, #20
 800f31c:	f100 0210 	add.w	r2, r0, #16
 800f320:	4618      	mov	r0, r3
 800f322:	4553      	cmp	r3, sl
 800f324:	db37      	blt.n	800f396 <__lshift+0xbe>
 800f326:	6920      	ldr	r0, [r4, #16]
 800f328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f32c:	f104 0314 	add.w	r3, r4, #20
 800f330:	f019 091f 	ands.w	r9, r9, #31
 800f334:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f338:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f33c:	d02f      	beq.n	800f39e <__lshift+0xc6>
 800f33e:	f1c9 0e20 	rsb	lr, r9, #32
 800f342:	468a      	mov	sl, r1
 800f344:	f04f 0c00 	mov.w	ip, #0
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	fa02 f209 	lsl.w	r2, r2, r9
 800f34e:	ea42 020c 	orr.w	r2, r2, ip
 800f352:	f84a 2b04 	str.w	r2, [sl], #4
 800f356:	f853 2b04 	ldr.w	r2, [r3], #4
 800f35a:	4298      	cmp	r0, r3
 800f35c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f360:	d8f2      	bhi.n	800f348 <__lshift+0x70>
 800f362:	1b03      	subs	r3, r0, r4
 800f364:	3b15      	subs	r3, #21
 800f366:	f023 0303 	bic.w	r3, r3, #3
 800f36a:	3304      	adds	r3, #4
 800f36c:	f104 0215 	add.w	r2, r4, #21
 800f370:	4290      	cmp	r0, r2
 800f372:	bf38      	it	cc
 800f374:	2304      	movcc	r3, #4
 800f376:	f841 c003 	str.w	ip, [r1, r3]
 800f37a:	f1bc 0f00 	cmp.w	ip, #0
 800f37e:	d001      	beq.n	800f384 <__lshift+0xac>
 800f380:	f108 0602 	add.w	r6, r8, #2
 800f384:	3e01      	subs	r6, #1
 800f386:	4638      	mov	r0, r7
 800f388:	612e      	str	r6, [r5, #16]
 800f38a:	4621      	mov	r1, r4
 800f38c:	f7ff fdd2 	bl	800ef34 <_Bfree>
 800f390:	4628      	mov	r0, r5
 800f392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f396:	f842 0f04 	str.w	r0, [r2, #4]!
 800f39a:	3301      	adds	r3, #1
 800f39c:	e7c1      	b.n	800f322 <__lshift+0x4a>
 800f39e:	3904      	subs	r1, #4
 800f3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3a8:	4298      	cmp	r0, r3
 800f3aa:	d8f9      	bhi.n	800f3a0 <__lshift+0xc8>
 800f3ac:	e7ea      	b.n	800f384 <__lshift+0xac>
 800f3ae:	bf00      	nop
 800f3b0:	0801229b 	.word	0x0801229b
 800f3b4:	080122ac 	.word	0x080122ac

0800f3b8 <__mcmp>:
 800f3b8:	b530      	push	{r4, r5, lr}
 800f3ba:	6902      	ldr	r2, [r0, #16]
 800f3bc:	690c      	ldr	r4, [r1, #16]
 800f3be:	1b12      	subs	r2, r2, r4
 800f3c0:	d10e      	bne.n	800f3e0 <__mcmp+0x28>
 800f3c2:	f100 0314 	add.w	r3, r0, #20
 800f3c6:	3114      	adds	r1, #20
 800f3c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f3cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f3d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f3d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f3d8:	42a5      	cmp	r5, r4
 800f3da:	d003      	beq.n	800f3e4 <__mcmp+0x2c>
 800f3dc:	d305      	bcc.n	800f3ea <__mcmp+0x32>
 800f3de:	2201      	movs	r2, #1
 800f3e0:	4610      	mov	r0, r2
 800f3e2:	bd30      	pop	{r4, r5, pc}
 800f3e4:	4283      	cmp	r3, r0
 800f3e6:	d3f3      	bcc.n	800f3d0 <__mcmp+0x18>
 800f3e8:	e7fa      	b.n	800f3e0 <__mcmp+0x28>
 800f3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ee:	e7f7      	b.n	800f3e0 <__mcmp+0x28>

0800f3f0 <__mdiff>:
 800f3f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	4606      	mov	r6, r0
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	4690      	mov	r8, r2
 800f3fe:	f7ff ffdb 	bl	800f3b8 <__mcmp>
 800f402:	1e05      	subs	r5, r0, #0
 800f404:	d110      	bne.n	800f428 <__mdiff+0x38>
 800f406:	4629      	mov	r1, r5
 800f408:	4630      	mov	r0, r6
 800f40a:	f7ff fd53 	bl	800eeb4 <_Balloc>
 800f40e:	b930      	cbnz	r0, 800f41e <__mdiff+0x2e>
 800f410:	4b3a      	ldr	r3, [pc, #232]	; (800f4fc <__mdiff+0x10c>)
 800f412:	4602      	mov	r2, r0
 800f414:	f240 2132 	movw	r1, #562	; 0x232
 800f418:	4839      	ldr	r0, [pc, #228]	; (800f500 <__mdiff+0x110>)
 800f41a:	f000 fb31 	bl	800fa80 <__assert_func>
 800f41e:	2301      	movs	r3, #1
 800f420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f428:	bfa4      	itt	ge
 800f42a:	4643      	movge	r3, r8
 800f42c:	46a0      	movge	r8, r4
 800f42e:	4630      	mov	r0, r6
 800f430:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f434:	bfa6      	itte	ge
 800f436:	461c      	movge	r4, r3
 800f438:	2500      	movge	r5, #0
 800f43a:	2501      	movlt	r5, #1
 800f43c:	f7ff fd3a 	bl	800eeb4 <_Balloc>
 800f440:	b920      	cbnz	r0, 800f44c <__mdiff+0x5c>
 800f442:	4b2e      	ldr	r3, [pc, #184]	; (800f4fc <__mdiff+0x10c>)
 800f444:	4602      	mov	r2, r0
 800f446:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f44a:	e7e5      	b.n	800f418 <__mdiff+0x28>
 800f44c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f450:	6926      	ldr	r6, [r4, #16]
 800f452:	60c5      	str	r5, [r0, #12]
 800f454:	f104 0914 	add.w	r9, r4, #20
 800f458:	f108 0514 	add.w	r5, r8, #20
 800f45c:	f100 0e14 	add.w	lr, r0, #20
 800f460:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f464:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f468:	f108 0210 	add.w	r2, r8, #16
 800f46c:	46f2      	mov	sl, lr
 800f46e:	2100      	movs	r1, #0
 800f470:	f859 3b04 	ldr.w	r3, [r9], #4
 800f474:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f478:	fa1f f883 	uxth.w	r8, r3
 800f47c:	fa11 f18b 	uxtah	r1, r1, fp
 800f480:	0c1b      	lsrs	r3, r3, #16
 800f482:	eba1 0808 	sub.w	r8, r1, r8
 800f486:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f48a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f48e:	fa1f f888 	uxth.w	r8, r8
 800f492:	1419      	asrs	r1, r3, #16
 800f494:	454e      	cmp	r6, r9
 800f496:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f49a:	f84a 3b04 	str.w	r3, [sl], #4
 800f49e:	d8e7      	bhi.n	800f470 <__mdiff+0x80>
 800f4a0:	1b33      	subs	r3, r6, r4
 800f4a2:	3b15      	subs	r3, #21
 800f4a4:	f023 0303 	bic.w	r3, r3, #3
 800f4a8:	3304      	adds	r3, #4
 800f4aa:	3415      	adds	r4, #21
 800f4ac:	42a6      	cmp	r6, r4
 800f4ae:	bf38      	it	cc
 800f4b0:	2304      	movcc	r3, #4
 800f4b2:	441d      	add	r5, r3
 800f4b4:	4473      	add	r3, lr
 800f4b6:	469e      	mov	lr, r3
 800f4b8:	462e      	mov	r6, r5
 800f4ba:	4566      	cmp	r6, ip
 800f4bc:	d30e      	bcc.n	800f4dc <__mdiff+0xec>
 800f4be:	f10c 0203 	add.w	r2, ip, #3
 800f4c2:	1b52      	subs	r2, r2, r5
 800f4c4:	f022 0203 	bic.w	r2, r2, #3
 800f4c8:	3d03      	subs	r5, #3
 800f4ca:	45ac      	cmp	ip, r5
 800f4cc:	bf38      	it	cc
 800f4ce:	2200      	movcc	r2, #0
 800f4d0:	441a      	add	r2, r3
 800f4d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f4d6:	b17b      	cbz	r3, 800f4f8 <__mdiff+0x108>
 800f4d8:	6107      	str	r7, [r0, #16]
 800f4da:	e7a3      	b.n	800f424 <__mdiff+0x34>
 800f4dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800f4e0:	fa11 f288 	uxtah	r2, r1, r8
 800f4e4:	1414      	asrs	r4, r2, #16
 800f4e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f4ea:	b292      	uxth	r2, r2
 800f4ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f4f0:	f84e 2b04 	str.w	r2, [lr], #4
 800f4f4:	1421      	asrs	r1, r4, #16
 800f4f6:	e7e0      	b.n	800f4ba <__mdiff+0xca>
 800f4f8:	3f01      	subs	r7, #1
 800f4fa:	e7ea      	b.n	800f4d2 <__mdiff+0xe2>
 800f4fc:	0801229b 	.word	0x0801229b
 800f500:	080122ac 	.word	0x080122ac

0800f504 <__d2b>:
 800f504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f508:	4689      	mov	r9, r1
 800f50a:	2101      	movs	r1, #1
 800f50c:	ec57 6b10 	vmov	r6, r7, d0
 800f510:	4690      	mov	r8, r2
 800f512:	f7ff fccf 	bl	800eeb4 <_Balloc>
 800f516:	4604      	mov	r4, r0
 800f518:	b930      	cbnz	r0, 800f528 <__d2b+0x24>
 800f51a:	4602      	mov	r2, r0
 800f51c:	4b25      	ldr	r3, [pc, #148]	; (800f5b4 <__d2b+0xb0>)
 800f51e:	4826      	ldr	r0, [pc, #152]	; (800f5b8 <__d2b+0xb4>)
 800f520:	f240 310a 	movw	r1, #778	; 0x30a
 800f524:	f000 faac 	bl	800fa80 <__assert_func>
 800f528:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f52c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f530:	bb35      	cbnz	r5, 800f580 <__d2b+0x7c>
 800f532:	2e00      	cmp	r6, #0
 800f534:	9301      	str	r3, [sp, #4]
 800f536:	d028      	beq.n	800f58a <__d2b+0x86>
 800f538:	4668      	mov	r0, sp
 800f53a:	9600      	str	r6, [sp, #0]
 800f53c:	f7ff fd82 	bl	800f044 <__lo0bits>
 800f540:	9900      	ldr	r1, [sp, #0]
 800f542:	b300      	cbz	r0, 800f586 <__d2b+0x82>
 800f544:	9a01      	ldr	r2, [sp, #4]
 800f546:	f1c0 0320 	rsb	r3, r0, #32
 800f54a:	fa02 f303 	lsl.w	r3, r2, r3
 800f54e:	430b      	orrs	r3, r1
 800f550:	40c2      	lsrs	r2, r0
 800f552:	6163      	str	r3, [r4, #20]
 800f554:	9201      	str	r2, [sp, #4]
 800f556:	9b01      	ldr	r3, [sp, #4]
 800f558:	61a3      	str	r3, [r4, #24]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	bf14      	ite	ne
 800f55e:	2202      	movne	r2, #2
 800f560:	2201      	moveq	r2, #1
 800f562:	6122      	str	r2, [r4, #16]
 800f564:	b1d5      	cbz	r5, 800f59c <__d2b+0x98>
 800f566:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f56a:	4405      	add	r5, r0
 800f56c:	f8c9 5000 	str.w	r5, [r9]
 800f570:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f574:	f8c8 0000 	str.w	r0, [r8]
 800f578:	4620      	mov	r0, r4
 800f57a:	b003      	add	sp, #12
 800f57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f584:	e7d5      	b.n	800f532 <__d2b+0x2e>
 800f586:	6161      	str	r1, [r4, #20]
 800f588:	e7e5      	b.n	800f556 <__d2b+0x52>
 800f58a:	a801      	add	r0, sp, #4
 800f58c:	f7ff fd5a 	bl	800f044 <__lo0bits>
 800f590:	9b01      	ldr	r3, [sp, #4]
 800f592:	6163      	str	r3, [r4, #20]
 800f594:	2201      	movs	r2, #1
 800f596:	6122      	str	r2, [r4, #16]
 800f598:	3020      	adds	r0, #32
 800f59a:	e7e3      	b.n	800f564 <__d2b+0x60>
 800f59c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5a4:	f8c9 0000 	str.w	r0, [r9]
 800f5a8:	6918      	ldr	r0, [r3, #16]
 800f5aa:	f7ff fd2b 	bl	800f004 <__hi0bits>
 800f5ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5b2:	e7df      	b.n	800f574 <__d2b+0x70>
 800f5b4:	0801229b 	.word	0x0801229b
 800f5b8:	080122ac 	.word	0x080122ac

0800f5bc <_calloc_r>:
 800f5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5be:	fba1 2402 	umull	r2, r4, r1, r2
 800f5c2:	b94c      	cbnz	r4, 800f5d8 <_calloc_r+0x1c>
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	9201      	str	r2, [sp, #4]
 800f5c8:	f000 f87a 	bl	800f6c0 <_malloc_r>
 800f5cc:	9a01      	ldr	r2, [sp, #4]
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	b930      	cbnz	r0, 800f5e0 <_calloc_r+0x24>
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	b003      	add	sp, #12
 800f5d6:	bd30      	pop	{r4, r5, pc}
 800f5d8:	220c      	movs	r2, #12
 800f5da:	6002      	str	r2, [r0, #0]
 800f5dc:	2500      	movs	r5, #0
 800f5de:	e7f8      	b.n	800f5d2 <_calloc_r+0x16>
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	f7fe f94f 	bl	800d884 <memset>
 800f5e6:	e7f4      	b.n	800f5d2 <_calloc_r+0x16>

0800f5e8 <_free_r>:
 800f5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5ea:	2900      	cmp	r1, #0
 800f5ec:	d044      	beq.n	800f678 <_free_r+0x90>
 800f5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5f2:	9001      	str	r0, [sp, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f5fa:	bfb8      	it	lt
 800f5fc:	18e4      	addlt	r4, r4, r3
 800f5fe:	f000 fa9b 	bl	800fb38 <__malloc_lock>
 800f602:	4a1e      	ldr	r2, [pc, #120]	; (800f67c <_free_r+0x94>)
 800f604:	9801      	ldr	r0, [sp, #4]
 800f606:	6813      	ldr	r3, [r2, #0]
 800f608:	b933      	cbnz	r3, 800f618 <_free_r+0x30>
 800f60a:	6063      	str	r3, [r4, #4]
 800f60c:	6014      	str	r4, [r2, #0]
 800f60e:	b003      	add	sp, #12
 800f610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f614:	f000 ba96 	b.w	800fb44 <__malloc_unlock>
 800f618:	42a3      	cmp	r3, r4
 800f61a:	d908      	bls.n	800f62e <_free_r+0x46>
 800f61c:	6825      	ldr	r5, [r4, #0]
 800f61e:	1961      	adds	r1, r4, r5
 800f620:	428b      	cmp	r3, r1
 800f622:	bf01      	itttt	eq
 800f624:	6819      	ldreq	r1, [r3, #0]
 800f626:	685b      	ldreq	r3, [r3, #4]
 800f628:	1949      	addeq	r1, r1, r5
 800f62a:	6021      	streq	r1, [r4, #0]
 800f62c:	e7ed      	b.n	800f60a <_free_r+0x22>
 800f62e:	461a      	mov	r2, r3
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	b10b      	cbz	r3, 800f638 <_free_r+0x50>
 800f634:	42a3      	cmp	r3, r4
 800f636:	d9fa      	bls.n	800f62e <_free_r+0x46>
 800f638:	6811      	ldr	r1, [r2, #0]
 800f63a:	1855      	adds	r5, r2, r1
 800f63c:	42a5      	cmp	r5, r4
 800f63e:	d10b      	bne.n	800f658 <_free_r+0x70>
 800f640:	6824      	ldr	r4, [r4, #0]
 800f642:	4421      	add	r1, r4
 800f644:	1854      	adds	r4, r2, r1
 800f646:	42a3      	cmp	r3, r4
 800f648:	6011      	str	r1, [r2, #0]
 800f64a:	d1e0      	bne.n	800f60e <_free_r+0x26>
 800f64c:	681c      	ldr	r4, [r3, #0]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	6053      	str	r3, [r2, #4]
 800f652:	4421      	add	r1, r4
 800f654:	6011      	str	r1, [r2, #0]
 800f656:	e7da      	b.n	800f60e <_free_r+0x26>
 800f658:	d902      	bls.n	800f660 <_free_r+0x78>
 800f65a:	230c      	movs	r3, #12
 800f65c:	6003      	str	r3, [r0, #0]
 800f65e:	e7d6      	b.n	800f60e <_free_r+0x26>
 800f660:	6825      	ldr	r5, [r4, #0]
 800f662:	1961      	adds	r1, r4, r5
 800f664:	428b      	cmp	r3, r1
 800f666:	bf04      	itt	eq
 800f668:	6819      	ldreq	r1, [r3, #0]
 800f66a:	685b      	ldreq	r3, [r3, #4]
 800f66c:	6063      	str	r3, [r4, #4]
 800f66e:	bf04      	itt	eq
 800f670:	1949      	addeq	r1, r1, r5
 800f672:	6021      	streq	r1, [r4, #0]
 800f674:	6054      	str	r4, [r2, #4]
 800f676:	e7ca      	b.n	800f60e <_free_r+0x26>
 800f678:	b003      	add	sp, #12
 800f67a:	bd30      	pop	{r4, r5, pc}
 800f67c:	200062d4 	.word	0x200062d4

0800f680 <sbrk_aligned>:
 800f680:	b570      	push	{r4, r5, r6, lr}
 800f682:	4e0e      	ldr	r6, [pc, #56]	; (800f6bc <sbrk_aligned+0x3c>)
 800f684:	460c      	mov	r4, r1
 800f686:	6831      	ldr	r1, [r6, #0]
 800f688:	4605      	mov	r5, r0
 800f68a:	b911      	cbnz	r1, 800f692 <sbrk_aligned+0x12>
 800f68c:	f000 f9e8 	bl	800fa60 <_sbrk_r>
 800f690:	6030      	str	r0, [r6, #0]
 800f692:	4621      	mov	r1, r4
 800f694:	4628      	mov	r0, r5
 800f696:	f000 f9e3 	bl	800fa60 <_sbrk_r>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	d00a      	beq.n	800f6b4 <sbrk_aligned+0x34>
 800f69e:	1cc4      	adds	r4, r0, #3
 800f6a0:	f024 0403 	bic.w	r4, r4, #3
 800f6a4:	42a0      	cmp	r0, r4
 800f6a6:	d007      	beq.n	800f6b8 <sbrk_aligned+0x38>
 800f6a8:	1a21      	subs	r1, r4, r0
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f000 f9d8 	bl	800fa60 <_sbrk_r>
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	d101      	bne.n	800f6b8 <sbrk_aligned+0x38>
 800f6b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	200062d8 	.word	0x200062d8

0800f6c0 <_malloc_r>:
 800f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c4:	1ccd      	adds	r5, r1, #3
 800f6c6:	f025 0503 	bic.w	r5, r5, #3
 800f6ca:	3508      	adds	r5, #8
 800f6cc:	2d0c      	cmp	r5, #12
 800f6ce:	bf38      	it	cc
 800f6d0:	250c      	movcc	r5, #12
 800f6d2:	2d00      	cmp	r5, #0
 800f6d4:	4607      	mov	r7, r0
 800f6d6:	db01      	blt.n	800f6dc <_malloc_r+0x1c>
 800f6d8:	42a9      	cmp	r1, r5
 800f6da:	d905      	bls.n	800f6e8 <_malloc_r+0x28>
 800f6dc:	230c      	movs	r3, #12
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	2600      	movs	r6, #0
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e8:	4e2e      	ldr	r6, [pc, #184]	; (800f7a4 <_malloc_r+0xe4>)
 800f6ea:	f000 fa25 	bl	800fb38 <__malloc_lock>
 800f6ee:	6833      	ldr	r3, [r6, #0]
 800f6f0:	461c      	mov	r4, r3
 800f6f2:	bb34      	cbnz	r4, 800f742 <_malloc_r+0x82>
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	f7ff ffc2 	bl	800f680 <sbrk_aligned>
 800f6fc:	1c43      	adds	r3, r0, #1
 800f6fe:	4604      	mov	r4, r0
 800f700:	d14d      	bne.n	800f79e <_malloc_r+0xde>
 800f702:	6834      	ldr	r4, [r6, #0]
 800f704:	4626      	mov	r6, r4
 800f706:	2e00      	cmp	r6, #0
 800f708:	d140      	bne.n	800f78c <_malloc_r+0xcc>
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	4631      	mov	r1, r6
 800f70e:	4638      	mov	r0, r7
 800f710:	eb04 0803 	add.w	r8, r4, r3
 800f714:	f000 f9a4 	bl	800fa60 <_sbrk_r>
 800f718:	4580      	cmp	r8, r0
 800f71a:	d13a      	bne.n	800f792 <_malloc_r+0xd2>
 800f71c:	6821      	ldr	r1, [r4, #0]
 800f71e:	3503      	adds	r5, #3
 800f720:	1a6d      	subs	r5, r5, r1
 800f722:	f025 0503 	bic.w	r5, r5, #3
 800f726:	3508      	adds	r5, #8
 800f728:	2d0c      	cmp	r5, #12
 800f72a:	bf38      	it	cc
 800f72c:	250c      	movcc	r5, #12
 800f72e:	4629      	mov	r1, r5
 800f730:	4638      	mov	r0, r7
 800f732:	f7ff ffa5 	bl	800f680 <sbrk_aligned>
 800f736:	3001      	adds	r0, #1
 800f738:	d02b      	beq.n	800f792 <_malloc_r+0xd2>
 800f73a:	6823      	ldr	r3, [r4, #0]
 800f73c:	442b      	add	r3, r5
 800f73e:	6023      	str	r3, [r4, #0]
 800f740:	e00e      	b.n	800f760 <_malloc_r+0xa0>
 800f742:	6822      	ldr	r2, [r4, #0]
 800f744:	1b52      	subs	r2, r2, r5
 800f746:	d41e      	bmi.n	800f786 <_malloc_r+0xc6>
 800f748:	2a0b      	cmp	r2, #11
 800f74a:	d916      	bls.n	800f77a <_malloc_r+0xba>
 800f74c:	1961      	adds	r1, r4, r5
 800f74e:	42a3      	cmp	r3, r4
 800f750:	6025      	str	r5, [r4, #0]
 800f752:	bf18      	it	ne
 800f754:	6059      	strne	r1, [r3, #4]
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	bf08      	it	eq
 800f75a:	6031      	streq	r1, [r6, #0]
 800f75c:	5162      	str	r2, [r4, r5]
 800f75e:	604b      	str	r3, [r1, #4]
 800f760:	4638      	mov	r0, r7
 800f762:	f104 060b 	add.w	r6, r4, #11
 800f766:	f000 f9ed 	bl	800fb44 <__malloc_unlock>
 800f76a:	f026 0607 	bic.w	r6, r6, #7
 800f76e:	1d23      	adds	r3, r4, #4
 800f770:	1af2      	subs	r2, r6, r3
 800f772:	d0b6      	beq.n	800f6e2 <_malloc_r+0x22>
 800f774:	1b9b      	subs	r3, r3, r6
 800f776:	50a3      	str	r3, [r4, r2]
 800f778:	e7b3      	b.n	800f6e2 <_malloc_r+0x22>
 800f77a:	6862      	ldr	r2, [r4, #4]
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	bf0c      	ite	eq
 800f780:	6032      	streq	r2, [r6, #0]
 800f782:	605a      	strne	r2, [r3, #4]
 800f784:	e7ec      	b.n	800f760 <_malloc_r+0xa0>
 800f786:	4623      	mov	r3, r4
 800f788:	6864      	ldr	r4, [r4, #4]
 800f78a:	e7b2      	b.n	800f6f2 <_malloc_r+0x32>
 800f78c:	4634      	mov	r4, r6
 800f78e:	6876      	ldr	r6, [r6, #4]
 800f790:	e7b9      	b.n	800f706 <_malloc_r+0x46>
 800f792:	230c      	movs	r3, #12
 800f794:	603b      	str	r3, [r7, #0]
 800f796:	4638      	mov	r0, r7
 800f798:	f000 f9d4 	bl	800fb44 <__malloc_unlock>
 800f79c:	e7a1      	b.n	800f6e2 <_malloc_r+0x22>
 800f79e:	6025      	str	r5, [r4, #0]
 800f7a0:	e7de      	b.n	800f760 <_malloc_r+0xa0>
 800f7a2:	bf00      	nop
 800f7a4:	200062d4 	.word	0x200062d4

0800f7a8 <__ssputs_r>:
 800f7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ac:	688e      	ldr	r6, [r1, #8]
 800f7ae:	429e      	cmp	r6, r3
 800f7b0:	4682      	mov	sl, r0
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	4690      	mov	r8, r2
 800f7b6:	461f      	mov	r7, r3
 800f7b8:	d838      	bhi.n	800f82c <__ssputs_r+0x84>
 800f7ba:	898a      	ldrh	r2, [r1, #12]
 800f7bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7c0:	d032      	beq.n	800f828 <__ssputs_r+0x80>
 800f7c2:	6825      	ldr	r5, [r4, #0]
 800f7c4:	6909      	ldr	r1, [r1, #16]
 800f7c6:	eba5 0901 	sub.w	r9, r5, r1
 800f7ca:	6965      	ldr	r5, [r4, #20]
 800f7cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	444b      	add	r3, r9
 800f7d8:	106d      	asrs	r5, r5, #1
 800f7da:	429d      	cmp	r5, r3
 800f7dc:	bf38      	it	cc
 800f7de:	461d      	movcc	r5, r3
 800f7e0:	0553      	lsls	r3, r2, #21
 800f7e2:	d531      	bpl.n	800f848 <__ssputs_r+0xa0>
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	f7ff ff6b 	bl	800f6c0 <_malloc_r>
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	b950      	cbnz	r0, 800f804 <__ssputs_r+0x5c>
 800f7ee:	230c      	movs	r3, #12
 800f7f0:	f8ca 3000 	str.w	r3, [sl]
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7fa:	81a3      	strh	r3, [r4, #12]
 800f7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f804:	6921      	ldr	r1, [r4, #16]
 800f806:	464a      	mov	r2, r9
 800f808:	f7fe f82e 	bl	800d868 <memcpy>
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f816:	81a3      	strh	r3, [r4, #12]
 800f818:	6126      	str	r6, [r4, #16]
 800f81a:	6165      	str	r5, [r4, #20]
 800f81c:	444e      	add	r6, r9
 800f81e:	eba5 0509 	sub.w	r5, r5, r9
 800f822:	6026      	str	r6, [r4, #0]
 800f824:	60a5      	str	r5, [r4, #8]
 800f826:	463e      	mov	r6, r7
 800f828:	42be      	cmp	r6, r7
 800f82a:	d900      	bls.n	800f82e <__ssputs_r+0x86>
 800f82c:	463e      	mov	r6, r7
 800f82e:	6820      	ldr	r0, [r4, #0]
 800f830:	4632      	mov	r2, r6
 800f832:	4641      	mov	r1, r8
 800f834:	f000 f966 	bl	800fb04 <memmove>
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	1b9b      	subs	r3, r3, r6
 800f83c:	60a3      	str	r3, [r4, #8]
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	4433      	add	r3, r6
 800f842:	6023      	str	r3, [r4, #0]
 800f844:	2000      	movs	r0, #0
 800f846:	e7db      	b.n	800f800 <__ssputs_r+0x58>
 800f848:	462a      	mov	r2, r5
 800f84a:	f000 f981 	bl	800fb50 <_realloc_r>
 800f84e:	4606      	mov	r6, r0
 800f850:	2800      	cmp	r0, #0
 800f852:	d1e1      	bne.n	800f818 <__ssputs_r+0x70>
 800f854:	6921      	ldr	r1, [r4, #16]
 800f856:	4650      	mov	r0, sl
 800f858:	f7ff fec6 	bl	800f5e8 <_free_r>
 800f85c:	e7c7      	b.n	800f7ee <__ssputs_r+0x46>
	...

0800f860 <_svfiprintf_r>:
 800f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f864:	4698      	mov	r8, r3
 800f866:	898b      	ldrh	r3, [r1, #12]
 800f868:	061b      	lsls	r3, r3, #24
 800f86a:	b09d      	sub	sp, #116	; 0x74
 800f86c:	4607      	mov	r7, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	4614      	mov	r4, r2
 800f872:	d50e      	bpl.n	800f892 <_svfiprintf_r+0x32>
 800f874:	690b      	ldr	r3, [r1, #16]
 800f876:	b963      	cbnz	r3, 800f892 <_svfiprintf_r+0x32>
 800f878:	2140      	movs	r1, #64	; 0x40
 800f87a:	f7ff ff21 	bl	800f6c0 <_malloc_r>
 800f87e:	6028      	str	r0, [r5, #0]
 800f880:	6128      	str	r0, [r5, #16]
 800f882:	b920      	cbnz	r0, 800f88e <_svfiprintf_r+0x2e>
 800f884:	230c      	movs	r3, #12
 800f886:	603b      	str	r3, [r7, #0]
 800f888:	f04f 30ff 	mov.w	r0, #4294967295
 800f88c:	e0d1      	b.n	800fa32 <_svfiprintf_r+0x1d2>
 800f88e:	2340      	movs	r3, #64	; 0x40
 800f890:	616b      	str	r3, [r5, #20]
 800f892:	2300      	movs	r3, #0
 800f894:	9309      	str	r3, [sp, #36]	; 0x24
 800f896:	2320      	movs	r3, #32
 800f898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8a0:	2330      	movs	r3, #48	; 0x30
 800f8a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fa4c <_svfiprintf_r+0x1ec>
 800f8a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8aa:	f04f 0901 	mov.w	r9, #1
 800f8ae:	4623      	mov	r3, r4
 800f8b0:	469a      	mov	sl, r3
 800f8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8b6:	b10a      	cbz	r2, 800f8bc <_svfiprintf_r+0x5c>
 800f8b8:	2a25      	cmp	r2, #37	; 0x25
 800f8ba:	d1f9      	bne.n	800f8b0 <_svfiprintf_r+0x50>
 800f8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800f8c0:	d00b      	beq.n	800f8da <_svfiprintf_r+0x7a>
 800f8c2:	465b      	mov	r3, fp
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7ff ff6d 	bl	800f7a8 <__ssputs_r>
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	f000 80aa 	beq.w	800fa28 <_svfiprintf_r+0x1c8>
 800f8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8d6:	445a      	add	r2, fp
 800f8d8:	9209      	str	r2, [sp, #36]	; 0x24
 800f8da:	f89a 3000 	ldrb.w	r3, [sl]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 80a2 	beq.w	800fa28 <_svfiprintf_r+0x1c8>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8ee:	f10a 0a01 	add.w	sl, sl, #1
 800f8f2:	9304      	str	r3, [sp, #16]
 800f8f4:	9307      	str	r3, [sp, #28]
 800f8f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8fa:	931a      	str	r3, [sp, #104]	; 0x68
 800f8fc:	4654      	mov	r4, sl
 800f8fe:	2205      	movs	r2, #5
 800f900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f904:	4851      	ldr	r0, [pc, #324]	; (800fa4c <_svfiprintf_r+0x1ec>)
 800f906:	f7f0 fc7b 	bl	8000200 <memchr>
 800f90a:	9a04      	ldr	r2, [sp, #16]
 800f90c:	b9d8      	cbnz	r0, 800f946 <_svfiprintf_r+0xe6>
 800f90e:	06d0      	lsls	r0, r2, #27
 800f910:	bf44      	itt	mi
 800f912:	2320      	movmi	r3, #32
 800f914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f918:	0711      	lsls	r1, r2, #28
 800f91a:	bf44      	itt	mi
 800f91c:	232b      	movmi	r3, #43	; 0x2b
 800f91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f922:	f89a 3000 	ldrb.w	r3, [sl]
 800f926:	2b2a      	cmp	r3, #42	; 0x2a
 800f928:	d015      	beq.n	800f956 <_svfiprintf_r+0xf6>
 800f92a:	9a07      	ldr	r2, [sp, #28]
 800f92c:	4654      	mov	r4, sl
 800f92e:	2000      	movs	r0, #0
 800f930:	f04f 0c0a 	mov.w	ip, #10
 800f934:	4621      	mov	r1, r4
 800f936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f93a:	3b30      	subs	r3, #48	; 0x30
 800f93c:	2b09      	cmp	r3, #9
 800f93e:	d94e      	bls.n	800f9de <_svfiprintf_r+0x17e>
 800f940:	b1b0      	cbz	r0, 800f970 <_svfiprintf_r+0x110>
 800f942:	9207      	str	r2, [sp, #28]
 800f944:	e014      	b.n	800f970 <_svfiprintf_r+0x110>
 800f946:	eba0 0308 	sub.w	r3, r0, r8
 800f94a:	fa09 f303 	lsl.w	r3, r9, r3
 800f94e:	4313      	orrs	r3, r2
 800f950:	9304      	str	r3, [sp, #16]
 800f952:	46a2      	mov	sl, r4
 800f954:	e7d2      	b.n	800f8fc <_svfiprintf_r+0x9c>
 800f956:	9b03      	ldr	r3, [sp, #12]
 800f958:	1d19      	adds	r1, r3, #4
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	9103      	str	r1, [sp, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	bfbb      	ittet	lt
 800f962:	425b      	neglt	r3, r3
 800f964:	f042 0202 	orrlt.w	r2, r2, #2
 800f968:	9307      	strge	r3, [sp, #28]
 800f96a:	9307      	strlt	r3, [sp, #28]
 800f96c:	bfb8      	it	lt
 800f96e:	9204      	strlt	r2, [sp, #16]
 800f970:	7823      	ldrb	r3, [r4, #0]
 800f972:	2b2e      	cmp	r3, #46	; 0x2e
 800f974:	d10c      	bne.n	800f990 <_svfiprintf_r+0x130>
 800f976:	7863      	ldrb	r3, [r4, #1]
 800f978:	2b2a      	cmp	r3, #42	; 0x2a
 800f97a:	d135      	bne.n	800f9e8 <_svfiprintf_r+0x188>
 800f97c:	9b03      	ldr	r3, [sp, #12]
 800f97e:	1d1a      	adds	r2, r3, #4
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	9203      	str	r2, [sp, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	bfb8      	it	lt
 800f988:	f04f 33ff 	movlt.w	r3, #4294967295
 800f98c:	3402      	adds	r4, #2
 800f98e:	9305      	str	r3, [sp, #20]
 800f990:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa5c <_svfiprintf_r+0x1fc>
 800f994:	7821      	ldrb	r1, [r4, #0]
 800f996:	2203      	movs	r2, #3
 800f998:	4650      	mov	r0, sl
 800f99a:	f7f0 fc31 	bl	8000200 <memchr>
 800f99e:	b140      	cbz	r0, 800f9b2 <_svfiprintf_r+0x152>
 800f9a0:	2340      	movs	r3, #64	; 0x40
 800f9a2:	eba0 000a 	sub.w	r0, r0, sl
 800f9a6:	fa03 f000 	lsl.w	r0, r3, r0
 800f9aa:	9b04      	ldr	r3, [sp, #16]
 800f9ac:	4303      	orrs	r3, r0
 800f9ae:	3401      	adds	r4, #1
 800f9b0:	9304      	str	r3, [sp, #16]
 800f9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b6:	4826      	ldr	r0, [pc, #152]	; (800fa50 <_svfiprintf_r+0x1f0>)
 800f9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9bc:	2206      	movs	r2, #6
 800f9be:	f7f0 fc1f 	bl	8000200 <memchr>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d038      	beq.n	800fa38 <_svfiprintf_r+0x1d8>
 800f9c6:	4b23      	ldr	r3, [pc, #140]	; (800fa54 <_svfiprintf_r+0x1f4>)
 800f9c8:	bb1b      	cbnz	r3, 800fa12 <_svfiprintf_r+0x1b2>
 800f9ca:	9b03      	ldr	r3, [sp, #12]
 800f9cc:	3307      	adds	r3, #7
 800f9ce:	f023 0307 	bic.w	r3, r3, #7
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	9303      	str	r3, [sp, #12]
 800f9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d8:	4433      	add	r3, r6
 800f9da:	9309      	str	r3, [sp, #36]	; 0x24
 800f9dc:	e767      	b.n	800f8ae <_svfiprintf_r+0x4e>
 800f9de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	e7a5      	b.n	800f934 <_svfiprintf_r+0xd4>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	3401      	adds	r4, #1
 800f9ec:	9305      	str	r3, [sp, #20]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	f04f 0c0a 	mov.w	ip, #10
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9fa:	3a30      	subs	r2, #48	; 0x30
 800f9fc:	2a09      	cmp	r2, #9
 800f9fe:	d903      	bls.n	800fa08 <_svfiprintf_r+0x1a8>
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d0c5      	beq.n	800f990 <_svfiprintf_r+0x130>
 800fa04:	9105      	str	r1, [sp, #20]
 800fa06:	e7c3      	b.n	800f990 <_svfiprintf_r+0x130>
 800fa08:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e7f0      	b.n	800f9f4 <_svfiprintf_r+0x194>
 800fa12:	ab03      	add	r3, sp, #12
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	462a      	mov	r2, r5
 800fa18:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <_svfiprintf_r+0x1f8>)
 800fa1a:	a904      	add	r1, sp, #16
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f7fd ffd9 	bl	800d9d4 <_printf_float>
 800fa22:	1c42      	adds	r2, r0, #1
 800fa24:	4606      	mov	r6, r0
 800fa26:	d1d6      	bne.n	800f9d6 <_svfiprintf_r+0x176>
 800fa28:	89ab      	ldrh	r3, [r5, #12]
 800fa2a:	065b      	lsls	r3, r3, #25
 800fa2c:	f53f af2c 	bmi.w	800f888 <_svfiprintf_r+0x28>
 800fa30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa32:	b01d      	add	sp, #116	; 0x74
 800fa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa38:	ab03      	add	r3, sp, #12
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	462a      	mov	r2, r5
 800fa3e:	4b06      	ldr	r3, [pc, #24]	; (800fa58 <_svfiprintf_r+0x1f8>)
 800fa40:	a904      	add	r1, sp, #16
 800fa42:	4638      	mov	r0, r7
 800fa44:	f7fe fa6a 	bl	800df1c <_printf_i>
 800fa48:	e7eb      	b.n	800fa22 <_svfiprintf_r+0x1c2>
 800fa4a:	bf00      	nop
 800fa4c:	08012404 	.word	0x08012404
 800fa50:	0801240e 	.word	0x0801240e
 800fa54:	0800d9d5 	.word	0x0800d9d5
 800fa58:	0800f7a9 	.word	0x0800f7a9
 800fa5c:	0801240a 	.word	0x0801240a

0800fa60 <_sbrk_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4d06      	ldr	r5, [pc, #24]	; (800fa7c <_sbrk_r+0x1c>)
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	4608      	mov	r0, r1
 800fa6a:	602b      	str	r3, [r5, #0]
 800fa6c:	f7f1 fe7a 	bl	8001764 <_sbrk>
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	d102      	bne.n	800fa7a <_sbrk_r+0x1a>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	b103      	cbz	r3, 800fa7a <_sbrk_r+0x1a>
 800fa78:	6023      	str	r3, [r4, #0]
 800fa7a:	bd38      	pop	{r3, r4, r5, pc}
 800fa7c:	200062dc 	.word	0x200062dc

0800fa80 <__assert_func>:
 800fa80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa82:	4614      	mov	r4, r2
 800fa84:	461a      	mov	r2, r3
 800fa86:	4b09      	ldr	r3, [pc, #36]	; (800faac <__assert_func+0x2c>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4605      	mov	r5, r0
 800fa8c:	68d8      	ldr	r0, [r3, #12]
 800fa8e:	b14c      	cbz	r4, 800faa4 <__assert_func+0x24>
 800fa90:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <__assert_func+0x30>)
 800fa92:	9100      	str	r1, [sp, #0]
 800fa94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa98:	4906      	ldr	r1, [pc, #24]	; (800fab4 <__assert_func+0x34>)
 800fa9a:	462b      	mov	r3, r5
 800fa9c:	f000 f80e 	bl	800fabc <fiprintf>
 800faa0:	f000 faac 	bl	800fffc <abort>
 800faa4:	4b04      	ldr	r3, [pc, #16]	; (800fab8 <__assert_func+0x38>)
 800faa6:	461c      	mov	r4, r3
 800faa8:	e7f3      	b.n	800fa92 <__assert_func+0x12>
 800faaa:	bf00      	nop
 800faac:	200001ac 	.word	0x200001ac
 800fab0:	08012415 	.word	0x08012415
 800fab4:	08012422 	.word	0x08012422
 800fab8:	08012450 	.word	0x08012450

0800fabc <fiprintf>:
 800fabc:	b40e      	push	{r1, r2, r3}
 800fabe:	b503      	push	{r0, r1, lr}
 800fac0:	4601      	mov	r1, r0
 800fac2:	ab03      	add	r3, sp, #12
 800fac4:	4805      	ldr	r0, [pc, #20]	; (800fadc <fiprintf+0x20>)
 800fac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800faca:	6800      	ldr	r0, [r0, #0]
 800facc:	9301      	str	r3, [sp, #4]
 800face:	f000 f897 	bl	800fc00 <_vfiprintf_r>
 800fad2:	b002      	add	sp, #8
 800fad4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fad8:	b003      	add	sp, #12
 800fada:	4770      	bx	lr
 800fadc:	200001ac 	.word	0x200001ac

0800fae0 <__ascii_mbtowc>:
 800fae0:	b082      	sub	sp, #8
 800fae2:	b901      	cbnz	r1, 800fae6 <__ascii_mbtowc+0x6>
 800fae4:	a901      	add	r1, sp, #4
 800fae6:	b142      	cbz	r2, 800fafa <__ascii_mbtowc+0x1a>
 800fae8:	b14b      	cbz	r3, 800fafe <__ascii_mbtowc+0x1e>
 800faea:	7813      	ldrb	r3, [r2, #0]
 800faec:	600b      	str	r3, [r1, #0]
 800faee:	7812      	ldrb	r2, [r2, #0]
 800faf0:	1e10      	subs	r0, r2, #0
 800faf2:	bf18      	it	ne
 800faf4:	2001      	movne	r0, #1
 800faf6:	b002      	add	sp, #8
 800faf8:	4770      	bx	lr
 800fafa:	4610      	mov	r0, r2
 800fafc:	e7fb      	b.n	800faf6 <__ascii_mbtowc+0x16>
 800fafe:	f06f 0001 	mvn.w	r0, #1
 800fb02:	e7f8      	b.n	800faf6 <__ascii_mbtowc+0x16>

0800fb04 <memmove>:
 800fb04:	4288      	cmp	r0, r1
 800fb06:	b510      	push	{r4, lr}
 800fb08:	eb01 0402 	add.w	r4, r1, r2
 800fb0c:	d902      	bls.n	800fb14 <memmove+0x10>
 800fb0e:	4284      	cmp	r4, r0
 800fb10:	4623      	mov	r3, r4
 800fb12:	d807      	bhi.n	800fb24 <memmove+0x20>
 800fb14:	1e43      	subs	r3, r0, #1
 800fb16:	42a1      	cmp	r1, r4
 800fb18:	d008      	beq.n	800fb2c <memmove+0x28>
 800fb1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb22:	e7f8      	b.n	800fb16 <memmove+0x12>
 800fb24:	4402      	add	r2, r0
 800fb26:	4601      	mov	r1, r0
 800fb28:	428a      	cmp	r2, r1
 800fb2a:	d100      	bne.n	800fb2e <memmove+0x2a>
 800fb2c:	bd10      	pop	{r4, pc}
 800fb2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb36:	e7f7      	b.n	800fb28 <memmove+0x24>

0800fb38 <__malloc_lock>:
 800fb38:	4801      	ldr	r0, [pc, #4]	; (800fb40 <__malloc_lock+0x8>)
 800fb3a:	f000 bc1f 	b.w	801037c <__retarget_lock_acquire_recursive>
 800fb3e:	bf00      	nop
 800fb40:	200062e0 	.word	0x200062e0

0800fb44 <__malloc_unlock>:
 800fb44:	4801      	ldr	r0, [pc, #4]	; (800fb4c <__malloc_unlock+0x8>)
 800fb46:	f000 bc1a 	b.w	801037e <__retarget_lock_release_recursive>
 800fb4a:	bf00      	nop
 800fb4c:	200062e0 	.word	0x200062e0

0800fb50 <_realloc_r>:
 800fb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb54:	4680      	mov	r8, r0
 800fb56:	4614      	mov	r4, r2
 800fb58:	460e      	mov	r6, r1
 800fb5a:	b921      	cbnz	r1, 800fb66 <_realloc_r+0x16>
 800fb5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb60:	4611      	mov	r1, r2
 800fb62:	f7ff bdad 	b.w	800f6c0 <_malloc_r>
 800fb66:	b92a      	cbnz	r2, 800fb74 <_realloc_r+0x24>
 800fb68:	f7ff fd3e 	bl	800f5e8 <_free_r>
 800fb6c:	4625      	mov	r5, r4
 800fb6e:	4628      	mov	r0, r5
 800fb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb74:	f000 fc6a 	bl	801044c <_malloc_usable_size_r>
 800fb78:	4284      	cmp	r4, r0
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	d802      	bhi.n	800fb84 <_realloc_r+0x34>
 800fb7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb82:	d812      	bhi.n	800fbaa <_realloc_r+0x5a>
 800fb84:	4621      	mov	r1, r4
 800fb86:	4640      	mov	r0, r8
 800fb88:	f7ff fd9a 	bl	800f6c0 <_malloc_r>
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d0ed      	beq.n	800fb6e <_realloc_r+0x1e>
 800fb92:	42bc      	cmp	r4, r7
 800fb94:	4622      	mov	r2, r4
 800fb96:	4631      	mov	r1, r6
 800fb98:	bf28      	it	cs
 800fb9a:	463a      	movcs	r2, r7
 800fb9c:	f7fd fe64 	bl	800d868 <memcpy>
 800fba0:	4631      	mov	r1, r6
 800fba2:	4640      	mov	r0, r8
 800fba4:	f7ff fd20 	bl	800f5e8 <_free_r>
 800fba8:	e7e1      	b.n	800fb6e <_realloc_r+0x1e>
 800fbaa:	4635      	mov	r5, r6
 800fbac:	e7df      	b.n	800fb6e <_realloc_r+0x1e>

0800fbae <__sfputc_r>:
 800fbae:	6893      	ldr	r3, [r2, #8]
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	b410      	push	{r4}
 800fbb6:	6093      	str	r3, [r2, #8]
 800fbb8:	da08      	bge.n	800fbcc <__sfputc_r+0x1e>
 800fbba:	6994      	ldr	r4, [r2, #24]
 800fbbc:	42a3      	cmp	r3, r4
 800fbbe:	db01      	blt.n	800fbc4 <__sfputc_r+0x16>
 800fbc0:	290a      	cmp	r1, #10
 800fbc2:	d103      	bne.n	800fbcc <__sfputc_r+0x1e>
 800fbc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbc8:	f000 b94a 	b.w	800fe60 <__swbuf_r>
 800fbcc:	6813      	ldr	r3, [r2, #0]
 800fbce:	1c58      	adds	r0, r3, #1
 800fbd0:	6010      	str	r0, [r2, #0]
 800fbd2:	7019      	strb	r1, [r3, #0]
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <__sfputs_r>:
 800fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbde:	4606      	mov	r6, r0
 800fbe0:	460f      	mov	r7, r1
 800fbe2:	4614      	mov	r4, r2
 800fbe4:	18d5      	adds	r5, r2, r3
 800fbe6:	42ac      	cmp	r4, r5
 800fbe8:	d101      	bne.n	800fbee <__sfputs_r+0x12>
 800fbea:	2000      	movs	r0, #0
 800fbec:	e007      	b.n	800fbfe <__sfputs_r+0x22>
 800fbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbf2:	463a      	mov	r2, r7
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f7ff ffda 	bl	800fbae <__sfputc_r>
 800fbfa:	1c43      	adds	r3, r0, #1
 800fbfc:	d1f3      	bne.n	800fbe6 <__sfputs_r+0xa>
 800fbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc00 <_vfiprintf_r>:
 800fc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc04:	460d      	mov	r5, r1
 800fc06:	b09d      	sub	sp, #116	; 0x74
 800fc08:	4614      	mov	r4, r2
 800fc0a:	4698      	mov	r8, r3
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	b118      	cbz	r0, 800fc18 <_vfiprintf_r+0x18>
 800fc10:	6983      	ldr	r3, [r0, #24]
 800fc12:	b90b      	cbnz	r3, 800fc18 <_vfiprintf_r+0x18>
 800fc14:	f000 fb14 	bl	8010240 <__sinit>
 800fc18:	4b89      	ldr	r3, [pc, #548]	; (800fe40 <_vfiprintf_r+0x240>)
 800fc1a:	429d      	cmp	r5, r3
 800fc1c:	d11b      	bne.n	800fc56 <_vfiprintf_r+0x56>
 800fc1e:	6875      	ldr	r5, [r6, #4]
 800fc20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc22:	07d9      	lsls	r1, r3, #31
 800fc24:	d405      	bmi.n	800fc32 <_vfiprintf_r+0x32>
 800fc26:	89ab      	ldrh	r3, [r5, #12]
 800fc28:	059a      	lsls	r2, r3, #22
 800fc2a:	d402      	bmi.n	800fc32 <_vfiprintf_r+0x32>
 800fc2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc2e:	f000 fba5 	bl	801037c <__retarget_lock_acquire_recursive>
 800fc32:	89ab      	ldrh	r3, [r5, #12]
 800fc34:	071b      	lsls	r3, r3, #28
 800fc36:	d501      	bpl.n	800fc3c <_vfiprintf_r+0x3c>
 800fc38:	692b      	ldr	r3, [r5, #16]
 800fc3a:	b9eb      	cbnz	r3, 800fc78 <_vfiprintf_r+0x78>
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	4630      	mov	r0, r6
 800fc40:	f000 f96e 	bl	800ff20 <__swsetup_r>
 800fc44:	b1c0      	cbz	r0, 800fc78 <_vfiprintf_r+0x78>
 800fc46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc48:	07dc      	lsls	r4, r3, #31
 800fc4a:	d50e      	bpl.n	800fc6a <_vfiprintf_r+0x6a>
 800fc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc50:	b01d      	add	sp, #116	; 0x74
 800fc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc56:	4b7b      	ldr	r3, [pc, #492]	; (800fe44 <_vfiprintf_r+0x244>)
 800fc58:	429d      	cmp	r5, r3
 800fc5a:	d101      	bne.n	800fc60 <_vfiprintf_r+0x60>
 800fc5c:	68b5      	ldr	r5, [r6, #8]
 800fc5e:	e7df      	b.n	800fc20 <_vfiprintf_r+0x20>
 800fc60:	4b79      	ldr	r3, [pc, #484]	; (800fe48 <_vfiprintf_r+0x248>)
 800fc62:	429d      	cmp	r5, r3
 800fc64:	bf08      	it	eq
 800fc66:	68f5      	ldreq	r5, [r6, #12]
 800fc68:	e7da      	b.n	800fc20 <_vfiprintf_r+0x20>
 800fc6a:	89ab      	ldrh	r3, [r5, #12]
 800fc6c:	0598      	lsls	r0, r3, #22
 800fc6e:	d4ed      	bmi.n	800fc4c <_vfiprintf_r+0x4c>
 800fc70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc72:	f000 fb84 	bl	801037e <__retarget_lock_release_recursive>
 800fc76:	e7e9      	b.n	800fc4c <_vfiprintf_r+0x4c>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc7c:	2320      	movs	r3, #32
 800fc7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc82:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc86:	2330      	movs	r3, #48	; 0x30
 800fc88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe4c <_vfiprintf_r+0x24c>
 800fc8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc90:	f04f 0901 	mov.w	r9, #1
 800fc94:	4623      	mov	r3, r4
 800fc96:	469a      	mov	sl, r3
 800fc98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc9c:	b10a      	cbz	r2, 800fca2 <_vfiprintf_r+0xa2>
 800fc9e:	2a25      	cmp	r2, #37	; 0x25
 800fca0:	d1f9      	bne.n	800fc96 <_vfiprintf_r+0x96>
 800fca2:	ebba 0b04 	subs.w	fp, sl, r4
 800fca6:	d00b      	beq.n	800fcc0 <_vfiprintf_r+0xc0>
 800fca8:	465b      	mov	r3, fp
 800fcaa:	4622      	mov	r2, r4
 800fcac:	4629      	mov	r1, r5
 800fcae:	4630      	mov	r0, r6
 800fcb0:	f7ff ff94 	bl	800fbdc <__sfputs_r>
 800fcb4:	3001      	adds	r0, #1
 800fcb6:	f000 80aa 	beq.w	800fe0e <_vfiprintf_r+0x20e>
 800fcba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcbc:	445a      	add	r2, fp
 800fcbe:	9209      	str	r2, [sp, #36]	; 0x24
 800fcc0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f000 80a2 	beq.w	800fe0e <_vfiprintf_r+0x20e>
 800fcca:	2300      	movs	r3, #0
 800fccc:	f04f 32ff 	mov.w	r2, #4294967295
 800fcd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcd4:	f10a 0a01 	add.w	sl, sl, #1
 800fcd8:	9304      	str	r3, [sp, #16]
 800fcda:	9307      	str	r3, [sp, #28]
 800fcdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fce0:	931a      	str	r3, [sp, #104]	; 0x68
 800fce2:	4654      	mov	r4, sl
 800fce4:	2205      	movs	r2, #5
 800fce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcea:	4858      	ldr	r0, [pc, #352]	; (800fe4c <_vfiprintf_r+0x24c>)
 800fcec:	f7f0 fa88 	bl	8000200 <memchr>
 800fcf0:	9a04      	ldr	r2, [sp, #16]
 800fcf2:	b9d8      	cbnz	r0, 800fd2c <_vfiprintf_r+0x12c>
 800fcf4:	06d1      	lsls	r1, r2, #27
 800fcf6:	bf44      	itt	mi
 800fcf8:	2320      	movmi	r3, #32
 800fcfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcfe:	0713      	lsls	r3, r2, #28
 800fd00:	bf44      	itt	mi
 800fd02:	232b      	movmi	r3, #43	; 0x2b
 800fd04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd08:	f89a 3000 	ldrb.w	r3, [sl]
 800fd0c:	2b2a      	cmp	r3, #42	; 0x2a
 800fd0e:	d015      	beq.n	800fd3c <_vfiprintf_r+0x13c>
 800fd10:	9a07      	ldr	r2, [sp, #28]
 800fd12:	4654      	mov	r4, sl
 800fd14:	2000      	movs	r0, #0
 800fd16:	f04f 0c0a 	mov.w	ip, #10
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd20:	3b30      	subs	r3, #48	; 0x30
 800fd22:	2b09      	cmp	r3, #9
 800fd24:	d94e      	bls.n	800fdc4 <_vfiprintf_r+0x1c4>
 800fd26:	b1b0      	cbz	r0, 800fd56 <_vfiprintf_r+0x156>
 800fd28:	9207      	str	r2, [sp, #28]
 800fd2a:	e014      	b.n	800fd56 <_vfiprintf_r+0x156>
 800fd2c:	eba0 0308 	sub.w	r3, r0, r8
 800fd30:	fa09 f303 	lsl.w	r3, r9, r3
 800fd34:	4313      	orrs	r3, r2
 800fd36:	9304      	str	r3, [sp, #16]
 800fd38:	46a2      	mov	sl, r4
 800fd3a:	e7d2      	b.n	800fce2 <_vfiprintf_r+0xe2>
 800fd3c:	9b03      	ldr	r3, [sp, #12]
 800fd3e:	1d19      	adds	r1, r3, #4
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	9103      	str	r1, [sp, #12]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	bfbb      	ittet	lt
 800fd48:	425b      	neglt	r3, r3
 800fd4a:	f042 0202 	orrlt.w	r2, r2, #2
 800fd4e:	9307      	strge	r3, [sp, #28]
 800fd50:	9307      	strlt	r3, [sp, #28]
 800fd52:	bfb8      	it	lt
 800fd54:	9204      	strlt	r2, [sp, #16]
 800fd56:	7823      	ldrb	r3, [r4, #0]
 800fd58:	2b2e      	cmp	r3, #46	; 0x2e
 800fd5a:	d10c      	bne.n	800fd76 <_vfiprintf_r+0x176>
 800fd5c:	7863      	ldrb	r3, [r4, #1]
 800fd5e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd60:	d135      	bne.n	800fdce <_vfiprintf_r+0x1ce>
 800fd62:	9b03      	ldr	r3, [sp, #12]
 800fd64:	1d1a      	adds	r2, r3, #4
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	9203      	str	r2, [sp, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	bfb8      	it	lt
 800fd6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd72:	3402      	adds	r4, #2
 800fd74:	9305      	str	r3, [sp, #20]
 800fd76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe5c <_vfiprintf_r+0x25c>
 800fd7a:	7821      	ldrb	r1, [r4, #0]
 800fd7c:	2203      	movs	r2, #3
 800fd7e:	4650      	mov	r0, sl
 800fd80:	f7f0 fa3e 	bl	8000200 <memchr>
 800fd84:	b140      	cbz	r0, 800fd98 <_vfiprintf_r+0x198>
 800fd86:	2340      	movs	r3, #64	; 0x40
 800fd88:	eba0 000a 	sub.w	r0, r0, sl
 800fd8c:	fa03 f000 	lsl.w	r0, r3, r0
 800fd90:	9b04      	ldr	r3, [sp, #16]
 800fd92:	4303      	orrs	r3, r0
 800fd94:	3401      	adds	r4, #1
 800fd96:	9304      	str	r3, [sp, #16]
 800fd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd9c:	482c      	ldr	r0, [pc, #176]	; (800fe50 <_vfiprintf_r+0x250>)
 800fd9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fda2:	2206      	movs	r2, #6
 800fda4:	f7f0 fa2c 	bl	8000200 <memchr>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d03f      	beq.n	800fe2c <_vfiprintf_r+0x22c>
 800fdac:	4b29      	ldr	r3, [pc, #164]	; (800fe54 <_vfiprintf_r+0x254>)
 800fdae:	bb1b      	cbnz	r3, 800fdf8 <_vfiprintf_r+0x1f8>
 800fdb0:	9b03      	ldr	r3, [sp, #12]
 800fdb2:	3307      	adds	r3, #7
 800fdb4:	f023 0307 	bic.w	r3, r3, #7
 800fdb8:	3308      	adds	r3, #8
 800fdba:	9303      	str	r3, [sp, #12]
 800fdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdbe:	443b      	add	r3, r7
 800fdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800fdc2:	e767      	b.n	800fc94 <_vfiprintf_r+0x94>
 800fdc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdc8:	460c      	mov	r4, r1
 800fdca:	2001      	movs	r0, #1
 800fdcc:	e7a5      	b.n	800fd1a <_vfiprintf_r+0x11a>
 800fdce:	2300      	movs	r3, #0
 800fdd0:	3401      	adds	r4, #1
 800fdd2:	9305      	str	r3, [sp, #20]
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	f04f 0c0a 	mov.w	ip, #10
 800fdda:	4620      	mov	r0, r4
 800fddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fde0:	3a30      	subs	r2, #48	; 0x30
 800fde2:	2a09      	cmp	r2, #9
 800fde4:	d903      	bls.n	800fdee <_vfiprintf_r+0x1ee>
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d0c5      	beq.n	800fd76 <_vfiprintf_r+0x176>
 800fdea:	9105      	str	r1, [sp, #20]
 800fdec:	e7c3      	b.n	800fd76 <_vfiprintf_r+0x176>
 800fdee:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e7f0      	b.n	800fdda <_vfiprintf_r+0x1da>
 800fdf8:	ab03      	add	r3, sp, #12
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	462a      	mov	r2, r5
 800fdfe:	4b16      	ldr	r3, [pc, #88]	; (800fe58 <_vfiprintf_r+0x258>)
 800fe00:	a904      	add	r1, sp, #16
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7fd fde6 	bl	800d9d4 <_printf_float>
 800fe08:	4607      	mov	r7, r0
 800fe0a:	1c78      	adds	r0, r7, #1
 800fe0c:	d1d6      	bne.n	800fdbc <_vfiprintf_r+0x1bc>
 800fe0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe10:	07d9      	lsls	r1, r3, #31
 800fe12:	d405      	bmi.n	800fe20 <_vfiprintf_r+0x220>
 800fe14:	89ab      	ldrh	r3, [r5, #12]
 800fe16:	059a      	lsls	r2, r3, #22
 800fe18:	d402      	bmi.n	800fe20 <_vfiprintf_r+0x220>
 800fe1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe1c:	f000 faaf 	bl	801037e <__retarget_lock_release_recursive>
 800fe20:	89ab      	ldrh	r3, [r5, #12]
 800fe22:	065b      	lsls	r3, r3, #25
 800fe24:	f53f af12 	bmi.w	800fc4c <_vfiprintf_r+0x4c>
 800fe28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe2a:	e711      	b.n	800fc50 <_vfiprintf_r+0x50>
 800fe2c:	ab03      	add	r3, sp, #12
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	462a      	mov	r2, r5
 800fe32:	4b09      	ldr	r3, [pc, #36]	; (800fe58 <_vfiprintf_r+0x258>)
 800fe34:	a904      	add	r1, sp, #16
 800fe36:	4630      	mov	r0, r6
 800fe38:	f7fe f870 	bl	800df1c <_printf_i>
 800fe3c:	e7e4      	b.n	800fe08 <_vfiprintf_r+0x208>
 800fe3e:	bf00      	nop
 800fe40:	0801257c 	.word	0x0801257c
 800fe44:	0801259c 	.word	0x0801259c
 800fe48:	0801255c 	.word	0x0801255c
 800fe4c:	08012404 	.word	0x08012404
 800fe50:	0801240e 	.word	0x0801240e
 800fe54:	0800d9d5 	.word	0x0800d9d5
 800fe58:	0800fbdd 	.word	0x0800fbdd
 800fe5c:	0801240a 	.word	0x0801240a

0800fe60 <__swbuf_r>:
 800fe60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe62:	460e      	mov	r6, r1
 800fe64:	4614      	mov	r4, r2
 800fe66:	4605      	mov	r5, r0
 800fe68:	b118      	cbz	r0, 800fe72 <__swbuf_r+0x12>
 800fe6a:	6983      	ldr	r3, [r0, #24]
 800fe6c:	b90b      	cbnz	r3, 800fe72 <__swbuf_r+0x12>
 800fe6e:	f000 f9e7 	bl	8010240 <__sinit>
 800fe72:	4b21      	ldr	r3, [pc, #132]	; (800fef8 <__swbuf_r+0x98>)
 800fe74:	429c      	cmp	r4, r3
 800fe76:	d12b      	bne.n	800fed0 <__swbuf_r+0x70>
 800fe78:	686c      	ldr	r4, [r5, #4]
 800fe7a:	69a3      	ldr	r3, [r4, #24]
 800fe7c:	60a3      	str	r3, [r4, #8]
 800fe7e:	89a3      	ldrh	r3, [r4, #12]
 800fe80:	071a      	lsls	r2, r3, #28
 800fe82:	d52f      	bpl.n	800fee4 <__swbuf_r+0x84>
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	b36b      	cbz	r3, 800fee4 <__swbuf_r+0x84>
 800fe88:	6923      	ldr	r3, [r4, #16]
 800fe8a:	6820      	ldr	r0, [r4, #0]
 800fe8c:	1ac0      	subs	r0, r0, r3
 800fe8e:	6963      	ldr	r3, [r4, #20]
 800fe90:	b2f6      	uxtb	r6, r6
 800fe92:	4283      	cmp	r3, r0
 800fe94:	4637      	mov	r7, r6
 800fe96:	dc04      	bgt.n	800fea2 <__swbuf_r+0x42>
 800fe98:	4621      	mov	r1, r4
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	f000 f93c 	bl	8010118 <_fflush_r>
 800fea0:	bb30      	cbnz	r0, 800fef0 <__swbuf_r+0x90>
 800fea2:	68a3      	ldr	r3, [r4, #8]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	60a3      	str	r3, [r4, #8]
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	1c5a      	adds	r2, r3, #1
 800feac:	6022      	str	r2, [r4, #0]
 800feae:	701e      	strb	r6, [r3, #0]
 800feb0:	6963      	ldr	r3, [r4, #20]
 800feb2:	3001      	adds	r0, #1
 800feb4:	4283      	cmp	r3, r0
 800feb6:	d004      	beq.n	800fec2 <__swbuf_r+0x62>
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	07db      	lsls	r3, r3, #31
 800febc:	d506      	bpl.n	800fecc <__swbuf_r+0x6c>
 800febe:	2e0a      	cmp	r6, #10
 800fec0:	d104      	bne.n	800fecc <__swbuf_r+0x6c>
 800fec2:	4621      	mov	r1, r4
 800fec4:	4628      	mov	r0, r5
 800fec6:	f000 f927 	bl	8010118 <_fflush_r>
 800feca:	b988      	cbnz	r0, 800fef0 <__swbuf_r+0x90>
 800fecc:	4638      	mov	r0, r7
 800fece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <__swbuf_r+0x9c>)
 800fed2:	429c      	cmp	r4, r3
 800fed4:	d101      	bne.n	800feda <__swbuf_r+0x7a>
 800fed6:	68ac      	ldr	r4, [r5, #8]
 800fed8:	e7cf      	b.n	800fe7a <__swbuf_r+0x1a>
 800feda:	4b09      	ldr	r3, [pc, #36]	; (800ff00 <__swbuf_r+0xa0>)
 800fedc:	429c      	cmp	r4, r3
 800fede:	bf08      	it	eq
 800fee0:	68ec      	ldreq	r4, [r5, #12]
 800fee2:	e7ca      	b.n	800fe7a <__swbuf_r+0x1a>
 800fee4:	4621      	mov	r1, r4
 800fee6:	4628      	mov	r0, r5
 800fee8:	f000 f81a 	bl	800ff20 <__swsetup_r>
 800feec:	2800      	cmp	r0, #0
 800feee:	d0cb      	beq.n	800fe88 <__swbuf_r+0x28>
 800fef0:	f04f 37ff 	mov.w	r7, #4294967295
 800fef4:	e7ea      	b.n	800fecc <__swbuf_r+0x6c>
 800fef6:	bf00      	nop
 800fef8:	0801257c 	.word	0x0801257c
 800fefc:	0801259c 	.word	0x0801259c
 800ff00:	0801255c 	.word	0x0801255c

0800ff04 <__ascii_wctomb>:
 800ff04:	b149      	cbz	r1, 800ff1a <__ascii_wctomb+0x16>
 800ff06:	2aff      	cmp	r2, #255	; 0xff
 800ff08:	bf85      	ittet	hi
 800ff0a:	238a      	movhi	r3, #138	; 0x8a
 800ff0c:	6003      	strhi	r3, [r0, #0]
 800ff0e:	700a      	strbls	r2, [r1, #0]
 800ff10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff14:	bf98      	it	ls
 800ff16:	2001      	movls	r0, #1
 800ff18:	4770      	bx	lr
 800ff1a:	4608      	mov	r0, r1
 800ff1c:	4770      	bx	lr
	...

0800ff20 <__swsetup_r>:
 800ff20:	4b32      	ldr	r3, [pc, #200]	; (800ffec <__swsetup_r+0xcc>)
 800ff22:	b570      	push	{r4, r5, r6, lr}
 800ff24:	681d      	ldr	r5, [r3, #0]
 800ff26:	4606      	mov	r6, r0
 800ff28:	460c      	mov	r4, r1
 800ff2a:	b125      	cbz	r5, 800ff36 <__swsetup_r+0x16>
 800ff2c:	69ab      	ldr	r3, [r5, #24]
 800ff2e:	b913      	cbnz	r3, 800ff36 <__swsetup_r+0x16>
 800ff30:	4628      	mov	r0, r5
 800ff32:	f000 f985 	bl	8010240 <__sinit>
 800ff36:	4b2e      	ldr	r3, [pc, #184]	; (800fff0 <__swsetup_r+0xd0>)
 800ff38:	429c      	cmp	r4, r3
 800ff3a:	d10f      	bne.n	800ff5c <__swsetup_r+0x3c>
 800ff3c:	686c      	ldr	r4, [r5, #4]
 800ff3e:	89a3      	ldrh	r3, [r4, #12]
 800ff40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff44:	0719      	lsls	r1, r3, #28
 800ff46:	d42c      	bmi.n	800ffa2 <__swsetup_r+0x82>
 800ff48:	06dd      	lsls	r5, r3, #27
 800ff4a:	d411      	bmi.n	800ff70 <__swsetup_r+0x50>
 800ff4c:	2309      	movs	r3, #9
 800ff4e:	6033      	str	r3, [r6, #0]
 800ff50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff54:	81a3      	strh	r3, [r4, #12]
 800ff56:	f04f 30ff 	mov.w	r0, #4294967295
 800ff5a:	e03e      	b.n	800ffda <__swsetup_r+0xba>
 800ff5c:	4b25      	ldr	r3, [pc, #148]	; (800fff4 <__swsetup_r+0xd4>)
 800ff5e:	429c      	cmp	r4, r3
 800ff60:	d101      	bne.n	800ff66 <__swsetup_r+0x46>
 800ff62:	68ac      	ldr	r4, [r5, #8]
 800ff64:	e7eb      	b.n	800ff3e <__swsetup_r+0x1e>
 800ff66:	4b24      	ldr	r3, [pc, #144]	; (800fff8 <__swsetup_r+0xd8>)
 800ff68:	429c      	cmp	r4, r3
 800ff6a:	bf08      	it	eq
 800ff6c:	68ec      	ldreq	r4, [r5, #12]
 800ff6e:	e7e6      	b.n	800ff3e <__swsetup_r+0x1e>
 800ff70:	0758      	lsls	r0, r3, #29
 800ff72:	d512      	bpl.n	800ff9a <__swsetup_r+0x7a>
 800ff74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff76:	b141      	cbz	r1, 800ff8a <__swsetup_r+0x6a>
 800ff78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff7c:	4299      	cmp	r1, r3
 800ff7e:	d002      	beq.n	800ff86 <__swsetup_r+0x66>
 800ff80:	4630      	mov	r0, r6
 800ff82:	f7ff fb31 	bl	800f5e8 <_free_r>
 800ff86:	2300      	movs	r3, #0
 800ff88:	6363      	str	r3, [r4, #52]	; 0x34
 800ff8a:	89a3      	ldrh	r3, [r4, #12]
 800ff8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff90:	81a3      	strh	r3, [r4, #12]
 800ff92:	2300      	movs	r3, #0
 800ff94:	6063      	str	r3, [r4, #4]
 800ff96:	6923      	ldr	r3, [r4, #16]
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	89a3      	ldrh	r3, [r4, #12]
 800ff9c:	f043 0308 	orr.w	r3, r3, #8
 800ffa0:	81a3      	strh	r3, [r4, #12]
 800ffa2:	6923      	ldr	r3, [r4, #16]
 800ffa4:	b94b      	cbnz	r3, 800ffba <__swsetup_r+0x9a>
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ffac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffb0:	d003      	beq.n	800ffba <__swsetup_r+0x9a>
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f000 fa09 	bl	80103cc <__smakebuf_r>
 800ffba:	89a0      	ldrh	r0, [r4, #12]
 800ffbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffc0:	f010 0301 	ands.w	r3, r0, #1
 800ffc4:	d00a      	beq.n	800ffdc <__swsetup_r+0xbc>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	60a3      	str	r3, [r4, #8]
 800ffca:	6963      	ldr	r3, [r4, #20]
 800ffcc:	425b      	negs	r3, r3
 800ffce:	61a3      	str	r3, [r4, #24]
 800ffd0:	6923      	ldr	r3, [r4, #16]
 800ffd2:	b943      	cbnz	r3, 800ffe6 <__swsetup_r+0xc6>
 800ffd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ffd8:	d1ba      	bne.n	800ff50 <__swsetup_r+0x30>
 800ffda:	bd70      	pop	{r4, r5, r6, pc}
 800ffdc:	0781      	lsls	r1, r0, #30
 800ffde:	bf58      	it	pl
 800ffe0:	6963      	ldrpl	r3, [r4, #20]
 800ffe2:	60a3      	str	r3, [r4, #8]
 800ffe4:	e7f4      	b.n	800ffd0 <__swsetup_r+0xb0>
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	e7f7      	b.n	800ffda <__swsetup_r+0xba>
 800ffea:	bf00      	nop
 800ffec:	200001ac 	.word	0x200001ac
 800fff0:	0801257c 	.word	0x0801257c
 800fff4:	0801259c 	.word	0x0801259c
 800fff8:	0801255c 	.word	0x0801255c

0800fffc <abort>:
 800fffc:	b508      	push	{r3, lr}
 800fffe:	2006      	movs	r0, #6
 8010000:	f000 fa54 	bl	80104ac <raise>
 8010004:	2001      	movs	r0, #1
 8010006:	f7f1 fb35 	bl	8001674 <_exit>
	...

0801000c <__sflush_r>:
 801000c:	898a      	ldrh	r2, [r1, #12]
 801000e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010012:	4605      	mov	r5, r0
 8010014:	0710      	lsls	r0, r2, #28
 8010016:	460c      	mov	r4, r1
 8010018:	d458      	bmi.n	80100cc <__sflush_r+0xc0>
 801001a:	684b      	ldr	r3, [r1, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	dc05      	bgt.n	801002c <__sflush_r+0x20>
 8010020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010022:	2b00      	cmp	r3, #0
 8010024:	dc02      	bgt.n	801002c <__sflush_r+0x20>
 8010026:	2000      	movs	r0, #0
 8010028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801002e:	2e00      	cmp	r6, #0
 8010030:	d0f9      	beq.n	8010026 <__sflush_r+0x1a>
 8010032:	2300      	movs	r3, #0
 8010034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010038:	682f      	ldr	r7, [r5, #0]
 801003a:	602b      	str	r3, [r5, #0]
 801003c:	d032      	beq.n	80100a4 <__sflush_r+0x98>
 801003e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010040:	89a3      	ldrh	r3, [r4, #12]
 8010042:	075a      	lsls	r2, r3, #29
 8010044:	d505      	bpl.n	8010052 <__sflush_r+0x46>
 8010046:	6863      	ldr	r3, [r4, #4]
 8010048:	1ac0      	subs	r0, r0, r3
 801004a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801004c:	b10b      	cbz	r3, 8010052 <__sflush_r+0x46>
 801004e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010050:	1ac0      	subs	r0, r0, r3
 8010052:	2300      	movs	r3, #0
 8010054:	4602      	mov	r2, r0
 8010056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010058:	6a21      	ldr	r1, [r4, #32]
 801005a:	4628      	mov	r0, r5
 801005c:	47b0      	blx	r6
 801005e:	1c43      	adds	r3, r0, #1
 8010060:	89a3      	ldrh	r3, [r4, #12]
 8010062:	d106      	bne.n	8010072 <__sflush_r+0x66>
 8010064:	6829      	ldr	r1, [r5, #0]
 8010066:	291d      	cmp	r1, #29
 8010068:	d82c      	bhi.n	80100c4 <__sflush_r+0xb8>
 801006a:	4a2a      	ldr	r2, [pc, #168]	; (8010114 <__sflush_r+0x108>)
 801006c:	40ca      	lsrs	r2, r1
 801006e:	07d6      	lsls	r6, r2, #31
 8010070:	d528      	bpl.n	80100c4 <__sflush_r+0xb8>
 8010072:	2200      	movs	r2, #0
 8010074:	6062      	str	r2, [r4, #4]
 8010076:	04d9      	lsls	r1, r3, #19
 8010078:	6922      	ldr	r2, [r4, #16]
 801007a:	6022      	str	r2, [r4, #0]
 801007c:	d504      	bpl.n	8010088 <__sflush_r+0x7c>
 801007e:	1c42      	adds	r2, r0, #1
 8010080:	d101      	bne.n	8010086 <__sflush_r+0x7a>
 8010082:	682b      	ldr	r3, [r5, #0]
 8010084:	b903      	cbnz	r3, 8010088 <__sflush_r+0x7c>
 8010086:	6560      	str	r0, [r4, #84]	; 0x54
 8010088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801008a:	602f      	str	r7, [r5, #0]
 801008c:	2900      	cmp	r1, #0
 801008e:	d0ca      	beq.n	8010026 <__sflush_r+0x1a>
 8010090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010094:	4299      	cmp	r1, r3
 8010096:	d002      	beq.n	801009e <__sflush_r+0x92>
 8010098:	4628      	mov	r0, r5
 801009a:	f7ff faa5 	bl	800f5e8 <_free_r>
 801009e:	2000      	movs	r0, #0
 80100a0:	6360      	str	r0, [r4, #52]	; 0x34
 80100a2:	e7c1      	b.n	8010028 <__sflush_r+0x1c>
 80100a4:	6a21      	ldr	r1, [r4, #32]
 80100a6:	2301      	movs	r3, #1
 80100a8:	4628      	mov	r0, r5
 80100aa:	47b0      	blx	r6
 80100ac:	1c41      	adds	r1, r0, #1
 80100ae:	d1c7      	bne.n	8010040 <__sflush_r+0x34>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d0c4      	beq.n	8010040 <__sflush_r+0x34>
 80100b6:	2b1d      	cmp	r3, #29
 80100b8:	d001      	beq.n	80100be <__sflush_r+0xb2>
 80100ba:	2b16      	cmp	r3, #22
 80100bc:	d101      	bne.n	80100c2 <__sflush_r+0xb6>
 80100be:	602f      	str	r7, [r5, #0]
 80100c0:	e7b1      	b.n	8010026 <__sflush_r+0x1a>
 80100c2:	89a3      	ldrh	r3, [r4, #12]
 80100c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100c8:	81a3      	strh	r3, [r4, #12]
 80100ca:	e7ad      	b.n	8010028 <__sflush_r+0x1c>
 80100cc:	690f      	ldr	r7, [r1, #16]
 80100ce:	2f00      	cmp	r7, #0
 80100d0:	d0a9      	beq.n	8010026 <__sflush_r+0x1a>
 80100d2:	0793      	lsls	r3, r2, #30
 80100d4:	680e      	ldr	r6, [r1, #0]
 80100d6:	bf08      	it	eq
 80100d8:	694b      	ldreq	r3, [r1, #20]
 80100da:	600f      	str	r7, [r1, #0]
 80100dc:	bf18      	it	ne
 80100de:	2300      	movne	r3, #0
 80100e0:	eba6 0807 	sub.w	r8, r6, r7
 80100e4:	608b      	str	r3, [r1, #8]
 80100e6:	f1b8 0f00 	cmp.w	r8, #0
 80100ea:	dd9c      	ble.n	8010026 <__sflush_r+0x1a>
 80100ec:	6a21      	ldr	r1, [r4, #32]
 80100ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80100f0:	4643      	mov	r3, r8
 80100f2:	463a      	mov	r2, r7
 80100f4:	4628      	mov	r0, r5
 80100f6:	47b0      	blx	r6
 80100f8:	2800      	cmp	r0, #0
 80100fa:	dc06      	bgt.n	801010a <__sflush_r+0xfe>
 80100fc:	89a3      	ldrh	r3, [r4, #12]
 80100fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010102:	81a3      	strh	r3, [r4, #12]
 8010104:	f04f 30ff 	mov.w	r0, #4294967295
 8010108:	e78e      	b.n	8010028 <__sflush_r+0x1c>
 801010a:	4407      	add	r7, r0
 801010c:	eba8 0800 	sub.w	r8, r8, r0
 8010110:	e7e9      	b.n	80100e6 <__sflush_r+0xda>
 8010112:	bf00      	nop
 8010114:	20400001 	.word	0x20400001

08010118 <_fflush_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	690b      	ldr	r3, [r1, #16]
 801011c:	4605      	mov	r5, r0
 801011e:	460c      	mov	r4, r1
 8010120:	b913      	cbnz	r3, 8010128 <_fflush_r+0x10>
 8010122:	2500      	movs	r5, #0
 8010124:	4628      	mov	r0, r5
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	b118      	cbz	r0, 8010132 <_fflush_r+0x1a>
 801012a:	6983      	ldr	r3, [r0, #24]
 801012c:	b90b      	cbnz	r3, 8010132 <_fflush_r+0x1a>
 801012e:	f000 f887 	bl	8010240 <__sinit>
 8010132:	4b14      	ldr	r3, [pc, #80]	; (8010184 <_fflush_r+0x6c>)
 8010134:	429c      	cmp	r4, r3
 8010136:	d11b      	bne.n	8010170 <_fflush_r+0x58>
 8010138:	686c      	ldr	r4, [r5, #4]
 801013a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d0ef      	beq.n	8010122 <_fflush_r+0xa>
 8010142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010144:	07d0      	lsls	r0, r2, #31
 8010146:	d404      	bmi.n	8010152 <_fflush_r+0x3a>
 8010148:	0599      	lsls	r1, r3, #22
 801014a:	d402      	bmi.n	8010152 <_fflush_r+0x3a>
 801014c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801014e:	f000 f915 	bl	801037c <__retarget_lock_acquire_recursive>
 8010152:	4628      	mov	r0, r5
 8010154:	4621      	mov	r1, r4
 8010156:	f7ff ff59 	bl	801000c <__sflush_r>
 801015a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801015c:	07da      	lsls	r2, r3, #31
 801015e:	4605      	mov	r5, r0
 8010160:	d4e0      	bmi.n	8010124 <_fflush_r+0xc>
 8010162:	89a3      	ldrh	r3, [r4, #12]
 8010164:	059b      	lsls	r3, r3, #22
 8010166:	d4dd      	bmi.n	8010124 <_fflush_r+0xc>
 8010168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801016a:	f000 f908 	bl	801037e <__retarget_lock_release_recursive>
 801016e:	e7d9      	b.n	8010124 <_fflush_r+0xc>
 8010170:	4b05      	ldr	r3, [pc, #20]	; (8010188 <_fflush_r+0x70>)
 8010172:	429c      	cmp	r4, r3
 8010174:	d101      	bne.n	801017a <_fflush_r+0x62>
 8010176:	68ac      	ldr	r4, [r5, #8]
 8010178:	e7df      	b.n	801013a <_fflush_r+0x22>
 801017a:	4b04      	ldr	r3, [pc, #16]	; (801018c <_fflush_r+0x74>)
 801017c:	429c      	cmp	r4, r3
 801017e:	bf08      	it	eq
 8010180:	68ec      	ldreq	r4, [r5, #12]
 8010182:	e7da      	b.n	801013a <_fflush_r+0x22>
 8010184:	0801257c 	.word	0x0801257c
 8010188:	0801259c 	.word	0x0801259c
 801018c:	0801255c 	.word	0x0801255c

08010190 <std>:
 8010190:	2300      	movs	r3, #0
 8010192:	b510      	push	{r4, lr}
 8010194:	4604      	mov	r4, r0
 8010196:	e9c0 3300 	strd	r3, r3, [r0]
 801019a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801019e:	6083      	str	r3, [r0, #8]
 80101a0:	8181      	strh	r1, [r0, #12]
 80101a2:	6643      	str	r3, [r0, #100]	; 0x64
 80101a4:	81c2      	strh	r2, [r0, #14]
 80101a6:	6183      	str	r3, [r0, #24]
 80101a8:	4619      	mov	r1, r3
 80101aa:	2208      	movs	r2, #8
 80101ac:	305c      	adds	r0, #92	; 0x5c
 80101ae:	f7fd fb69 	bl	800d884 <memset>
 80101b2:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <std+0x38>)
 80101b4:	6263      	str	r3, [r4, #36]	; 0x24
 80101b6:	4b05      	ldr	r3, [pc, #20]	; (80101cc <std+0x3c>)
 80101b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80101ba:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <std+0x40>)
 80101bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101be:	4b05      	ldr	r3, [pc, #20]	; (80101d4 <std+0x44>)
 80101c0:	6224      	str	r4, [r4, #32]
 80101c2:	6323      	str	r3, [r4, #48]	; 0x30
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	bf00      	nop
 80101c8:	080104e5 	.word	0x080104e5
 80101cc:	08010507 	.word	0x08010507
 80101d0:	0801053f 	.word	0x0801053f
 80101d4:	08010563 	.word	0x08010563

080101d8 <_cleanup_r>:
 80101d8:	4901      	ldr	r1, [pc, #4]	; (80101e0 <_cleanup_r+0x8>)
 80101da:	f000 b8af 	b.w	801033c <_fwalk_reent>
 80101de:	bf00      	nop
 80101e0:	08010119 	.word	0x08010119

080101e4 <__sfmoreglue>:
 80101e4:	b570      	push	{r4, r5, r6, lr}
 80101e6:	2268      	movs	r2, #104	; 0x68
 80101e8:	1e4d      	subs	r5, r1, #1
 80101ea:	4355      	muls	r5, r2
 80101ec:	460e      	mov	r6, r1
 80101ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80101f2:	f7ff fa65 	bl	800f6c0 <_malloc_r>
 80101f6:	4604      	mov	r4, r0
 80101f8:	b140      	cbz	r0, 801020c <__sfmoreglue+0x28>
 80101fa:	2100      	movs	r1, #0
 80101fc:	e9c0 1600 	strd	r1, r6, [r0]
 8010200:	300c      	adds	r0, #12
 8010202:	60a0      	str	r0, [r4, #8]
 8010204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010208:	f7fd fb3c 	bl	800d884 <memset>
 801020c:	4620      	mov	r0, r4
 801020e:	bd70      	pop	{r4, r5, r6, pc}

08010210 <__sfp_lock_acquire>:
 8010210:	4801      	ldr	r0, [pc, #4]	; (8010218 <__sfp_lock_acquire+0x8>)
 8010212:	f000 b8b3 	b.w	801037c <__retarget_lock_acquire_recursive>
 8010216:	bf00      	nop
 8010218:	200062e1 	.word	0x200062e1

0801021c <__sfp_lock_release>:
 801021c:	4801      	ldr	r0, [pc, #4]	; (8010224 <__sfp_lock_release+0x8>)
 801021e:	f000 b8ae 	b.w	801037e <__retarget_lock_release_recursive>
 8010222:	bf00      	nop
 8010224:	200062e1 	.word	0x200062e1

08010228 <__sinit_lock_acquire>:
 8010228:	4801      	ldr	r0, [pc, #4]	; (8010230 <__sinit_lock_acquire+0x8>)
 801022a:	f000 b8a7 	b.w	801037c <__retarget_lock_acquire_recursive>
 801022e:	bf00      	nop
 8010230:	200062e2 	.word	0x200062e2

08010234 <__sinit_lock_release>:
 8010234:	4801      	ldr	r0, [pc, #4]	; (801023c <__sinit_lock_release+0x8>)
 8010236:	f000 b8a2 	b.w	801037e <__retarget_lock_release_recursive>
 801023a:	bf00      	nop
 801023c:	200062e2 	.word	0x200062e2

08010240 <__sinit>:
 8010240:	b510      	push	{r4, lr}
 8010242:	4604      	mov	r4, r0
 8010244:	f7ff fff0 	bl	8010228 <__sinit_lock_acquire>
 8010248:	69a3      	ldr	r3, [r4, #24]
 801024a:	b11b      	cbz	r3, 8010254 <__sinit+0x14>
 801024c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010250:	f7ff bff0 	b.w	8010234 <__sinit_lock_release>
 8010254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010258:	6523      	str	r3, [r4, #80]	; 0x50
 801025a:	4b13      	ldr	r3, [pc, #76]	; (80102a8 <__sinit+0x68>)
 801025c:	4a13      	ldr	r2, [pc, #76]	; (80102ac <__sinit+0x6c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	62a2      	str	r2, [r4, #40]	; 0x28
 8010262:	42a3      	cmp	r3, r4
 8010264:	bf04      	itt	eq
 8010266:	2301      	moveq	r3, #1
 8010268:	61a3      	streq	r3, [r4, #24]
 801026a:	4620      	mov	r0, r4
 801026c:	f000 f820 	bl	80102b0 <__sfp>
 8010270:	6060      	str	r0, [r4, #4]
 8010272:	4620      	mov	r0, r4
 8010274:	f000 f81c 	bl	80102b0 <__sfp>
 8010278:	60a0      	str	r0, [r4, #8]
 801027a:	4620      	mov	r0, r4
 801027c:	f000 f818 	bl	80102b0 <__sfp>
 8010280:	2200      	movs	r2, #0
 8010282:	60e0      	str	r0, [r4, #12]
 8010284:	2104      	movs	r1, #4
 8010286:	6860      	ldr	r0, [r4, #4]
 8010288:	f7ff ff82 	bl	8010190 <std>
 801028c:	68a0      	ldr	r0, [r4, #8]
 801028e:	2201      	movs	r2, #1
 8010290:	2109      	movs	r1, #9
 8010292:	f7ff ff7d 	bl	8010190 <std>
 8010296:	68e0      	ldr	r0, [r4, #12]
 8010298:	2202      	movs	r2, #2
 801029a:	2112      	movs	r1, #18
 801029c:	f7ff ff78 	bl	8010190 <std>
 80102a0:	2301      	movs	r3, #1
 80102a2:	61a3      	str	r3, [r4, #24]
 80102a4:	e7d2      	b.n	801024c <__sinit+0xc>
 80102a6:	bf00      	nop
 80102a8:	080121e4 	.word	0x080121e4
 80102ac:	080101d9 	.word	0x080101d9

080102b0 <__sfp>:
 80102b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102b2:	4607      	mov	r7, r0
 80102b4:	f7ff ffac 	bl	8010210 <__sfp_lock_acquire>
 80102b8:	4b1e      	ldr	r3, [pc, #120]	; (8010334 <__sfp+0x84>)
 80102ba:	681e      	ldr	r6, [r3, #0]
 80102bc:	69b3      	ldr	r3, [r6, #24]
 80102be:	b913      	cbnz	r3, 80102c6 <__sfp+0x16>
 80102c0:	4630      	mov	r0, r6
 80102c2:	f7ff ffbd 	bl	8010240 <__sinit>
 80102c6:	3648      	adds	r6, #72	; 0x48
 80102c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102cc:	3b01      	subs	r3, #1
 80102ce:	d503      	bpl.n	80102d8 <__sfp+0x28>
 80102d0:	6833      	ldr	r3, [r6, #0]
 80102d2:	b30b      	cbz	r3, 8010318 <__sfp+0x68>
 80102d4:	6836      	ldr	r6, [r6, #0]
 80102d6:	e7f7      	b.n	80102c8 <__sfp+0x18>
 80102d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102dc:	b9d5      	cbnz	r5, 8010314 <__sfp+0x64>
 80102de:	4b16      	ldr	r3, [pc, #88]	; (8010338 <__sfp+0x88>)
 80102e0:	60e3      	str	r3, [r4, #12]
 80102e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80102e6:	6665      	str	r5, [r4, #100]	; 0x64
 80102e8:	f000 f847 	bl	801037a <__retarget_lock_init_recursive>
 80102ec:	f7ff ff96 	bl	801021c <__sfp_lock_release>
 80102f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80102f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80102f8:	6025      	str	r5, [r4, #0]
 80102fa:	61a5      	str	r5, [r4, #24]
 80102fc:	2208      	movs	r2, #8
 80102fe:	4629      	mov	r1, r5
 8010300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010304:	f7fd fabe 	bl	800d884 <memset>
 8010308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801030c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010310:	4620      	mov	r0, r4
 8010312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010314:	3468      	adds	r4, #104	; 0x68
 8010316:	e7d9      	b.n	80102cc <__sfp+0x1c>
 8010318:	2104      	movs	r1, #4
 801031a:	4638      	mov	r0, r7
 801031c:	f7ff ff62 	bl	80101e4 <__sfmoreglue>
 8010320:	4604      	mov	r4, r0
 8010322:	6030      	str	r0, [r6, #0]
 8010324:	2800      	cmp	r0, #0
 8010326:	d1d5      	bne.n	80102d4 <__sfp+0x24>
 8010328:	f7ff ff78 	bl	801021c <__sfp_lock_release>
 801032c:	230c      	movs	r3, #12
 801032e:	603b      	str	r3, [r7, #0]
 8010330:	e7ee      	b.n	8010310 <__sfp+0x60>
 8010332:	bf00      	nop
 8010334:	080121e4 	.word	0x080121e4
 8010338:	ffff0001 	.word	0xffff0001

0801033c <_fwalk_reent>:
 801033c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010340:	4606      	mov	r6, r0
 8010342:	4688      	mov	r8, r1
 8010344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010348:	2700      	movs	r7, #0
 801034a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801034e:	f1b9 0901 	subs.w	r9, r9, #1
 8010352:	d505      	bpl.n	8010360 <_fwalk_reent+0x24>
 8010354:	6824      	ldr	r4, [r4, #0]
 8010356:	2c00      	cmp	r4, #0
 8010358:	d1f7      	bne.n	801034a <_fwalk_reent+0xe>
 801035a:	4638      	mov	r0, r7
 801035c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010360:	89ab      	ldrh	r3, [r5, #12]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d907      	bls.n	8010376 <_fwalk_reent+0x3a>
 8010366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801036a:	3301      	adds	r3, #1
 801036c:	d003      	beq.n	8010376 <_fwalk_reent+0x3a>
 801036e:	4629      	mov	r1, r5
 8010370:	4630      	mov	r0, r6
 8010372:	47c0      	blx	r8
 8010374:	4307      	orrs	r7, r0
 8010376:	3568      	adds	r5, #104	; 0x68
 8010378:	e7e9      	b.n	801034e <_fwalk_reent+0x12>

0801037a <__retarget_lock_init_recursive>:
 801037a:	4770      	bx	lr

0801037c <__retarget_lock_acquire_recursive>:
 801037c:	4770      	bx	lr

0801037e <__retarget_lock_release_recursive>:
 801037e:	4770      	bx	lr

08010380 <__swhatbuf_r>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	460e      	mov	r6, r1
 8010384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010388:	2900      	cmp	r1, #0
 801038a:	b096      	sub	sp, #88	; 0x58
 801038c:	4614      	mov	r4, r2
 801038e:	461d      	mov	r5, r3
 8010390:	da08      	bge.n	80103a4 <__swhatbuf_r+0x24>
 8010392:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010396:	2200      	movs	r2, #0
 8010398:	602a      	str	r2, [r5, #0]
 801039a:	061a      	lsls	r2, r3, #24
 801039c:	d410      	bmi.n	80103c0 <__swhatbuf_r+0x40>
 801039e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103a2:	e00e      	b.n	80103c2 <__swhatbuf_r+0x42>
 80103a4:	466a      	mov	r2, sp
 80103a6:	f000 f903 	bl	80105b0 <_fstat_r>
 80103aa:	2800      	cmp	r0, #0
 80103ac:	dbf1      	blt.n	8010392 <__swhatbuf_r+0x12>
 80103ae:	9a01      	ldr	r2, [sp, #4]
 80103b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103b8:	425a      	negs	r2, r3
 80103ba:	415a      	adcs	r2, r3
 80103bc:	602a      	str	r2, [r5, #0]
 80103be:	e7ee      	b.n	801039e <__swhatbuf_r+0x1e>
 80103c0:	2340      	movs	r3, #64	; 0x40
 80103c2:	2000      	movs	r0, #0
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	b016      	add	sp, #88	; 0x58
 80103c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080103cc <__smakebuf_r>:
 80103cc:	898b      	ldrh	r3, [r1, #12]
 80103ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103d0:	079d      	lsls	r5, r3, #30
 80103d2:	4606      	mov	r6, r0
 80103d4:	460c      	mov	r4, r1
 80103d6:	d507      	bpl.n	80103e8 <__smakebuf_r+0x1c>
 80103d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	6123      	str	r3, [r4, #16]
 80103e0:	2301      	movs	r3, #1
 80103e2:	6163      	str	r3, [r4, #20]
 80103e4:	b002      	add	sp, #8
 80103e6:	bd70      	pop	{r4, r5, r6, pc}
 80103e8:	ab01      	add	r3, sp, #4
 80103ea:	466a      	mov	r2, sp
 80103ec:	f7ff ffc8 	bl	8010380 <__swhatbuf_r>
 80103f0:	9900      	ldr	r1, [sp, #0]
 80103f2:	4605      	mov	r5, r0
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7ff f963 	bl	800f6c0 <_malloc_r>
 80103fa:	b948      	cbnz	r0, 8010410 <__smakebuf_r+0x44>
 80103fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010400:	059a      	lsls	r2, r3, #22
 8010402:	d4ef      	bmi.n	80103e4 <__smakebuf_r+0x18>
 8010404:	f023 0303 	bic.w	r3, r3, #3
 8010408:	f043 0302 	orr.w	r3, r3, #2
 801040c:	81a3      	strh	r3, [r4, #12]
 801040e:	e7e3      	b.n	80103d8 <__smakebuf_r+0xc>
 8010410:	4b0d      	ldr	r3, [pc, #52]	; (8010448 <__smakebuf_r+0x7c>)
 8010412:	62b3      	str	r3, [r6, #40]	; 0x28
 8010414:	89a3      	ldrh	r3, [r4, #12]
 8010416:	6020      	str	r0, [r4, #0]
 8010418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801041c:	81a3      	strh	r3, [r4, #12]
 801041e:	9b00      	ldr	r3, [sp, #0]
 8010420:	6163      	str	r3, [r4, #20]
 8010422:	9b01      	ldr	r3, [sp, #4]
 8010424:	6120      	str	r0, [r4, #16]
 8010426:	b15b      	cbz	r3, 8010440 <__smakebuf_r+0x74>
 8010428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801042c:	4630      	mov	r0, r6
 801042e:	f000 f8d1 	bl	80105d4 <_isatty_r>
 8010432:	b128      	cbz	r0, 8010440 <__smakebuf_r+0x74>
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	f023 0303 	bic.w	r3, r3, #3
 801043a:	f043 0301 	orr.w	r3, r3, #1
 801043e:	81a3      	strh	r3, [r4, #12]
 8010440:	89a0      	ldrh	r0, [r4, #12]
 8010442:	4305      	orrs	r5, r0
 8010444:	81a5      	strh	r5, [r4, #12]
 8010446:	e7cd      	b.n	80103e4 <__smakebuf_r+0x18>
 8010448:	080101d9 	.word	0x080101d9

0801044c <_malloc_usable_size_r>:
 801044c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010450:	1f18      	subs	r0, r3, #4
 8010452:	2b00      	cmp	r3, #0
 8010454:	bfbc      	itt	lt
 8010456:	580b      	ldrlt	r3, [r1, r0]
 8010458:	18c0      	addlt	r0, r0, r3
 801045a:	4770      	bx	lr

0801045c <_raise_r>:
 801045c:	291f      	cmp	r1, #31
 801045e:	b538      	push	{r3, r4, r5, lr}
 8010460:	4604      	mov	r4, r0
 8010462:	460d      	mov	r5, r1
 8010464:	d904      	bls.n	8010470 <_raise_r+0x14>
 8010466:	2316      	movs	r3, #22
 8010468:	6003      	str	r3, [r0, #0]
 801046a:	f04f 30ff 	mov.w	r0, #4294967295
 801046e:	bd38      	pop	{r3, r4, r5, pc}
 8010470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010472:	b112      	cbz	r2, 801047a <_raise_r+0x1e>
 8010474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010478:	b94b      	cbnz	r3, 801048e <_raise_r+0x32>
 801047a:	4620      	mov	r0, r4
 801047c:	f000 f830 	bl	80104e0 <_getpid_r>
 8010480:	462a      	mov	r2, r5
 8010482:	4601      	mov	r1, r0
 8010484:	4620      	mov	r0, r4
 8010486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801048a:	f000 b817 	b.w	80104bc <_kill_r>
 801048e:	2b01      	cmp	r3, #1
 8010490:	d00a      	beq.n	80104a8 <_raise_r+0x4c>
 8010492:	1c59      	adds	r1, r3, #1
 8010494:	d103      	bne.n	801049e <_raise_r+0x42>
 8010496:	2316      	movs	r3, #22
 8010498:	6003      	str	r3, [r0, #0]
 801049a:	2001      	movs	r0, #1
 801049c:	e7e7      	b.n	801046e <_raise_r+0x12>
 801049e:	2400      	movs	r4, #0
 80104a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104a4:	4628      	mov	r0, r5
 80104a6:	4798      	blx	r3
 80104a8:	2000      	movs	r0, #0
 80104aa:	e7e0      	b.n	801046e <_raise_r+0x12>

080104ac <raise>:
 80104ac:	4b02      	ldr	r3, [pc, #8]	; (80104b8 <raise+0xc>)
 80104ae:	4601      	mov	r1, r0
 80104b0:	6818      	ldr	r0, [r3, #0]
 80104b2:	f7ff bfd3 	b.w	801045c <_raise_r>
 80104b6:	bf00      	nop
 80104b8:	200001ac 	.word	0x200001ac

080104bc <_kill_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d07      	ldr	r5, [pc, #28]	; (80104dc <_kill_r+0x20>)
 80104c0:	2300      	movs	r3, #0
 80104c2:	4604      	mov	r4, r0
 80104c4:	4608      	mov	r0, r1
 80104c6:	4611      	mov	r1, r2
 80104c8:	602b      	str	r3, [r5, #0]
 80104ca:	f7f1 f8c3 	bl	8001654 <_kill>
 80104ce:	1c43      	adds	r3, r0, #1
 80104d0:	d102      	bne.n	80104d8 <_kill_r+0x1c>
 80104d2:	682b      	ldr	r3, [r5, #0]
 80104d4:	b103      	cbz	r3, 80104d8 <_kill_r+0x1c>
 80104d6:	6023      	str	r3, [r4, #0]
 80104d8:	bd38      	pop	{r3, r4, r5, pc}
 80104da:	bf00      	nop
 80104dc:	200062dc 	.word	0x200062dc

080104e0 <_getpid_r>:
 80104e0:	f7f1 b8b0 	b.w	8001644 <_getpid>

080104e4 <__sread>:
 80104e4:	b510      	push	{r4, lr}
 80104e6:	460c      	mov	r4, r1
 80104e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104ec:	f000 f894 	bl	8010618 <_read_r>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	bfab      	itete	ge
 80104f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80104f6:	89a3      	ldrhlt	r3, [r4, #12]
 80104f8:	181b      	addge	r3, r3, r0
 80104fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80104fe:	bfac      	ite	ge
 8010500:	6563      	strge	r3, [r4, #84]	; 0x54
 8010502:	81a3      	strhlt	r3, [r4, #12]
 8010504:	bd10      	pop	{r4, pc}

08010506 <__swrite>:
 8010506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801050a:	461f      	mov	r7, r3
 801050c:	898b      	ldrh	r3, [r1, #12]
 801050e:	05db      	lsls	r3, r3, #23
 8010510:	4605      	mov	r5, r0
 8010512:	460c      	mov	r4, r1
 8010514:	4616      	mov	r6, r2
 8010516:	d505      	bpl.n	8010524 <__swrite+0x1e>
 8010518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801051c:	2302      	movs	r3, #2
 801051e:	2200      	movs	r2, #0
 8010520:	f000 f868 	bl	80105f4 <_lseek_r>
 8010524:	89a3      	ldrh	r3, [r4, #12]
 8010526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801052a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801052e:	81a3      	strh	r3, [r4, #12]
 8010530:	4632      	mov	r2, r6
 8010532:	463b      	mov	r3, r7
 8010534:	4628      	mov	r0, r5
 8010536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801053a:	f000 b817 	b.w	801056c <_write_r>

0801053e <__sseek>:
 801053e:	b510      	push	{r4, lr}
 8010540:	460c      	mov	r4, r1
 8010542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010546:	f000 f855 	bl	80105f4 <_lseek_r>
 801054a:	1c43      	adds	r3, r0, #1
 801054c:	89a3      	ldrh	r3, [r4, #12]
 801054e:	bf15      	itete	ne
 8010550:	6560      	strne	r0, [r4, #84]	; 0x54
 8010552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801055a:	81a3      	strheq	r3, [r4, #12]
 801055c:	bf18      	it	ne
 801055e:	81a3      	strhne	r3, [r4, #12]
 8010560:	bd10      	pop	{r4, pc}

08010562 <__sclose>:
 8010562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010566:	f000 b813 	b.w	8010590 <_close_r>
	...

0801056c <_write_r>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	4d07      	ldr	r5, [pc, #28]	; (801058c <_write_r+0x20>)
 8010570:	4604      	mov	r4, r0
 8010572:	4608      	mov	r0, r1
 8010574:	4611      	mov	r1, r2
 8010576:	2200      	movs	r2, #0
 8010578:	602a      	str	r2, [r5, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	f7f1 f8a1 	bl	80016c2 <_write>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_write_r+0x1e>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	b103      	cbz	r3, 801058a <_write_r+0x1e>
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	200062dc 	.word	0x200062dc

08010590 <_close_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d06      	ldr	r5, [pc, #24]	; (80105ac <_close_r+0x1c>)
 8010594:	2300      	movs	r3, #0
 8010596:	4604      	mov	r4, r0
 8010598:	4608      	mov	r0, r1
 801059a:	602b      	str	r3, [r5, #0]
 801059c:	f7f1 f8ad 	bl	80016fa <_close>
 80105a0:	1c43      	adds	r3, r0, #1
 80105a2:	d102      	bne.n	80105aa <_close_r+0x1a>
 80105a4:	682b      	ldr	r3, [r5, #0]
 80105a6:	b103      	cbz	r3, 80105aa <_close_r+0x1a>
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	bd38      	pop	{r3, r4, r5, pc}
 80105ac:	200062dc 	.word	0x200062dc

080105b0 <_fstat_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4d07      	ldr	r5, [pc, #28]	; (80105d0 <_fstat_r+0x20>)
 80105b4:	2300      	movs	r3, #0
 80105b6:	4604      	mov	r4, r0
 80105b8:	4608      	mov	r0, r1
 80105ba:	4611      	mov	r1, r2
 80105bc:	602b      	str	r3, [r5, #0]
 80105be:	f7f1 f8a8 	bl	8001712 <_fstat>
 80105c2:	1c43      	adds	r3, r0, #1
 80105c4:	d102      	bne.n	80105cc <_fstat_r+0x1c>
 80105c6:	682b      	ldr	r3, [r5, #0]
 80105c8:	b103      	cbz	r3, 80105cc <_fstat_r+0x1c>
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	bd38      	pop	{r3, r4, r5, pc}
 80105ce:	bf00      	nop
 80105d0:	200062dc 	.word	0x200062dc

080105d4 <_isatty_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4d06      	ldr	r5, [pc, #24]	; (80105f0 <_isatty_r+0x1c>)
 80105d8:	2300      	movs	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	4608      	mov	r0, r1
 80105de:	602b      	str	r3, [r5, #0]
 80105e0:	f7f1 f8a7 	bl	8001732 <_isatty>
 80105e4:	1c43      	adds	r3, r0, #1
 80105e6:	d102      	bne.n	80105ee <_isatty_r+0x1a>
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	b103      	cbz	r3, 80105ee <_isatty_r+0x1a>
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	bd38      	pop	{r3, r4, r5, pc}
 80105f0:	200062dc 	.word	0x200062dc

080105f4 <_lseek_r>:
 80105f4:	b538      	push	{r3, r4, r5, lr}
 80105f6:	4d07      	ldr	r5, [pc, #28]	; (8010614 <_lseek_r+0x20>)
 80105f8:	4604      	mov	r4, r0
 80105fa:	4608      	mov	r0, r1
 80105fc:	4611      	mov	r1, r2
 80105fe:	2200      	movs	r2, #0
 8010600:	602a      	str	r2, [r5, #0]
 8010602:	461a      	mov	r2, r3
 8010604:	f7f1 f8a0 	bl	8001748 <_lseek>
 8010608:	1c43      	adds	r3, r0, #1
 801060a:	d102      	bne.n	8010612 <_lseek_r+0x1e>
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	b103      	cbz	r3, 8010612 <_lseek_r+0x1e>
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	bd38      	pop	{r3, r4, r5, pc}
 8010614:	200062dc 	.word	0x200062dc

08010618 <_read_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d07      	ldr	r5, [pc, #28]	; (8010638 <_read_r+0x20>)
 801061c:	4604      	mov	r4, r0
 801061e:	4608      	mov	r0, r1
 8010620:	4611      	mov	r1, r2
 8010622:	2200      	movs	r2, #0
 8010624:	602a      	str	r2, [r5, #0]
 8010626:	461a      	mov	r2, r3
 8010628:	f7f1 f82e 	bl	8001688 <_read>
 801062c:	1c43      	adds	r3, r0, #1
 801062e:	d102      	bne.n	8010636 <_read_r+0x1e>
 8010630:	682b      	ldr	r3, [r5, #0]
 8010632:	b103      	cbz	r3, 8010636 <_read_r+0x1e>
 8010634:	6023      	str	r3, [r4, #0]
 8010636:	bd38      	pop	{r3, r4, r5, pc}
 8010638:	200062dc 	.word	0x200062dc

0801063c <_init>:
 801063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801063e:	bf00      	nop
 8010640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010642:	bc08      	pop	{r3}
 8010644:	469e      	mov	lr, r3
 8010646:	4770      	bx	lr

08010648 <_fini>:
 8010648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801064a:	bf00      	nop
 801064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801064e:	bc08      	pop	{r3}
 8010650:	469e      	mov	lr, r3
 8010652:	4770      	bx	lr

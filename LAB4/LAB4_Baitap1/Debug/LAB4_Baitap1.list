
LAB4_Baitap1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002aec  0800f138  0800f138  0001f138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c24  08011c24  00030384  2**0
                  CONTENTS
  4 .ARM          00000008  08011c24  08011c24  00021c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c2c  08011c2c  00030384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c2c  08011c2c  00021c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c30  08011c30  00021c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000384  20000000  08011c34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030384  2**0
                  CONTENTS
 10 .bss          00002030  20000384  20000384  00030384  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  200023b4  200023b4  00030384  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c195  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048c7  00000000  00000000  0004c549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  00050e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001578  00000000  00000000  000525b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029dbc  00000000  00000000  00053b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f40e  00000000  00000000  0007d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e476b  00000000  00000000  0009ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018145d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007254  00000000  00000000  001814b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000384 	.word	0x20000384
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f120 	.word	0x0800f120

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000388 	.word	0x20000388
 80001ec:	0800f120 	.word	0x0800f120

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b598      	push	{r3, r4, r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f002 fb84 	bl	80035dc <HAL_Init>
  BSP_GYRO_Init();
 8000ed4:	f001 fa50 	bl	8002378 <BSP_GYRO_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 f906 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000edc:	f000 f9a4 	bl	8001228 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000ee0:	f000 f96c 	bl	80011bc <MX_SPI5_Init>
  MX_USB_DEVICE_Init();
 8000ee4:	f00a fcea 	bl	800b8bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000ee8:	f001 faac 	bl	8002444 <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000eec:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f001 fb29 	bl	8002548 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 fb8a 	bl	8002610 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000efc:	f001 ffa6 	bl	8002e4c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000f00:	486c      	ldr	r0, [pc, #432]	; (80010b4 <main+0x1e8>)
 8000f02:	f001 fbf7 	bl	80026f4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000f06:	486b      	ldr	r0, [pc, #428]	; (80010b4 <main+0x1e8>)
 8000f08:	f001 fbaa 	bl	8002660 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f001 fb8e 	bl	8002630 <BSP_LCD_SetTextColor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  L3GD20_ReadXYZAngRate(pfData);
 8000f14:	4868      	ldr	r0, [pc, #416]	; (80010b8 <main+0x1ec>)
 8000f16:	f000 fe89 	bl	8001c2c <L3GD20_ReadXYZAngRate>

	  sprintf(Rx_bufferX, "X %4f", pfData[0]);
 8000f1a:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <main+0x1ec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb22 	bl	8000568 <__aeabi_f2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4964      	ldr	r1, [pc, #400]	; (80010bc <main+0x1f0>)
 8000f2a:	4865      	ldr	r0, [pc, #404]	; (80010c0 <main+0x1f4>)
 8000f2c:	f00b fe7e 	bl	800cc2c <siprintf>
	  CDC_Transmit_HS((uint8_t*)Rx_bufferX,strlen(Rx_bufferX));
 8000f30:	4863      	ldr	r0, [pc, #396]	; (80010c0 <main+0x1f4>)
 8000f32:	f7ff f95d 	bl	80001f0 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4860      	ldr	r0, [pc, #384]	; (80010c0 <main+0x1f4>)
 8000f3e:	f00a fd7b 	bl	800ba38 <CDC_Transmit_HS>
	  BSP_LCD_DisplayStringAtLine(1, Rx_bufferX);
 8000f42:	495f      	ldr	r1, [pc, #380]	; (80010c0 <main+0x1f4>)
 8000f44:	2001      	movs	r0, #1
 8000f46:	f001 fcff 	bl	8002948 <BSP_LCD_DisplayStringAtLine>

	  sprintf(Rx_bufferY, "Y %4f", pfData[1]);
 8000f4a:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <main+0x1ec>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb0a 	bl	8000568 <__aeabi_f2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	495a      	ldr	r1, [pc, #360]	; (80010c4 <main+0x1f8>)
 8000f5a:	485b      	ldr	r0, [pc, #364]	; (80010c8 <main+0x1fc>)
 8000f5c:	f00b fe66 	bl	800cc2c <siprintf>
	  CDC_Transmit_HS((uint8_t*)Rx_bufferY,strlen(Rx_bufferY));
 8000f60:	4859      	ldr	r0, [pc, #356]	; (80010c8 <main+0x1fc>)
 8000f62:	f7ff f945 	bl	80001f0 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4856      	ldr	r0, [pc, #344]	; (80010c8 <main+0x1fc>)
 8000f6e:	f00a fd63 	bl	800ba38 <CDC_Transmit_HS>
	  BSP_LCD_DisplayStringAtLine(2, Rx_bufferY);
 8000f72:	4955      	ldr	r1, [pc, #340]	; (80010c8 <main+0x1fc>)
 8000f74:	2002      	movs	r0, #2
 8000f76:	f001 fce7 	bl	8002948 <BSP_LCD_DisplayStringAtLine>

	  sprintf(Rx_bufferZ, "Z %4f", pfData[2]);
 8000f7a:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <main+0x1ec>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff faf2 	bl	8000568 <__aeabi_f2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4950      	ldr	r1, [pc, #320]	; (80010cc <main+0x200>)
 8000f8a:	4851      	ldr	r0, [pc, #324]	; (80010d0 <main+0x204>)
 8000f8c:	f00b fe4e 	bl	800cc2c <siprintf>
	  CDC_Transmit_HS((uint8_t*)Rx_bufferZ,strlen(Rx_bufferZ));
 8000f90:	484f      	ldr	r0, [pc, #316]	; (80010d0 <main+0x204>)
 8000f92:	f7ff f92d 	bl	80001f0 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	484c      	ldr	r0, [pc, #304]	; (80010d0 <main+0x204>)
 8000f9e:	f00a fd4b 	bl	800ba38 <CDC_Transmit_HS>
	  BSP_LCD_DisplayStringAtLine(3, Rx_bufferZ);
 8000fa2:	494b      	ldr	r1, [pc, #300]	; (80010d0 <main+0x204>)
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f001 fccf 	bl	8002948 <BSP_LCD_DisplayStringAtLine>

	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000faa:	4842      	ldr	r0, [pc, #264]	; (80010b4 <main+0x1e8>)
 8000fac:	f001 fba2 	bl	80026f4 <BSP_LCD_Clear>
	  CDC_Transmit_HS((uint8_t*)space,strlen(space));
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <main+0x208>)
 8000fb2:	681c      	ldr	r4, [r3, #0]
 8000fb4:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <main+0x208>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f919 	bl	80001f0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f00a fd37 	bl	800ba38 <CDC_Transmit_HS>
	  if (pfData[0]<0&&pfData[1]<0)
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <main+0x1ec>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	d513      	bpl.n	8001002 <main+0x136>
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <main+0x1ec>)
 8000fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d50b      	bpl.n	8001002 <main+0x136>
	  {
	  	  BSP_LCD_FillPolygon(top, 3);
 8000fea:	2103      	movs	r1, #3
 8000fec:	483a      	ldr	r0, [pc, #232]	; (80010d8 <main+0x20c>)
 8000fee:	f001 fe4b 	bl	8002c88 <BSP_LCD_FillPolygon>
	  	  BSP_LCD_FillPolygon(left, 3);
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4839      	ldr	r0, [pc, #228]	; (80010dc <main+0x210>)
 8000ff6:	f001 fe47 	bl	8002c88 <BSP_LCD_FillPolygon>
	  	  HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffe:	f002 fb5f 	bl	80036c0 <HAL_Delay>
	  }
	  if (pfData[0]<0&&pfData[1]>0)
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <main+0x1ec>)
 8001004:	edd3 7a00 	vldr	s15, [r3]
 8001008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d513      	bpl.n	800103a <main+0x16e>
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <main+0x1ec>)
 8001014:	edd3 7a01 	vldr	s15, [r3, #4]
 8001018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	dd0b      	ble.n	800103a <main+0x16e>
	  {
	  	  BSP_LCD_FillPolygon(top, 3);
 8001022:	2103      	movs	r1, #3
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <main+0x20c>)
 8001026:	f001 fe2f 	bl	8002c88 <BSP_LCD_FillPolygon>
	  	  BSP_LCD_FillPolygon(right, 3);
 800102a:	2103      	movs	r1, #3
 800102c:	482c      	ldr	r0, [pc, #176]	; (80010e0 <main+0x214>)
 800102e:	f001 fe2b 	bl	8002c88 <BSP_LCD_FillPolygon>
	  	  HAL_Delay(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001036:	f002 fb43 	bl	80036c0 <HAL_Delay>
	  }
	  if (pfData[0]>0&&pfData[1]<0)
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <main+0x1ec>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	dd13      	ble.n	8001072 <main+0x1a6>
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <main+0x1ec>)
 800104c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001058:	d50b      	bpl.n	8001072 <main+0x1a6>
	  {
		  BSP_LCD_FillPolygon(bot, 3);
 800105a:	2103      	movs	r1, #3
 800105c:	4821      	ldr	r0, [pc, #132]	; (80010e4 <main+0x218>)
 800105e:	f001 fe13 	bl	8002c88 <BSP_LCD_FillPolygon>
		  BSP_LCD_FillPolygon(left, 3);
 8001062:	2103      	movs	r1, #3
 8001064:	481d      	ldr	r0, [pc, #116]	; (80010dc <main+0x210>)
 8001066:	f001 fe0f 	bl	8002c88 <BSP_LCD_FillPolygon>
		  HAL_Delay(1000);
 800106a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106e:	f002 fb27 	bl	80036c0 <HAL_Delay>
	  }
	  if (pfData[0]>0&&pfData[1]>0)
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <main+0x1ec>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	dd13      	ble.n	80010aa <main+0x1de>
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <main+0x1ec>)
 8001084:	edd3 7a01 	vldr	s15, [r3, #4]
 8001088:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	dd0b      	ble.n	80010aa <main+0x1de>
	  {
		  BSP_LCD_FillPolygon(bot, 3);
 8001092:	2103      	movs	r1, #3
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <main+0x218>)
 8001096:	f001 fdf7 	bl	8002c88 <BSP_LCD_FillPolygon>
		  BSP_LCD_FillPolygon(right, 3);
 800109a:	2103      	movs	r1, #3
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <main+0x214>)
 800109e:	f001 fdf3 	bl	8002c88 <BSP_LCD_FillPolygon>
		  HAL_Delay(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f002 fb0b 	bl	80036c0 <HAL_Delay>
	 }
	/* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 80010aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ae:	f002 fb07 	bl	80036c0 <HAL_Delay>
	  L3GD20_ReadXYZAngRate(pfData);
 80010b2:	e72f      	b.n	8000f14 <main+0x48>
 80010b4:	ff0000ff 	.word	0xff0000ff
 80010b8:	200003f8 	.word	0x200003f8
 80010bc:	0800f13c 	.word	0x0800f13c
 80010c0:	2000040c 	.word	0x2000040c
 80010c4:	0800f144 	.word	0x0800f144
 80010c8:	20000470 	.word	0x20000470
 80010cc:	0800f14c 	.word	0x0800f14c
 80010d0:	200004d4 	.word	0x200004d4
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004
 80010dc:	2000001c 	.word	0x2000001c
 80010e0:	20000028 	.word	0x20000028
 80010e4:	20000010 	.word	0x20000010

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00b f926 	bl	800c348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <SystemClock_Config+0xcc>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <SystemClock_Config+0xd0>)
 8001132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001158:	2308      	movs	r3, #8
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800115c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001160:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001166:	2307      	movs	r3, #7
 8001168:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f005 f8ac 	bl	80062cc <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800117a:	f000 f88b 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2105      	movs	r1, #5
 800119c:	4618      	mov	r0, r3
 800119e:	f005 fb0d 	bl	80067bc <HAL_RCC_ClockConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011a8:	f000 f874 	bl	8001294 <Error_Handler>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3750      	adds	r7, #80	; 0x50
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_SPI5_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_SPI5_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI5_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI5_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_SPI5_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI5_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI5_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI5_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI5_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_SPI5_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI5_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_SPI5_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI5_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_SPI5_Init+0x64>)
 800120e:	f005 ff28 	bl	8007062 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001218:	f000 f83c 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200003a0 	.word	0x200003a0
 8001224:	40015000 	.word	0x40015000

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_GPIO_Init+0x68>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <MX_GPIO_Init+0x68>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_GPIO_Init+0x68>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_GPIO_Init+0x68>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_GPIO_Init+0x68>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_GPIO_Init+0x68>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_GPIO_Init+0x68>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <MX_GPIO_Init+0x68>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_GPIO_Init+0x68>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_SPI_MspInit+0x94>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d134      	bne.n	800137c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_SPI_MspInit+0x98>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_SPI_MspInit+0x98>)
 800131c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_SPI_MspInit+0x98>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_SPI_MspInit+0x98>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_SPI_MspInit+0x98>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_SPI_MspInit+0x98>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800134a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800135c:	2305      	movs	r3, #5
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <HAL_SPI_MspInit+0x9c>)
 8001368:	f002 ff88 	bl	800427c <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2055      	movs	r0, #85	; 0x55
 8001372:	f002 fac8 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001376:	2055      	movs	r0, #85	; 0x55
 8001378:	f002 fae1 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40015000 	.word	0x40015000
 8001388:	40023800 	.word	0x40023800
 800138c:	40021400 	.word	0x40021400

08001390 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <HAL_SPI_MspDeInit+0x38>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10d      	bne.n	80013be <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_SPI_MspDeInit+0x3c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_SPI_MspDeInit+0x3c>)
 80013a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80013ae:	f44f 7160 	mov.w	r1, #896	; 0x380
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <HAL_SPI_MspDeInit+0x40>)
 80013b4:	f003 f90e 	bl	80045d4 <HAL_GPIO_DeInit>

    /* SPI5 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI5_IRQn);
 80013b8:	2055      	movs	r0, #85	; 0x55
 80013ba:	f002 face 	bl	800395a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40015000 	.word	0x40015000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021400 	.word	0x40021400

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f002 f92e 	bl	8003680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <OTG_HS_IRQHandler+0x10>)
 800142e:	f003 fe20 	bl	8005072 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20001c78 	.word	0x20001c78

0800143c <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <SPI5_IRQHandler+0x10>)
 8001442:	f006 faaf 	bl	80079a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200003a0 	.word	0x200003a0

08001450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	return 1;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_kill>:

int _kill(int pid, int sig)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800146a:	f00a ff43 	bl	800c2f4 <__errno>
 800146e:	4603      	mov	r3, r0
 8001470:	2216      	movs	r2, #22
 8001472:	601a      	str	r2, [r3, #0]
	return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_exit>:

void _exit (int status)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffe7 	bl	8001460 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001492:	e7fe      	b.n	8001492 <_exit+0x12>

08001494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e00a      	b.n	80014bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014a6:	f3af 8000 	nop.w
 80014aa:	4601      	mov	r1, r0
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	b2ca      	uxtb	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbf0      	blt.n	80014a6 <_read+0x12>
	}

return len;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e009      	b.n	80014f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	60ba      	str	r2, [r7, #8]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf1      	blt.n	80014e0 <_write+0x12>
	}
	return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_close>:

int _close(int file)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	605a      	str	r2, [r3, #4]
	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_isatty>:

int _isatty(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f00a fea8 	bl	800c2f4 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20030000 	.word	0x20030000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000538 	.word	0x20000538
 80015d8:	200023b8 	.word	0x200023b8

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001606:	490e      	ldr	r1, [pc, #56]	; (8001640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800161c:	4c0b      	ldr	r4, [pc, #44]	; (800164c <LoopFillZerobss+0x26>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162a:	f7ff ffd7 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f00a fe67 	bl	800c300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff fc4b 	bl	8000ecc <main>
  bx  lr    
 8001636:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001638:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 8001644:	08011c34 	.word	0x08011c34
  ldr r2, =_sbss
 8001648:	20000384 	.word	0x20000384
  ldr r4, =_ebss
 800164c:	200023b4 	.word	0x200023b4

08001650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC_IRQHandler>

08001652 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001656:	f000 fcdd 	bl	8002014 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800165a:	20ca      	movs	r0, #202	; 0xca
 800165c:	f000 f95d 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001660:	20c3      	movs	r0, #195	; 0xc3
 8001662:	f000 f967 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001666:	2008      	movs	r0, #8
 8001668:	f000 f964 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800166c:	2050      	movs	r0, #80	; 0x50
 800166e:	f000 f961 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001672:	20cf      	movs	r0, #207	; 0xcf
 8001674:	f000 f951 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001678:	2000      	movs	r0, #0
 800167a:	f000 f95b 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800167e:	20c1      	movs	r0, #193	; 0xc1
 8001680:	f000 f958 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001684:	2030      	movs	r0, #48	; 0x30
 8001686:	f000 f955 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800168a:	20ed      	movs	r0, #237	; 0xed
 800168c:	f000 f945 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f000 f94f 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001696:	2003      	movs	r0, #3
 8001698:	f000 f94c 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800169c:	2012      	movs	r0, #18
 800169e:	f000 f949 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80016a2:	2081      	movs	r0, #129	; 0x81
 80016a4:	f000 f946 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80016a8:	20e8      	movs	r0, #232	; 0xe8
 80016aa:	f000 f936 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80016ae:	2085      	movs	r0, #133	; 0x85
 80016b0:	f000 f940 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 f93d 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80016ba:	2078      	movs	r0, #120	; 0x78
 80016bc:	f000 f93a 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80016c0:	20cb      	movs	r0, #203	; 0xcb
 80016c2:	f000 f92a 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80016c6:	2039      	movs	r0, #57	; 0x39
 80016c8:	f000 f934 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80016cc:	202c      	movs	r0, #44	; 0x2c
 80016ce:	f000 f931 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f92e 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80016d8:	2034      	movs	r0, #52	; 0x34
 80016da:	f000 f92b 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80016de:	2002      	movs	r0, #2
 80016e0:	f000 f928 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80016e4:	20f7      	movs	r0, #247	; 0xf7
 80016e6:	f000 f918 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80016ea:	2020      	movs	r0, #32
 80016ec:	f000 f922 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80016f0:	20ea      	movs	r0, #234	; 0xea
 80016f2:	f000 f912 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f91c 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f000 f919 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001702:	20b1      	movs	r0, #177	; 0xb1
 8001704:	f000 f909 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001708:	2000      	movs	r0, #0
 800170a:	f000 f913 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800170e:	201b      	movs	r0, #27
 8001710:	f000 f910 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001714:	20b6      	movs	r0, #182	; 0xb6
 8001716:	f000 f900 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800171a:	200a      	movs	r0, #10
 800171c:	f000 f90a 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001720:	20a2      	movs	r0, #162	; 0xa2
 8001722:	f000 f907 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001726:	20c0      	movs	r0, #192	; 0xc0
 8001728:	f000 f8f7 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800172c:	2010      	movs	r0, #16
 800172e:	f000 f901 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001732:	20c1      	movs	r0, #193	; 0xc1
 8001734:	f000 f8f1 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001738:	2010      	movs	r0, #16
 800173a:	f000 f8fb 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800173e:	20c5      	movs	r0, #197	; 0xc5
 8001740:	f000 f8eb 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001744:	2045      	movs	r0, #69	; 0x45
 8001746:	f000 f8f5 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800174a:	2015      	movs	r0, #21
 800174c:	f000 f8f2 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001750:	20c7      	movs	r0, #199	; 0xc7
 8001752:	f000 f8e2 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001756:	2090      	movs	r0, #144	; 0x90
 8001758:	f000 f8ec 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800175c:	2036      	movs	r0, #54	; 0x36
 800175e:	f000 f8dc 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001762:	20c8      	movs	r0, #200	; 0xc8
 8001764:	f000 f8e6 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001768:	20f2      	movs	r0, #242	; 0xf2
 800176a:	f000 f8d6 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f8e0 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001774:	20b0      	movs	r0, #176	; 0xb0
 8001776:	f000 f8d0 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800177a:	20c2      	movs	r0, #194	; 0xc2
 800177c:	f000 f8da 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001780:	20b6      	movs	r0, #182	; 0xb6
 8001782:	f000 f8ca 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001786:	200a      	movs	r0, #10
 8001788:	f000 f8d4 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800178c:	20a7      	movs	r0, #167	; 0xa7
 800178e:	f000 f8d1 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001792:	2027      	movs	r0, #39	; 0x27
 8001794:	f000 f8ce 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001798:	2004      	movs	r0, #4
 800179a:	f000 f8cb 	bl	8001934 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800179e:	202a      	movs	r0, #42	; 0x2a
 80017a0:	f000 f8bb 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f8c5 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f8c2 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f8bf 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80017b6:	20ef      	movs	r0, #239	; 0xef
 80017b8:	f000 f8bc 	bl	8001934 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80017bc:	202b      	movs	r0, #43	; 0x2b
 80017be:	f000 f8ac 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f8b6 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f8b3 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 f8b0 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80017d4:	203f      	movs	r0, #63	; 0x3f
 80017d6:	f000 f8ad 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80017da:	20f6      	movs	r0, #246	; 0xf6
 80017dc:	f000 f89d 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f000 f8a7 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f8a4 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80017ec:	2006      	movs	r0, #6
 80017ee:	f000 f8a1 	bl	8001934 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80017f2:	202c      	movs	r0, #44	; 0x2c
 80017f4:	f000 f891 	bl	800191a <ili9341_WriteReg>
  LCD_Delay(200);
 80017f8:	20c8      	movs	r0, #200	; 0xc8
 80017fa:	f000 fcf9 	bl	80021f0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80017fe:	2026      	movs	r0, #38	; 0x26
 8001800:	f000 f88b 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001804:	2001      	movs	r0, #1
 8001806:	f000 f895 	bl	8001934 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800180a:	20e0      	movs	r0, #224	; 0xe0
 800180c:	f000 f885 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001810:	200f      	movs	r0, #15
 8001812:	f000 f88f 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001816:	2029      	movs	r0, #41	; 0x29
 8001818:	f000 f88c 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800181c:	2024      	movs	r0, #36	; 0x24
 800181e:	f000 f889 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001822:	200c      	movs	r0, #12
 8001824:	f000 f886 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001828:	200e      	movs	r0, #14
 800182a:	f000 f883 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800182e:	2009      	movs	r0, #9
 8001830:	f000 f880 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001834:	204e      	movs	r0, #78	; 0x4e
 8001836:	f000 f87d 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800183a:	2078      	movs	r0, #120	; 0x78
 800183c:	f000 f87a 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001840:	203c      	movs	r0, #60	; 0x3c
 8001842:	f000 f877 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001846:	2009      	movs	r0, #9
 8001848:	f000 f874 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800184c:	2013      	movs	r0, #19
 800184e:	f000 f871 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001852:	2005      	movs	r0, #5
 8001854:	f000 f86e 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001858:	2017      	movs	r0, #23
 800185a:	f000 f86b 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800185e:	2011      	movs	r0, #17
 8001860:	f000 f868 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001864:	2000      	movs	r0, #0
 8001866:	f000 f865 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800186a:	20e1      	movs	r0, #225	; 0xe1
 800186c:	f000 f855 	bl	800191a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001870:	2000      	movs	r0, #0
 8001872:	f000 f85f 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001876:	2016      	movs	r0, #22
 8001878:	f000 f85c 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800187c:	201b      	movs	r0, #27
 800187e:	f000 f859 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001882:	2004      	movs	r0, #4
 8001884:	f000 f856 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001888:	2011      	movs	r0, #17
 800188a:	f000 f853 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800188e:	2007      	movs	r0, #7
 8001890:	f000 f850 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001894:	2031      	movs	r0, #49	; 0x31
 8001896:	f000 f84d 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800189a:	2033      	movs	r0, #51	; 0x33
 800189c:	f000 f84a 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80018a0:	2042      	movs	r0, #66	; 0x42
 80018a2:	f000 f847 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018a6:	2005      	movs	r0, #5
 80018a8:	f000 f844 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80018ac:	200c      	movs	r0, #12
 80018ae:	f000 f841 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80018b2:	200a      	movs	r0, #10
 80018b4:	f000 f83e 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80018b8:	2028      	movs	r0, #40	; 0x28
 80018ba:	f000 f83b 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80018be:	202f      	movs	r0, #47	; 0x2f
 80018c0:	f000 f838 	bl	8001934 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80018c4:	200f      	movs	r0, #15
 80018c6:	f000 f835 	bl	8001934 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80018ca:	2011      	movs	r0, #17
 80018cc:	f000 f825 	bl	800191a <ili9341_WriteReg>
  LCD_Delay(200);
 80018d0:	20c8      	movs	r0, #200	; 0xc8
 80018d2:	f000 fc8d 	bl	80021f0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80018d6:	2029      	movs	r0, #41	; 0x29
 80018d8:	f000 f81f 	bl	800191a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80018dc:	202c      	movs	r0, #44	; 0x2c
 80018de:	f000 f81c 	bl	800191a <ili9341_WriteReg>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80018ea:	f000 fb93 	bl	8002014 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80018ee:	2103      	movs	r1, #3
 80018f0:	20d3      	movs	r0, #211	; 0xd3
 80018f2:	f000 f82c 	bl	800194e <ili9341_ReadData>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b29b      	uxth	r3, r3
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}

080018fe <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001902:	2029      	movs	r0, #41	; 0x29
 8001904:	f000 f809 	bl	800191a <ili9341_WriteReg>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001910:	2028      	movs	r0, #40	; 0x28
 8001912:	f000 f802 	bl	800191a <ili9341_WriteReg>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}

0800191a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fc0e 	bl	8002148 <LCD_IO_WriteReg>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fbdf 	bl	8002104 <LCD_IO_WriteData>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	460a      	mov	r2, r1
 8001958:	80fb      	strh	r3, [r7, #6]
 800195a:	4613      	mov	r3, r2
 800195c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800195e:	797a      	ldrb	r2, [r7, #5]
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fc11 	bl	800218c <LCD_IO_ReadData>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001978:	23f0      	movs	r3, #240	; 0xf0
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001988:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80019a4:	f000 fc30 	bl	8002208 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80019ae:	f107 030f 	add.w	r3, r7, #15
 80019b2:	2201      	movs	r2, #1
 80019b4:	2120      	movs	r1, #32
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fc72 	bl	80022a0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80019c6:	f107 030f 	add.w	r3, r7, #15
 80019ca:	2201      	movs	r2, #1
 80019cc:	2123      	movs	r1, #35	; 0x23
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fc66 	bl	80022a0 <GYRO_IO_Write>
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80019f0:	f000 fc0a 	bl	8002208 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	2201      	movs	r2, #1
 80019f8:	210f      	movs	r1, #15
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fc82 	bl	8002304 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a10:	1dfb      	adds	r3, r7, #7
 8001a12:	2201      	movs	r2, #1
 8001a14:	2124      	movs	r1, #36	; 0x24
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fc74 	bl	8002304 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2124      	movs	r1, #36	; 0x24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fc37 	bl	80022a0 <GYRO_IO_Write>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001a4e:	f107 030f 	add.w	r3, r7, #15
 8001a52:	2201      	movs	r2, #1
 8001a54:	2120      	movs	r1, #32
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fc22 	bl	80022a0 <GYRO_IO_Write>
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	2300      	movs	r3, #0
 8001a74:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001a76:	f107 030f 	add.w	r3, r7, #15
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2130      	movs	r1, #48	; 0x30
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fc40 	bl	8002304 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001a84:	f107 030e 	add.w	r3, r7, #14
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2122      	movs	r1, #34	; 0x22
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 fc39 	bl	8002304 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	121b      	asrs	r3, r3, #8
 8001aa2:	b25a      	sxtb	r2, r3
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	f023 0320 	bic.w	r3, r3, #32
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001ac6:	f107 030f 	add.w	r3, r7, #15
 8001aca:	2201      	movs	r2, #1
 8001acc:	2130      	movs	r1, #48	; 0x30
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fbe6 	bl	80022a0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001ad4:	f107 030e 	add.w	r3, r7, #14
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2122      	movs	r1, #34	; 0x22
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fbdf 	bl	80022a0 <GYRO_IO_Write>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001af4:	f107 030f 	add.w	r3, r7, #15
 8001af8:	2201      	movs	r2, #1
 8001afa:	2122      	movs	r1, #34	; 0x22
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fc01 	bl	8002304 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10a      	bne.n	8001b1e <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e00c      	b.n	8001b38 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d109      	bne.n	8001b38 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	f023 0308 	bic.w	r3, r3, #8
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b38:	f107 030f 	add.w	r3, r7, #15
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2122      	movs	r1, #34	; 0x22
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fbad 	bl	80022a0 <GYRO_IO_Write>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b58:	f107 030f 	add.w	r3, r7, #15
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2122      	movs	r1, #34	; 0x22
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fbcf 	bl	8002304 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e009      	b.n	8001b90 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d106      	bne.n	8001b90 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f023 0308 	bic.w	r3, r3, #8
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b90:	f107 030f 	add.w	r3, r7, #15
 8001b94:	2201      	movs	r2, #1
 8001b96:	2122      	movs	r1, #34	; 0x22
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fb81 	bl	80022a0 <GYRO_IO_Write>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001bb0:	f107 030f 	add.w	r3, r7, #15
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2121      	movs	r1, #33	; 0x21
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fba3 	bl	8002304 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001bd2:	f107 030f 	add.w	r3, r7, #15
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2121      	movs	r1, #33	; 0x21
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fb60 	bl	80022a0 <GYRO_IO_Write>
}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001bf2:	f107 030f 	add.w	r3, r7, #15
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2124      	movs	r1, #36	; 0x24
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fb82 	bl	8002304 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	f023 0310 	bic.w	r3, r3, #16
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c14:	f107 030f 	add.w	r3, r7, #15
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2124      	movs	r1, #36	; 0x24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fb3f 	bl	80022a0 <GYRO_IO_Write>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001c54:	f107 030f 	add.w	r3, r7, #15
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2123      	movs	r1, #35	; 0x23
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fb51 	bl	8002304 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	2206      	movs	r2, #6
 8001c68:	2128      	movs	r1, #40	; 0x28
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fb4a 	bl	8002304 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d123      	bne.n	8001cc2 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	e01c      	b.n	8001cba <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	3301      	adds	r3, #1
 8001c86:	3328      	adds	r3, #40	; 0x28
 8001c88:	443b      	add	r3, r7
 8001c8a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	3328      	adds	r3, #40	; 0x28
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	3328      	adds	r3, #40	; 0x28
 8001cae:	443b      	add	r3, r7
 8001cb0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	dddf      	ble.n	8001c80 <L3GD20_ReadXYZAngRate+0x54>
 8001cc0:	e022      	b.n	8001d08 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	e01c      	b.n	8001d02 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	3328      	adds	r3, #40	; 0x28
 8001cce:	443b      	add	r3, r7
 8001cd0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	3301      	adds	r3, #1
 8001ce0:	3328      	adds	r3, #40	; 0x28
 8001ce2:	443b      	add	r3, r7
 8001ce4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	3328      	adds	r3, #40	; 0x28
 8001cf6:	443b      	add	r3, r7
 8001cf8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	623b      	str	r3, [r7, #32]
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	dddf      	ble.n	8001cc8 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d00c      	beq.n	8001d2c <L3GD20_ReadXYZAngRate+0x100>
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	dc0d      	bgt.n	8001d32 <L3GD20_ReadXYZAngRate+0x106>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <L3GD20_ReadXYZAngRate+0xf4>
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d003      	beq.n	8001d26 <L3GD20_ReadXYZAngRate+0xfa>
 8001d1e:	e008      	b.n	8001d32 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS; //0.00875
 8001d20:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <L3GD20_ReadXYZAngRate+0x21c>)
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d24:	e005      	b.n	8001d32 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS; //0.0175
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <L3GD20_ReadXYZAngRate+0x220>)
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d2a:	e002      	b.n	8001d32 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS; //0.07
 8001d2c:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <L3GD20_ReadXYZAngRate+0x224>)
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d30:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i= 0; i<3; i++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	e07d      	b.n	8001e34 <L3GD20_ReadXYZAngRate+0x208>
  {
    pfData[i] = (float)(RawData[i] * sensitivity) / 1000;
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	3328      	adds	r3, #40	; 0x28
 8001d3e:	443b      	add	r3, r7
 8001d40:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001e54 <L3GD20_ReadXYZAngRate+0x228>
 8001d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d64:	edc3 7a00 	vstr	s15, [r3]
    if((pfData[i] < 1 && pfData[i] > 0) || (pfData[i] > -1 && pfData[i] < 0))
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d50a      	bpl.n	8001d98 <L3GD20_ReadXYZAngRate+0x16c>
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	dc17      	bgt.n	8001dc8 <L3GD20_ReadXYZAngRate+0x19c>
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	dd12      	ble.n	8001dd8 <L3GD20_ReadXYZAngRate+0x1ac>
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	d507      	bpl.n	8001dd8 <L3GD20_ReadXYZAngRate+0x1ac>
    {
    	pfData[i] = 0;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e027      	b.n	8001e28 <L3GD20_ReadXYZAngRate+0x1fc>
    }
    else if (pfData[i] >= 1 && pfData[i] <= -1)
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	db1a      	blt.n	8001e28 <L3GD20_ReadXYZAngRate+0x1fc>
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	d80d      	bhi.n	8001e28 <L3GD20_ReadXYZAngRate+0x1fc>
    {
    	pfData[i] += pfData[i];
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e24:	edc3 7a00 	vstr	s15, [r3]
    }
    HAL_Delay(200);
 8001e28:	20c8      	movs	r0, #200	; 0xc8
 8001e2a:	f001 fc49 	bl	80036c0 <HAL_Delay>
  for(i= 0; i<3; i++)
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	3301      	adds	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	f77f af7e 	ble.w	8001d38 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	410c0000 	.word	0x410c0000
 8001e4c:	418c0000 	.word	0x418c0000
 8001e50:	428c0000 	.word	0x428c0000
 8001e54:	447a0000 	.word	0x447a0000

08001e58 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001e5c:	4819      	ldr	r0, [pc, #100]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e5e:	f005 feab 	bl	8007bb8 <HAL_SPI_GetState>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d12b      	bne.n	8001ec0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <SPIx_Init+0x70>)
 8001e6c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e70:	2218      	movs	r2, #24
 8001e72:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e8e:	2207      	movs	r2, #7
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <SPIx_Init+0x6c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <SPIx_Init+0x6c>)
 8001ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <SPIx_Init+0x6c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SPIx_Init+0x6c>)
 8001eae:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001eb4:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <SPIx_Init+0x6c>)
 8001eb6:	f000 f873 	bl	8001fa0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001eba:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <SPIx_Init+0x6c>)
 8001ebc:	f005 f8d1 	bl	8007062 <HAL_SPI_Init>
  } 
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000053c 	.word	0x2000053c
 8001ec8:	40015000 	.word	0x40015000

08001ecc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <SPIx_Read+0x38>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f107 0108 	add.w	r1, r7, #8
 8001ee6:	4808      	ldr	r0, [pc, #32]	; (8001f08 <SPIx_Read+0x3c>)
 8001ee8:	f005 faa8 	bl	800743c <HAL_SPI_Receive>
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001ef6:	f000 f847 	bl	8001f88 <SPIx_Error>
  }
  
  return readvalue;
 8001efa:	68bb      	ldr	r3, [r7, #8]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200000a4 	.word	0x200000a4
 8001f08:	2000053c 	.word	0x2000053c

08001f0c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <SPIx_Write+0x34>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1db9      	adds	r1, r7, #6
 8001f20:	2201      	movs	r2, #1
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <SPIx_Write+0x38>)
 8001f24:	f005 f94e 	bl	80071c4 <HAL_SPI_Transmit>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001f32:	f000 f829 	bl	8001f88 <SPIx_Error>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000a4 	.word	0x200000a4
 8001f44:	2000053c 	.word	0x2000053c

08001f48 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <SPIx_WriteRead+0x38>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f107 020f 	add.w	r2, r7, #15
 8001f5e:	1df9      	adds	r1, r7, #7
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <SPIx_WriteRead+0x3c>)
 8001f66:	f005 fb7a 	bl	800765e <HAL_SPI_TransmitReceive>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001f70:	f000 f80a 	bl	8001f88 <SPIx_Error>
  }
  
  return receivedbyte;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200000a4 	.word	0x200000a4
 8001f84:	2000053c 	.word	0x2000053c

08001f88 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <SPIx_Error+0x14>)
 8001f8e:	f005 f8f1 	bl	8007174 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001f92:	f7ff ff61 	bl	8001e58 <SPIx_Init>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000053c 	.word	0x2000053c

08001fa0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <SPIx_MspInit+0x6c>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4a16      	ldr	r2, [pc, #88]	; (800200c <SPIx_MspInit+0x6c>)
 8001fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <SPIx_MspInit+0x6c>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <SPIx_MspInit+0x6c>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	; (800200c <SPIx_MspInit+0x6c>)
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <SPIx_MspInit+0x6c>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001fe0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <SPIx_MspInit+0x70>)
 8001ffe:	f002 f93d 	bl	800427c <HAL_GPIO_Init>
}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40021400 	.word	0x40021400

08002014 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800201a:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <LCD_IO_Init+0xe0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d164      	bne.n	80020ec <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <LCD_IO_Init+0xe0>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <LCD_IO_Init+0xe4>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a31      	ldr	r2, [pc, #196]	; (80020f8 <LCD_IO_Init+0xe4>)
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <LCD_IO_Init+0xe4>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002048:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800204a:	2301      	movs	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002052:	2302      	movs	r3, #2
 8002054:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	4619      	mov	r1, r3
 800205c:	4827      	ldr	r0, [pc, #156]	; (80020fc <LCD_IO_Init+0xe8>)
 800205e:	f002 f90d 	bl	800427c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <LCD_IO_Init+0xe4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <LCD_IO_Init+0xe4>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <LCD_IO_Init+0xe4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800208c:	2302      	movs	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4619      	mov	r1, r3
 8002096:	4819      	ldr	r0, [pc, #100]	; (80020fc <LCD_IO_Init+0xe8>)
 8002098:	f002 f8f0 	bl	800427c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <LCD_IO_Init+0xe4>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <LCD_IO_Init+0xe4>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <LCD_IO_Init+0xe4>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80020b8:	2304      	movs	r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4619      	mov	r1, r3
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <LCD_IO_Init+0xec>)
 80020d0:	f002 f8d4 	bl	800427c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80020d4:	2200      	movs	r2, #0
 80020d6:	2104      	movs	r1, #4
 80020d8:	4809      	ldr	r0, [pc, #36]	; (8002100 <LCD_IO_Init+0xec>)
 80020da:	f002 fb87 	bl	80047ec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80020de:	2201      	movs	r2, #1
 80020e0:	2104      	movs	r1, #4
 80020e2:	4807      	ldr	r0, [pc, #28]	; (8002100 <LCD_IO_Init+0xec>)
 80020e4:	f002 fb82 	bl	80047ec <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80020e8:	f7ff feb6 	bl	8001e58 <SPIx_Init>
  }
}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000594 	.word	0x20000594
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40020800 	.word	0x40020800

08002104 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002114:	480a      	ldr	r0, [pc, #40]	; (8002140 <LCD_IO_WriteData+0x3c>)
 8002116:	f002 fb69 	bl	80047ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	4809      	ldr	r0, [pc, #36]	; (8002144 <LCD_IO_WriteData+0x40>)
 8002120:	f002 fb64 	bl	80047ec <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fef0 	bl	8001f0c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800212c:	2201      	movs	r2, #1
 800212e:	2104      	movs	r1, #4
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <LCD_IO_WriteData+0x40>)
 8002132:	f002 fb5b 	bl	80047ec <HAL_GPIO_WritePin>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40020800 	.word	0x40020800

08002148 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002152:	2200      	movs	r2, #0
 8002154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002158:	480a      	ldr	r0, [pc, #40]	; (8002184 <LCD_IO_WriteReg+0x3c>)
 800215a:	f002 fb47 	bl	80047ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800215e:	2200      	movs	r2, #0
 8002160:	2104      	movs	r1, #4
 8002162:	4809      	ldr	r0, [pc, #36]	; (8002188 <LCD_IO_WriteReg+0x40>)
 8002164:	f002 fb42 	bl	80047ec <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	b29b      	uxth	r3, r3
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fecd 	bl	8001f0c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002172:	2201      	movs	r2, #1
 8002174:	2104      	movs	r1, #4
 8002176:	4804      	ldr	r0, [pc, #16]	; (8002188 <LCD_IO_WriteReg+0x40>)
 8002178:	f002 fb38 	bl	80047ec <HAL_GPIO_WritePin>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020c00 	.word	0x40020c00
 8002188:	40020800 	.word	0x40020800

0800218c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	460a      	mov	r2, r1
 8002196:	80fb      	strh	r3, [r7, #6]
 8002198:	4613      	mov	r3, r2
 800219a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80021a0:	2200      	movs	r2, #0
 80021a2:	2104      	movs	r1, #4
 80021a4:	4810      	ldr	r0, [pc, #64]	; (80021e8 <LCD_IO_ReadData+0x5c>)
 80021a6:	f002 fb21 	bl	80047ec <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b0:	480e      	ldr	r0, [pc, #56]	; (80021ec <LCD_IO_ReadData+0x60>)
 80021b2:	f002 fb1b 	bl	80047ec <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fea7 	bl	8001f0c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80021be:	797b      	ldrb	r3, [r7, #5]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe83 	bl	8001ecc <SPIx_Read>
 80021c6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021c8:	2201      	movs	r2, #1
 80021ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ce:	4807      	ldr	r0, [pc, #28]	; (80021ec <LCD_IO_ReadData+0x60>)
 80021d0:	f002 fb0c 	bl	80047ec <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021d4:	2201      	movs	r2, #1
 80021d6:	2104      	movs	r1, #4
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <LCD_IO_ReadData+0x5c>)
 80021da:	f002 fb07 	bl	80047ec <HAL_GPIO_WritePin>
  
  return readvalue;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00

080021f0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 fa61 	bl	80036c0 <HAL_Delay>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <GYRO_IO_Init+0x8c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <GYRO_IO_Init+0x8c>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <GYRO_IO_Init+0x8c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800222a:	2302      	movs	r3, #2
 800222c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002236:	2301      	movs	r3, #1
 8002238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4815      	ldr	r0, [pc, #84]	; (8002298 <GYRO_IO_Init+0x90>)
 8002242:	f002 f81b 	bl	800427c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002246:	2201      	movs	r2, #1
 8002248:	2102      	movs	r1, #2
 800224a:	4813      	ldr	r0, [pc, #76]	; (8002298 <GYRO_IO_Init+0x90>)
 800224c:	f002 face 	bl	80047ec <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <GYRO_IO_Init+0x8c>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <GYRO_IO_Init+0x8c>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6313      	str	r3, [r2, #48]	; 0x30
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <GYRO_IO_Init+0x8c>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800226c:	2306      	movs	r3, #6
 800226e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	4619      	mov	r1, r3
 8002282:	4806      	ldr	r0, [pc, #24]	; (800229c <GYRO_IO_Init+0x94>)
 8002284:	f001 fffa 	bl	800427c <HAL_GPIO_Init>

  SPIx_Init();
 8002288:	f7ff fde6 	bl	8001e58 <SPIx_Init>
}
 800228c:	bf00      	nop
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	40020800 	.word	0x40020800
 800229c:	40020000 	.word	0x40020000

080022a0 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
 80022ac:	4613      	mov	r3, r2
 80022ae:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80022b0:	883b      	ldrh	r3, [r7, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d903      	bls.n	80022be <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022bc:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80022be:	2200      	movs	r2, #0
 80022c0:	2102      	movs	r1, #2
 80022c2:	480f      	ldr	r0, [pc, #60]	; (8002300 <GYRO_IO_Write+0x60>)
 80022c4:	f002 fa92 	bl	80047ec <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fe3c 	bl	8001f48 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80022d0:	e00a      	b.n	80022e8 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fe36 	bl	8001f48 <SPIx_WriteRead>
    NumByteToWrite--;
 80022dc:	883b      	ldrh	r3, [r7, #0]
 80022de:	3b01      	subs	r3, #1
 80022e0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3301      	adds	r3, #1
 80022e6:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80022e8:	883b      	ldrh	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f1      	bne.n	80022d2 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80022ee:	2201      	movs	r2, #1
 80022f0:	2102      	movs	r1, #2
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <GYRO_IO_Write+0x60>)
 80022f4:	f002 fa7a 	bl	80047ec <HAL_GPIO_WritePin>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40020800 	.word	0x40020800

08002304 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
 8002310:	4613      	mov	r3, r2
 8002312:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002314:	883b      	ldrh	r3, [r7, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d904      	bls.n	8002324 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002320:	70fb      	strb	r3, [r7, #3]
 8002322:	e003      	b.n	800232c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800232a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800232c:	2200      	movs	r2, #0
 800232e:	2102      	movs	r1, #2
 8002330:	4810      	ldr	r0, [pc, #64]	; (8002374 <GYRO_IO_Read+0x70>)
 8002332:	f002 fa5b 	bl	80047ec <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fe05 	bl	8001f48 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800233e:	e00c      	b.n	800235a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff fe01 	bl	8001f48 <SPIx_WriteRead>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800234e:	883b      	ldrh	r3, [r7, #0]
 8002350:	3b01      	subs	r3, #1
 8002352:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3301      	adds	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800235a:	883b      	ldrh	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ef      	bne.n	8002340 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002360:	2201      	movs	r2, #1
 8002362:	2102      	movs	r1, #2
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <GYRO_IO_Read+0x70>)
 8002366:	f002 fa41 	bl	80047ec <HAL_GPIO_WritePin>
}  
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40020800 	.word	0x40020800

08002378 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002382:	2300      	movs	r3, #0
 8002384:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002386:	2300      	movs	r3, #0
 8002388:	703b      	strb	r3, [r7, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <BSP_GYRO_Init+0xc4>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4798      	blx	r3
 8002394:	4603      	mov	r3, r0
 8002396:	2bd4      	cmp	r3, #212	; 0xd4
 8002398:	d005      	beq.n	80023a6 <BSP_GYRO_Init+0x2e>
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <BSP_GYRO_Init+0xc4>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4798      	blx	r3
 80023a0:	4603      	mov	r3, r0
 80023a2:	2bd5      	cmp	r3, #213	; 0xd5
 80023a4:	d145      	bne.n	8002432 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <BSP_GYRO_Init+0xc8>)
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <BSP_GYRO_Init+0xc4>)
 80023aa:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80023ac:	2308      	movs	r3, #8
 80023ae:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80023b4:	2307      	movs	r3, #7
 80023b6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80023b8:	2330      	movs	r3, #48	; 0x30
 80023ba:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80023bc:	2300      	movs	r3, #0
 80023be:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80023c0:	2300      	movs	r3, #0
 80023c2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80023c4:	2310      	movs	r3, #16
 80023c6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80023c8:	793a      	ldrb	r2, [r7, #4]
 80023ca:	797b      	ldrb	r3, [r7, #5]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80023d0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80023d2:	4313      	orrs	r3, r2
 80023d4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80023d6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80023d8:	4313      	orrs	r3, r2
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80023de:	7a3a      	ldrb	r2, [r7, #8]
 80023e0:	7a7b      	ldrb	r3, [r7, #9]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80023e6:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	89bb      	ldrh	r3, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <BSP_GYRO_Init+0xc8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	89ba      	ldrh	r2, [r7, #12]
 8002400:	4610      	mov	r0, r2
 8002402:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002404:	2300      	movs	r3, #0
 8002406:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002408:	2300      	movs	r3, #0
 800240a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800240c:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800240e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002410:	4313      	orrs	r3, r2
 8002412:	b2db      	uxtb	r3, r3
 8002414:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <BSP_GYRO_Init+0xc8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	89ba      	ldrh	r2, [r7, #12]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	4610      	mov	r0, r2
 8002422:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <BSP_GYRO_Init+0xc8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	2010      	movs	r0, #16
 800242c:	4798      	blx	r3

    ret = GYRO_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000070 	.word	0x20000070
 8002440:	20000598 	.word	0x20000598

08002444 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <BSP_LCD_Init+0xbc>)
 800244a:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <BSP_LCD_Init+0xc0>)
 800244c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002450:	2209      	movs	r2, #9
 8002452:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002456:	2201      	movs	r2, #1
 8002458:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <BSP_LCD_Init+0xbc>)
 800245c:	221d      	movs	r2, #29
 800245e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002462:	2203      	movs	r2, #3
 8002464:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002468:	f240 120d 	movw	r2, #269	; 0x10d
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002470:	f240 1243 	movw	r2, #323	; 0x143
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002478:	f240 1217 	movw	r2, #279	; 0x117
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002480:	f240 1247 	movw	r2, #327	; 0x147
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <BSP_LCD_Init+0xbc>)
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <BSP_LCD_Init+0xc4>)
 80024a0:	2208      	movs	r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <BSP_LCD_Init+0xc4>)
 80024a6:	22c0      	movs	r2, #192	; 0xc0
 80024a8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <BSP_LCD_Init+0xc4>)
 80024ac:	2204      	movs	r2, #4
 80024ae:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <BSP_LCD_Init+0xc4>)
 80024b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80024b8:	4813      	ldr	r0, [pc, #76]	; (8002508 <BSP_LCD_Init+0xc4>)
 80024ba:	f004 fb77 	bl	8006bac <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <BSP_LCD_Init+0xbc>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <BSP_LCD_Init+0xbc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <BSP_LCD_Init+0xbc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <BSP_LCD_Init+0xbc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80024d6:	f000 fcc9 	bl	8002e6c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <BSP_LCD_Init+0xbc>)
 80024dc:	f002 f9a0 	bl	8004820 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <BSP_LCD_Init+0xc8>)
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <BSP_LCD_Init+0xcc>)
 80024e4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <BSP_LCD_Init+0xc8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80024ee:	f000 feab 	bl	8003248 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80024f2:	4808      	ldr	r0, [pc, #32]	; (8002514 <BSP_LCD_Init+0xd0>)
 80024f4:	f000 f8ce 	bl	8002694 <BSP_LCD_SetFont>

  return LCD_OK;
 80024f8:	2300      	movs	r3, #0
}  
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000059c 	.word	0x2000059c
 8002504:	40016800 	.word	0x40016800
 8002508:	20000684 	.word	0x20000684
 800250c:	200006d0 	.word	0x200006d0
 8002510:	20000038 	.word	0x20000038
 8002514:	200000a8 	.word	0x200000a8

08002518 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <BSP_LCD_GetXSize+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	4798      	blx	r3
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200006d0 	.word	0x200006d0

08002530 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <BSP_LCD_GetYSize+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	4798      	blx	r3
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200006d0 	.word	0x200006d0

08002548 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002548:	b580      	push	{r7, lr}
 800254a:	b090      	sub	sp, #64	; 0x40
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002558:	f7ff ffde 	bl	8002518 <BSP_LCD_GetXSize>
 800255c:	4603      	mov	r3, r0
 800255e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002564:	f7ff ffe4 	bl	8002530 <BSP_LCD_GetYSize>
 8002568:	4603      	mov	r3, r0
 800256a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002574:	23ff      	movs	r3, #255	; 0xff
 8002576:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800258e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002594:	2307      	movs	r3, #7
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002598:	f7ff ffbe 	bl	8002518 <BSP_LCD_GetXSize>
 800259c:	4603      	mov	r3, r0
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80025a0:	f7ff ffc6 	bl	8002530 <BSP_LCD_GetYSize>
 80025a4:	4603      	mov	r3, r0
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	4619      	mov	r1, r3
 80025b0:	4814      	ldr	r0, [pc, #80]	; (8002604 <BSP_LCD_LayerDefaultInit+0xbc>)
 80025b2:	f002 fa0f 	bl	80049d4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	4913      	ldr	r1, [pc, #76]	; (8002608 <BSP_LCD_LayerDefaultInit+0xc0>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3304      	adds	r3, #4
 80025c6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font16;
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	490e      	ldr	r1, [pc, #56]	; (8002608 <BSP_LCD_LayerDefaultInit+0xc0>)
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3308      	adds	r3, #8
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <BSP_LCD_LayerDefaultInit+0xc4>)
 80025de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80025e0:	88fa      	ldrh	r2, [r7, #6]
 80025e2:	4909      	ldr	r1, [pc, #36]	; (8002608 <BSP_LCD_LayerDefaultInit+0xc0>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80025f2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <BSP_LCD_LayerDefaultInit+0xbc>)
 80025f6:	f002 fa2b 	bl	8004a50 <HAL_LTDC_EnableDither>
}
 80025fa:	bf00      	nop
 80025fc:	3740      	adds	r7, #64	; 0x40
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000059c 	.word	0x2000059c
 8002608:	200006b8 	.word	0x200006b8
 800260c:	200000b0 	.word	0x200000b0

08002610 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <BSP_LCD_SelectLayer+0x1c>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200006b4 	.word	0x200006b4

08002630 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <BSP_LCD_SetTextColor+0x28>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <BSP_LCD_SetTextColor+0x2c>)
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	601a      	str	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	200006b4 	.word	0x200006b4
 800265c:	200006b8 	.word	0x200006b8

08002660 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <BSP_LCD_SetBackColor+0x2c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4908      	ldr	r1, [pc, #32]	; (8002690 <BSP_LCD_SetBackColor+0x30>)
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3304      	adds	r3, #4
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200006b4 	.word	0x200006b4
 8002690:	200006b8 	.word	0x200006b8

08002694 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <BSP_LCD_SetFont+0x2c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4908      	ldr	r1, [pc, #32]	; (80026c4 <BSP_LCD_SetFont+0x30>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3308      	adds	r3, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	200006b4 	.word	0x200006b4
 80026c4:	200006b8 	.word	0x200006b8

080026c8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <BSP_LCD_GetFont+0x24>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <BSP_LCD_GetFont+0x28>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3308      	adds	r3, #8
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	200006b4 	.word	0x200006b4
 80026f0:	200006b8 	.word	0x200006b8

080026f4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <BSP_LCD_Clear+0x48>)
 80026fe:	681c      	ldr	r4, [r3, #0]
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <BSP_LCD_Clear+0x48>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <BSP_LCD_Clear+0x4c>)
 8002706:	2134      	movs	r1, #52	; 0x34
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	335c      	adds	r3, #92	; 0x5c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461e      	mov	r6, r3
 8002714:	f7ff ff00 	bl	8002518 <BSP_LCD_GetXSize>
 8002718:	4605      	mov	r5, r0
 800271a:	f7ff ff09 	bl	8002530 <BSP_LCD_GetYSize>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2300      	movs	r3, #0
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	462a      	mov	r2, r5
 800272c:	4631      	mov	r1, r6
 800272e:	4620      	mov	r0, r4
 8002730:	f000 fd52 	bl	80031d8 <FillBuffer>
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273c:	200006b4 	.word	0x200006b4
 8002740:	2000059c 	.word	0x2000059c

08002744 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	80fb      	strh	r3, [r7, #6]
 800274e:	460b      	mov	r3, r1
 8002750:	80bb      	strh	r3, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <BSP_LCD_DisplayChar+0x80>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	491b      	ldr	r1, [pc, #108]	; (80027c8 <BSP_LCD_DisplayChar+0x84>)
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3308      	adds	r3, #8
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <BSP_LCD_DisplayChar+0x80>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4c14      	ldr	r4, [pc, #80]	; (80027c8 <BSP_LCD_DisplayChar+0x84>)
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4423      	add	r3, r4
 8002782:	3308      	adds	r3, #8
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002788:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <BSP_LCD_DisplayChar+0x80>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4c0d      	ldr	r4, [pc, #52]	; (80027c8 <BSP_LCD_DisplayChar+0x84>)
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4423      	add	r3, r4
 800279c:	3308      	adds	r3, #8
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	889b      	ldrh	r3, [r3, #4]
 80027a2:	3307      	adds	r3, #7
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	da00      	bge.n	80027aa <BSP_LCD_DisplayChar+0x66>
 80027a8:	3307      	adds	r3, #7
 80027aa:	10db      	asrs	r3, r3, #3
 80027ac:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027b0:	18ca      	adds	r2, r1, r3
 80027b2:	88b9      	ldrh	r1, [r7, #4]
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fc54 	bl	8003064 <DrawChar>
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	200006b4 	.word	0x200006b4
 80027c8:	200006b8 	.word	0x200006b8

080027cc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60ba      	str	r2, [r7, #8]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4603      	mov	r3, r0
 80027d8:	81fb      	strh	r3, [r7, #14]
 80027da:	460b      	mov	r3, r1
 80027dc:	81bb      	strh	r3, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80027e2:	2301      	movs	r3, #1
 80027e4:	83fb      	strh	r3, [r7, #30]
 80027e6:	2300      	movs	r3, #0
 80027e8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80027f6:	e002      	b.n	80027fe <BSP_LCD_DisplayStringAt+0x32>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	3301      	adds	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	617a      	str	r2, [r7, #20]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f6      	bne.n	80027f8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800280a:	f7ff fe85 	bl	8002518 <BSP_LCD_GetXSize>
 800280e:	4601      	mov	r1, r0
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <BSP_LCD_DisplayStringAt+0x174>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	484b      	ldr	r0, [pc, #300]	; (8002944 <BSP_LCD_DisplayStringAt+0x178>)
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	3308      	adds	r3, #8
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	889b      	ldrh	r3, [r3, #4]
 8002826:	fbb1 f3f3 	udiv	r3, r1, r3
 800282a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d01c      	beq.n	800286c <BSP_LCD_DisplayStringAt+0xa0>
 8002832:	2b03      	cmp	r3, #3
 8002834:	dc33      	bgt.n	800289e <BSP_LCD_DisplayStringAt+0xd2>
 8002836:	2b01      	cmp	r3, #1
 8002838:	d002      	beq.n	8002840 <BSP_LCD_DisplayStringAt+0x74>
 800283a:	2b02      	cmp	r3, #2
 800283c:	d019      	beq.n	8002872 <BSP_LCD_DisplayStringAt+0xa6>
 800283e:	e02e      	b.n	800289e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	1ad1      	subs	r1, r2, r3
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <BSP_LCD_DisplayStringAt+0x174>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	483e      	ldr	r0, [pc, #248]	; (8002944 <BSP_LCD_DisplayStringAt+0x178>)
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4403      	add	r3, r0
 8002856:	3308      	adds	r3, #8
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	889b      	ldrh	r3, [r3, #4]
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	4413      	add	r3, r2
 8002868:	83fb      	strh	r3, [r7, #30]
      break;
 800286a:	e01b      	b.n	80028a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800286c:	89fb      	ldrh	r3, [r7, #14]
 800286e:	83fb      	strh	r3, [r7, #30]
      break;
 8002870:	e018      	b.n	80028a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	b299      	uxth	r1, r3
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <BSP_LCD_DisplayStringAt+0x174>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4831      	ldr	r0, [pc, #196]	; (8002944 <BSP_LCD_DisplayStringAt+0x178>)
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4403      	add	r3, r0
 800288a:	3308      	adds	r3, #8
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	889b      	ldrh	r3, [r3, #4]
 8002890:	fb11 f303 	smulbb	r3, r1, r3
 8002894:	b29a      	uxth	r2, r3
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	4413      	add	r3, r2
 800289a:	83fb      	strh	r3, [r7, #30]
      break;
 800289c:	e002      	b.n	80028a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800289e:	89fb      	ldrh	r3, [r7, #14]
 80028a0:	83fb      	strh	r3, [r7, #30]
      break;
 80028a2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80028a4:	e01a      	b.n	80028dc <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	89b9      	ldrh	r1, [r7, #12]
 80028ac:	8bfb      	ldrh	r3, [r7, #30]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff48 	bl	8002744 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <BSP_LCD_DisplayStringAt+0x174>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4922      	ldr	r1, [pc, #136]	; (8002944 <BSP_LCD_DisplayStringAt+0x178>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3308      	adds	r3, #8
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	889a      	ldrh	r2, [r3, #4]
 80028ca:	8bfb      	ldrh	r3, [r7, #30]
 80028cc:	4413      	add	r3, r2
 80028ce:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	3301      	adds	r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
    i++;
 80028d6:	8bbb      	ldrh	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2dc      	uxtb	r4, r3
 80028ea:	f7ff fe15 	bl	8002518 <BSP_LCD_GetXSize>
 80028ee:	8bb9      	ldrh	r1, [r7, #28]
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <BSP_LCD_DisplayStringAt+0x174>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4d13      	ldr	r5, [pc, #76]	; (8002944 <BSP_LCD_DisplayStringAt+0x178>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	442b      	add	r3, r5
 8002900:	3308      	adds	r3, #8
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	889b      	ldrh	r3, [r3, #4]
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	1ac3      	subs	r3, r0, r3
 800290c:	b299      	uxth	r1, r3
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <BSP_LCD_DisplayStringAt+0x174>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	480c      	ldr	r0, [pc, #48]	; (8002944 <BSP_LCD_DisplayStringAt+0x178>)
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4403      	add	r3, r0
 800291e:	3308      	adds	r3, #8
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	889b      	ldrh	r3, [r3, #4]
 8002924:	4299      	cmp	r1, r3
 8002926:	bf2c      	ite	cs
 8002928:	2301      	movcs	r3, #1
 800292a:	2300      	movcc	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4023      	ands	r3, r4
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1b7      	bne.n	80028a6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	200006b4 	.word	0x200006b4
 8002944:	200006b8 	.word	0x200006b8

08002948 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002954:	f7ff feb8 	bl	80026c8 <BSP_LCD_GetFont>
 8002958:	4603      	mov	r3, r0
 800295a:	88db      	ldrh	r3, [r3, #6]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	fb12 f303 	smulbb	r3, r2, r3
 8002962:	b299      	uxth	r1, r3
 8002964:	2303      	movs	r3, #3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff ff2f 	bl	80027cc <BSP_LCD_DisplayStringAt>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b08b      	sub	sp, #44	; 0x2c
 800297c:	af00      	add	r7, sp, #0
 800297e:	4604      	mov	r4, r0
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	80fb      	strh	r3, [r7, #6]
 800298a:	4603      	mov	r3, r0
 800298c:	80bb      	strh	r3, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	807b      	strh	r3, [r7, #2]
 8002992:	4613      	mov	r3, r2
 8002994:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002996:	2300      	movs	r3, #0
 8002998:	823b      	strh	r3, [r7, #16]
 800299a:	2300      	movs	r3, #0
 800299c:	81fb      	strh	r3, [r7, #14]
 800299e:	2300      	movs	r3, #0
 80029a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029a2:	2300      	movs	r3, #0
 80029a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80029a6:	2300      	movs	r3, #0
 80029a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80029aa:	2300      	movs	r3, #0
 80029ac:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80029ae:	2300      	movs	r3, #0
 80029b0:	83fb      	strh	r3, [r7, #30]
 80029b2:	2300      	movs	r3, #0
 80029b4:	83bb      	strh	r3, [r7, #28]
 80029b6:	2300      	movs	r3, #0
 80029b8:	837b      	strh	r3, [r7, #26]
 80029ba:	2300      	movs	r3, #0
 80029bc:	833b      	strh	r3, [r7, #24]
 80029be:	2300      	movs	r3, #0
 80029c0:	82fb      	strh	r3, [r7, #22]
 80029c2:	2300      	movs	r3, #0
 80029c4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bfb8      	it	lt
 80029d4:	425b      	neglt	r3, r3
 80029d6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80029d8:	883a      	ldrh	r2, [r7, #0]
 80029da:	88bb      	ldrh	r3, [r7, #4]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bfb8      	it	lt
 80029e2:	425b      	neglt	r3, r3
 80029e4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80029ea:	88bb      	ldrh	r3, [r7, #4]
 80029ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d304      	bcc.n	8002a00 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	843b      	strh	r3, [r7, #32]
 80029fe:	e005      	b.n	8002a0c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a04:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0a:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002a0c:	883a      	ldrh	r2, [r7, #0]
 8002a0e:	88bb      	ldrh	r3, [r7, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d304      	bcc.n	8002a1e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	83bb      	strh	r3, [r7, #28]
 8002a1c:	e005      	b.n	8002a2a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a22:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a28:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002a2a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	db10      	blt.n	8002a58 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002a36:	2300      	movs	r3, #0
 8002a38:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002a3e:	8a3b      	ldrh	r3, [r7, #16]
 8002a40:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002a42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a46:	0fda      	lsrs	r2, r3, #31
 8002a48:	4413      	add	r3, r2
 8002a4a:	105b      	asrs	r3, r3, #1
 8002a4c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002a52:	8a3b      	ldrh	r3, [r7, #16]
 8002a54:	82bb      	strh	r3, [r7, #20]
 8002a56:	e00f      	b.n	8002a78 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002a58:	2300      	movs	r3, #0
 8002a5a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002a64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a68:	0fda      	lsrs	r2, r3, #31
 8002a6a:	4413      	add	r3, r2
 8002a6c:	105b      	asrs	r3, r3, #1
 8002a6e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002a70:	8a3b      	ldrh	r3, [r7, #16]
 8002a72:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	827b      	strh	r3, [r7, #18]
 8002a7c:	e037      	b.n	8002aee <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002a7e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002a80:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <BSP_LCD_DrawLine+0x18c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4c20      	ldr	r4, [pc, #128]	; (8002b08 <BSP_LCD_DrawLine+0x190>)
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4423      	add	r3, r4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	f000 fabf 	bl	8003018 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002a9a:	8b3a      	ldrh	r2, [r7, #24]
 8002a9c:	8afb      	ldrh	r3, [r7, #22]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002aa4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002aa8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	db0e      	blt.n	8002ace <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002ab0:	8b3a      	ldrh	r2, [r7, #24]
 8002ab2:	8b7b      	ldrh	r3, [r7, #26]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002aba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002abe:	4413      	add	r3, r2
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002ac4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ac6:	8bfb      	ldrh	r3, [r7, #30]
 8002ac8:	4413      	add	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002ace:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ad0:	8c3b      	ldrh	r3, [r7, #32]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002ad8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ada:	8bbb      	ldrh	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002ae2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	827b      	strh	r3, [r7, #18]
 8002aee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002af2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	ddc1      	ble.n	8002a7e <BSP_LCD_DrawLine+0x106>
  }
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	372c      	adds	r7, #44	; 0x2c
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd90      	pop	{r4, r7, pc}
 8002b04:	200006b4 	.word	0x200006b4
 8002b08:	200006b8 	.word	0x200006b8

08002b0c <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{ 
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b08b      	sub	sp, #44	; 0x2c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4604      	mov	r4, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	80fb      	strh	r3, [r7, #6]
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80bb      	strh	r3, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	807b      	strh	r3, [r7, #2]
 8002b26:	4613      	mov	r3, r2
 8002b28:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	823b      	strh	r3, [r7, #16]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	81fb      	strh	r3, [r7, #14]
 8002b32:	2300      	movs	r3, #0
 8002b34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b36:	2300      	movs	r3, #0
 8002b38:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b3e:	2300      	movs	r3, #0
 8002b40:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002b42:	2300      	movs	r3, #0
 8002b44:	83fb      	strh	r3, [r7, #30]
 8002b46:	2300      	movs	r3, #0
 8002b48:	83bb      	strh	r3, [r7, #28]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	837b      	strh	r3, [r7, #26]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	833b      	strh	r3, [r7, #24]
 8002b52:	2300      	movs	r3, #0
 8002b54:	82fb      	strh	r3, [r7, #22]
 8002b56:	2300      	movs	r3, #0
 8002b58:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002b5e:	88ba      	ldrh	r2, [r7, #4]
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bfb8      	it	lt
 8002b68:	425b      	neglt	r3, r3
 8002b6a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002b6c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002b6e:	883b      	ldrh	r3, [r7, #0]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bfb8      	it	lt
 8002b76:	425b      	neglt	r3, r3
 8002b78:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002b7e:	883b      	ldrh	r3, [r7, #0]
 8002b80:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002b82:	88ba      	ldrh	r2, [r7, #4]
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d304      	bcc.n	8002b94 <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	843b      	strh	r3, [r7, #32]
 8002b92:	e005      	b.n	8002ba0 <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b98:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9e:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002ba0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002ba2:	883b      	ldrh	r3, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d304      	bcc.n	8002bb2 <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	83bb      	strh	r3, [r7, #28]
 8002bb0:	e005      	b.n	8002bbe <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bbc:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002bbe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	db10      	blt.n	8002bec <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002bca:	2300      	movs	r3, #0
 8002bcc:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002bce:	2300      	movs	r3, #0
 8002bd0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002bd2:	8a3b      	ldrh	r3, [r7, #16]
 8002bd4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002bd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bda:	0fda      	lsrs	r2, r3, #31
 8002bdc:	4413      	add	r3, r2
 8002bde:	105b      	asrs	r3, r3, #1
 8002be0:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002be2:	89fb      	ldrh	r3, [r7, #14]
 8002be4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002be6:	8a3b      	ldrh	r3, [r7, #16]
 8002be8:	82bb      	strh	r3, [r7, #20]
 8002bea:	e00f      	b.n	8002c0c <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002bec:	2300      	movs	r3, #0
 8002bee:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfc:	0fda      	lsrs	r2, r3, #31
 8002bfe:	4413      	add	r3, r2
 8002c00:	105b      	asrs	r3, r3, #1
 8002c02:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002c04:	8a3b      	ldrh	r3, [r7, #16]
 8002c06:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	827b      	strh	r3, [r7, #18]
 8002c10:	e02f      	b.n	8002c72 <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 8002c12:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002c14:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002c16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002c18:	887a      	ldrh	r2, [r7, #2]
 8002c1a:	f7ff fead 	bl	8002978 <BSP_LCD_DrawLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002c1e:	8b3a      	ldrh	r2, [r7, #24]
 8002c20:	8afb      	ldrh	r3, [r7, #22]
 8002c22:	4413      	add	r3, r2
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002c28:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c2c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	db0e      	blt.n	8002c52 <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8002c34:	8b3a      	ldrh	r2, [r7, #24]
 8002c36:	8b7b      	ldrh	r3, [r7, #26]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8002c3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c42:	4413      	add	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c4a:	8bfb      	ldrh	r3, [r7, #30]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8002c52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c54:	8c3b      	ldrh	r3, [r7, #32]
 8002c56:	4413      	add	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c5e:	8bbb      	ldrh	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	827b      	strh	r3, [r7, #18]
 8002c72:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	ddc9      	ble.n	8002c12 <BSP_LCD_FillTriangle+0x106>
  } 
}
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
 8002c82:	372c      	adds	r7, #44	; 0x2c
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <BSP_LCD_FillPolygon>:
  * @brief  Displays a full poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
  
  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	833b      	strh	r3, [r7, #24]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	82fb      	strh	r3, [r7, #22]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	82bb      	strh	r3, [r7, #20]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	827b      	strh	r3, [r7, #18]
 8002cac:	2300      	movs	r3, #0
 8002cae:	823b      	strh	r3, [r7, #16]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	81fb      	strh	r3, [r7, #14]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	81bb      	strh	r3, [r7, #12]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  imageleft = 0, imageright = 0, imagetop = 0, imagebottom = 0;  
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	843b      	strh	r3, [r7, #32]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	83fb      	strh	r3, [r7, #30]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	83bb      	strh	r3, [r7, #28]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	837b      	strh	r3, [r7, #26]

  imageleft = imageright = Points->X;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd6:	83fb      	strh	r3, [r7, #30]
 8002cd8:	8bfb      	ldrh	r3, [r7, #30]
 8002cda:	843b      	strh	r3, [r7, #32]
  imagetop= imagebottom = Points->Y;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ce2:	837b      	strh	r3, [r7, #26]
 8002ce4:	8b7b      	ldrh	r3, [r7, #26]
 8002ce6:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8002ce8:	2301      	movs	r3, #1
 8002cea:	847b      	strh	r3, [r7, #34]	; 0x22
 8002cec:	e02f      	b.n	8002d4e <BSP_LCD_FillPolygon+0xc6>
  {
    pixelx = POLY_X(counter);
 8002cee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	81bb      	strh	r3, [r7, #12]
    if(pixelx < imageleft)
 8002cfc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d00:	8c3b      	ldrh	r3, [r7, #32]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	da01      	bge.n	8002d0a <BSP_LCD_FillPolygon+0x82>
    {
      imageleft = pixelx;
 8002d06:	89bb      	ldrh	r3, [r7, #12]
 8002d08:	843b      	strh	r3, [r7, #32]
    }
    if(pixelx > imageright)
 8002d0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d0e:	8bfb      	ldrh	r3, [r7, #30]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	dd01      	ble.n	8002d18 <BSP_LCD_FillPolygon+0x90>
    {
      imageright = pixelx;
 8002d14:	89bb      	ldrh	r3, [r7, #12]
 8002d16:	83fb      	strh	r3, [r7, #30]
    }

    pixely = POLY_Y(counter);
 8002d18:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	885b      	ldrh	r3, [r3, #2]
 8002d24:	817b      	strh	r3, [r7, #10]
    if(pixely < imagetop)
 8002d26:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d2a:	8bbb      	ldrh	r3, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	da01      	bge.n	8002d34 <BSP_LCD_FillPolygon+0xac>
    { 
      imagetop = pixely;
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	83bb      	strh	r3, [r7, #28]
    }
    if(pixely > imagebottom)
 8002d34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d38:	8b7b      	ldrh	r3, [r7, #26]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dd01      	ble.n	8002d42 <BSP_LCD_FillPolygon+0xba>
    {
      imagebottom = pixely;
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8002d42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d4e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	dbca      	blt.n	8002cee <BSP_LCD_FillPolygon+0x66>
    }
  }  

  if(PointCount < 2)
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d972      	bls.n	8002e44 <BSP_LCD_FillPolygon+0x1bc>
  {
    return;
  }

  xcenter = (imageleft + imageright)/2;
 8002d5e:	8c3a      	ldrh	r2, [r7, #32]
 8002d60:	8bfb      	ldrh	r3, [r7, #30]
 8002d62:	4413      	add	r3, r2
 8002d64:	0fda      	lsrs	r2, r3, #31
 8002d66:	4413      	add	r3, r2
 8002d68:	105b      	asrs	r3, r3, #1
 8002d6a:	82bb      	strh	r3, [r7, #20]
  ycenter = (imagebottom + imagetop)/2;
 8002d6c:	8b7a      	ldrh	r2, [r7, #26]
 8002d6e:	8bbb      	ldrh	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	0fda      	lsrs	r2, r3, #31
 8002d74:	4413      	add	r3, r2
 8002d76:	105b      	asrs	r3, r3, #1
 8002d78:	827b      	strh	r3, [r7, #18]
 
  xfirst = Points->X;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	823b      	strh	r3, [r7, #16]
  yfirst = Points->Y;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	885b      	ldrh	r3, [r3, #2]
 8002d84:	81fb      	strh	r3, [r7, #14]

  while(--PointCount)
 8002d86:	e032      	b.n	8002dee <BSP_LCD_FillPolygon+0x166>
  {
    x = Points->X;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	833b      	strh	r3, [r7, #24]
    y = Points->Y;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	885b      	ldrh	r3, [r3, #2]
 8002d92:	82fb      	strh	r3, [r7, #22]
    Points++;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	607b      	str	r3, [r7, #4]
    x2 = Points->X;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y2 = Points->Y;    
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	885b      	ldrh	r3, [r3, #2]
 8002da4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002da6:	8b38      	ldrh	r0, [r7, #24]
 8002da8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002daa:	8abc      	ldrh	r4, [r7, #20]
 8002dac:	8afd      	ldrh	r5, [r7, #22]
 8002dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db0:	8a7a      	ldrh	r2, [r7, #18]
 8002db2:	9201      	str	r2, [sp, #4]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	462b      	mov	r3, r5
 8002db8:	4622      	mov	r2, r4
 8002dba:	f7ff fea7 	bl	8002b0c <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 8002dbe:	8b38      	ldrh	r0, [r7, #24]
 8002dc0:	8ab9      	ldrh	r1, [r7, #20]
 8002dc2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002dc4:	8afd      	ldrh	r5, [r7, #22]
 8002dc6:	8a7b      	ldrh	r3, [r7, #18]
 8002dc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dca:	9201      	str	r2, [sp, #4]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	462b      	mov	r3, r5
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	f7ff fe9b 	bl	8002b0c <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);   
 8002dd6:	8ab8      	ldrh	r0, [r7, #20]
 8002dd8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002dda:	8b3c      	ldrh	r4, [r7, #24]
 8002ddc:	8a7d      	ldrh	r5, [r7, #18]
 8002dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002de0:	8afa      	ldrh	r2, [r7, #22]
 8002de2:	9201      	str	r2, [sp, #4]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	462b      	mov	r3, r5
 8002de8:	4622      	mov	r2, r4
 8002dea:	f7ff fe8f 	bl	8002b0c <BSP_LCD_FillTriangle>
  while(--PointCount)
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1c6      	bne.n	8002d88 <BSP_LCD_FillPolygon+0x100>
  }
  
  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 8002dfa:	8a38      	ldrh	r0, [r7, #16]
 8002dfc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002dfe:	8abc      	ldrh	r4, [r7, #20]
 8002e00:	89fd      	ldrh	r5, [r7, #14]
 8002e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e04:	8a7a      	ldrh	r2, [r7, #18]
 8002e06:	9201      	str	r2, [sp, #4]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	462b      	mov	r3, r5
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	f7ff fe7d 	bl	8002b0c <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 8002e12:	8a38      	ldrh	r0, [r7, #16]
 8002e14:	8ab9      	ldrh	r1, [r7, #20]
 8002e16:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002e18:	89fd      	ldrh	r5, [r7, #14]
 8002e1a:	8a7b      	ldrh	r3, [r7, #18]
 8002e1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e1e:	9201      	str	r2, [sp, #4]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	462b      	mov	r3, r5
 8002e24:	4622      	mov	r2, r4
 8002e26:	f7ff fe71 	bl	8002b0c <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);   
 8002e2a:	8ab8      	ldrh	r0, [r7, #20]
 8002e2c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002e2e:	8a3c      	ldrh	r4, [r7, #16]
 8002e30:	8a7d      	ldrh	r5, [r7, #18]
 8002e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e34:	89fa      	ldrh	r2, [r7, #14]
 8002e36:	9201      	str	r2, [sp, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	f7ff fe65 	bl	8002b0c <BSP_LCD_FillTriangle>
 8002e42:	e000      	b.n	8002e46 <BSP_LCD_FillPolygon+0x1be>
    return;
 8002e44:	bf00      	nop
}
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bdb0      	pop	{r4, r5, r7, pc}

08002e4c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <BSP_LCD_DisplayOn+0x1c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002e5a:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <BSP_LCD_DisplayOn+0x1c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4798      	blx	r3
  }
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200006d0 	.word	0x200006d0

08002e6c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	; 0x38
 8002e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a60      	ldr	r2, [pc, #384]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a59      	ldr	r2, [pc, #356]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b57      	ldr	r3, [pc, #348]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a52      	ldr	r2, [pc, #328]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a44      	ldr	r2, [pc, #272]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a3d      	ldr	r2, [pc, #244]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a36      	ldr	r2, [pc, #216]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f24:	f043 0320 	orr.w	r3, r3, #32
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <BSP_LCD_MspInit+0x190>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002f52:	f641 0358 	movw	r3, #6232	; 0x1858
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002f60:	2302      	movs	r3, #2
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002f64:	230e      	movs	r3, #14
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4824      	ldr	r0, [pc, #144]	; (8003000 <BSP_LCD_MspInit+0x194>)
 8002f70:	f001 f984 	bl	800427c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002f74:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4820      	ldr	r0, [pc, #128]	; (8003004 <BSP_LCD_MspInit+0x198>)
 8002f82:	f001 f97b 	bl	800427c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002f86:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f90:	4619      	mov	r1, r3
 8002f92:	481d      	ldr	r0, [pc, #116]	; (8003008 <BSP_LCD_MspInit+0x19c>)
 8002f94:	f001 f972 	bl	800427c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002f98:	2348      	movs	r3, #72	; 0x48
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	481a      	ldr	r0, [pc, #104]	; (800300c <BSP_LCD_MspInit+0x1a0>)
 8002fa4:	f001 f96a 	bl	800427c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4816      	ldr	r0, [pc, #88]	; (8003010 <BSP_LCD_MspInit+0x1a4>)
 8002fb6:	f001 f961 	bl	800427c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002fba:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4813      	ldr	r0, [pc, #76]	; (8003014 <BSP_LCD_MspInit+0x1a8>)
 8002fc8:	f001 f958 	bl	800427c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002fd0:	2309      	movs	r3, #9
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	480a      	ldr	r0, [pc, #40]	; (8003004 <BSP_LCD_MspInit+0x198>)
 8002fdc:	f001 f94e 	bl	800427c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002fe0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fea:	4619      	mov	r1, r3
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <BSP_LCD_MspInit+0x1a8>)
 8002fee:	f001 f945 	bl	800427c <HAL_GPIO_Init>
}
 8002ff2:	bf00      	nop
 8002ff4:	3738      	adds	r7, #56	; 0x38
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400
 8003008:	40020800 	.word	0x40020800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40021400 	.word	0x40021400
 8003014:	40021800 	.word	0x40021800

08003018 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	603a      	str	r2, [r7, #0]
 8003022:	80fb      	strh	r3, [r7, #6]
 8003024:	460b      	mov	r3, r1
 8003026:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <BSP_LCD_DrawPixel+0x44>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <BSP_LCD_DrawPixel+0x48>)
 800302e:	2134      	movs	r1, #52	; 0x34
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	335c      	adds	r3, #92	; 0x5c
 8003038:	681c      	ldr	r4, [r3, #0]
 800303a:	88bd      	ldrh	r5, [r7, #4]
 800303c:	f7ff fa6c 	bl	8002518 <BSP_LCD_GetXSize>
 8003040:	4603      	mov	r3, r0
 8003042:	fb03 f205 	mul.w	r2, r3, r5
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4423      	add	r3, r4
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bdb0      	pop	{r4, r5, r7, pc}
 800305c:	200006b4 	.word	0x200006b4
 8003060:	2000059c 	.word	0x2000059c

08003064 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	603a      	str	r2, [r7, #0]
 800306e:	80fb      	strh	r3, [r7, #6]
 8003070:	460b      	mov	r3, r1
 8003072:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <DrawChar+0x16c>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4953      	ldr	r1, [pc, #332]	; (80031d4 <DrawChar+0x170>)
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3308      	adds	r3, #8
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	88db      	ldrh	r3, [r3, #6]
 8003096:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003098:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <DrawChar+0x16c>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	494d      	ldr	r1, [pc, #308]	; (80031d4 <DrawChar+0x170>)
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3308      	adds	r3, #8
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	889b      	ldrh	r3, [r3, #4]
 80030ae:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80030b0:	8a3b      	ldrh	r3, [r7, #16]
 80030b2:	3307      	adds	r3, #7
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da00      	bge.n	80030ba <DrawChar+0x56>
 80030b8:	3307      	adds	r3, #7
 80030ba:	10db      	asrs	r3, r3, #3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	8a3b      	ldrh	r3, [r7, #16]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e076      	b.n	80031be <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80030d0:	8a3b      	ldrh	r3, [r7, #16]
 80030d2:	3307      	adds	r3, #7
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da00      	bge.n	80030da <DrawChar+0x76>
 80030d8:	3307      	adds	r3, #7
 80030da:	10db      	asrs	r3, r3, #3
 80030dc:	461a      	mov	r2, r3
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80030ea:	8a3b      	ldrh	r3, [r7, #16]
 80030ec:	3307      	adds	r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da00      	bge.n	80030f4 <DrawChar+0x90>
 80030f2:	3307      	adds	r3, #7
 80030f4:	10db      	asrs	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d002      	beq.n	8003100 <DrawChar+0x9c>
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d004      	beq.n	8003108 <DrawChar+0xa4>
 80030fe:	e00c      	b.n	800311a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	e016      	b.n	8003136 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	3201      	adds	r2, #1
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
      break;
 8003118:	e00d      	b.n	8003136 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	041a      	lsls	r2, r3, #16
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3301      	adds	r3, #1
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	4313      	orrs	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	3202      	adds	r2, #2
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
      break;
 8003134:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	e036      	b.n	80031aa <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800313c:	8a3a      	ldrh	r2, [r7, #16]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	1ad2      	subs	r2, r2, r3
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	4413      	add	r3, r2
 8003146:	3b01      	subs	r3, #1
 8003148:	2201      	movs	r2, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	461a      	mov	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	b29a      	uxth	r2, r3
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	4413      	add	r3, r2
 8003160:	b298      	uxth	r0, r3
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <DrawChar+0x16c>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	491b      	ldr	r1, [pc, #108]	; (80031d4 <DrawChar+0x170>)
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	88bb      	ldrh	r3, [r7, #4]
 8003176:	4619      	mov	r1, r3
 8003178:	f7ff ff4e 	bl	8003018 <BSP_LCD_DrawPixel>
 800317c:	e012      	b.n	80031a4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	b29a      	uxth	r2, r3
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	4413      	add	r3, r2
 8003186:	b298      	uxth	r0, r3
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <DrawChar+0x16c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4911      	ldr	r1, [pc, #68]	; (80031d4 <DrawChar+0x170>)
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3304      	adds	r3, #4
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	88bb      	ldrh	r3, [r7, #4]
 800319e:	4619      	mov	r1, r3
 80031a0:	f7ff ff3a 	bl	8003018 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	3301      	adds	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	8a3b      	ldrh	r3, [r7, #16]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d3c4      	bcc.n	800313c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80031b2:	88bb      	ldrh	r3, [r7, #4]
 80031b4:	3301      	adds	r3, #1
 80031b6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	3301      	adds	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	8a7b      	ldrh	r3, [r7, #18]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d384      	bcc.n	80030d0 <DrawChar+0x6c>
  }
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	200006b4 	.word	0x200006b4
 80031d4:	200006b8 	.word	0x200006b8

080031d8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <FillBuffer+0x68>)
 80031e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031ec:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <FillBuffer+0x68>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80031f4:	4a12      	ldr	r2, [pc, #72]	; (8003240 <FillBuffer+0x68>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <FillBuffer+0x68>)
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <FillBuffer+0x6c>)
 80031fe:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003200:	480f      	ldr	r0, [pc, #60]	; (8003240 <FillBuffer+0x68>)
 8003202:	f000 fda5 	bl	8003d50 <HAL_DMA2D_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d115      	bne.n	8003238 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	480c      	ldr	r0, [pc, #48]	; (8003240 <FillBuffer+0x68>)
 8003210:	f000 ff06 	bl	8004020 <HAL_DMA2D_ConfigLayer>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10e      	bne.n	8003238 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69f9      	ldr	r1, [r7, #28]
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <FillBuffer+0x68>)
 8003226:	f000 fde6 	bl	8003df6 <HAL_DMA2D_Start>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003230:	210a      	movs	r1, #10
 8003232:	4803      	ldr	r0, [pc, #12]	; (8003240 <FillBuffer+0x68>)
 8003234:	f000 fe0a 	bl	8003e4c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000644 	.word	0x20000644
 8003244:	4002b000 	.word	0x4002b000

08003248 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800324c:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 800324e:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <BSP_SDRAM_Init+0xb0>)
 8003250:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 8003254:	2202      	movs	r2, #2
 8003256:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 800325a:	2207      	movs	r2, #7
 800325c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800325e:	4b27      	ldr	r3, [pc, #156]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 8003260:	2204      	movs	r2, #4
 8003262:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 8003266:	2207      	movs	r2, #7
 8003268:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 800326c:	2202      	movs	r2, #2
 800326e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 8003272:	2202      	movs	r2, #2
 8003274:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 8003278:	2202      	movs	r2, #2
 800327a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 800327e:	2201      	movs	r2, #1
 8003280:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 800328a:	2204      	movs	r2, #4
 800328c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 8003290:	2210      	movs	r2, #16
 8003292:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 800329c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80032a0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 80032aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ae:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 80032b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80032be:	2100      	movs	r1, #0
 80032c0:	480c      	ldr	r0, [pc, #48]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 80032c2:	f000 f87f 	bl	80033c4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80032c6:	490d      	ldr	r1, [pc, #52]	; (80032fc <BSP_SDRAM_Init+0xb4>)
 80032c8:	480a      	ldr	r0, [pc, #40]	; (80032f4 <BSP_SDRAM_Init+0xac>)
 80032ca:	f003 fe2f 	bl	8006f2c <HAL_SDRAM_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <BSP_SDRAM_Init+0xb8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e002      	b.n	80032e2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <BSP_SDRAM_Init+0xb8>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80032e2:	f240 506a 	movw	r0, #1386	; 0x56a
 80032e6:	f000 f80d 	bl	8003304 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <BSP_SDRAM_Init+0xb8>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200006d4 	.word	0x200006d4
 80032f8:	a0000140 	.word	0xa0000140
 80032fc:	20000708 	.word	0x20000708
 8003300:	200000b8 	.word	0x200000b8

08003304 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003310:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003318:	2208      	movs	r2, #8
 800331a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800331e:	2201      	movs	r2, #1
 8003320:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332c:	4923      	ldr	r1, [pc, #140]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800332e:	4824      	ldr	r0, [pc, #144]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003330:	f003 fe3a 	bl	8006fa8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003334:	2001      	movs	r0, #1
 8003336:	f000 f9c3 	bl	80036c0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800333c:	2202      	movs	r2, #2
 800333e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003340:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003342:	2208      	movs	r2, #8
 8003344:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003348:	2201      	movs	r2, #1
 800334a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003356:	4919      	ldr	r1, [pc, #100]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003358:	4819      	ldr	r0, [pc, #100]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800335a:	f003 fe25 	bl	8006fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003360:	2203      	movs	r2, #3
 8003362:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003366:	2208      	movs	r2, #8
 8003368:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800336c:	2204      	movs	r2, #4
 800336e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800337a:	4910      	ldr	r1, [pc, #64]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800337c:	4810      	ldr	r0, [pc, #64]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800337e:	f003 fe13 	bl	8006fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003382:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003386:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800338a:	2204      	movs	r2, #4
 800338c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003390:	2208      	movs	r2, #8
 8003392:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003396:	2201      	movs	r2, #1
 8003398:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a07      	ldr	r2, [pc, #28]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800339e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80033a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a4:	4905      	ldr	r1, [pc, #20]	; (80033bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a6:	4806      	ldr	r0, [pc, #24]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033a8:	f003 fdfe 	bl	8006fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4804      	ldr	r0, [pc, #16]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033b0:	f003 fe2f 	bl	8007012 <HAL_SDRAM_ProgramRefreshRate>
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000724 	.word	0x20000724
 80033c0:	200006d4 	.word	0x200006d4

080033c4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b090      	sub	sp, #64	; 0x40
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80ec 	beq.w	80035ae <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	4a76      	ldr	r2, [pc, #472]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6393      	str	r3, [r2, #56]	; 0x38
 80033e6:	4b74      	ldr	r3, [pc, #464]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a6f      	ldr	r2, [pc, #444]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80033fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	4b69      	ldr	r3, [pc, #420]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a68      	ldr	r2, [pc, #416]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	4b62      	ldr	r3, [pc, #392]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a61      	ldr	r2, [pc, #388]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a5a      	ldr	r2, [pc, #360]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b58      	ldr	r3, [pc, #352]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a53      	ldr	r2, [pc, #332]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 800346c:	f043 0310 	orr.w	r3, r3, #16
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	4b4d      	ldr	r3, [pc, #308]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a4c      	ldr	r2, [pc, #304]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003488:	f043 0320 	orr.w	r3, r3, #32
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a45      	ldr	r2, [pc, #276]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80034a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <BSP_SDRAM_MspInit+0x1f4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80034ba:	2302      	movs	r3, #2
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80034c2:	230c      	movs	r3, #12
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80034c6:	2360      	movs	r3, #96	; 0x60
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80034ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ce:	4619      	mov	r1, r3
 80034d0:	483a      	ldr	r0, [pc, #232]	; (80035bc <BSP_SDRAM_MspInit+0x1f8>)
 80034d2:	f000 fed3 	bl	800427c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80034d6:	2301      	movs	r3, #1
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80034da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034de:	4619      	mov	r1, r3
 80034e0:	4837      	ldr	r0, [pc, #220]	; (80035c0 <BSP_SDRAM_MspInit+0x1fc>)
 80034e2:	f000 fecb 	bl	800427c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80034e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80034ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f0:	4619      	mov	r1, r3
 80034f2:	4834      	ldr	r0, [pc, #208]	; (80035c4 <BSP_SDRAM_MspInit+0x200>)
 80034f4:	f000 fec2 	bl	800427c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80034f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80034fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003502:	4619      	mov	r1, r3
 8003504:	4830      	ldr	r0, [pc, #192]	; (80035c8 <BSP_SDRAM_MspInit+0x204>)
 8003506:	f000 feb9 	bl	800427c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800350a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003514:	4619      	mov	r1, r3
 8003516:	482d      	ldr	r0, [pc, #180]	; (80035cc <BSP_SDRAM_MspInit+0x208>)
 8003518:	f000 feb0 	bl	800427c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800351c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003526:	4619      	mov	r1, r3
 8003528:	4829      	ldr	r0, [pc, #164]	; (80035d0 <BSP_SDRAM_MspInit+0x20c>)
 800352a:	f000 fea7 	bl	800427c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003530:	2200      	movs	r2, #0
 8003532:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800353c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003540:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003548:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800354c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003550:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003554:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003558:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800355c:	2200      	movs	r2, #0
 800355e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003566:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800356e:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003570:	2203      	movs	r2, #3
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003576:	2200      	movs	r2, #0
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <BSP_SDRAM_MspInit+0x214>)
 8003584:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
 800358c:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003592:	4810      	ldr	r0, [pc, #64]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 8003594:	f000 faaa 	bl	8003aec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003598:	480e      	ldr	r0, [pc, #56]	; (80035d4 <BSP_SDRAM_MspInit+0x210>)
 800359a:	f000 f9f9 	bl	8003990 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	210f      	movs	r1, #15
 80035a2:	2038      	movs	r0, #56	; 0x38
 80035a4:	f000 f9af 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80035a8:	2038      	movs	r0, #56	; 0x38
 80035aa:	f000 f9c8 	bl	800393e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80035ae:	bf00      	nop
 80035b0:	3740      	adds	r7, #64	; 0x40
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	20000734 	.word	0x20000734
 80035d8:	40026410 	.word	0x40026410

080035dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_Init+0x40>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_Init+0x40>)
 80035e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_Init+0x40>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <HAL_Init+0x40>)
 80035f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035f8:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a07      	ldr	r2, [pc, #28]	; (800361c <HAL_Init+0x40>)
 80035fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003604:	2003      	movs	r0, #3
 8003606:	f000 f973 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800360a:	200f      	movs	r0, #15
 800360c:	f000 f808 	bl	8003620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003610:	f7fd fe46 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00

08003620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_InitTick+0x54>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_InitTick+0x58>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003636:	fbb3 f3f1 	udiv	r3, r3, r1
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f999 	bl	8003976 <HAL_SYSTICK_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00e      	b.n	800366c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d80a      	bhi.n	800366a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003654:	2200      	movs	r2, #0
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f000 f953 	bl	8003906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_InitTick+0x5c>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000034 	.word	0x20000034
 8003678:	200000c0 	.word	0x200000c0
 800367c:	200000bc 	.word	0x200000bc

08003680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_IncTick+0x20>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_IncTick+0x24>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_IncTick+0x24>)
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200000c0 	.word	0x200000c0
 80036a4:	20000794 	.word	0x20000794

080036a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_GetTick+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000794 	.word	0x20000794

080036c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff ffee 	bl	80036a8 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d005      	beq.n	80036e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_Delay+0x44>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036e6:	bf00      	nop
 80036e8:	f7ff ffde 	bl	80036a8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d8f7      	bhi.n	80036e8 <HAL_Delay+0x28>
  {
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200000c0 	.word	0x200000c0

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db12      	blt.n	80037e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	490a      	ldr	r1, [pc, #40]	; (80037ec <__NVIC_DisableIRQ+0x44>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	3320      	adds	r3, #32
 80037d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037d4:	f3bf 8f4f 	dsb	sy
}
 80037d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037da:	f3bf 8f6f 	isb	sy
}
 80037de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
         );
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f7ff ff8e 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff05 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff1a 	bl	8003750 <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff8e 	bl	8003844 <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff5d 	bl	80037f0 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff0d 	bl	800376c <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff1d 	bl	80037a8 <__NVIC_DisableIRQ>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ff94 	bl	80038ac <SysTick_Config>
 8003984:	4603      	mov	r3, r0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff fe84 	bl	80036a8 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e099      	b.n	8003ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039cc:	e00f      	b.n	80039ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ce:	f7ff fe6b 	bl	80036a8 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d908      	bls.n	80039ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e078      	b.n	8003ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e8      	bne.n	80039ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_DMA_Init+0x158>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d107      	bne.n	8003a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	4313      	orrs	r3, r2
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d117      	bne.n	8003ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8df 	bl	8003c58 <DMA_CheckFifoParam>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e016      	b.n	8003ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f896 	bl	8003bec <DMA_CalcBaseAndBitshift>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	223f      	movs	r2, #63	; 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	f010803f 	.word	0xf010803f

08003aec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e050      	b.n	8003ba0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e048      	b.n	8003ba0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2221      	movs	r2, #33	; 0x21
 8003b4c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f84c 	bl	8003bec <DMA_CalcBaseAndBitshift>
 8003b54:	4603      	mov	r3, r0
 8003b56:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	223f      	movs	r2, #63	; 0x3f
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00c      	b.n	8003be0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2205      	movs	r2, #5
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3b10      	subs	r3, #16
 8003bfc:	4a14      	ldr	r2, [pc, #80]	; (8003c50 <DMA_CalcBaseAndBitshift+0x64>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c06:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <DMA_CalcBaseAndBitshift+0x68>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d909      	bls.n	8003c2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c2c:	e007      	b.n	8003c3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	aaaaaaab 	.word	0xaaaaaaab
 8003c54:	08011844 	.word	0x08011844

08003c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11f      	bne.n	8003cb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d856      	bhi.n	8003d26 <DMA_CheckFifoParam+0xce>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <DMA_CheckFifoParam+0x28>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003ca3 	.word	0x08003ca3
 8003c88:	08003c91 	.word	0x08003c91
 8003c8c:	08003d27 	.word	0x08003d27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d046      	beq.n	8003d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e043      	b.n	8003d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003caa:	d140      	bne.n	8003d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb0:	e03d      	b.n	8003d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d121      	bne.n	8003d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d837      	bhi.n	8003d32 <DMA_CheckFifoParam+0xda>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <DMA_CheckFifoParam+0x70>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003cdf 	.word	0x08003cdf
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	08003cf1 	.word	0x08003cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e030      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d025      	beq.n	8003d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cee:	e022      	b.n	8003d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf8:	d11f      	bne.n	8003d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cfe:	e01c      	b.n	8003d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d903      	bls.n	8003d0e <DMA_CheckFifoParam+0xb6>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d003      	beq.n	8003d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d0c:	e018      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      break;
 8003d12:	e015      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00e      	beq.n	8003d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      break;
 8003d24:	e00b      	b.n	8003d3e <DMA_CheckFifoParam+0xe6>
      break;
 8003d26:	bf00      	nop
 8003d28:	e00a      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e008      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e006      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e03b      	b.n	8003dda <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f833 	bl	8003de2 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	f023 0107 	bic.w	r1, r3, #7
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68d1      	ldr	r1, [r2, #12]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af02      	add	r7, sp, #8
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_DMA2D_Start+0x1c>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e018      	b.n	8003e44 <HAL_DMA2D_Start+0x4e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f989 	bl	8004144 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d056      	beq.n	8003f16 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e68:	f7ff fc1e 	bl	80036a8 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003e6e:	e04b      	b.n	8003f08 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d023      	beq.n	8003eca <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2221      	movs	r2, #33	; 0x21
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e0a5      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d01a      	beq.n	8003f08 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7ff fbe9 	bl	80036a8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <HAL_DMA2D_PollForTransfer+0x9c>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e086      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ac      	beq.n	8003e70 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d061      	beq.n	8003ffc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f38:	f7ff fbb6 	bl	80036a8 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f3e:	e056      	b.n	8003fee <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02e      	beq.n	8003fb0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2229      	movs	r2, #41	; 0x29
 8003f9a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d01a      	beq.n	8003fee <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fb8:	f7ff fb76 	bl	80036a8 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <HAL_DMA2D_PollForTransfer+0x182>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e013      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0a1      	beq.n	8003f40 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2212      	movs	r2, #18
 8004002:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_DMA2D_ConfigLayer+0x20>
 800403c:	2302      	movs	r3, #2
 800403e:	e079      	b.n	8004134 <HAL_DMA2D_ConfigLayer+0x114>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	3318      	adds	r3, #24
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800406a:	4b35      	ldr	r3, [pc, #212]	; (8004140 <HAL_DMA2D_ConfigLayer+0x120>)
 800406c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b0a      	cmp	r3, #10
 8004074:	d003      	beq.n	800407e <HAL_DMA2D_ConfigLayer+0x5e>
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b09      	cmp	r3, #9
 800407c:	d107      	bne.n	800408e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e005      	b.n	800409a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d120      	bne.n	80040e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	ea02 0103 	and.w	r1, r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b0a      	cmp	r3, #10
 80040c8:	d003      	beq.n	80040d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	d127      	bne.n	8004122 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
 80040e0:	e01f      	b.n	8004122 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	ea02 0103 	and.w	r1, r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b0a      	cmp	r3, #10
 800410a:	d003      	beq.n	8004114 <HAL_DMA2D_ConfigLayer+0xf4>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b09      	cmp	r3, #9
 8004112:	d106      	bne.n	8004122 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004120:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	ff03000f 	.word	0xff03000f

08004144 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004144:	b480      	push	{r7}
 8004146:	b08b      	sub	sp, #44	; 0x2c
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	041a      	lsls	r2, r3, #16
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	431a      	orrs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800417c:	d174      	bne.n	8004268 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004184:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800418c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004194:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
 80041b4:	e053      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d106      	bne.n	80041cc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ca:	e048      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d111      	bne.n	80041f8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	0cdb      	lsrs	r3, r3, #19
 80041d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	0a9b      	lsrs	r3, r3, #10
 80041de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	08db      	lsrs	r3, r3, #3
 80041e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	02db      	lsls	r3, r3, #11
 80041ee:	4313      	orrs	r3, r2
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
 80041f6:	e032      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d117      	bne.n	8004230 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	0fdb      	lsrs	r3, r3, #31
 8004204:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	0cdb      	lsrs	r3, r3, #19
 800420a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	0adb      	lsrs	r3, r3, #11
 8004210:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	029b      	lsls	r3, r3, #10
 8004220:	431a      	orrs	r2, r3
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	03db      	lsls	r3, r3, #15
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	e016      	b.n	800425e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	0f1b      	lsrs	r3, r3, #28
 8004234:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	0d1b      	lsrs	r3, r3, #20
 800423a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	0b1b      	lsrs	r3, r3, #12
 8004240:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	011a      	lsls	r2, r3, #4
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	431a      	orrs	r2, r3
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	4313      	orrs	r3, r2
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004266:	e003      	b.n	8004270 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	60da      	str	r2, [r3, #12]
}
 8004270:	bf00      	nop
 8004272:	372c      	adds	r7, #44	; 0x2c
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e177      	b.n	8004588 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004298:	2201      	movs	r2, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4013      	ands	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	f040 8166 	bne.w	8004582 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d005      	beq.n	80042ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d130      	bne.n	8004330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2203      	movs	r2, #3
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004304:	2201      	movs	r2, #1
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 0201 	and.w	r2, r3, #1
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b03      	cmp	r3, #3
 800433a:	d017      	beq.n	800436c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d123      	bne.n	80043c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	08da      	lsrs	r2, r3, #3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3208      	adds	r2, #8
 8004380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	220f      	movs	r2, #15
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	08da      	lsrs	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3208      	adds	r2, #8
 80043ba:	69b9      	ldr	r1, [r7, #24]
 80043bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	2203      	movs	r2, #3
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0203 	and.w	r2, r3, #3
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80c0 	beq.w	8004582 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <HAL_GPIO_Init+0x324>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_GPIO_Init+0x324>)
 800440c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004410:	6453      	str	r3, [r2, #68]	; 0x44
 8004412:	4b63      	ldr	r3, [pc, #396]	; (80045a0 <HAL_GPIO_Init+0x324>)
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800441e:	4a61      	ldr	r2, [pc, #388]	; (80045a4 <HAL_GPIO_Init+0x328>)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	089b      	lsrs	r3, r3, #2
 8004424:	3302      	adds	r3, #2
 8004426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	220f      	movs	r2, #15
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4013      	ands	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a58      	ldr	r2, [pc, #352]	; (80045a8 <HAL_GPIO_Init+0x32c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d037      	beq.n	80044ba <HAL_GPIO_Init+0x23e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a57      	ldr	r2, [pc, #348]	; (80045ac <HAL_GPIO_Init+0x330>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d031      	beq.n	80044b6 <HAL_GPIO_Init+0x23a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a56      	ldr	r2, [pc, #344]	; (80045b0 <HAL_GPIO_Init+0x334>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d02b      	beq.n	80044b2 <HAL_GPIO_Init+0x236>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a55      	ldr	r2, [pc, #340]	; (80045b4 <HAL_GPIO_Init+0x338>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d025      	beq.n	80044ae <HAL_GPIO_Init+0x232>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a54      	ldr	r2, [pc, #336]	; (80045b8 <HAL_GPIO_Init+0x33c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01f      	beq.n	80044aa <HAL_GPIO_Init+0x22e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a53      	ldr	r2, [pc, #332]	; (80045bc <HAL_GPIO_Init+0x340>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d019      	beq.n	80044a6 <HAL_GPIO_Init+0x22a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a52      	ldr	r2, [pc, #328]	; (80045c0 <HAL_GPIO_Init+0x344>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_GPIO_Init+0x226>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a51      	ldr	r2, [pc, #324]	; (80045c4 <HAL_GPIO_Init+0x348>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00d      	beq.n	800449e <HAL_GPIO_Init+0x222>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a50      	ldr	r2, [pc, #320]	; (80045c8 <HAL_GPIO_Init+0x34c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <HAL_GPIO_Init+0x21e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a4f      	ldr	r2, [pc, #316]	; (80045cc <HAL_GPIO_Init+0x350>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <HAL_GPIO_Init+0x21a>
 8004492:	2309      	movs	r3, #9
 8004494:	e012      	b.n	80044bc <HAL_GPIO_Init+0x240>
 8004496:	230a      	movs	r3, #10
 8004498:	e010      	b.n	80044bc <HAL_GPIO_Init+0x240>
 800449a:	2308      	movs	r3, #8
 800449c:	e00e      	b.n	80044bc <HAL_GPIO_Init+0x240>
 800449e:	2307      	movs	r3, #7
 80044a0:	e00c      	b.n	80044bc <HAL_GPIO_Init+0x240>
 80044a2:	2306      	movs	r3, #6
 80044a4:	e00a      	b.n	80044bc <HAL_GPIO_Init+0x240>
 80044a6:	2305      	movs	r3, #5
 80044a8:	e008      	b.n	80044bc <HAL_GPIO_Init+0x240>
 80044aa:	2304      	movs	r3, #4
 80044ac:	e006      	b.n	80044bc <HAL_GPIO_Init+0x240>
 80044ae:	2303      	movs	r3, #3
 80044b0:	e004      	b.n	80044bc <HAL_GPIO_Init+0x240>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e002      	b.n	80044bc <HAL_GPIO_Init+0x240>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <HAL_GPIO_Init+0x240>
 80044ba:	2300      	movs	r3, #0
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	f002 0203 	and.w	r2, r2, #3
 80044c2:	0092      	lsls	r2, r2, #2
 80044c4:	4093      	lsls	r3, r2
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044cc:	4935      	ldr	r1, [pc, #212]	; (80045a4 <HAL_GPIO_Init+0x328>)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	089b      	lsrs	r3, r3, #2
 80044d2:	3302      	adds	r3, #2
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044da:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <HAL_GPIO_Init+0x354>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044fe:	4a34      	ldr	r2, [pc, #208]	; (80045d0 <HAL_GPIO_Init+0x354>)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <HAL_GPIO_Init+0x354>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004528:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_GPIO_Init+0x354>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_GPIO_Init+0x354>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004552:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <HAL_GPIO_Init+0x354>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_GPIO_Init+0x354>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <HAL_GPIO_Init+0x354>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3301      	adds	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b0f      	cmp	r3, #15
 800458c:	f67f ae84 	bls.w	8004298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40013800 	.word	0x40013800
 80045a8:	40020000 	.word	0x40020000
 80045ac:	40020400 	.word	0x40020400
 80045b0:	40020800 	.word	0x40020800
 80045b4:	40020c00 	.word	0x40020c00
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40021400 	.word	0x40021400
 80045c0:	40021800 	.word	0x40021800
 80045c4:	40021c00 	.word	0x40021c00
 80045c8:	40022000 	.word	0x40022000
 80045cc:	40022400 	.word	0x40022400
 80045d0:	40013c00 	.word	0x40013c00

080045d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e0d9      	b.n	80047a4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045f0:	2201      	movs	r2, #1
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4013      	ands	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	429a      	cmp	r2, r3
 8004608:	f040 80c9 	bne.w	800479e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800460c:	4a6b      	ldr	r2, [pc, #428]	; (80047bc <HAL_GPIO_DeInit+0x1e8>)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	3302      	adds	r3, #2
 8004614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004618:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	220f      	movs	r2, #15
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a63      	ldr	r2, [pc, #396]	; (80047c0 <HAL_GPIO_DeInit+0x1ec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d037      	beq.n	80046a6 <HAL_GPIO_DeInit+0xd2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a62      	ldr	r2, [pc, #392]	; (80047c4 <HAL_GPIO_DeInit+0x1f0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d031      	beq.n	80046a2 <HAL_GPIO_DeInit+0xce>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a61      	ldr	r2, [pc, #388]	; (80047c8 <HAL_GPIO_DeInit+0x1f4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d02b      	beq.n	800469e <HAL_GPIO_DeInit+0xca>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a60      	ldr	r2, [pc, #384]	; (80047cc <HAL_GPIO_DeInit+0x1f8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d025      	beq.n	800469a <HAL_GPIO_DeInit+0xc6>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a5f      	ldr	r2, [pc, #380]	; (80047d0 <HAL_GPIO_DeInit+0x1fc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01f      	beq.n	8004696 <HAL_GPIO_DeInit+0xc2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_GPIO_DeInit+0x200>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d019      	beq.n	8004692 <HAL_GPIO_DeInit+0xbe>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a5d      	ldr	r2, [pc, #372]	; (80047d8 <HAL_GPIO_DeInit+0x204>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_GPIO_DeInit+0xba>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a5c      	ldr	r2, [pc, #368]	; (80047dc <HAL_GPIO_DeInit+0x208>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00d      	beq.n	800468a <HAL_GPIO_DeInit+0xb6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <HAL_GPIO_DeInit+0x20c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <HAL_GPIO_DeInit+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a5a      	ldr	r2, [pc, #360]	; (80047e4 <HAL_GPIO_DeInit+0x210>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_GPIO_DeInit+0xae>
 800467e:	2309      	movs	r3, #9
 8004680:	e012      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 8004682:	230a      	movs	r3, #10
 8004684:	e010      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 8004686:	2308      	movs	r3, #8
 8004688:	e00e      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 800468a:	2307      	movs	r3, #7
 800468c:	e00c      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 800468e:	2306      	movs	r3, #6
 8004690:	e00a      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 8004692:	2305      	movs	r3, #5
 8004694:	e008      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 8004696:	2304      	movs	r3, #4
 8004698:	e006      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 800469a:	2303      	movs	r3, #3
 800469c:	e004      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 800469e:	2302      	movs	r3, #2
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_GPIO_DeInit+0xd4>
 80046a6:	2300      	movs	r3, #0
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	f002 0203 	and.w	r2, r2, #3
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	4093      	lsls	r3, r2
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d132      	bne.n	800471e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046b8:	4b4b      	ldr	r3, [pc, #300]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	43db      	mvns	r3, r3
 80046c0:	4949      	ldr	r1, [pc, #292]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046c6:	4b48      	ldr	r3, [pc, #288]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	4946      	ldr	r1, [pc, #280]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80046d4:	4b44      	ldr	r3, [pc, #272]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	43db      	mvns	r3, r3
 80046dc:	4942      	ldr	r1, [pc, #264]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046de:	4013      	ands	r3, r2
 80046e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	493f      	ldr	r1, [pc, #252]	; (80047e8 <HAL_GPIO_DeInit+0x214>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	220f      	movs	r2, #15
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004700:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <HAL_GPIO_DeInit+0x1e8>)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	3302      	adds	r3, #2
 8004708:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	43da      	mvns	r2, r3
 8004710:	482a      	ldr	r0, [pc, #168]	; (80047bc <HAL_GPIO_DeInit+0x1e8>)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	089b      	lsrs	r3, r3, #2
 8004716:	400a      	ands	r2, r1
 8004718:	3302      	adds	r3, #2
 800471a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2103      	movs	r1, #3
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	08da      	lsrs	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3208      	adds	r2, #8
 800473c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	220f      	movs	r2, #15
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	08d2      	lsrs	r2, r2, #3
 8004754:	4019      	ands	r1, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3208      	adds	r2, #8
 800475a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2103      	movs	r1, #3
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	401a      	ands	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	2101      	movs	r1, #1
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	2103      	movs	r1, #3
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	401a      	ands	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	3301      	adds	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	f67f af22 	bls.w	80045f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40013800 	.word	0x40013800
 80047c0:	40020000 	.word	0x40020000
 80047c4:	40020400 	.word	0x40020400
 80047c8:	40020800 	.word	0x40020800
 80047cc:	40020c00 	.word	0x40020c00
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40021400 	.word	0x40021400
 80047d8:	40021800 	.word	0x40021800
 80047dc:	40021c00 	.word	0x40021c00
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40022400 	.word	0x40022400
 80047e8:	40013c00 	.word	0x40013c00

080047ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
 80047f8:	4613      	mov	r3, r2
 80047fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047fc:	787b      	ldrb	r3, [r7, #1]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004808:	e003      	b.n	8004812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800480a:	887b      	ldrh	r3, [r7, #2]
 800480c:	041a      	lsls	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	619a      	str	r2, [r3, #24]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0bf      	b.n	80049b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8ba 	bl	80049c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004862:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6999      	ldr	r1, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004878:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6899      	ldr	r1, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b4a      	ldr	r3, [pc, #296]	; (80049bc <HAL_LTDC_Init+0x19c>)
 8004894:	400b      	ands	r3, r1
 8004896:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b3e      	ldr	r3, [pc, #248]	; (80049bc <HAL_LTDC_Init+0x19c>)
 80048c2:	400b      	ands	r3, r1
 80048c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	041b      	lsls	r3, r3, #16
 80048cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68d9      	ldr	r1, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_LTDC_Init+0x19c>)
 80048f0:	400b      	ands	r3, r1
 80048f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6919      	ldr	r1, [r3, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6959      	ldr	r1, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b27      	ldr	r3, [pc, #156]	; (80049bc <HAL_LTDC_Init+0x19c>)
 800491e:	400b      	ands	r3, r1
 8004920:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6959      	ldr	r1, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004962:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0206 	orr.w	r2, r2, #6
 800498e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	f000f800 	.word	0xf000f800

080049c0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049d4:	b5b0      	push	{r4, r5, r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_LTDC_ConfigLayer+0x1a>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e02c      	b.n	8004a48 <HAL_LTDC_ConfigLayer+0x74>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2134      	movs	r1, #52	; 0x34
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
 8004a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f83b 	bl	8004aa4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bdb0      	pop	{r4, r5, r7, pc}

08004a50 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_LTDC_EnableDither+0x16>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e016      	b.n	8004a94 <HAL_LTDC_EnableDither+0x44>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <HAL_LTDC_EnableDither+0x50>)
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <HAL_LTDC_EnableDither+0x50>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40016800 	.word	0x40016800

08004aa4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	0c1b      	lsrs	r3, r3, #16
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	4413      	add	r3, r2
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	01db      	lsls	r3, r3, #7
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3384      	adds	r3, #132	; 0x84
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	4611      	mov	r1, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	01d2      	lsls	r2, r2, #7
 8004ae0:	440a      	add	r2, r1
 8004ae2:	3284      	adds	r2, #132	; 0x84
 8004ae4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ae8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004afa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004afc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4619      	mov	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	01db      	lsls	r3, r3, #7
 8004b08:	440b      	add	r3, r1
 8004b0a:	3384      	adds	r3, #132	; 0x84
 8004b0c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b22:	4413      	add	r3, r2
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	01db      	lsls	r3, r3, #7
 8004b32:	4413      	add	r3, r2
 8004b34:	3384      	adds	r3, #132	; 0x84
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	01d2      	lsls	r2, r2, #7
 8004b42:	440a      	add	r2, r1
 8004b44:	3284      	adds	r2, #132	; 0x84
 8004b46:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b5a:	4413      	add	r3, r2
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4619      	mov	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	440b      	add	r3, r1
 8004b6a:	3384      	adds	r3, #132	; 0x84
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	01db      	lsls	r3, r3, #7
 8004b7e:	4413      	add	r3, r2
 8004b80:	3384      	adds	r3, #132	; 0x84
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	01d2      	lsls	r2, r2, #7
 8004b8e:	440a      	add	r2, r1
 8004b90:	3284      	adds	r2, #132	; 0x84
 8004b92:	f023 0307 	bic.w	r3, r3, #7
 8004b96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	01db      	lsls	r3, r3, #7
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3384      	adds	r3, #132	; 0x84
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	061b      	lsls	r3, r3, #24
 8004bc8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	01db      	lsls	r3, r3, #7
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3384      	adds	r3, #132	; 0x84
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	4413      	add	r3, r2
 8004be6:	3384      	adds	r3, #132	; 0x84
 8004be8:	461a      	mov	r2, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4619      	mov	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	01db      	lsls	r3, r3, #7
 8004c08:	440b      	add	r3, r1
 8004c0a:	3384      	adds	r3, #132	; 0x84
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	01db      	lsls	r3, r3, #7
 8004c1e:	4413      	add	r3, r2
 8004c20:	3384      	adds	r3, #132	; 0x84
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	4611      	mov	r1, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	01d2      	lsls	r2, r2, #7
 8004c2e:	440a      	add	r2, r1
 8004c30:	3284      	adds	r2, #132	; 0x84
 8004c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	01db      	lsls	r3, r3, #7
 8004c42:	4413      	add	r3, r2
 8004c44:	3384      	adds	r3, #132	; 0x84
 8004c46:	461a      	mov	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	01db      	lsls	r3, r3, #7
 8004c58:	4413      	add	r3, r2
 8004c5a:	3384      	adds	r3, #132	; 0x84
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	4611      	mov	r1, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	01d2      	lsls	r2, r2, #7
 8004c68:	440a      	add	r2, r1
 8004c6a:	3284      	adds	r2, #132	; 0x84
 8004c6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c70:	f023 0307 	bic.w	r3, r3, #7
 8004c74:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	6809      	ldr	r1, [r1, #0]
 8004c82:	4608      	mov	r0, r1
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	01c9      	lsls	r1, r1, #7
 8004c88:	4401      	add	r1, r0
 8004c8a:	3184      	adds	r1, #132	; 0x84
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	01db      	lsls	r3, r3, #7
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3384      	adds	r3, #132	; 0x84
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	01db      	lsls	r3, r3, #7
 8004caa:	4413      	add	r3, r2
 8004cac:	3384      	adds	r3, #132	; 0x84
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	01db      	lsls	r3, r3, #7
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3384      	adds	r3, #132	; 0x84
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004cd2:	2304      	movs	r3, #4
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	e01b      	b.n	8004d10 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d102      	bne.n	8004ce6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e014      	b.n	8004d10 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d00b      	beq.n	8004d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d007      	beq.n	8004d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d003      	beq.n	8004d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d02:	2b07      	cmp	r3, #7
 8004d04:	d102      	bne.n	8004d0c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004d06:	2302      	movs	r3, #2
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e001      	b.n	8004d10 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	01db      	lsls	r3, r3, #7
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3384      	adds	r3, #132	; 0x84
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	4611      	mov	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	01d2      	lsls	r2, r2, #7
 8004d2a:	440a      	add	r2, r1
 8004d2c:	3284      	adds	r2, #132	; 0x84
 8004d2e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004d32:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	1acb      	subs	r3, r1, r3
 8004d4a:	69f9      	ldr	r1, [r7, #28]
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	6809      	ldr	r1, [r1, #0]
 8004d56:	4608      	mov	r0, r1
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	01c9      	lsls	r1, r1, #7
 8004d5c:	4401      	add	r1, r0
 8004d5e:	3184      	adds	r1, #132	; 0x84
 8004d60:	4313      	orrs	r3, r2
 8004d62:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	01db      	lsls	r3, r3, #7
 8004d6e:	4413      	add	r3, r2
 8004d70:	3384      	adds	r3, #132	; 0x84
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	01d2      	lsls	r2, r2, #7
 8004d7e:	440a      	add	r2, r1
 8004d80:	3284      	adds	r2, #132	; 0x84
 8004d82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	4413      	add	r3, r2
 8004d98:	3384      	adds	r3, #132	; 0x84
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	01db      	lsls	r3, r3, #7
 8004dac:	4413      	add	r3, r2
 8004dae:	3384      	adds	r3, #132	; 0x84
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	4611      	mov	r1, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	01d2      	lsls	r2, r2, #7
 8004dbc:	440a      	add	r2, r1
 8004dbe:	3284      	adds	r2, #132	; 0x84
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	6013      	str	r3, [r2, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3724      	adds	r7, #36	; 0x24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd4:	b08f      	sub	sp, #60	; 0x3c
 8004dd6:	af0a      	add	r7, sp, #40	; 0x28
 8004dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e10f      	b.n	8005004 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f006 ff62 	bl	800bcc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2203      	movs	r2, #3
 8004e08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fa49 	bl	80082ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	687e      	ldr	r6, [r7, #4]
 8004e30:	466d      	mov	r5, sp
 8004e32:	f106 0410 	add.w	r4, r6, #16
 8004e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e42:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e46:	1d33      	adds	r3, r6, #4
 8004e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e4a:	6838      	ldr	r0, [r7, #0]
 8004e4c:	f003 f920 	bl	8008090 <USB_CoreInit>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e0d0      	b.n	8005004 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f003 fa37 	bl	80082dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	e04a      	b.n	8004f0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	333d      	adds	r3, #61	; 0x3d
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	333c      	adds	r3, #60	; 0x3c
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	b298      	uxth	r0, r3
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3344      	adds	r3, #68	; 0x44
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3340      	adds	r3, #64	; 0x40
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3348      	adds	r3, #72	; 0x48
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	334c      	adds	r3, #76	; 0x4c
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3354      	adds	r3, #84	; 0x54
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	3301      	adds	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d3af      	bcc.n	8004e74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f14:	2300      	movs	r3, #0
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e044      	b.n	8004fa4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f30:	7bfa      	ldrb	r2, [r7, #15]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f42:	7bfa      	ldrb	r2, [r7, #15]
 8004f44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f5c:	7bfa      	ldrb	r2, [r7, #15]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f72:	7bfa      	ldrb	r2, [r7, #15]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f88:	7bfa      	ldrb	r2, [r7, #15]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3b5      	bcc.n	8004f1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	687e      	ldr	r6, [r7, #4]
 8004fb6:	466d      	mov	r5, sp
 8004fb8:	f106 0410 	add.w	r4, r6, #16
 8004fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fcc:	1d33      	adds	r3, r6, #4
 8004fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fd0:	6838      	ldr	r0, [r7, #0]
 8004fd2:	f003 f9cf 	bl	8008374 <USB_DevInit>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e00d      	b.n	8005004 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f004 fb1e 	bl	800963e <USB_DevDisconnect>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800500c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_PCD_Start+0x1c>
 8005024:	2302      	movs	r3, #2
 8005026:	e020      	b.n	800506a <HAL_PCD_Start+0x5e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	2b01      	cmp	r3, #1
 8005036:	d109      	bne.n	800504c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800503c:	2b01      	cmp	r3, #1
 800503e:	d005      	beq.n	800504c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f003 f921 	bl	8008298 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f004 face 	bl	80095fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005072:	b590      	push	{r4, r7, lr}
 8005074:	b08d      	sub	sp, #52	; 0x34
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f004 fb8c 	bl	80097a6 <USB_GetMode>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 848a 	bne.w	80059aa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f004 faf0 	bl	8009680 <USB_ReadInterrupts>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8480 	beq.w	80059a8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f004 fadd 	bl	8009680 <USB_ReadInterrupts>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d107      	bne.n	80050e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f002 0202 	and.w	r2, r2, #2
 80050de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f004 facb 	bl	8009680 <USB_ReadInterrupts>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d161      	bne.n	80051b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0210 	bic.w	r2, r2, #16
 8005102:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	3304      	adds	r3, #4
 8005122:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	0c5b      	lsrs	r3, r3, #17
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	2b02      	cmp	r3, #2
 800512e:	d124      	bne.n	800517a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d035      	beq.n	80051a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	6a38      	ldr	r0, [r7, #32]
 8005150:	f004 f902 	bl	8009358 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005160:	441a      	add	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005172:	441a      	add	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
 8005178:	e016      	b.n	80051a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	0c5b      	lsrs	r3, r3, #17
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	2b06      	cmp	r3, #6
 8005184:	d110      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800518c:	2208      	movs	r2, #8
 800518e:	4619      	mov	r1, r3
 8005190:	6a38      	ldr	r0, [r7, #32]
 8005192:	f004 f8e1 	bl	8009358 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051a2:	441a      	add	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0210 	orr.w	r2, r2, #16
 80051b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f004 fa5f 	bl	8009680 <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051cc:	f040 80a7 	bne.w	800531e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f004 fa64 	bl	80096a6 <USB_ReadDevAllOutEpInterrupt>
 80051de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051e0:	e099      	b.n	8005316 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 808e 	beq.w	800530a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	4611      	mov	r1, r2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f004 fa88 	bl	800970e <USB_ReadDevOutEPInterrupt>
 80051fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00c      	beq.n	8005224 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	461a      	mov	r2, r3
 8005218:	2301      	movs	r3, #1
 800521a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800521c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fec2 	bl	8005fa8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	461a      	mov	r2, r3
 800523c:	2308      	movs	r3, #8
 800523e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 ff98 	bl	8006178 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	2310      	movs	r3, #16
 8005262:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d030      	beq.n	80052d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	2b80      	cmp	r3, #128	; 0x80
 8005278:	d109      	bne.n	800528e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800528c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4413      	add	r3, r2
 80052a0:	3304      	adds	r3, #4
 80052a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	78db      	ldrb	r3, [r3, #3]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d108      	bne.n	80052be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f006 fe07 	bl	800becc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	461a      	mov	r2, r3
 80052cc:	2302      	movs	r3, #2
 80052ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	461a      	mov	r2, r3
 80052e8:	2320      	movs	r3, #32
 80052ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	461a      	mov	r2, r3
 8005304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005308:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	3301      	adds	r3, #1
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	2b00      	cmp	r3, #0
 800531a:	f47f af62 	bne.w	80051e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f004 f9ac 	bl	8009680 <USB_ReadInterrupts>
 8005328:	4603      	mov	r3, r0
 800532a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800532e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005332:	f040 80db 	bne.w	80054ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f004 f9cd 	bl	80096da <USB_ReadDevAllInEpInterrupt>
 8005340:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005346:	e0cd      	b.n	80054e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80c2 	beq.w	80054d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f004 f9f3 	bl	800974a <USB_ReadDevInEPInterrupt>
 8005364:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d057      	beq.n	8005420 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	2201      	movs	r2, #1
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	43db      	mvns	r3, r3
 800538a:	69f9      	ldr	r1, [r7, #28]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4013      	ands	r3, r2
 8005392:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	461a      	mov	r2, r3
 80053a2:	2301      	movs	r3, #1
 80053a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d132      	bne.n	8005414 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	334c      	adds	r3, #76	; 0x4c
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4403      	add	r3, r0
 80053ce:	3348      	adds	r3, #72	; 0x48
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4419      	add	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4403      	add	r3, r0
 80053e2:	334c      	adds	r3, #76	; 0x4c
 80053e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d113      	bne.n	8005414 <HAL_PCD_IRQHandler+0x3a2>
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	4613      	mov	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	3354      	adds	r3, #84	; 0x54
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d108      	bne.n	8005414 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800540c:	461a      	mov	r2, r3
 800540e:	2101      	movs	r1, #1
 8005410:	f004 f9fa 	bl	8009808 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	b2db      	uxtb	r3, r3
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f006 fcd1 	bl	800bdc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	461a      	mov	r2, r3
 8005438:	2308      	movs	r3, #8
 800543a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	461a      	mov	r2, r3
 8005454:	2310      	movs	r3, #16
 8005456:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	461a      	mov	r2, r3
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d023      	beq.n	80054c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800547e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005480:	6a38      	ldr	r0, [r7, #32]
 8005482:	f003 f8db 	bl	800863c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	3338      	adds	r3, #56	; 0x38
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	3304      	adds	r3, #4
 8005498:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d108      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f006 fd1e 	bl	800bef0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	461a      	mov	r2, r3
 80054c2:	2302      	movs	r3, #2
 80054c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80054d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fcdb 	bl	8005e8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	3301      	adds	r3, #1
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f47f af2e 	bne.w	8005348 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f004 f8c5 	bl	8009680 <USB_ReadInterrupts>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005500:	d122      	bne.n	8005548 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800551c:	2b01      	cmp	r3, #1
 800551e:	d108      	bne.n	8005532 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005528:	2100      	movs	r1, #0
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fec2 	bl	80062b4 <HAL_PCDEx_LPM_Callback>
 8005530:	e002      	b.n	8005538 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f006 fcbc 	bl	800beb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f004 f897 	bl	8009680 <USB_ReadInterrupts>
 8005552:	4603      	mov	r3, r0
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	d112      	bne.n	8005584 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b01      	cmp	r3, #1
 800556c:	d102      	bne.n	8005574 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f006 fc78 	bl	800be64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005582:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f004 f879 	bl	8009680 <USB_ReadInterrupts>
 800558e:	4603      	mov	r3, r0
 8005590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	f040 80b7 	bne.w	800570a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2110      	movs	r1, #16
 80055b6:	4618      	mov	r0, r3
 80055b8:	f003 f840 	bl	800863c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055bc:	2300      	movs	r3, #0
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c0:	e046      	b.n	8005650 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ce:	461a      	mov	r2, r3
 80055d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	461a      	mov	r2, r3
 8005604:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005608:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005624:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005628:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005644:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005648:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	3301      	adds	r3, #1
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005656:	429a      	cmp	r2, r3
 8005658:	d3b3      	bcc.n	80055c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005668:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800566c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005686:	f043 030b 	orr.w	r3, r3, #11
 800568a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569c:	f043 030b 	orr.w	r3, r3, #11
 80056a0:	6453      	str	r3, [r2, #68]	; 0x44
 80056a2:	e015      	b.n	80056d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80056ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f043 030b 	orr.w	r3, r3, #11
 80056ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056f4:	461a      	mov	r2, r3
 80056f6:	f004 f887 	bl	8009808 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f003 ffb6 	bl	8009680 <USB_ReadInterrupts>
 8005714:	4603      	mov	r3, r0
 8005716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571e:	d124      	bne.n	800576a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f004 f84c 	bl	80097c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f003 f801 	bl	8008736 <USB_GetDevSpeed>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681c      	ldr	r4, [r3, #0]
 8005740:	f001 fa28 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8005744:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	4620      	mov	r0, r4
 8005750:	f002 fd00 	bl	8008154 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f006 fb5c 	bl	800be12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005768:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f003 ff86 	bl	8009680 <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b08      	cmp	r3, #8
 800577c:	d10a      	bne.n	8005794 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f006 fb39 	bl	800bdf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f002 0208 	and.w	r2, r2, #8
 8005792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f003 ff71 	bl	8009680 <USB_ReadInterrupts>
 800579e:	4603      	mov	r3, r0
 80057a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a4:	2b80      	cmp	r3, #128	; 0x80
 80057a6:	d122      	bne.n	80057ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057b4:	2301      	movs	r3, #1
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
 80057b8:	e014      	b.n	80057e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d105      	bne.n	80057de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fb27 	bl	8005e2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	3301      	adds	r3, #1
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d3e5      	bcc.n	80057ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f003 ff44 	bl	8009680 <USB_ReadInterrupts>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005802:	d13b      	bne.n	800587c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005804:	2301      	movs	r3, #1
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e02b      	b.n	8005862 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	3340      	adds	r3, #64	; 0x40
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d115      	bne.n	800585c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005830:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005832:	2b00      	cmp	r3, #0
 8005834:	da12      	bge.n	800585c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	4613      	mov	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	333f      	adds	r3, #63	; 0x3f
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005852:	b2db      	uxtb	r3, r3
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fae8 	bl	8005e2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	429a      	cmp	r2, r3
 800586a:	d3ce      	bcc.n	800580a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800587a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f003 fefd 	bl	8009680 <USB_ReadInterrupts>
 8005886:	4603      	mov	r3, r0
 8005888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800588c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005890:	d155      	bne.n	800593e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005892:	2301      	movs	r3, #1
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	e045      	b.n	8005924 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d12e      	bne.n	800591e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da2b      	bge.n	800591e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80058d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d121      	bne.n	800591e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058de:	4613      	mov	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800591a:	6053      	str	r3, [r2, #4]
            break;
 800591c:	e007      	b.n	800592e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592a:	429a      	cmp	r2, r3
 800592c:	d3b4      	bcc.n	8005898 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800593c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f003 fe9c 	bl	8009680 <USB_ReadInterrupts>
 8005948:	4603      	mov	r3, r0
 800594a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d10a      	bne.n	800596a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f006 fadd 	bl	800bf14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f003 fe86 	bl	8009680 <USB_ReadInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b04      	cmp	r3, #4
 800597c:	d115      	bne.n	80059aa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f006 facd 	bl	800bf30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	e000      	b.n	80059aa <HAL_PCD_IRQHandler+0x938>
      return;
 80059a8:	bf00      	nop
    }
  }
}
 80059aa:	3734      	adds	r7, #52	; 0x34
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd90      	pop	{r4, r7, pc}

080059b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_PCD_SetAddress+0x1a>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e013      	b.n	80059f2 <HAL_PCD_SetAddress+0x42>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	4611      	mov	r1, r2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f003 fde4 	bl	80095b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	4608      	mov	r0, r1
 8005a04:	4611      	mov	r1, r2
 8005a06:	461a      	mov	r2, r3
 8005a08:	4603      	mov	r3, r0
 8005a0a:	70fb      	strb	r3, [r7, #3]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	803b      	strh	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	da0f      	bge.n	8005a40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	3338      	adds	r3, #56	; 0x38
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4413      	add	r3, r2
 8005a34:	3304      	adds	r3, #4
 8005a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	705a      	strb	r2, [r3, #1]
 8005a3e:	e00f      	b.n	8005a60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	f003 020f 	and.w	r2, r3, #15
 8005a46:	4613      	mov	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	4413      	add	r3, r2
 8005a56:	3304      	adds	r3, #4
 8005a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a6c:	883a      	ldrh	r2, [r7, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	78ba      	ldrb	r2, [r7, #2]
 8005a76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a8a:	78bb      	ldrb	r3, [r7, #2]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d102      	bne.n	8005a96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_PCD_EP_Open+0xaa>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e00e      	b.n	8005ac2 <HAL_PCD_EP_Open+0xc8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68f9      	ldr	r1, [r7, #12]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f002 fe64 	bl	8008780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	da0f      	bge.n	8005afe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 020f 	and.w	r2, r3, #15
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	3338      	adds	r3, #56	; 0x38
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	3304      	adds	r3, #4
 8005af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	705a      	strb	r2, [r3, #1]
 8005afc:	e00f      	b.n	8005b1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	f003 020f 	and.w	r2, r3, #15
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_PCD_EP_Close+0x6e>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e00e      	b.n	8005b56 <HAL_PCD_EP_Close+0x8c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f002 fea2 	bl	8008890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b086      	sub	sp, #24
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	f003 020f 	and.w	r2, r3, #15
 8005b74:	4613      	mov	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	3304      	adds	r3, #4
 8005b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2200      	movs	r2, #0
 8005b98:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d102      	bne.n	8005bba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	f003 f981 	bl	8008ed8 <USB_EP0StartXfer>
 8005bd6:	e008      	b.n	8005bea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	6979      	ldr	r1, [r7, #20]
 8005be6:	f002 ff2f 	bl	8008a48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	f003 020f 	and.w	r2, r3, #15
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005c16:	681b      	ldr	r3, [r3, #0]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	460b      	mov	r3, r1
 8005c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	f003 020f 	and.w	r2, r3, #15
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	3338      	adds	r3, #56	; 0x38
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	3304      	adds	r3, #4
 8005c4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2201      	movs	r2, #1
 8005c62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c64:	7afb      	ldrb	r3, [r7, #11]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d102      	bne.n	8005c7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	6979      	ldr	r1, [r7, #20]
 8005c96:	f003 f91f 	bl	8008ed8 <USB_EP0StartXfer>
 8005c9a:	e008      	b.n	8005cae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6979      	ldr	r1, [r7, #20]
 8005caa:	f002 fecd 	bl	8008a48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	f003 020f 	and.w	r2, r3, #15
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d901      	bls.n	8005cd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e050      	b.n	8005d78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da0f      	bge.n	8005cfe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	3338      	adds	r3, #56	; 0x38
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	705a      	strb	r2, [r3, #1]
 8005cfc:	e00d      	b.n	8005d1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3304      	adds	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_PCD_EP_SetStall+0x82>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e01e      	b.n	8005d78 <HAL_PCD_EP_SetStall+0xc0>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f003 fb5d 	bl	8009408 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	b2d9      	uxtb	r1, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f003 fd4d 	bl	8009808 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d901      	bls.n	8005d9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e042      	b.n	8005e24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da0f      	bge.n	8005dc6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	3338      	adds	r3, #56	; 0x38
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4413      	add	r3, r2
 8005dba:	3304      	adds	r3, #4
 8005dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	705a      	strb	r2, [r3, #1]
 8005dc4:	e00f      	b.n	8005de6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	f003 020f 	and.w	r2, r3, #15
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4413      	add	r3, r2
 8005ddc:	3304      	adds	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_PCD_EP_ClrStall+0x86>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e00e      	b.n	8005e24 <HAL_PCD_EP_ClrStall+0xa4>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f003 fb65 	bl	80094e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da0c      	bge.n	8005e5a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 020f 	and.w	r2, r3, #15
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	3338      	adds	r3, #56	; 0x38
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	3304      	adds	r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	e00c      	b.n	8005e74 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	f003 020f 	and.w	r2, r3, #15
 8005e60:	4613      	mov	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	3304      	adds	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68f9      	ldr	r1, [r7, #12]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f003 f984 	bl	8009188 <USB_EPStopXfer>
 8005e80:	4603      	mov	r3, r0
 8005e82:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b08a      	sub	sp, #40	; 0x28
 8005e92:	af02      	add	r7, sp, #8
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	3338      	adds	r3, #56	; 0x38
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d901      	bls.n	8005ec6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e06c      	b.n	8005fa0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d902      	bls.n	8005ee2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	3303      	adds	r3, #3
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eea:	e02b      	b.n	8005f44 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d902      	bls.n	8005f08 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	089b      	lsrs	r3, r3, #2
 8005f0e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6919      	ldr	r1, [r3, #16]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	4603      	mov	r3, r0
 8005f26:	6978      	ldr	r0, [r7, #20]
 8005f28:	f003 f9d8 	bl	80092dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	441a      	add	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	441a      	add	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d809      	bhi.n	8005f6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d203      	bcs.n	8005f6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1be      	bne.n	8005eec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d811      	bhi.n	8005f9e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	2201      	movs	r2, #1
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	6939      	ldr	r1, [r7, #16]
 8005f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	333c      	adds	r3, #60	; 0x3c
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d17b      	bne.n	80060d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4a61      	ldr	r2, [pc, #388]	; (8006170 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	f240 80b9 	bls.w	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80b3 	beq.w	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	461a      	mov	r2, r3
 800600c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006010:	6093      	str	r3, [r2, #8]
 8006012:	e0a7      	b.n	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	461a      	mov	r2, r3
 800602c:	2320      	movs	r3, #32
 800602e:	6093      	str	r3, [r2, #8]
 8006030:	e098      	b.n	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	f040 8093 	bne.w	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4a4b      	ldr	r2, [pc, #300]	; (8006170 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d90f      	bls.n	8006066 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	461a      	mov	r2, r3
 800605e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006062:	6093      	str	r3, [r2, #8]
 8006064:	e07e      	b.n	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	4413      	add	r3, r2
 8006078:	3304      	adds	r3, #4
 800607a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	0159      	lsls	r1, r3, #5
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	440b      	add	r3, r1
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006092:	1ad2      	subs	r2, r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d114      	bne.n	80060c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060b0:	461a      	mov	r2, r3
 80060b2:	2101      	movs	r1, #1
 80060b4:	f003 fba8 	bl	8009808 <USB_EP0_OutStart>
 80060b8:	e006      	b.n	80060c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	441a      	add	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f005 fe5c 	bl	800bd8c <HAL_PCD_DataOutStageCallback>
 80060d4:	e046      	b.n	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4a26      	ldr	r2, [pc, #152]	; (8006174 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d124      	bne.n	8006128 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	461a      	mov	r2, r3
 80060f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fa:	6093      	str	r3, [r2, #8]
 80060fc:	e032      	b.n	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	461a      	mov	r2, r3
 8006116:	2320      	movs	r3, #32
 8006118:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f005 fe33 	bl	800bd8c <HAL_PCD_DataOutStageCallback>
 8006126:	e01d      	b.n	8006164 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d114      	bne.n	8006158 <PCD_EP_OutXfrComplete_int+0x1b0>
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d108      	bne.n	8006158 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006150:	461a      	mov	r2, r3
 8006152:	2100      	movs	r1, #0
 8006154:	f003 fb58 	bl	8009808 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f005 fe14 	bl	800bd8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	4f54300a 	.word	0x4f54300a
 8006174:	4f54310a 	.word	0x4f54310a

08006178 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	333c      	adds	r3, #60	; 0x3c
 8006190:	3304      	adds	r3, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a15      	ldr	r2, [pc, #84]	; (8006200 <PCD_EP_OutSetupPacket_int+0x88>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d90e      	bls.n	80061cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	461a      	mov	r2, r3
 80061c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f005 fdcb 	bl	800bd68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <PCD_EP_OutSetupPacket_int+0x88>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d90c      	bls.n	80061f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d108      	bne.n	80061f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061ec:	461a      	mov	r2, r3
 80061ee:	2101      	movs	r1, #1
 80061f0:	f003 fb0a 	bl	8009808 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	4f54300a 	.word	0x4f54300a

08006204 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
 8006210:	4613      	mov	r3, r2
 8006212:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006222:	883b      	ldrh	r3, [r7, #0]
 8006224:	0419      	lsls	r1, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	430a      	orrs	r2, r1
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
 8006230:	e028      	b.n	8006284 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	0c1b      	lsrs	r3, r3, #16
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	4413      	add	r3, r2
 800623e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e00d      	b.n	8006262 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	3340      	adds	r3, #64	; 0x40
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	0c1b      	lsrs	r3, r3, #16
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	3301      	adds	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
 8006262:	7bfa      	ldrb	r2, [r7, #15]
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	3b01      	subs	r3, #1
 8006268:	429a      	cmp	r2, r3
 800626a:	d3ec      	bcc.n	8006246 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800626c:	883b      	ldrh	r3, [r7, #0]
 800626e:	0418      	lsls	r0, r3, #16
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	3b01      	subs	r3, #1
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	4302      	orrs	r2, r0
 800627c:	3340      	adds	r3, #64	; 0x40
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	887a      	ldrh	r2, [r7, #2]
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e267      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d075      	beq.n	80063d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ea:	4b88      	ldr	r3, [pc, #544]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 030c 	and.w	r3, r3, #12
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d00c      	beq.n	8006310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062f6:	4b85      	ldr	r3, [pc, #532]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d112      	bne.n	8006328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006302:	4b82      	ldr	r3, [pc, #520]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630e:	d10b      	bne.n	8006328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	4b7e      	ldr	r3, [pc, #504]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05b      	beq.n	80063d4 <HAL_RCC_OscConfig+0x108>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d157      	bne.n	80063d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e242      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006330:	d106      	bne.n	8006340 <HAL_RCC_OscConfig+0x74>
 8006332:	4b76      	ldr	r3, [pc, #472]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a75      	ldr	r2, [pc, #468]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e01d      	b.n	800637c <HAL_RCC_OscConfig+0xb0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006348:	d10c      	bne.n	8006364 <HAL_RCC_OscConfig+0x98>
 800634a:	4b70      	ldr	r3, [pc, #448]	; (800650c <HAL_RCC_OscConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a6f      	ldr	r2, [pc, #444]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4b6d      	ldr	r3, [pc, #436]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a6c      	ldr	r2, [pc, #432]	; (800650c <HAL_RCC_OscConfig+0x240>)
 800635c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e00b      	b.n	800637c <HAL_RCC_OscConfig+0xb0>
 8006364:	4b69      	ldr	r3, [pc, #420]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a68      	ldr	r2, [pc, #416]	; (800650c <HAL_RCC_OscConfig+0x240>)
 800636a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	4b66      	ldr	r3, [pc, #408]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a65      	ldr	r2, [pc, #404]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800637a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d013      	beq.n	80063ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006384:	f7fd f990 	bl	80036a8 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800638c:	f7fd f98c 	bl	80036a8 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	; 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e207      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639e:	4b5b      	ldr	r3, [pc, #364]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0xc0>
 80063aa:	e014      	b.n	80063d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fd f97c 	bl	80036a8 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b4:	f7fd f978 	bl	80036a8 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	; 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e1f3      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c6:	4b51      	ldr	r3, [pc, #324]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0xe8>
 80063d2:	e000      	b.n	80063d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d063      	beq.n	80064aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063e2:	4b4a      	ldr	r3, [pc, #296]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 030c 	and.w	r3, r3, #12
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ee:	4b47      	ldr	r3, [pc, #284]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d11c      	bne.n	8006434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063fa:	4b44      	ldr	r3, [pc, #272]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d116      	bne.n	8006434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006406:	4b41      	ldr	r3, [pc, #260]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <HAL_RCC_OscConfig+0x152>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d001      	beq.n	800641e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e1c7      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4937      	ldr	r1, [pc, #220]	; (800650c <HAL_RCC_OscConfig+0x240>)
 800642e:	4313      	orrs	r3, r2
 8006430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006432:	e03a      	b.n	80064aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d020      	beq.n	800647e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800643c:	4b34      	ldr	r3, [pc, #208]	; (8006510 <HAL_RCC_OscConfig+0x244>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fd f931 	bl	80036a8 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800644a:	f7fd f92d 	bl	80036a8 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e1a8      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645c:	4b2b      	ldr	r3, [pc, #172]	; (800650c <HAL_RCC_OscConfig+0x240>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006468:	4b28      	ldr	r3, [pc, #160]	; (800650c <HAL_RCC_OscConfig+0x240>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4925      	ldr	r1, [pc, #148]	; (800650c <HAL_RCC_OscConfig+0x240>)
 8006478:	4313      	orrs	r3, r2
 800647a:	600b      	str	r3, [r1, #0]
 800647c:	e015      	b.n	80064aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800647e:	4b24      	ldr	r3, [pc, #144]	; (8006510 <HAL_RCC_OscConfig+0x244>)
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7fd f910 	bl	80036a8 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800648c:	f7fd f90c 	bl	80036a8 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e187      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649e:	4b1b      	ldr	r3, [pc, #108]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f0      	bne.n	800648c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d036      	beq.n	8006524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064be:	4b15      	ldr	r3, [pc, #84]	; (8006514 <HAL_RCC_OscConfig+0x248>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c4:	f7fd f8f0 	bl	80036a8 <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064cc:	f7fd f8ec 	bl	80036a8 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e167      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064de:	4b0b      	ldr	r3, [pc, #44]	; (800650c <HAL_RCC_OscConfig+0x240>)
 80064e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0x200>
 80064ea:	e01b      	b.n	8006524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <HAL_RCC_OscConfig+0x248>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f2:	f7fd f8d9 	bl	80036a8 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	e00e      	b.n	8006518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064fa:	f7fd f8d5 	bl	80036a8 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d907      	bls.n	8006518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e150      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
 800650c:	40023800 	.word	0x40023800
 8006510:	42470000 	.word	0x42470000
 8006514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006518:	4b88      	ldr	r3, [pc, #544]	; (800673c <HAL_RCC_OscConfig+0x470>)
 800651a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1ea      	bne.n	80064fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8097 	beq.w	8006660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006536:	4b81      	ldr	r3, [pc, #516]	; (800673c <HAL_RCC_OscConfig+0x470>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	4b7d      	ldr	r3, [pc, #500]	; (800673c <HAL_RCC_OscConfig+0x470>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	4a7c      	ldr	r2, [pc, #496]	; (800673c <HAL_RCC_OscConfig+0x470>)
 800654c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006550:	6413      	str	r3, [r2, #64]	; 0x40
 8006552:	4b7a      	ldr	r3, [pc, #488]	; (800673c <HAL_RCC_OscConfig+0x470>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655a:	60bb      	str	r3, [r7, #8]
 800655c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800655e:	2301      	movs	r3, #1
 8006560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006562:	4b77      	ldr	r3, [pc, #476]	; (8006740 <HAL_RCC_OscConfig+0x474>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656a:	2b00      	cmp	r3, #0
 800656c:	d118      	bne.n	80065a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800656e:	4b74      	ldr	r3, [pc, #464]	; (8006740 <HAL_RCC_OscConfig+0x474>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a73      	ldr	r2, [pc, #460]	; (8006740 <HAL_RCC_OscConfig+0x474>)
 8006574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800657a:	f7fd f895 	bl	80036a8 <HAL_GetTick>
 800657e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006580:	e008      	b.n	8006594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006582:	f7fd f891 	bl	80036a8 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e10c      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006594:	4b6a      	ldr	r3, [pc, #424]	; (8006740 <HAL_RCC_OscConfig+0x474>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d106      	bne.n	80065b6 <HAL_RCC_OscConfig+0x2ea>
 80065a8:	4b64      	ldr	r3, [pc, #400]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ac:	4a63      	ldr	r2, [pc, #396]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	6713      	str	r3, [r2, #112]	; 0x70
 80065b4:	e01c      	b.n	80065f0 <HAL_RCC_OscConfig+0x324>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b05      	cmp	r3, #5
 80065bc:	d10c      	bne.n	80065d8 <HAL_RCC_OscConfig+0x30c>
 80065be:	4b5f      	ldr	r3, [pc, #380]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	4a5e      	ldr	r2, [pc, #376]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065c4:	f043 0304 	orr.w	r3, r3, #4
 80065c8:	6713      	str	r3, [r2, #112]	; 0x70
 80065ca:	4b5c      	ldr	r3, [pc, #368]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a5b      	ldr	r2, [pc, #364]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	6713      	str	r3, [r2, #112]	; 0x70
 80065d6:	e00b      	b.n	80065f0 <HAL_RCC_OscConfig+0x324>
 80065d8:	4b58      	ldr	r3, [pc, #352]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4a57      	ldr	r2, [pc, #348]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	6713      	str	r3, [r2, #112]	; 0x70
 80065e4:	4b55      	ldr	r3, [pc, #340]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e8:	4a54      	ldr	r2, [pc, #336]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80065ea:	f023 0304 	bic.w	r3, r3, #4
 80065ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d015      	beq.n	8006624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fd f856 	bl	80036a8 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065fe:	e00a      	b.n	8006616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006600:	f7fd f852 	bl	80036a8 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f241 3288 	movw	r2, #5000	; 0x1388
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e0cb      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006616:	4b49      	ldr	r3, [pc, #292]	; (800673c <HAL_RCC_OscConfig+0x470>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ee      	beq.n	8006600 <HAL_RCC_OscConfig+0x334>
 8006622:	e014      	b.n	800664e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006624:	f7fd f840 	bl	80036a8 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800662a:	e00a      	b.n	8006642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800662c:	f7fd f83c 	bl	80036a8 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e0b5      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006642:	4b3e      	ldr	r3, [pc, #248]	; (800673c <HAL_RCC_OscConfig+0x470>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1ee      	bne.n	800662c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d105      	bne.n	8006660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006654:	4b39      	ldr	r3, [pc, #228]	; (800673c <HAL_RCC_OscConfig+0x470>)
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	4a38      	ldr	r2, [pc, #224]	; (800673c <HAL_RCC_OscConfig+0x470>)
 800665a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800665e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80a1 	beq.w	80067ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800666a:	4b34      	ldr	r3, [pc, #208]	; (800673c <HAL_RCC_OscConfig+0x470>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
 8006672:	2b08      	cmp	r3, #8
 8006674:	d05c      	beq.n	8006730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d141      	bne.n	8006702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800667e:	4b31      	ldr	r3, [pc, #196]	; (8006744 <HAL_RCC_OscConfig+0x478>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006684:	f7fd f810 	bl	80036a8 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668c:	f7fd f80c 	bl	80036a8 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e087      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669e:	4b27      	ldr	r3, [pc, #156]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69da      	ldr	r2, [r3, #28]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	019b      	lsls	r3, r3, #6
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	3b01      	subs	r3, #1
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	061b      	lsls	r3, r3, #24
 80066ce:	491b      	ldr	r1, [pc, #108]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066d4:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <HAL_RCC_OscConfig+0x478>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066da:	f7fc ffe5 	bl	80036a8 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066e2:	f7fc ffe1 	bl	80036a8 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e05c      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f4:	4b11      	ldr	r3, [pc, #68]	; (800673c <HAL_RCC_OscConfig+0x470>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x416>
 8006700:	e054      	b.n	80067ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <HAL_RCC_OscConfig+0x478>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006708:	f7fc ffce 	bl	80036a8 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006710:	f7fc ffca 	bl	80036a8 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e045      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_RCC_OscConfig+0x470>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x444>
 800672e:	e03d      	b.n	80067ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d107      	bne.n	8006748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e038      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
 800673c:	40023800 	.word	0x40023800
 8006740:	40007000 	.word	0x40007000
 8006744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006748:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <HAL_RCC_OscConfig+0x4ec>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d028      	beq.n	80067a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006760:	429a      	cmp	r2, r3
 8006762:	d121      	bne.n	80067a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d11a      	bne.n	80067a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006778:	4013      	ands	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800677e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006780:	4293      	cmp	r3, r2
 8006782:	d111      	bne.n	80067a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	3b01      	subs	r3, #1
 8006792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d107      	bne.n	80067a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d001      	beq.n	80067ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800

080067bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0cc      	b.n	800696a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067d0:	4b68      	ldr	r3, [pc, #416]	; (8006974 <HAL_RCC_ClockConfig+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d90c      	bls.n	80067f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b65      	ldr	r3, [pc, #404]	; (8006974 <HAL_RCC_ClockConfig+0x1b8>)
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e6:	4b63      	ldr	r3, [pc, #396]	; (8006974 <HAL_RCC_ClockConfig+0x1b8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0b8      	b.n	800696a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d020      	beq.n	8006846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006810:	4b59      	ldr	r3, [pc, #356]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	4a58      	ldr	r2, [pc, #352]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800681a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006828:	4b53      	ldr	r3, [pc, #332]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4a52      	ldr	r2, [pc, #328]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006834:	4b50      	ldr	r3, [pc, #320]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	494d      	ldr	r1, [pc, #308]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d044      	beq.n	80068dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d107      	bne.n	800686a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685a:	4b47      	ldr	r3, [pc, #284]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d119      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e07f      	b.n	800696a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d003      	beq.n	800687a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006876:	2b03      	cmp	r3, #3
 8006878:	d107      	bne.n	800688a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687a:	4b3f      	ldr	r3, [pc, #252]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d109      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e06f      	b.n	800696a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688a:	4b3b      	ldr	r3, [pc, #236]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e067      	b.n	800696a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800689a:	4b37      	ldr	r3, [pc, #220]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f023 0203 	bic.w	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4934      	ldr	r1, [pc, #208]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068ac:	f7fc fefc 	bl	80036a8 <HAL_GetTick>
 80068b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b2:	e00a      	b.n	80068ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b4:	f7fc fef8 	bl	80036a8 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e04f      	b.n	800696a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ca:	4b2b      	ldr	r3, [pc, #172]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 020c 	and.w	r2, r3, #12
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	429a      	cmp	r2, r3
 80068da:	d1eb      	bne.n	80068b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068dc:	4b25      	ldr	r3, [pc, #148]	; (8006974 <HAL_RCC_ClockConfig+0x1b8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d20c      	bcs.n	8006904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ea:	4b22      	ldr	r3, [pc, #136]	; (8006974 <HAL_RCC_ClockConfig+0x1b8>)
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b20      	ldr	r3, [pc, #128]	; (8006974 <HAL_RCC_ClockConfig+0x1b8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e032      	b.n	800696a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006910:	4b19      	ldr	r3, [pc, #100]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4916      	ldr	r1, [pc, #88]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	4313      	orrs	r3, r2
 8006920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800692e:	4b12      	ldr	r3, [pc, #72]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	490e      	ldr	r1, [pc, #56]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	4313      	orrs	r3, r2
 8006940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006942:	f000 f821 	bl	8006988 <HAL_RCC_GetSysClockFreq>
 8006946:	4602      	mov	r2, r0
 8006948:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <HAL_RCC_ClockConfig+0x1bc>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	490a      	ldr	r1, [pc, #40]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 8006954:	5ccb      	ldrb	r3, [r1, r3]
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
 800695a:	4a09      	ldr	r2, [pc, #36]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800695c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <HAL_RCC_ClockConfig+0x1c8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f7fc fe5c 	bl	8003620 <HAL_InitTick>

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40023c00 	.word	0x40023c00
 8006978:	40023800 	.word	0x40023800
 800697c:	0800f19c 	.word	0x0800f19c
 8006980:	20000034 	.word	0x20000034
 8006984:	200000bc 	.word	0x200000bc

08006988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800698c:	b094      	sub	sp, #80	; 0x50
 800698e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	647b      	str	r3, [r7, #68]	; 0x44
 8006994:	2300      	movs	r3, #0
 8006996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006998:	2300      	movs	r3, #0
 800699a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069a0:	4b79      	ldr	r3, [pc, #484]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 030c 	and.w	r3, r3, #12
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d00d      	beq.n	80069c8 <HAL_RCC_GetSysClockFreq+0x40>
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	f200 80e1 	bhi.w	8006b74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_RCC_GetSysClockFreq+0x34>
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d003      	beq.n	80069c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80069ba:	e0db      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069bc:	4b73      	ldr	r3, [pc, #460]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x204>)
 80069be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80069c0:	e0db      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069c2:	4b73      	ldr	r3, [pc, #460]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x208>)
 80069c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069c6:	e0d8      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069c8:	4b6f      	ldr	r3, [pc, #444]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069d2:	4b6d      	ldr	r3, [pc, #436]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d063      	beq.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069de:	4b6a      	ldr	r3, [pc, #424]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	099b      	lsrs	r3, r3, #6
 80069e4:	2200      	movs	r2, #0
 80069e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30
 80069f2:	2300      	movs	r3, #0
 80069f4:	637b      	str	r3, [r7, #52]	; 0x34
 80069f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069fa:	4622      	mov	r2, r4
 80069fc:	462b      	mov	r3, r5
 80069fe:	f04f 0000 	mov.w	r0, #0
 8006a02:	f04f 0100 	mov.w	r1, #0
 8006a06:	0159      	lsls	r1, r3, #5
 8006a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a0c:	0150      	lsls	r0, r2, #5
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4621      	mov	r1, r4
 8006a14:	1a51      	subs	r1, r2, r1
 8006a16:	6139      	str	r1, [r7, #16]
 8006a18:	4629      	mov	r1, r5
 8006a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	018b      	lsls	r3, r1, #6
 8006a30:	4651      	mov	r1, sl
 8006a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a36:	4651      	mov	r1, sl
 8006a38:	018a      	lsls	r2, r1, #6
 8006a3a:	4651      	mov	r1, sl
 8006a3c:	ebb2 0801 	subs.w	r8, r2, r1
 8006a40:	4659      	mov	r1, fp
 8006a42:	eb63 0901 	sbc.w	r9, r3, r1
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a5a:	4690      	mov	r8, r2
 8006a5c:	4699      	mov	r9, r3
 8006a5e:	4623      	mov	r3, r4
 8006a60:	eb18 0303 	adds.w	r3, r8, r3
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	462b      	mov	r3, r5
 8006a68:	eb49 0303 	adc.w	r3, r9, r3
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	024b      	lsls	r3, r1, #9
 8006a7e:	4621      	mov	r1, r4
 8006a80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a84:	4621      	mov	r1, r4
 8006a86:	024a      	lsls	r2, r1, #9
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a8e:	2200      	movs	r2, #0
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a98:	f7fa f896 	bl	8000bc8 <__aeabi_uldivmod>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa4:	e058      	b.n	8006b58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa6:	4b38      	ldr	r3, [pc, #224]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	099b      	lsrs	r3, r3, #6
 8006aac:	2200      	movs	r2, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
 8006abc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f04f 0100 	mov.w	r1, #0
 8006acc:	0159      	lsls	r1, r3, #5
 8006ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ad2:	0150      	lsls	r0, r2, #5
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4641      	mov	r1, r8
 8006ada:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ade:	4649      	mov	r1, r9
 8006ae0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006af8:	ebb2 040a 	subs.w	r4, r2, sl
 8006afc:	eb63 050b 	sbc.w	r5, r3, fp
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	00eb      	lsls	r3, r5, #3
 8006b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b0e:	00e2      	lsls	r2, r4, #3
 8006b10:	4614      	mov	r4, r2
 8006b12:	461d      	mov	r5, r3
 8006b14:	4643      	mov	r3, r8
 8006b16:	18e3      	adds	r3, r4, r3
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	eb45 0303 	adc.w	r3, r5, r3
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b2e:	4629      	mov	r1, r5
 8006b30:	028b      	lsls	r3, r1, #10
 8006b32:	4621      	mov	r1, r4
 8006b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b38:	4621      	mov	r1, r4
 8006b3a:	028a      	lsls	r2, r1, #10
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b42:	2200      	movs	r2, #0
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	61fa      	str	r2, [r7, #28]
 8006b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b4c:	f7fa f83c 	bl	8000bc8 <__aeabi_uldivmod>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4613      	mov	r3, r2
 8006b56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	3301      	adds	r3, #1
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b72:	e002      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3750      	adds	r7, #80	; 0x50
 8006b80:	46bd      	mov	sp, r7
 8006b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b86:	bf00      	nop
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	00f42400 	.word	0x00f42400
 8006b90:	007a1200 	.word	0x007a1200

08006b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000034 	.word	0x20000034

08006bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10b      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d075      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006be0:	4b91      	ldr	r3, [pc, #580]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006be6:	f7fc fd5f 	bl	80036a8 <HAL_GetTick>
 8006bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bec:	e008      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bee:	f7fc fd5b 	bl	80036a8 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e189      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c00:	4b8a      	ldr	r3, [pc, #552]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f0      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	019a      	lsls	r2, r3, #6
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	071b      	lsls	r3, r3, #28
 8006c24:	4981      	ldr	r1, [pc, #516]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01f      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c38:	4b7c      	ldr	r3, [pc, #496]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	019a      	lsls	r2, r3, #6
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	431a      	orrs	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	071b      	lsls	r3, r3, #28
 8006c58:	4974      	ldr	r1, [pc, #464]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c60:	4b72      	ldr	r3, [pc, #456]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c66:	f023 021f 	bic.w	r2, r3, #31
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	496e      	ldr	r1, [pc, #440]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00d      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	019a      	lsls	r2, r3, #6
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	061b      	lsls	r3, r3, #24
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	071b      	lsls	r3, r3, #28
 8006c98:	4964      	ldr	r1, [pc, #400]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ca0:	4b61      	ldr	r3, [pc, #388]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ca6:	f7fc fcff 	bl	80036a8 <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cae:	f7fc fcfb 	bl	80036a8 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e129      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cc0:	4b5a      	ldr	r3, [pc, #360]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d079      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ce4:	4b52      	ldr	r3, [pc, #328]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cea:	f7fc fcdd 	bl	80036a8 <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cf2:	f7fc fcd9 	bl	80036a8 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e107      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d04:	4b49      	ldr	r3, [pc, #292]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d10:	d0ef      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d020      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d1e:	4b43      	ldr	r3, [pc, #268]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d24:	0f1b      	lsrs	r3, r3, #28
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	019a      	lsls	r2, r3, #6
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	061b      	lsls	r3, r3, #24
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	071b      	lsls	r3, r3, #28
 8006d3e:	493b      	ldr	r1, [pc, #236]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d46:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	4934      	ldr	r1, [pc, #208]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01e      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d6c:	4b2f      	ldr	r3, [pc, #188]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d72:	0e1b      	lsrs	r3, r3, #24
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	019a      	lsls	r2, r3, #6
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	061b      	lsls	r3, r3, #24
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	071b      	lsls	r3, r3, #28
 8006d8c:	4927      	ldr	r1, [pc, #156]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d94:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	4922      	ldr	r1, [pc, #136]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006daa:	4b21      	ldr	r3, [pc, #132]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006dac:	2201      	movs	r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006db0:	f7fc fc7a 	bl	80036a8 <HAL_GetTick>
 8006db4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006db8:	f7fc fc76 	bl	80036a8 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0a4      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dca:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd6:	d1ef      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 808b 	beq.w	8006efc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df4:	6413      	str	r3, [r2, #64]	; 0x40
 8006df6:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e02:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e0e:	f7fc fc4b 	bl	80036a8 <HAL_GetTick>
 8006e12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e14:	e010      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e16:	f7fc fc47 	bl	80036a8 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d909      	bls.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e075      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006e28:	42470068 	.word	0x42470068
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	42470070 	.word	0x42470070
 8006e34:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e38:	4b38      	ldr	r3, [pc, #224]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0e8      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e44:	4b36      	ldr	r3, [pc, #216]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d02f      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d028      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e62:	4b2f      	ldr	r3, [pc, #188]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e6c:	4b2d      	ldr	r3, [pc, #180]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e72:	4b2c      	ldr	r3, [pc, #176]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e78:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d114      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e8a:	f7fc fc0d 	bl	80036a8 <HAL_GetTick>
 8006e8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e90:	e00a      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e92:	f7fc fc09 	bl	80036a8 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e035      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0ee      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec0:	d10d      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006ec2:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed6:	4912      	ldr	r1, [pc, #72]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	608b      	str	r3, [r1, #8]
 8006edc:	e005      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	4a0f      	ldr	r2, [pc, #60]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ee8:	6093      	str	r3, [r2, #8]
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef6:	490a      	ldr	r1, [pc, #40]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006f10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40007000 	.word	0x40007000
 8006f20:	40023800 	.word	0x40023800
 8006f24:	42470e40 	.word	0x42470e40
 8006f28:	424711e0 	.word	0x424711e0

08006f2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e025      	b.n	8006f8c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f81d 	bl	8006f94 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f000 ff75 	bl	8007e5c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	f000 ffca 	bl	8007f16 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d101      	bne.n	8006fc6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e021      	b.n	800700a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d002      	beq.n	8006fd2 <HAL_SDRAM_SendCommand+0x2a>
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d118      	bne.n	8007004 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f800 	bl	8007fe8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d104      	bne.n	8006ffa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ff8:	e006      	b.n	8007008 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007002:	e001      	b.n	8007008 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d101      	bne.n	800702c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007028:	2302      	movs	r3, #2
 800702a:	e016      	b.n	800705a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	d10f      	bne.n	8007058 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f001 f80b 	bl	8008062 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	e000      	b.n	800705a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e07b      	b.n	800716c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d108      	bne.n	800708e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007084:	d009      	beq.n	800709a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	61da      	str	r2, [r3, #28]
 800708c:	e005      	b.n	800709a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fa f91b 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711e:	ea42 0103 	orr.w	r1, r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	f003 0104 	and.w	r1, r3, #4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	f003 0210 	and.w	r2, r3, #16
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69da      	ldr	r2, [r3, #28]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800715a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e01a      	b.n	80071bc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fa f8f6 	bl	8001390 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_SPI_Transmit+0x22>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e126      	b.n	8007434 <HAL_SPI_Transmit+0x270>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071ee:	f7fc fa5b 	bl	80036a8 <HAL_GetTick>
 80071f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	d002      	beq.n	800720a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007204:	2302      	movs	r3, #2
 8007206:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007208:	e10b      	b.n	8007422 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_SPI_Transmit+0x52>
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	77fb      	strb	r3, [r7, #31]
    goto error;
 800721a:	e102      	b.n	8007422 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2203      	movs	r2, #3
 8007220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	88fa      	ldrh	r2, [r7, #6]
 800723a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007262:	d10f      	bne.n	8007284 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007272:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007282:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d007      	beq.n	80072a2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072aa:	d14b      	bne.n	8007344 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_SPI_Transmit+0xf6>
 80072b4:	8afb      	ldrh	r3, [r7, #22]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d13e      	bne.n	8007338 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072be:	881a      	ldrh	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072de:	e02b      	b.n	8007338 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d112      	bne.n	8007314 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	881a      	ldrh	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	1c9a      	adds	r2, r3, #2
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	86da      	strh	r2, [r3, #54]	; 0x36
 8007312:	e011      	b.n	8007338 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007314:	f7fc f9c8 	bl	80036a8 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d803      	bhi.n	800732c <HAL_SPI_Transmit+0x168>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732a:	d102      	bne.n	8007332 <HAL_SPI_Transmit+0x16e>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007336:	e074      	b.n	8007422 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1ce      	bne.n	80072e0 <HAL_SPI_Transmit+0x11c>
 8007342:	e04c      	b.n	80073de <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_SPI_Transmit+0x18e>
 800734c:	8afb      	ldrh	r3, [r7, #22]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d140      	bne.n	80073d4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007378:	e02c      	b.n	80073d4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b02      	cmp	r3, #2
 8007386:	d113      	bne.n	80073b0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80073ae:	e011      	b.n	80073d4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073b0:	f7fc f97a 	bl	80036a8 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d803      	bhi.n	80073c8 <HAL_SPI_Transmit+0x204>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d102      	bne.n	80073ce <HAL_SPI_Transmit+0x20a>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073d2:	e026      	b.n	8007422 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1cd      	bne.n	800737a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fcf8 	bl	8007dd8 <SPI_EndRxTxTransaction>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e000      	b.n	8007422 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007432:	7ffb      	ldrb	r3, [r7, #31]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af02      	add	r7, sp, #8
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	4613      	mov	r3, r2
 800744a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007458:	d112      	bne.n	8007480 <HAL_SPI_Receive+0x44>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10e      	bne.n	8007480 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2204      	movs	r2, #4
 8007466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800746a:	88fa      	ldrh	r2, [r7, #6]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 f8f1 	bl	800765e <HAL_SPI_TransmitReceive>
 800747c:	4603      	mov	r3, r0
 800747e:	e0ea      	b.n	8007656 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_SPI_Receive+0x52>
 800748a:	2302      	movs	r3, #2
 800748c:	e0e3      	b.n	8007656 <HAL_SPI_Receive+0x21a>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007496:	f7fc f907 	bl	80036a8 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d002      	beq.n	80074ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
 80074aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ac:	e0ca      	b.n	8007644 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <HAL_SPI_Receive+0x7e>
 80074b4:	88fb      	ldrh	r3, [r7, #6]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074be:	e0c1      	b.n	8007644 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2204      	movs	r2, #4
 80074c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	88fa      	ldrh	r2, [r7, #6]
 80074de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007506:	d10f      	bne.n	8007528 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007526:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b40      	cmp	r3, #64	; 0x40
 8007534:	d007      	beq.n	8007546 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d162      	bne.n	8007614 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800754e:	e02e      	b.n	80075ae <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b01      	cmp	r3, #1
 800755c:	d115      	bne.n	800758a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f103 020c 	add.w	r2, r3, #12
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756a:	7812      	ldrb	r2, [r2, #0]
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007588:	e011      	b.n	80075ae <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800758a:	f7fc f88d 	bl	80036a8 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d803      	bhi.n	80075a2 <HAL_SPI_Receive+0x166>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d102      	bne.n	80075a8 <HAL_SPI_Receive+0x16c>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d102      	bne.n	80075ae <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075ac:	e04a      	b.n	8007644 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1cb      	bne.n	8007550 <HAL_SPI_Receive+0x114>
 80075b8:	e031      	b.n	800761e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d113      	bne.n	80075f0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	b292      	uxth	r2, r2
 80075d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	1c9a      	adds	r2, r3, #2
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075ee:	e011      	b.n	8007614 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f0:	f7fc f85a 	bl	80036a8 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d803      	bhi.n	8007608 <HAL_SPI_Receive+0x1cc>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d102      	bne.n	800760e <HAL_SPI_Receive+0x1d2>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007612:	e017      	b.n	8007644 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1cd      	bne.n	80075ba <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fb72 	bl	8007d0c <SPI_EndRxTransaction>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	75fb      	strb	r3, [r7, #23]
 8007640:	e000      	b.n	8007644 <HAL_SPI_Receive+0x208>
  }

error :
 8007642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007654:	7dfb      	ldrb	r3, [r7, #23]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b08c      	sub	sp, #48	; 0x30
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800766c:	2301      	movs	r3, #1
 800766e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x26>
 8007680:	2302      	movs	r3, #2
 8007682:	e18a      	b.n	800799a <HAL_SPI_TransmitReceive+0x33c>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800768c:	f7fc f80c 	bl	80036a8 <HAL_GetTick>
 8007690:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076a2:	887b      	ldrh	r3, [r7, #2]
 80076a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d00f      	beq.n	80076ce <HAL_SPI_TransmitReceive+0x70>
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076b4:	d107      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x68>
 80076be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d003      	beq.n	80076ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076c6:	2302      	movs	r3, #2
 80076c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076cc:	e15b      	b.n	8007986 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <HAL_SPI_TransmitReceive+0x82>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SPI_TransmitReceive+0x82>
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076e6:	e14e      	b.n	8007986 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d003      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2205      	movs	r2, #5
 80076f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	887a      	ldrh	r2, [r7, #2]
 800770c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	887a      	ldrh	r2, [r7, #2]
 8007712:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	887a      	ldrh	r2, [r7, #2]
 800771e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	887a      	ldrh	r2, [r7, #2]
 8007724:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d007      	beq.n	8007750 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800774e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007758:	d178      	bne.n	800784c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x10a>
 8007762:	8b7b      	ldrh	r3, [r7, #26]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d166      	bne.n	8007836 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	881a      	ldrh	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800778c:	e053      	b.n	8007836 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b02      	cmp	r3, #2
 800779a:	d11b      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x176>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d016      	beq.n	80077d4 <HAL_SPI_TransmitReceive+0x176>
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d113      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	881a      	ldrh	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	1c9a      	adds	r2, r3, #2
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d119      	bne.n	8007816 <HAL_SPI_TransmitReceive+0x1b8>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d014      	beq.n	8007816 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	b292      	uxth	r2, r2
 80077f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	1c9a      	adds	r2, r3, #2
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007812:	2301      	movs	r3, #1
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007816:	f7fb ff47 	bl	80036a8 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007822:	429a      	cmp	r2, r3
 8007824:	d807      	bhi.n	8007836 <HAL_SPI_TransmitReceive+0x1d8>
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d003      	beq.n	8007836 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007834:	e0a7      	b.n	8007986 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1a6      	bne.n	800778e <HAL_SPI_TransmitReceive+0x130>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1a1      	bne.n	800778e <HAL_SPI_TransmitReceive+0x130>
 800784a:	e07c      	b.n	8007946 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_SPI_TransmitReceive+0x1fc>
 8007854:	8b7b      	ldrh	r3, [r7, #26]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d16b      	bne.n	8007932 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007880:	e057      	b.n	8007932 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b02      	cmp	r3, #2
 800788e:	d11c      	bne.n	80078ca <HAL_SPI_TransmitReceive+0x26c>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d017      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x26c>
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	2b01      	cmp	r3, #1
 800789e:	d114      	bne.n	80078ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	7812      	ldrb	r2, [r2, #0]
 80078ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d119      	bne.n	800790c <HAL_SPI_TransmitReceive+0x2ae>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d014      	beq.n	800790c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007908:	2301      	movs	r3, #1
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800790c:	f7fb fecc 	bl	80036a8 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007918:	429a      	cmp	r2, r3
 800791a:	d803      	bhi.n	8007924 <HAL_SPI_TransmitReceive+0x2c6>
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d102      	bne.n	800792a <HAL_SPI_TransmitReceive+0x2cc>
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d103      	bne.n	8007932 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007930:	e029      	b.n	8007986 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1a2      	bne.n	8007882 <HAL_SPI_TransmitReceive+0x224>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d19d      	bne.n	8007882 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fa44 	bl	8007dd8 <SPI_EndRxTxTransaction>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d006      	beq.n	8007964 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007962:	e010      	b.n	8007986 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	e000      	b.n	8007986 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007984:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800799a:	4618      	mov	r0, r3
 800799c:	3730      	adds	r7, #48	; 0x30
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	099b      	lsrs	r3, r3, #6
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10f      	bne.n	80079e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	099b      	lsrs	r3, r3, #6
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
    return;
 80079e6:	e0d7      	b.n	8007b98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <HAL_SPI_IRQHandler+0x66>
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	09db      	lsrs	r3, r3, #7
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4798      	blx	r3
    return;
 8007a08:	e0c6      	b.n	8007b98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	095b      	lsrs	r3, r3, #5
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10c      	bne.n	8007a30 <HAL_SPI_IRQHandler+0x8c>
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	099b      	lsrs	r3, r3, #6
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80b4 	beq.w	8007b98 <HAL_SPI_IRQHandler+0x1f4>
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	095b      	lsrs	r3, r3, #5
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80ad 	beq.w	8007b98 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	099b      	lsrs	r3, r3, #6
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d023      	beq.n	8007a92 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d011      	beq.n	8007a7a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	f043 0204 	orr.w	r2, r3, #4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	e00b      	b.n	8007a92 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	693b      	ldr	r3, [r7, #16]
        return;
 8007a90:	e082      	b.n	8007b98 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	095b      	lsrs	r3, r3, #5
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d014      	beq.n	8007ac8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa2:	f043 0201 	orr.w	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00c      	beq.n	8007aee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad8:	f043 0208 	orr.w	r2, r3, #8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60bb      	str	r3, [r7, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	60bb      	str	r3, [r7, #8]
 8007aec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d04f      	beq.n	8007b96 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b04:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <HAL_SPI_IRQHandler+0x17e>
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d034      	beq.n	8007b8c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0203 	bic.w	r2, r2, #3
 8007b30:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d011      	beq.n	8007b5e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3e:	4a18      	ldr	r2, [pc, #96]	; (8007ba0 <HAL_SPI_IRQHandler+0x1fc>)
 8007b40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fc f82e 	bl	8003ba8 <HAL_DMA_Abort_IT>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d016      	beq.n	8007b94 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6a:	4a0d      	ldr	r2, [pc, #52]	; (8007ba0 <HAL_SPI_IRQHandler+0x1fc>)
 8007b6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fc f818 	bl	8003ba8 <HAL_DMA_Abort_IT>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007b8a:	e003      	b.n	8007b94 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f809 	bl	8007ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b92:	e000      	b.n	8007b96 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007b94:	bf00      	nop
    return;
 8007b96:	bf00      	nop
  }
}
 8007b98:	3720      	adds	r7, #32
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08007bd5 	.word	0x08007bd5

08007ba4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bc6:	b2db      	uxtb	r3, r3
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff ffd8 	bl	8007ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c0c:	f7fb fd4c 	bl	80036a8 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	4413      	add	r3, r2
 8007c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c1c:	f7fb fd44 	bl	80036a8 <HAL_GetTick>
 8007c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c22:	4b39      	ldr	r3, [pc, #228]	; (8007d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	015b      	lsls	r3, r3, #5
 8007c28:	0d1b      	lsrs	r3, r3, #20
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c32:	e054      	b.n	8007cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d050      	beq.n	8007cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c3c:	f7fb fd34 	bl	80036a8 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d902      	bls.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d13d      	bne.n	8007cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6a:	d111      	bne.n	8007c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c74:	d004      	beq.n	8007c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7e:	d107      	bne.n	8007c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c98:	d10f      	bne.n	8007cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e017      	b.n	8007cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	bf0c      	ite	eq
 8007cee:	2301      	moveq	r3, #1
 8007cf0:	2300      	movne	r3, #0
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d19b      	bne.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3720      	adds	r7, #32
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000034 	.word	0x20000034

08007d0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d20:	d111      	bne.n	8007d46 <SPI_EndRxTransaction+0x3a>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2a:	d004      	beq.n	8007d36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d34:	d107      	bne.n	8007d46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d4e:	d12a      	bne.n	8007da6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d58:	d012      	beq.n	8007d80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2180      	movs	r1, #128	; 0x80
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff ff49 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d02d      	beq.n	8007dcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e026      	b.n	8007dce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	2101      	movs	r1, #1
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff ff36 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01a      	beq.n	8007dcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f043 0220 	orr.w	r2, r3, #32
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e013      	b.n	8007dce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2200      	movs	r2, #0
 8007dae:	2101      	movs	r1, #1
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff ff23 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc0:	f043 0220 	orr.w	r2, r3, #32
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e000      	b.n	8007dce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af02      	add	r7, sp, #8
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007de4:	4b1b      	ldr	r3, [pc, #108]	; (8007e54 <SPI_EndRxTxTransaction+0x7c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1b      	ldr	r2, [pc, #108]	; (8007e58 <SPI_EndRxTxTransaction+0x80>)
 8007dea:	fba2 2303 	umull	r2, r3, r2, r3
 8007dee:	0d5b      	lsrs	r3, r3, #21
 8007df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007df4:	fb02 f303 	mul.w	r3, r2, r3
 8007df8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e02:	d112      	bne.n	8007e2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2180      	movs	r1, #128	; 0x80
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fef4 	bl	8007bfc <SPI_WaitFlagStateUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d016      	beq.n	8007e48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	f043 0220 	orr.w	r2, r3, #32
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e00f      	b.n	8007e4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e40:	2b80      	cmp	r3, #128	; 0x80
 8007e42:	d0f2      	beq.n	8007e2a <SPI_EndRxTxTransaction+0x52>
 8007e44:	e000      	b.n	8007e48 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e46:	bf00      	nop
  }

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000034 	.word	0x20000034
 8007e58:	165e9f81 	.word	0x165e9f81

08007e5c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d123      	bne.n	8007eb6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	6851      	ldr	r1, [r2, #4]
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	6892      	ldr	r2, [r2, #8]
 8007e82:	4311      	orrs	r1, r2
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	68d2      	ldr	r2, [r2, #12]
 8007e88:	4311      	orrs	r1, r2
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	6912      	ldr	r2, [r2, #16]
 8007e8e:	4311      	orrs	r1, r2
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	6952      	ldr	r2, [r2, #20]
 8007e94:	4311      	orrs	r1, r2
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	6992      	ldr	r2, [r2, #24]
 8007e9a:	4311      	orrs	r1, r2
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	69d2      	ldr	r2, [r2, #28]
 8007ea0:	4311      	orrs	r1, r2
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	6a12      	ldr	r2, [r2, #32]
 8007ea6:	4311      	orrs	r1, r2
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007eac:	430a      	orrs	r2, r1
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e028      	b.n	8007f08 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	69d9      	ldr	r1, [r3, #28]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	4319      	orrs	r1, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007edc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	6851      	ldr	r1, [r2, #4]
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	6892      	ldr	r2, [r2, #8]
 8007ee8:	4311      	orrs	r1, r2
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	68d2      	ldr	r2, [r2, #12]
 8007eee:	4311      	orrs	r1, r2
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	6912      	ldr	r2, [r2, #16]
 8007ef4:	4311      	orrs	r1, r2
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	6952      	ldr	r2, [r2, #20]
 8007efa:	4311      	orrs	r1, r2
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	6992      	ldr	r2, [r2, #24]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b085      	sub	sp, #20
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d128      	bne.n	8007f7a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	1e59      	subs	r1, r3, #1
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	4319      	orrs	r1, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	4319      	orrs	r1, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	031b      	lsls	r3, r3, #12
 8007f52:	4319      	orrs	r1, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	4319      	orrs	r1, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	051b      	lsls	r3, r3, #20
 8007f66:	4319      	orrs	r1, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	430b      	orrs	r3, r1
 8007f72:	431a      	orrs	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	e02f      	b.n	8007fda <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	68d2      	ldr	r2, [r2, #12]
 8007f8a:	3a01      	subs	r2, #1
 8007f8c:	0311      	lsls	r1, r2, #12
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	6952      	ldr	r2, [r2, #20]
 8007f92:	3a01      	subs	r2, #1
 8007f94:	0512      	lsls	r2, r2, #20
 8007f96:	430a      	orrs	r2, r1
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	1e59      	subs	r1, r3, #1
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	4319      	orrs	r1, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	4319      	orrs	r1, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	041b      	lsls	r3, r3, #16
 8007fc8:	4319      	orrs	r1, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	061b      	lsls	r3, r3, #24
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	0d9b      	lsrs	r3, r3, #22
 8007ffe:	059b      	lsls	r3, r3, #22
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	6811      	ldr	r1, [r2, #0]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	6852      	ldr	r2, [r2, #4]
 8008008:	4311      	orrs	r1, r2
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	6892      	ldr	r2, [r2, #8]
 800800e:	3a01      	subs	r2, #1
 8008010:	0152      	lsls	r2, r2, #5
 8008012:	4311      	orrs	r1, r2
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	68d2      	ldr	r2, [r2, #12]
 8008018:	0252      	lsls	r2, r2, #9
 800801a:	430a      	orrs	r2, r1
 800801c:	431a      	orrs	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008022:	f7fb fb41 	bl	80036a8 <HAL_GetTick>
 8008026:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008028:	e010      	b.n	800804c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d00c      	beq.n	800804c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d007      	beq.n	8008048 <FMC_SDRAM_SendCommand+0x60>
 8008038:	f7fb fb36 	bl	80036a8 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d201      	bcs.n	800804c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e006      	b.n	800805a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b20      	cmp	r3, #32
 8008056:	d0e8      	beq.n	800802a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008074:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	0052      	lsls	r2, r2, #1
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008090:	b084      	sub	sp, #16
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	f107 001c 	add.w	r0, r7, #28
 800809e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d122      	bne.n	80080ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d105      	bne.n	80080e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 fbee 	bl	80098c4 <USB_CoreReset>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	e01a      	b.n	8008124 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 fbe2 	bl	80098c4 <USB_CoreReset>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	639a      	str	r2, [r3, #56]	; 0x38
 8008116:	e005      	b.n	8008124 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	2b01      	cmp	r3, #1
 8008128:	d10b      	bne.n	8008142 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f043 0206 	orr.w	r2, r3, #6
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f043 0220 	orr.w	r2, r3, #32
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008142:	7bfb      	ldrb	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800814e:	b004      	add	sp, #16
 8008150:	4770      	bx	lr
	...

08008154 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d165      	bne.n	8008234 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4a41      	ldr	r2, [pc, #260]	; (8008270 <USB_SetTurnaroundTime+0x11c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d906      	bls.n	800817e <USB_SetTurnaroundTime+0x2a>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4a40      	ldr	r2, [pc, #256]	; (8008274 <USB_SetTurnaroundTime+0x120>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d202      	bcs.n	800817e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008178:	230f      	movs	r3, #15
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e062      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	4a3c      	ldr	r2, [pc, #240]	; (8008274 <USB_SetTurnaroundTime+0x120>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d306      	bcc.n	8008194 <USB_SetTurnaroundTime+0x40>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	4a3b      	ldr	r2, [pc, #236]	; (8008278 <USB_SetTurnaroundTime+0x124>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d202      	bcs.n	8008194 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800818e:	230e      	movs	r3, #14
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	e057      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a38      	ldr	r2, [pc, #224]	; (8008278 <USB_SetTurnaroundTime+0x124>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d306      	bcc.n	80081aa <USB_SetTurnaroundTime+0x56>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4a37      	ldr	r2, [pc, #220]	; (800827c <USB_SetTurnaroundTime+0x128>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d202      	bcs.n	80081aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081a4:	230d      	movs	r3, #13
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e04c      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a33      	ldr	r2, [pc, #204]	; (800827c <USB_SetTurnaroundTime+0x128>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d306      	bcc.n	80081c0 <USB_SetTurnaroundTime+0x6c>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a32      	ldr	r2, [pc, #200]	; (8008280 <USB_SetTurnaroundTime+0x12c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d802      	bhi.n	80081c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081ba:	230c      	movs	r3, #12
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e041      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a2f      	ldr	r2, [pc, #188]	; (8008280 <USB_SetTurnaroundTime+0x12c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d906      	bls.n	80081d6 <USB_SetTurnaroundTime+0x82>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a2e      	ldr	r2, [pc, #184]	; (8008284 <USB_SetTurnaroundTime+0x130>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d802      	bhi.n	80081d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081d0:	230b      	movs	r3, #11
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e036      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a2a      	ldr	r2, [pc, #168]	; (8008284 <USB_SetTurnaroundTime+0x130>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d906      	bls.n	80081ec <USB_SetTurnaroundTime+0x98>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4a29      	ldr	r2, [pc, #164]	; (8008288 <USB_SetTurnaroundTime+0x134>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d802      	bhi.n	80081ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081e6:	230a      	movs	r3, #10
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e02b      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a26      	ldr	r2, [pc, #152]	; (8008288 <USB_SetTurnaroundTime+0x134>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d906      	bls.n	8008202 <USB_SetTurnaroundTime+0xae>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4a25      	ldr	r2, [pc, #148]	; (800828c <USB_SetTurnaroundTime+0x138>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d202      	bcs.n	8008202 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081fc:	2309      	movs	r3, #9
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e020      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4a21      	ldr	r2, [pc, #132]	; (800828c <USB_SetTurnaroundTime+0x138>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d306      	bcc.n	8008218 <USB_SetTurnaroundTime+0xc4>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	4a20      	ldr	r2, [pc, #128]	; (8008290 <USB_SetTurnaroundTime+0x13c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d802      	bhi.n	8008218 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008212:	2308      	movs	r3, #8
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e015      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4a1d      	ldr	r2, [pc, #116]	; (8008290 <USB_SetTurnaroundTime+0x13c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d906      	bls.n	800822e <USB_SetTurnaroundTime+0xda>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4a1c      	ldr	r2, [pc, #112]	; (8008294 <USB_SetTurnaroundTime+0x140>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d202      	bcs.n	800822e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008228:	2307      	movs	r3, #7
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	e00a      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800822e:	2306      	movs	r3, #6
 8008230:	617b      	str	r3, [r7, #20]
 8008232:	e007      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800823a:	2309      	movs	r3, #9
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e001      	b.n	8008244 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008240:	2309      	movs	r3, #9
 8008242:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	029b      	lsls	r3, r3, #10
 8008258:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800825c:	431a      	orrs	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	00d8acbf 	.word	0x00d8acbf
 8008274:	00e4e1c0 	.word	0x00e4e1c0
 8008278:	00f42400 	.word	0x00f42400
 800827c:	01067380 	.word	0x01067380
 8008280:	011a499f 	.word	0x011a499f
 8008284:	01312cff 	.word	0x01312cff
 8008288:	014ca43f 	.word	0x014ca43f
 800828c:	016e3600 	.word	0x016e3600
 8008290:	01a6ab1f 	.word	0x01a6ab1f
 8008294:	01e84800 	.word	0x01e84800

08008298 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f043 0201 	orr.w	r2, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f023 0201 	bic.w	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d115      	bne.n	800832a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800830a:	2001      	movs	r0, #1
 800830c:	f7fb f9d8 	bl	80036c0 <HAL_Delay>
      ms++;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3301      	adds	r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fa45 	bl	80097a6 <USB_GetMode>
 800831c:	4603      	mov	r3, r0
 800831e:	2b01      	cmp	r3, #1
 8008320:	d01e      	beq.n	8008360 <USB_SetCurrentMode+0x84>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b31      	cmp	r3, #49	; 0x31
 8008326:	d9f0      	bls.n	800830a <USB_SetCurrentMode+0x2e>
 8008328:	e01a      	b.n	8008360 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d115      	bne.n	800835c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800833c:	2001      	movs	r0, #1
 800833e:	f7fb f9bf 	bl	80036c0 <HAL_Delay>
      ms++;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 fa2c 	bl	80097a6 <USB_GetMode>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <USB_SetCurrentMode+0x84>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b31      	cmp	r3, #49	; 0x31
 8008358:	d9f0      	bls.n	800833c <USB_SetCurrentMode+0x60>
 800835a:	e001      	b.n	8008360 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e005      	b.n	800836c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b32      	cmp	r3, #50	; 0x32
 8008364:	d101      	bne.n	800836a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008374:	b084      	sub	sp, #16
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e009      	b.n	80083a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3340      	adds	r3, #64	; 0x40
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3301      	adds	r3, #1
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b0e      	cmp	r3, #14
 80083ac:	d9f2      	bls.n	8008394 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d11c      	bne.n	80083ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083c2:	f043 0302 	orr.w	r3, r3, #2
 80083c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38
 80083ec:	e00b      	b.n	8008406 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800840c:	461a      	mov	r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008418:	4619      	mov	r1, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008420:	461a      	mov	r2, r3
 8008422:	680b      	ldr	r3, [r1, #0]
 8008424:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	2b01      	cmp	r3, #1
 800842a:	d10c      	bne.n	8008446 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f965 	bl	8008704 <USB_SetDevSpeed>
 800843a:	e008      	b.n	800844e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800843c:	2101      	movs	r1, #1
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f960 	bl	8008704 <USB_SetDevSpeed>
 8008444:	e003      	b.n	800844e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008446:	2103      	movs	r1, #3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f95b 	bl	8008704 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800844e:	2110      	movs	r1, #16
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f8f3 	bl	800863c <USB_FlushTxFifo>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f91f 	bl	80086a4 <USB_FlushRxFifo>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	461a      	mov	r2, r3
 8008484:	2300      	movs	r3, #0
 8008486:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	461a      	mov	r2, r3
 8008490:	2300      	movs	r3, #0
 8008492:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	e043      	b.n	8008522 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084b0:	d118      	bne.n	80084e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c4:	461a      	mov	r2, r3
 80084c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e013      	b.n	80084f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084da:	461a      	mov	r2, r3
 80084dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	e008      	b.n	80084f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	461a      	mov	r2, r3
 80084f2:	2300      	movs	r3, #0
 80084f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	461a      	mov	r2, r3
 8008504:	2300      	movs	r3, #0
 8008506:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	461a      	mov	r2, r3
 8008516:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800851a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	3301      	adds	r3, #1
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	429a      	cmp	r2, r3
 8008528:	d3b7      	bcc.n	800849a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800852a:	2300      	movs	r3, #0
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	e043      	b.n	80085b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008546:	d118      	bne.n	800857a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	461a      	mov	r2, r3
 800855c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e013      	b.n	800858c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008570:	461a      	mov	r2, r3
 8008572:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	e008      	b.n	800858c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	461a      	mov	r2, r3
 8008588:	2300      	movs	r3, #0
 800858a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008598:	461a      	mov	r2, r3
 800859a:	2300      	movs	r3, #0
 800859c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085aa:	461a      	mov	r2, r3
 80085ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3301      	adds	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d3b7      	bcc.n	8008530 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d105      	bne.n	80085f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f043 0210 	orr.w	r2, r3, #16
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <USB_DevInit+0x2c4>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	f043 0208 	orr.w	r2, r3, #8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d107      	bne.n	8008628 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008620:	f043 0304 	orr.w	r3, r3, #4
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008628:	7dfb      	ldrb	r3, [r7, #23]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008634:	b004      	add	sp, #16
 8008636:	4770      	bx	lr
 8008638:	803c3800 	.word	0x803c3800

0800863c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <USB_FlushTxFifo+0x64>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d901      	bls.n	800865c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e01b      	b.n	8008694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	daf2      	bge.n	800864a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	019b      	lsls	r3, r3, #6
 800866c:	f043 0220 	orr.w	r2, r3, #32
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3301      	adds	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4a08      	ldr	r2, [pc, #32]	; (80086a0 <USB_FlushTxFifo+0x64>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d901      	bls.n	8008686 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e006      	b.n	8008694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b20      	cmp	r3, #32
 8008690:	d0f0      	beq.n	8008674 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	00030d40 	.word	0x00030d40

080086a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4a11      	ldr	r2, [pc, #68]	; (8008700 <USB_FlushRxFifo+0x5c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d901      	bls.n	80086c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e018      	b.n	80086f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	daf2      	bge.n	80086b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2210      	movs	r2, #16
 80086d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3301      	adds	r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4a08      	ldr	r2, [pc, #32]	; (8008700 <USB_FlushRxFifo+0x5c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e006      	b.n	80086f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 0310 	and.w	r3, r3, #16
 80086ee:	2b10      	cmp	r3, #16
 80086f0:	d0f0      	beq.n	80086d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	00030d40 	.word	0x00030d40

08008704 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008724:	4313      	orrs	r3, r2
 8008726:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008736:	b480      	push	{r7}
 8008738:	b087      	sub	sp, #28
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0306 	and.w	r3, r3, #6
 800874e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d102      	bne.n	800875c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008756:	2300      	movs	r3, #0
 8008758:	75fb      	strb	r3, [r7, #23]
 800875a:	e00a      	b.n	8008772 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d002      	beq.n	8008768 <USB_GetDevSpeed+0x32>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b06      	cmp	r3, #6
 8008766:	d102      	bne.n	800876e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008768:	2302      	movs	r3, #2
 800876a:	75fb      	strb	r3, [r7, #23]
 800876c:	e001      	b.n	8008772 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800876e:	230f      	movs	r3, #15
 8008770:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
}
 8008774:	4618      	mov	r0, r3
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	785b      	ldrb	r3, [r3, #1]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d13a      	bne.n	8008812 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a2:	69da      	ldr	r2, [r3, #28]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	2101      	movs	r1, #1
 80087ae:	fa01 f303 	lsl.w	r3, r1, r3
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	68f9      	ldr	r1, [r7, #12]
 80087b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ba:	4313      	orrs	r3, r2
 80087bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d155      	bne.n	8008880 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	791b      	ldrb	r3, [r3, #4]
 80087ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	059b      	lsls	r3, r3, #22
 80087f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087f8:	4313      	orrs	r3, r2
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	440a      	add	r2, r1
 8008802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800880a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880e:	6013      	str	r3, [r2, #0]
 8008810:	e036      	b.n	8008880 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	f003 030f 	and.w	r3, r3, #15
 8008822:	2101      	movs	r1, #1
 8008824:	fa01 f303 	lsl.w	r3, r1, r3
 8008828:	041b      	lsls	r3, r3, #16
 800882a:	68f9      	ldr	r1, [r7, #12]
 800882c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008830:	4313      	orrs	r3, r2
 8008832:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d11a      	bne.n	8008880 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	791b      	ldrb	r3, [r3, #4]
 8008864:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008866:	430b      	orrs	r3, r1
 8008868:	4313      	orrs	r3, r2
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800887e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d161      	bne.n	8008970 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c2:	d11f      	bne.n	8008904 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	0151      	lsls	r1, r2, #5
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	440a      	add	r2, r1
 80088fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	2101      	movs	r1, #1
 8008916:	fa01 f303 	lsl.w	r3, r1, r3
 800891a:	b29b      	uxth	r3, r3
 800891c:	43db      	mvns	r3, r3
 800891e:	68f9      	ldr	r1, [r7, #12]
 8008920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008924:	4013      	ands	r3, r2
 8008926:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	2101      	movs	r1, #1
 800893a:	fa01 f303 	lsl.w	r3, r1, r3
 800893e:	b29b      	uxth	r3, r3
 8008940:	43db      	mvns	r3, r3
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008948:	4013      	ands	r3, r2
 800894a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	0159      	lsls	r1, r3, #5
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	440b      	add	r3, r1
 8008962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008966:	4619      	mov	r1, r3
 8008968:	4b35      	ldr	r3, [pc, #212]	; (8008a40 <USB_DeactivateEndpoint+0x1b0>)
 800896a:	4013      	ands	r3, r2
 800896c:	600b      	str	r3, [r1, #0]
 800896e:	e060      	b.n	8008a32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008986:	d11f      	bne.n	80089c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	2101      	movs	r1, #1
 80089da:	fa01 f303 	lsl.w	r3, r1, r3
 80089de:	041b      	lsls	r3, r3, #16
 80089e0:	43db      	mvns	r3, r3
 80089e2:	68f9      	ldr	r1, [r7, #12]
 80089e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089e8:	4013      	ands	r3, r2
 80089ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	2101      	movs	r1, #1
 80089fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008a02:	041b      	lsls	r3, r3, #16
 8008a04:	43db      	mvns	r3, r3
 8008a06:	68f9      	ldr	r1, [r7, #12]
 8008a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	0159      	lsls	r1, r3, #5
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	440b      	add	r3, r1
 8008a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <USB_DeactivateEndpoint+0x1b4>)
 8008a2e:	4013      	ands	r3, r2
 8008a30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	ec337800 	.word	0xec337800
 8008a44:	eff37800 	.word	0xeff37800

08008a48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	; 0x28
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	f040 815c 	bne.w	8008d22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d132      	bne.n	8008ad8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad0:	0cdb      	lsrs	r3, r3, #19
 8008ad2:	04db      	lsls	r3, r3, #19
 8008ad4:	6113      	str	r3, [r2, #16]
 8008ad6:	e074      	b.n	8008bc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	0151      	lsls	r1, r2, #5
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	440a      	add	r2, r1
 8008aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af2:	0cdb      	lsrs	r3, r3, #19
 8008af4:	04db      	lsls	r3, r3, #19
 8008af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6999      	ldr	r1, [r3, #24]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	440b      	add	r3, r1
 8008b34:	1e59      	subs	r1, r3, #1
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b40:	4b9d      	ldr	r3, [pc, #628]	; (8008db8 <USB_EPStartXfer+0x370>)
 8008b42:	400b      	ands	r3, r1
 8008b44:	69b9      	ldr	r1, [r7, #24]
 8008b46:	0148      	lsls	r0, r1, #5
 8008b48:	69f9      	ldr	r1, [r7, #28]
 8008b4a:	4401      	add	r1, r0
 8008b4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b50:	4313      	orrs	r3, r2
 8008b52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b6a:	69b9      	ldr	r1, [r7, #24]
 8008b6c:	0148      	lsls	r0, r1, #5
 8008b6e:	69f9      	ldr	r1, [r7, #28]
 8008b70:	4401      	add	r1, r0
 8008b72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b76:	4313      	orrs	r3, r2
 8008b78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	791b      	ldrb	r3, [r3, #4]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d11f      	bne.n	8008bc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	0151      	lsls	r1, r2, #5
 8008b94:	69fa      	ldr	r2, [r7, #28]
 8008b96:	440a      	add	r2, r1
 8008b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ba0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d14b      	bne.n	8008c60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	791b      	ldrb	r3, [r3, #4]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d128      	bne.n	8008c3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d110      	bne.n	8008c1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	e00f      	b.n	8008c3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	0151      	lsls	r1, r2, #5
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	440a      	add	r2, r1
 8008c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	e133      	b.n	8008ec8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	791b      	ldrb	r3, [r3, #4]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d015      	beq.n	8008cb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 811b 	beq.w	8008ec8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca8:	69f9      	ldr	r1, [r7, #28]
 8008caa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	634b      	str	r3, [r1, #52]	; 0x34
 8008cb2:	e109      	b.n	8008ec8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d110      	bne.n	8008ce6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	0151      	lsls	r1, r2, #5
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	440a      	add	r2, r1
 8008cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	e00f      	b.n	8008d06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6919      	ldr	r1, [r3, #16]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	781a      	ldrb	r2, [r3, #0]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	b298      	uxth	r0, r3
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	4603      	mov	r3, r0
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 fade 	bl	80092dc <USB_WritePacket>
 8008d20:	e0d2      	b.n	8008ec8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	0151      	lsls	r1, r2, #5
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	440a      	add	r2, r1
 8008d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d3c:	0cdb      	lsrs	r3, r3, #19
 8008d3e:	04db      	lsls	r3, r3, #19
 8008d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	015a      	lsls	r2, r3, #5
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	0151      	lsls	r1, r2, #5
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	440a      	add	r2, r1
 8008d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d126      	bne.n	8008dbc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d84:	69b9      	ldr	r1, [r7, #24]
 8008d86:	0148      	lsls	r0, r1, #5
 8008d88:	69f9      	ldr	r1, [r7, #28]
 8008d8a:	4401      	add	r1, r0
 8008d8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d90:	4313      	orrs	r3, r2
 8008d92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008db2:	6113      	str	r3, [r2, #16]
 8008db4:	e03a      	b.n	8008e2c <USB_EPStartXfer+0x3e4>
 8008db6:	bf00      	nop
 8008db8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	699a      	ldr	r2, [r3, #24]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	8afa      	ldrh	r2, [r7, #22]
 8008dd8:	fb03 f202 	mul.w	r2, r3, r2
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dec:	691a      	ldr	r2, [r3, #16]
 8008dee:	8afb      	ldrh	r3, [r7, #22]
 8008df0:	04d9      	lsls	r1, r3, #19
 8008df2:	4b38      	ldr	r3, [pc, #224]	; (8008ed4 <USB_EPStartXfer+0x48c>)
 8008df4:	400b      	ands	r3, r1
 8008df6:	69b9      	ldr	r1, [r7, #24]
 8008df8:	0148      	lsls	r0, r1, #5
 8008dfa:	69f9      	ldr	r1, [r7, #28]
 8008dfc:	4401      	add	r1, r0
 8008dfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e02:	4313      	orrs	r3, r2
 8008e04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e1c:	69b9      	ldr	r1, [r7, #24]
 8008e1e:	0148      	lsls	r0, r1, #5
 8008e20:	69f9      	ldr	r1, [r7, #28]
 8008e22:	4401      	add	r1, r0
 8008e24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d10d      	bne.n	8008e4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d009      	beq.n	8008e4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6919      	ldr	r1, [r3, #16]
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	791b      	ldrb	r3, [r3, #4]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d128      	bne.n	8008ea8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d110      	bne.n	8008e88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	e00f      	b.n	8008ea8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	0151      	lsls	r1, r2, #5
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ea6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	1ff80000 	.word	0x1ff80000

08008ed8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	f040 80ce 	bne.w	8009096 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d132      	bne.n	8008f68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f60:	0cdb      	lsrs	r3, r3, #19
 8008f62:	04db      	lsls	r3, r3, #19
 8008f64:	6113      	str	r3, [r2, #16]
 8008f66:	e04e      	b.n	8009006 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	0151      	lsls	r1, r2, #5
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	440a      	add	r2, r1
 8008f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f82:	0cdb      	lsrs	r3, r3, #19
 8008f84:	04db      	lsls	r3, r3, #19
 8008f86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008faa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d903      	bls.n	8008fc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	0151      	lsls	r1, r2, #5
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	691a      	ldr	r2, [r3, #16]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff6:	6939      	ldr	r1, [r7, #16]
 8008ff8:	0148      	lsls	r0, r1, #5
 8008ffa:	6979      	ldr	r1, [r7, #20]
 8008ffc:	4401      	add	r1, r0
 8008ffe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009002:	4313      	orrs	r3, r2
 8009004:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d11e      	bne.n	800904a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009020:	461a      	mov	r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	0151      	lsls	r1, r2, #5
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	440a      	add	r2, r1
 800903e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	e097      	b.n	800917a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009064:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009068:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8083 	beq.w	800917a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	2101      	movs	r1, #1
 8009086:	fa01 f303 	lsl.w	r3, r1, r3
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009090:	4313      	orrs	r3, r2
 8009092:	634b      	str	r3, [r1, #52]	; 0x34
 8009094:	e071      	b.n	800917a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	0151      	lsls	r1, r2, #5
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	440a      	add	r2, r1
 80090ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b0:	0cdb      	lsrs	r3, r3, #19
 80090b2:	04db      	lsls	r3, r3, #19
 80090b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	0151      	lsls	r1, r2, #5
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	440a      	add	r2, r1
 80090cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009110:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009128:	6939      	ldr	r1, [r7, #16]
 800912a:	0148      	lsls	r0, r1, #5
 800912c:	6979      	ldr	r1, [r7, #20]
 800912e:	4401      	add	r1, r0
 8009130:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009134:	4313      	orrs	r3, r2
 8009136:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d10d      	bne.n	800915a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	6919      	ldr	r1, [r3, #16]
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009156:	460a      	mov	r2, r1
 8009158:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009174:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009178:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	785b      	ldrb	r3, [r3, #1]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d14a      	bne.n	800923c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091be:	f040 8086 	bne.w	80092ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	7812      	ldrb	r2, [r2, #0]
 80091d6:	0151      	lsls	r1, r2, #5
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	440a      	add	r2, r1
 80091dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009204:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009208:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f242 7210 	movw	r2, #10000	; 0x2710
 8009216:	4293      	cmp	r3, r2
 8009218:	d902      	bls.n	8009220 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	75fb      	strb	r3, [r7, #23]
          break;
 800921e:	e056      	b.n	80092ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009238:	d0e7      	beq.n	800920a <USB_EPStopXfer+0x82>
 800923a:	e048      	b.n	80092ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	4413      	add	r3, r2
 8009246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009254:	d13b      	bne.n	80092ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	7812      	ldrb	r2, [r2, #0]
 800926a:	0151      	lsls	r1, r2, #5
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	440a      	add	r2, r1
 8009270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009274:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009278:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	7812      	ldrb	r2, [r2, #0]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800929c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d902      	bls.n	80092b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	75fb      	strb	r3, [r7, #23]
          break;
 80092b2:	e00c      	b.n	80092ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092cc:	d0e7      	beq.n	800929e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092dc:	b480      	push	{r7}
 80092de:	b089      	sub	sp, #36	; 0x24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4611      	mov	r1, r2
 80092e8:	461a      	mov	r2, r3
 80092ea:	460b      	mov	r3, r1
 80092ec:	71fb      	strb	r3, [r7, #7]
 80092ee:	4613      	mov	r3, r2
 80092f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d123      	bne.n	800934a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009302:	88bb      	ldrh	r3, [r7, #4]
 8009304:	3303      	adds	r3, #3
 8009306:	089b      	lsrs	r3, r3, #2
 8009308:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800930a:	2300      	movs	r3, #0
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	e018      	b.n	8009342 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	031a      	lsls	r2, r3, #12
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	4413      	add	r3, r2
 8009318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800931c:	461a      	mov	r2, r3
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	3301      	adds	r3, #1
 8009328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	3301      	adds	r3, #1
 800932e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3301      	adds	r3, #1
 8009334:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	3301      	adds	r3, #1
 800933a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	3301      	adds	r3, #1
 8009340:	61bb      	str	r3, [r7, #24]
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	429a      	cmp	r2, r3
 8009348:	d3e2      	bcc.n	8009310 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3724      	adds	r7, #36	; 0x24
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009358:	b480      	push	{r7}
 800935a:	b08b      	sub	sp, #44	; 0x2c
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	089b      	lsrs	r3, r3, #2
 8009372:	b29b      	uxth	r3, r3
 8009374:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	f003 0303 	and.w	r3, r3, #3
 800937c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800937e:	2300      	movs	r3, #0
 8009380:	623b      	str	r3, [r7, #32]
 8009382:	e014      	b.n	80093ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	3301      	adds	r3, #1
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	3301      	adds	r3, #1
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	3301      	adds	r3, #1
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	3301      	adds	r3, #1
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	3301      	adds	r3, #1
 80093ac:	623b      	str	r3, [r7, #32]
 80093ae:	6a3a      	ldr	r2, [r7, #32]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d3e6      	bcc.n	8009384 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093b6:	8bfb      	ldrh	r3, [r7, #30]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01e      	beq.n	80093fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c6:	461a      	mov	r2, r3
 80093c8:	f107 0310 	add.w	r3, r7, #16
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	701a      	strb	r2, [r3, #0]
      i++;
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	3301      	adds	r3, #1
 80093e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	3301      	adds	r3, #1
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80093ee:	8bfb      	ldrh	r3, [r7, #30]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093f4:	8bfb      	ldrh	r3, [r7, #30]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1ea      	bne.n	80093d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	372c      	adds	r7, #44	; 0x2c
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	785b      	ldrb	r3, [r3, #1]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d12c      	bne.n	800947e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	db12      	blt.n	800945c <USB_EPSetStall+0x54>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00f      	beq.n	800945c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800945a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	e02b      	b.n	80094d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	db12      	blt.n	80094b6 <USB_EPSetStall+0xae>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00f      	beq.n	80094b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d128      	bne.n	8009552 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	0151      	lsls	r1, r2, #5
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	440a      	add	r2, r1
 8009516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800951e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	791b      	ldrb	r3, [r3, #4]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d003      	beq.n	8009530 <USB_EPClearStall+0x4c>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	791b      	ldrb	r3, [r3, #4]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d138      	bne.n	80095a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	440a      	add	r2, r1
 8009546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800954a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	e027      	b.n	80095a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	0151      	lsls	r1, r2, #5
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	440a      	add	r2, r1
 8009568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009570:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	791b      	ldrb	r3, [r3, #4]
 8009576:	2b03      	cmp	r3, #3
 8009578:	d003      	beq.n	8009582 <USB_EPClearStall+0x9e>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	791b      	ldrb	r3, [r3, #4]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d10f      	bne.n	80095a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4413      	add	r3, r2
 800958a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	0151      	lsls	r1, r2, #5
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	440a      	add	r2, r1
 8009598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800959c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80095d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80095e4:	68f9      	ldr	r1, [r7, #12]
 80095e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095ea:	4313      	orrs	r3, r2
 80095ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009616:	f023 0303 	bic.w	r3, r3, #3
 800961a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800962a:	f023 0302 	bic.w	r3, r3, #2
 800962e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800963e:	b480      	push	{r7}
 8009640:	b085      	sub	sp, #20
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800966c:	f043 0302 	orr.w	r3, r3, #2
 8009670:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4013      	ands	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009698:	68fb      	ldr	r3, [r7, #12]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b085      	sub	sp, #20
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	4013      	ands	r3, r2
 80096c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	0c1b      	lsrs	r3, r3, #16
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096da:	b480      	push	{r7}
 80096dc:	b085      	sub	sp, #20
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	4013      	ands	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	b29b      	uxth	r3, r3
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800970e:	b480      	push	{r7}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	460b      	mov	r3, r1
 8009718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4013      	ands	r3, r2
 800973a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800973c:	68bb      	ldr	r3, [r7, #8]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800974a:	b480      	push	{r7}
 800974c:	b087      	sub	sp, #28
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	f003 030f 	and.w	r3, r3, #15
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	fa22 f303 	lsr.w	r3, r2, r3
 800977a:	01db      	lsls	r3, r3, #7
 800977c:	b2db      	uxtb	r3, r3
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4013      	ands	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009798:	68bb      	ldr	r3, [r7, #8]
}
 800979a:	4618      	mov	r0, r3
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	f003 0301 	and.w	r3, r3, #1
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b085      	sub	sp, #20
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80097e0:	f023 0307 	bic.w	r3, r3, #7
 80097e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	460b      	mov	r3, r1
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	333c      	adds	r3, #60	; 0x3c
 800981e:	3304      	adds	r3, #4
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	4a26      	ldr	r2, [pc, #152]	; (80098c0 <USB_EP0_OutStart+0xb8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d90a      	bls.n	8009842 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800983c:	d101      	bne.n	8009842 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	e037      	b.n	80098b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009848:	461a      	mov	r2, r3
 800984a:	2300      	movs	r3, #0
 800984c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800985c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009870:	f043 0318 	orr.w	r3, r3, #24
 8009874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009884:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009888:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800988a:	7afb      	ldrb	r3, [r7, #11]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d10f      	bne.n	80098b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009896:	461a      	mov	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80098ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	4f54300a 	.word	0x4f54300a

080098c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3301      	adds	r3, #1
 80098d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4a13      	ldr	r2, [pc, #76]	; (8009928 <USB_CoreReset+0x64>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d901      	bls.n	80098e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e01b      	b.n	800991a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	daf2      	bge.n	80098d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f043 0201 	orr.w	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3301      	adds	r3, #1
 80098fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a09      	ldr	r2, [pc, #36]	; (8009928 <USB_CoreReset+0x64>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d901      	bls.n	800990c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e006      	b.n	800991a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b01      	cmp	r3, #1
 8009916:	d0f0      	beq.n	80098fa <USB_CoreReset+0x36>

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	00030d40 	.word	0x00030d40

0800992c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009938:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800993c:	f002 fc96 	bl	800c26c <USBD_static_malloc>
 8009940:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d109      	bne.n	800995c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	32b0      	adds	r2, #176	; 0xb0
 8009952:	2100      	movs	r1, #0
 8009954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009958:	2302      	movs	r3, #2
 800995a:	e0d4      	b.n	8009b06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800995c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009960:	2100      	movs	r1, #0
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f002 fcf0 	bl	800c348 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32b0      	adds	r2, #176	; 0xb0
 8009972:	68f9      	ldr	r1, [r7, #12]
 8009974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	32b0      	adds	r2, #176	; 0xb0
 8009982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	7c1b      	ldrb	r3, [r3, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d138      	bne.n	8009a06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009994:	4b5e      	ldr	r3, [pc, #376]	; (8009b10 <USBD_CDC_Init+0x1e4>)
 8009996:	7819      	ldrb	r1, [r3, #0]
 8009998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800999c:	2202      	movs	r2, #2
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f002 fb41 	bl	800c026 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099a4:	4b5a      	ldr	r3, [pc, #360]	; (8009b10 <USBD_CDC_Init+0x1e4>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	f003 020f 	and.w	r2, r3, #15
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3324      	adds	r3, #36	; 0x24
 80099ba:	2201      	movs	r2, #1
 80099bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099be:	4b55      	ldr	r3, [pc, #340]	; (8009b14 <USBD_CDC_Init+0x1e8>)
 80099c0:	7819      	ldrb	r1, [r3, #0]
 80099c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099c6:	2202      	movs	r2, #2
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f002 fb2c 	bl	800c026 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099ce:	4b51      	ldr	r3, [pc, #324]	; (8009b14 <USBD_CDC_Init+0x1e8>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f003 020f 	and.w	r2, r3, #15
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4613      	mov	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099e6:	2201      	movs	r2, #1
 80099e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099ea:	4b4b      	ldr	r3, [pc, #300]	; (8009b18 <USBD_CDC_Init+0x1ec>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	f003 020f 	and.w	r2, r3, #15
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	3326      	adds	r3, #38	; 0x26
 8009a00:	2210      	movs	r2, #16
 8009a02:	801a      	strh	r2, [r3, #0]
 8009a04:	e035      	b.n	8009a72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a06:	4b42      	ldr	r3, [pc, #264]	; (8009b10 <USBD_CDC_Init+0x1e4>)
 8009a08:	7819      	ldrb	r1, [r3, #0]
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f002 fb09 	bl	800c026 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a14:	4b3e      	ldr	r3, [pc, #248]	; (8009b10 <USBD_CDC_Init+0x1e4>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	f003 020f 	and.w	r2, r3, #15
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	440b      	add	r3, r1
 8009a28:	3324      	adds	r3, #36	; 0x24
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a2e:	4b39      	ldr	r3, [pc, #228]	; (8009b14 <USBD_CDC_Init+0x1e8>)
 8009a30:	7819      	ldrb	r1, [r3, #0]
 8009a32:	2340      	movs	r3, #64	; 0x40
 8009a34:	2202      	movs	r2, #2
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f002 faf5 	bl	800c026 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a3c:	4b35      	ldr	r3, [pc, #212]	; (8009b14 <USBD_CDC_Init+0x1e8>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a54:	2201      	movs	r2, #1
 8009a56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a58:	4b2f      	ldr	r3, [pc, #188]	; (8009b18 <USBD_CDC_Init+0x1ec>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 020f 	and.w	r2, r3, #15
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	440b      	add	r3, r1
 8009a6c:	3326      	adds	r3, #38	; 0x26
 8009a6e:	2210      	movs	r2, #16
 8009a70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a72:	4b29      	ldr	r3, [pc, #164]	; (8009b18 <USBD_CDC_Init+0x1ec>)
 8009a74:	7819      	ldrb	r1, [r3, #0]
 8009a76:	2308      	movs	r3, #8
 8009a78:	2203      	movs	r2, #3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f002 fad3 	bl	800c026 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009a80:	4b25      	ldr	r3, [pc, #148]	; (8009b18 <USBD_CDC_Init+0x1ec>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	f003 020f 	and.w	r2, r3, #15
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	440b      	add	r3, r1
 8009a94:	3324      	adds	r3, #36	; 0x24
 8009a96:	2201      	movs	r2, #1
 8009a98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	33b0      	adds	r3, #176	; 0xb0
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	e018      	b.n	8009b06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	7c1b      	ldrb	r3, [r3, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <USBD_CDC_Init+0x1e8>)
 8009ade:	7819      	ldrb	r1, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f002 fb8a 	bl	800c204 <USBD_LL_PrepareReceive>
 8009af0:	e008      	b.n	8009b04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009af2:	4b08      	ldr	r3, [pc, #32]	; (8009b14 <USBD_CDC_Init+0x1e8>)
 8009af4:	7819      	ldrb	r1, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f002 fb80 	bl	800c204 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	2000014b 	.word	0x2000014b
 8009b14:	2000014c 	.word	0x2000014c
 8009b18:	2000014d 	.word	0x2000014d

08009b1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009b28:	4b3a      	ldr	r3, [pc, #232]	; (8009c14 <USBD_CDC_DeInit+0xf8>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f002 fa9f 	bl	800c072 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009b34:	4b37      	ldr	r3, [pc, #220]	; (8009c14 <USBD_CDC_DeInit+0xf8>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	f003 020f 	and.w	r2, r3, #15
 8009b3c:	6879      	ldr	r1, [r7, #4]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	3324      	adds	r3, #36	; 0x24
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009b4e:	4b32      	ldr	r3, [pc, #200]	; (8009c18 <USBD_CDC_DeInit+0xfc>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f002 fa8c 	bl	800c072 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009b5a:	4b2f      	ldr	r3, [pc, #188]	; (8009c18 <USBD_CDC_DeInit+0xfc>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	f003 020f 	and.w	r2, r3, #15
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b72:	2200      	movs	r2, #0
 8009b74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009b76:	4b29      	ldr	r3, [pc, #164]	; (8009c1c <USBD_CDC_DeInit+0x100>)
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f002 fa78 	bl	800c072 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009b82:	4b26      	ldr	r3, [pc, #152]	; (8009c1c <USBD_CDC_DeInit+0x100>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	f003 020f 	and.w	r2, r3, #15
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	440b      	add	r3, r1
 8009b96:	3324      	adds	r3, #36	; 0x24
 8009b98:	2200      	movs	r2, #0
 8009b9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b9c:	4b1f      	ldr	r3, [pc, #124]	; (8009c1c <USBD_CDC_DeInit+0x100>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f003 020f 	and.w	r2, r3, #15
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	440b      	add	r3, r1
 8009bb0:	3326      	adds	r3, #38	; 0x26
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	32b0      	adds	r2, #176	; 0xb0
 8009bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d01f      	beq.n	8009c08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	33b0      	adds	r3, #176	; 0xb0
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	32b0      	adds	r2, #176	; 0xb0
 8009be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f002 fb4c 	bl	800c288 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32b0      	adds	r2, #176	; 0xb0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	2000014b 	.word	0x2000014b
 8009c18:	2000014c 	.word	0x2000014c
 8009c1c:	2000014d 	.word	0x2000014d

08009c20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	32b0      	adds	r2, #176	; 0xb0
 8009c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e0bf      	b.n	8009dd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d050      	beq.n	8009cfe <USBD_CDC_Setup+0xde>
 8009c5c:	2b20      	cmp	r3, #32
 8009c5e:	f040 80af 	bne.w	8009dc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	88db      	ldrh	r3, [r3, #6]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d03a      	beq.n	8009ce0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b25b      	sxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da1b      	bge.n	8009cac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	33b0      	adds	r3, #176	; 0xb0
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009c8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	88d2      	ldrh	r2, [r2, #6]
 8009c90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	88db      	ldrh	r3, [r3, #6]
 8009c96:	2b07      	cmp	r3, #7
 8009c98:	bf28      	it	cs
 8009c9a:	2307      	movcs	r3, #7
 8009c9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	89fa      	ldrh	r2, [r7, #14]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 fd89 	bl	800b7bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009caa:	e090      	b.n	8009dce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	785a      	ldrb	r2, [r3, #1]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	88db      	ldrh	r3, [r3, #6]
 8009cba:	2b3f      	cmp	r3, #63	; 0x3f
 8009cbc:	d803      	bhi.n	8009cc6 <USBD_CDC_Setup+0xa6>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	88db      	ldrh	r3, [r3, #6]
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	e000      	b.n	8009cc8 <USBD_CDC_Setup+0xa8>
 8009cc6:	2240      	movs	r2, #64	; 0x40
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009cce:	6939      	ldr	r1, [r7, #16]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f001 fd9b 	bl	800b814 <USBD_CtlPrepareRx>
      break;
 8009cde:	e076      	b.n	8009dce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	33b0      	adds	r3, #176	; 0xb0
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	7850      	ldrb	r0, [r2, #1]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	4798      	blx	r3
      break;
 8009cfc:	e067      	b.n	8009dce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	2b0b      	cmp	r3, #11
 8009d04:	d851      	bhi.n	8009daa <USBD_CDC_Setup+0x18a>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <USBD_CDC_Setup+0xec>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d3d 	.word	0x08009d3d
 8009d10:	08009db9 	.word	0x08009db9
 8009d14:	08009dab 	.word	0x08009dab
 8009d18:	08009dab 	.word	0x08009dab
 8009d1c:	08009dab 	.word	0x08009dab
 8009d20:	08009dab 	.word	0x08009dab
 8009d24:	08009dab 	.word	0x08009dab
 8009d28:	08009dab 	.word	0x08009dab
 8009d2c:	08009dab 	.word	0x08009dab
 8009d30:	08009dab 	.word	0x08009dab
 8009d34:	08009d67 	.word	0x08009d67
 8009d38:	08009d91 	.word	0x08009d91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d107      	bne.n	8009d58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d48:	f107 030a 	add.w	r3, r7, #10
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 fd33 	bl	800b7bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d56:	e032      	b.n	8009dbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 fcbd 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009d60:	2303      	movs	r3, #3
 8009d62:	75fb      	strb	r3, [r7, #23]
          break;
 8009d64:	e02b      	b.n	8009dbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d107      	bne.n	8009d82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d72:	f107 030d 	add.w	r3, r7, #13
 8009d76:	2201      	movs	r2, #1
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 fd1e 	bl	800b7bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d80:	e01d      	b.n	8009dbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 fca8 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d8e:	e016      	b.n	8009dbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d00f      	beq.n	8009dbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f001 fc9b 	bl	800b6da <USBD_CtlError>
            ret = USBD_FAIL;
 8009da4:	2303      	movs	r3, #3
 8009da6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009da8:	e008      	b.n	8009dbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 fc94 	bl	800b6da <USBD_CtlError>
          ret = USBD_FAIL;
 8009db2:	2303      	movs	r3, #3
 8009db4:	75fb      	strb	r3, [r7, #23]
          break;
 8009db6:	e002      	b.n	8009dbe <USBD_CDC_Setup+0x19e>
          break;
 8009db8:	bf00      	nop
 8009dba:	e008      	b.n	8009dce <USBD_CDC_Setup+0x1ae>
          break;
 8009dbc:	bf00      	nop
      }
      break;
 8009dbe:	e006      	b.n	8009dce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 fc89 	bl	800b6da <USBD_CtlError>
      ret = USBD_FAIL;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	75fb      	strb	r3, [r7, #23]
      break;
 8009dcc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	32b0      	adds	r2, #176	; 0xb0
 8009df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e065      	b.n	8009ece <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	32b0      	adds	r2, #176	; 0xb0
 8009e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	f003 020f 	and.w	r2, r3, #15
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	440b      	add	r3, r1
 8009e24:	3318      	adds	r3, #24
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d02f      	beq.n	8009e8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	f003 020f 	and.w	r2, r3, #15
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	440b      	add	r3, r1
 8009e3e:	3318      	adds	r3, #24
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	f003 010f 	and.w	r1, r3, #15
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	440b      	add	r3, r1
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4403      	add	r3, r0
 8009e54:	3348      	adds	r3, #72	; 0x48
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e5c:	fb01 f303 	mul.w	r3, r1, r3
 8009e60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d112      	bne.n	8009e8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	f003 020f 	and.w	r2, r3, #15
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	440b      	add	r3, r1
 8009e78:	3318      	adds	r3, #24
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e7e:	78f9      	ldrb	r1, [r7, #3]
 8009e80:	2300      	movs	r3, #0
 8009e82:	2200      	movs	r2, #0
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f002 f99c 	bl	800c1c2 <USBD_LL_Transmit>
 8009e8a:	e01f      	b.n	8009ecc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	33b0      	adds	r3, #176	; 0xb0
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d010      	beq.n	8009ecc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	33b0      	adds	r3, #176	; 0xb0
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	32b0      	adds	r2, #176	; 0xb0
 8009eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	32b0      	adds	r2, #176	; 0xb0
 8009efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e01a      	b.n	8009f3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f002 f99a 	bl	800c246 <USBD_LL_GetRxDataSize>
 8009f12:	4602      	mov	r2, r0
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	33b0      	adds	r3, #176	; 0xb0
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	32b0      	adds	r2, #176	; 0xb0
 8009f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e025      	b.n	8009fb4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	33b0      	adds	r3, #176	; 0xb0
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d01a      	beq.n	8009fb2 <USBD_CDC_EP0_RxReady+0x6c>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f82:	2bff      	cmp	r3, #255	; 0xff
 8009f84:	d015      	beq.n	8009fb2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	33b0      	adds	r3, #176	; 0xb0
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	22ff      	movs	r2, #255	; 0xff
 8009fae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fc4:	2182      	movs	r1, #130	; 0x82
 8009fc6:	4818      	ldr	r0, [pc, #96]	; (800a028 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fc8:	f000 fd4f 	bl	800aa6a <USBD_GetEpDesc>
 8009fcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fce:	2101      	movs	r1, #1
 8009fd0:	4815      	ldr	r0, [pc, #84]	; (800a028 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fd2:	f000 fd4a 	bl	800aa6a <USBD_GetEpDesc>
 8009fd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fd8:	2181      	movs	r1, #129	; 0x81
 8009fda:	4813      	ldr	r0, [pc, #76]	; (800a028 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fdc:	f000 fd45 	bl	800aa6a <USBD_GetEpDesc>
 8009fe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2210      	movs	r2, #16
 8009fec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d006      	beq.n	800a002 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ffc:	711a      	strb	r2, [r3, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d006      	beq.n	800a016 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a010:	711a      	strb	r2, [r3, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2243      	movs	r2, #67	; 0x43
 800a01a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a01c:	4b02      	ldr	r3, [pc, #8]	; (800a028 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000108 	.word	0x20000108

0800a02c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a034:	2182      	movs	r1, #130	; 0x82
 800a036:	4818      	ldr	r0, [pc, #96]	; (800a098 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a038:	f000 fd17 	bl	800aa6a <USBD_GetEpDesc>
 800a03c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a03e:	2101      	movs	r1, #1
 800a040:	4815      	ldr	r0, [pc, #84]	; (800a098 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a042:	f000 fd12 	bl	800aa6a <USBD_GetEpDesc>
 800a046:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a048:	2181      	movs	r1, #129	; 0x81
 800a04a:	4813      	ldr	r0, [pc, #76]	; (800a098 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a04c:	f000 fd0d 	bl	800aa6a <USBD_GetEpDesc>
 800a050:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2210      	movs	r2, #16
 800a05c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d006      	beq.n	800a072 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2200      	movs	r2, #0
 800a068:	711a      	strb	r2, [r3, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f042 0202 	orr.w	r2, r2, #2
 800a070:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d006      	beq.n	800a086 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	711a      	strb	r2, [r3, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f042 0202 	orr.w	r2, r2, #2
 800a084:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2243      	movs	r2, #67	; 0x43
 800a08a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a08c:	4b02      	ldr	r3, [pc, #8]	; (800a098 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000108 	.word	0x20000108

0800a09c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0a4:	2182      	movs	r1, #130	; 0x82
 800a0a6:	4818      	ldr	r0, [pc, #96]	; (800a108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0a8:	f000 fcdf 	bl	800aa6a <USBD_GetEpDesc>
 800a0ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	4815      	ldr	r0, [pc, #84]	; (800a108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0b2:	f000 fcda 	bl	800aa6a <USBD_GetEpDesc>
 800a0b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0b8:	2181      	movs	r1, #129	; 0x81
 800a0ba:	4813      	ldr	r0, [pc, #76]	; (800a108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0bc:	f000 fcd5 	bl	800aa6a <USBD_GetEpDesc>
 800a0c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	2210      	movs	r2, #16
 800a0cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d006      	beq.n	800a0e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0dc:	711a      	strb	r2, [r3, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d006      	beq.n	800a0f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0f0:	711a      	strb	r2, [r3, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2243      	movs	r2, #67	; 0x43
 800a0fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0fc:	4b02      	ldr	r3, [pc, #8]	; (800a108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20000108 	.word	0x20000108

0800a10c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	220a      	movs	r2, #10
 800a118:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a11a:	4b03      	ldr	r3, [pc, #12]	; (800a128 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	200000c4 	.word	0x200000c4

0800a12c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e009      	b.n	800a154 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	33b0      	adds	r3, #176	; 0xb0
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	32b0      	adds	r2, #176	; 0xb0
 800a176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a182:	2303      	movs	r3, #3
 800a184:	e008      	b.n	800a198 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	32b0      	adds	r2, #176	; 0xb0
 800a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e004      	b.n	800a1d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	32b0      	adds	r2, #176	; 0xb0
 800a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32b0      	adds	r2, #176	; 0xb0
 800a206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a20e:	2303      	movs	r3, #3
 800a210:	e025      	b.n	800a25e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d11f      	bne.n	800a25c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2201      	movs	r2, #1
 800a220:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a224:	4b10      	ldr	r3, [pc, #64]	; (800a268 <USBD_CDC_TransmitPacket+0x88>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 020f 	and.w	r2, r3, #15
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	4613      	mov	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4403      	add	r3, r0
 800a23e:	3318      	adds	r3, #24
 800a240:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <USBD_CDC_TransmitPacket+0x88>)
 800a244:	7819      	ldrb	r1, [r3, #0]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 ffb5 	bl	800c1c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	2000014b 	.word	0x2000014b

0800a26c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	32b0      	adds	r2, #176	; 0xb0
 800a27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a282:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	32b0      	adds	r2, #176	; 0xb0
 800a28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	e018      	b.n	800a2cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7c1b      	ldrb	r3, [r3, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10a      	bne.n	800a2b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <USBD_CDC_ReceivePacket+0x68>)
 800a2a4:	7819      	ldrb	r1, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 ffa7 	bl	800c204 <USBD_LL_PrepareReceive>
 800a2b6:	e008      	b.n	800a2ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <USBD_CDC_ReceivePacket+0x68>)
 800a2ba:	7819      	ldrb	r1, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2c2:	2340      	movs	r3, #64	; 0x40
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f001 ff9d 	bl	800c204 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	2000014c 	.word	0x2000014c

0800a2d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e01f      	b.n	800a330 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	79fa      	ldrb	r2, [r7, #7]
 800a322:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f001 fe11 	bl	800bf4c <USBD_LL_Init>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e025      	b.n	800a39c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	32ae      	adds	r2, #174	; 0xae
 800a362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00f      	beq.n	800a38c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	32ae      	adds	r2, #174	; 0xae
 800a376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	f107 020e 	add.w	r2, r7, #14
 800a380:	4610      	mov	r0, r2
 800a382:	4798      	blx	r3
 800a384:	4602      	mov	r2, r0
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 fe1f 	bl	800bff0 <USBD_LL_Start>
 800a3b2:	4603      	mov	r3, r0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b084      	sub	sp, #16
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d009      	beq.n	800a400 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	78fa      	ldrb	r2, [r7, #3]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	4798      	blx	r3
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	4611      	mov	r1, r2
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a434:	7bfb      	ldrb	r3, [r7, #15]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f001 f908 	bl	800b666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a464:	461a      	mov	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a472:	f003 031f 	and.w	r3, r3, #31
 800a476:	2b02      	cmp	r3, #2
 800a478:	d01a      	beq.n	800a4b0 <USBD_LL_SetupStage+0x72>
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d822      	bhi.n	800a4c4 <USBD_LL_SetupStage+0x86>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <USBD_LL_SetupStage+0x4a>
 800a482:	2b01      	cmp	r3, #1
 800a484:	d00a      	beq.n	800a49c <USBD_LL_SetupStage+0x5e>
 800a486:	e01d      	b.n	800a4c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fb5f 	bl	800ab54 <USBD_StdDevReq>
 800a496:	4603      	mov	r3, r0
 800a498:	73fb      	strb	r3, [r7, #15]
      break;
 800a49a:	e020      	b.n	800a4de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fbc7 	bl	800ac38 <USBD_StdItfReq>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ae:	e016      	b.n	800a4de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fc29 	bl	800ad10 <USBD_StdEPReq>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c2:	e00c      	b.n	800a4de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f001 fdec 	bl	800c0b0 <USBD_LL_StallEP>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]
      break;
 800a4dc:	bf00      	nop
  }

  return ret;
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d16e      	bne.n	800a5de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a506:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a50e:	2b03      	cmp	r3, #3
 800a510:	f040 8098 	bne.w	800a644 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d913      	bls.n	800a548 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	1ad2      	subs	r2, r2, r3
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	4293      	cmp	r3, r2
 800a538:	bf28      	it	cs
 800a53a:	4613      	movcs	r3, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f001 f984 	bl	800b84e <USBD_CtlContinueRx>
 800a546:	e07d      	b.n	800a644 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a54e:	f003 031f 	and.w	r3, r3, #31
 800a552:	2b02      	cmp	r3, #2
 800a554:	d014      	beq.n	800a580 <USBD_LL_DataOutStage+0x98>
 800a556:	2b02      	cmp	r3, #2
 800a558:	d81d      	bhi.n	800a596 <USBD_LL_DataOutStage+0xae>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <USBD_LL_DataOutStage+0x7c>
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d003      	beq.n	800a56a <USBD_LL_DataOutStage+0x82>
 800a562:	e018      	b.n	800a596 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	75bb      	strb	r3, [r7, #22]
            break;
 800a568:	e018      	b.n	800a59c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a570:	b2db      	uxtb	r3, r3
 800a572:	4619      	mov	r1, r3
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f000 fa5e 	bl	800aa36 <USBD_CoreFindIF>
 800a57a:	4603      	mov	r3, r0
 800a57c:	75bb      	strb	r3, [r7, #22]
            break;
 800a57e:	e00d      	b.n	800a59c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a586:	b2db      	uxtb	r3, r3
 800a588:	4619      	mov	r1, r3
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fa60 	bl	800aa50 <USBD_CoreFindEP>
 800a590:	4603      	mov	r3, r0
 800a592:	75bb      	strb	r3, [r7, #22]
            break;
 800a594:	e002      	b.n	800a59c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	75bb      	strb	r3, [r7, #22]
            break;
 800a59a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a59c:	7dbb      	ldrb	r3, [r7, #22]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d119      	bne.n	800a5d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d113      	bne.n	800a5d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a5ae:	7dba      	ldrb	r2, [r7, #22]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	32ae      	adds	r2, #174	; 0xae
 800a5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00b      	beq.n	800a5d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a5be:	7dba      	ldrb	r2, [r7, #22]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a5c6:	7dba      	ldrb	r2, [r7, #22]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	32ae      	adds	r2, #174	; 0xae
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f001 f94a 	bl	800b870 <USBD_CtlSendStatus>
 800a5dc:	e032      	b.n	800a644 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 fa31 	bl	800aa50 <USBD_CoreFindEP>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5f2:	7dbb      	ldrb	r3, [r7, #22]
 800a5f4:	2bff      	cmp	r3, #255	; 0xff
 800a5f6:	d025      	beq.n	800a644 <USBD_LL_DataOutStage+0x15c>
 800a5f8:	7dbb      	ldrb	r3, [r7, #22]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d122      	bne.n	800a644 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b03      	cmp	r3, #3
 800a608:	d117      	bne.n	800a63a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a60a:	7dba      	ldrb	r2, [r7, #22]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	32ae      	adds	r2, #174	; 0xae
 800a610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00f      	beq.n	800a63a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a61a:	7dba      	ldrb	r2, [r7, #22]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a622:	7dba      	ldrb	r2, [r7, #22]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	32ae      	adds	r2, #174	; 0xae
 800a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	7afa      	ldrb	r2, [r7, #11]
 800a630:	4611      	mov	r1, r2
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	4798      	blx	r3
 800a636:	4603      	mov	r3, r0
 800a638:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	e000      	b.n	800a646 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b086      	sub	sp, #24
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	460b      	mov	r3, r1
 800a658:	607a      	str	r2, [r7, #4]
 800a65a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a65c:	7afb      	ldrb	r3, [r7, #11]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d16f      	bne.n	800a742 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3314      	adds	r3, #20
 800a666:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d15a      	bne.n	800a728 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d914      	bls.n	800a6a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	689a      	ldr	r2, [r3, #8]
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	1ad2      	subs	r2, r2, r3
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	461a      	mov	r2, r3
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f001 f8ac 	bl	800b7f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a69a:	2300      	movs	r3, #0
 800a69c:	2200      	movs	r2, #0
 800a69e:	2100      	movs	r1, #0
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f001 fdaf 	bl	800c204 <USBD_LL_PrepareReceive>
 800a6a6:	e03f      	b.n	800a728 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d11c      	bne.n	800a6ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d316      	bcc.n	800a6ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d20f      	bcs.n	800a6ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f001 f88d 	bl	800b7f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f001 fd8c 	bl	800c204 <USBD_LL_PrepareReceive>
 800a6ec:	e01c      	b.n	800a728 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d10f      	bne.n	800a71a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d009      	beq.n	800a71a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a71a:	2180      	movs	r1, #128	; 0x80
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f001 fcc7 	bl	800c0b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f001 f8b7 	bl	800b896 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d03a      	beq.n	800a7a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff fe42 	bl	800a3bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a740:	e032      	b.n	800a7a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a742:	7afb      	ldrb	r3, [r7, #11]
 800a744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	4619      	mov	r1, r3
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f97f 	bl	800aa50 <USBD_CoreFindEP>
 800a752:	4603      	mov	r3, r0
 800a754:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	2bff      	cmp	r3, #255	; 0xff
 800a75a:	d025      	beq.n	800a7a8 <USBD_LL_DataInStage+0x15a>
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d122      	bne.n	800a7a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d11c      	bne.n	800a7a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a76e:	7dfa      	ldrb	r2, [r7, #23]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	32ae      	adds	r2, #174	; 0xae
 800a774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d014      	beq.n	800a7a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a77e:	7dfa      	ldrb	r2, [r7, #23]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a786:	7dfa      	ldrb	r2, [r7, #23]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	32ae      	adds	r2, #174	; 0xae
 800a78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	7afa      	ldrb	r2, [r7, #11]
 800a794:	4611      	mov	r1, r2
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	4798      	blx	r3
 800a79a:	4603      	mov	r3, r0
 800a79c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a79e:	7dbb      	ldrb	r3, [r7, #22]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a7a4:	7dbb      	ldrb	r3, [r7, #22]
 800a7a6:	e000      	b.n	800a7aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d014      	beq.n	800a818 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00e      	beq.n	800a818 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6852      	ldr	r2, [r2, #4]
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	4611      	mov	r1, r2
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a818:	2340      	movs	r3, #64	; 0x40
 800a81a:	2200      	movs	r2, #0
 800a81c:	2100      	movs	r1, #0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 fc01 	bl	800c026 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2240      	movs	r2, #64	; 0x40
 800a830:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a834:	2340      	movs	r3, #64	; 0x40
 800a836:	2200      	movs	r2, #0
 800a838:	2180      	movs	r1, #128	; 0x80
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fbf3 	bl	800c026 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2240      	movs	r2, #64	; 0x40
 800a84a:	621a      	str	r2, [r3, #32]

  return ret;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	460b      	mov	r3, r1
 800a860:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a884:	b2da      	uxtb	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2204      	movs	r2, #4
 800a890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b04      	cmp	r3, #4
 800a8b4:	d106      	bne.n	800a8c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d110      	bne.n	800a908 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00b      	beq.n	800a908 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d005      	beq.n	800a908 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	32ae      	adds	r2, #174	; 0xae
 800a928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	e01c      	b.n	800a96e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d115      	bne.n	800a96c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	32ae      	adds	r2, #174	; 0xae
 800a94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	32ae      	adds	r2, #174	; 0xae
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	78fa      	ldrb	r2, [r7, #3]
 800a966:	4611      	mov	r1, r2
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	460b      	mov	r3, r1
 800a980:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	32ae      	adds	r2, #174	; 0xae
 800a98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a994:	2303      	movs	r3, #3
 800a996:	e01c      	b.n	800a9d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d115      	bne.n	800a9d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	32ae      	adds	r2, #174	; 0xae
 800a9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00b      	beq.n	800a9d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	32ae      	adds	r2, #174	; 0xae
 800a9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	78fa      	ldrb	r2, [r7, #3]
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00e      	beq.n	800aa2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6852      	ldr	r2, [r2, #4]
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	4798      	blx	r3
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	885b      	ldrh	r3, [r3, #2]
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d920      	bls.n	800aad4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa9a:	e013      	b.n	800aac4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa9c:	f107 030a 	add.w	r3, r7, #10
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6978      	ldr	r0, [r7, #20]
 800aaa4:	f000 f81b 	bl	800aade <USBD_GetNextDesc>
 800aaa8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	785b      	ldrb	r3, [r3, #1]
 800aaae:	2b05      	cmp	r3, #5
 800aab0:	d108      	bne.n	800aac4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	789b      	ldrb	r3, [r3, #2]
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d008      	beq.n	800aad2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	885b      	ldrh	r3, [r3, #2]
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	897b      	ldrh	r3, [r7, #10]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d8e5      	bhi.n	800aa9c <USBD_GetEpDesc+0x32>
 800aad0:	e000      	b.n	800aad4 <USBD_GetEpDesc+0x6a>
          break;
 800aad2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aad4:	693b      	ldr	r3, [r7, #16]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	881a      	ldrh	r2, [r3, #0]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	4413      	add	r3, r2
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4413      	add	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab36:	8a3b      	ldrh	r3, [r7, #16]
 800ab38:	021b      	lsls	r3, r3, #8
 800ab3a:	b21a      	sxth	r2, r3
 800ab3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	b21b      	sxth	r3, r3
 800ab44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab46:	89fb      	ldrh	r3, [r7, #14]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab6a:	2b40      	cmp	r3, #64	; 0x40
 800ab6c:	d005      	beq.n	800ab7a <USBD_StdDevReq+0x26>
 800ab6e:	2b40      	cmp	r3, #64	; 0x40
 800ab70:	d857      	bhi.n	800ac22 <USBD_StdDevReq+0xce>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00f      	beq.n	800ab96 <USBD_StdDevReq+0x42>
 800ab76:	2b20      	cmp	r3, #32
 800ab78:	d153      	bne.n	800ac22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	32ae      	adds	r2, #174	; 0xae
 800ab84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	4798      	blx	r3
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
      break;
 800ab94:	e04a      	b.n	800ac2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	785b      	ldrb	r3, [r3, #1]
 800ab9a:	2b09      	cmp	r3, #9
 800ab9c:	d83b      	bhi.n	800ac16 <USBD_StdDevReq+0xc2>
 800ab9e:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <USBD_StdDevReq+0x50>)
 800aba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba4:	0800abf9 	.word	0x0800abf9
 800aba8:	0800ac0d 	.word	0x0800ac0d
 800abac:	0800ac17 	.word	0x0800ac17
 800abb0:	0800ac03 	.word	0x0800ac03
 800abb4:	0800ac17 	.word	0x0800ac17
 800abb8:	0800abd7 	.word	0x0800abd7
 800abbc:	0800abcd 	.word	0x0800abcd
 800abc0:	0800ac17 	.word	0x0800ac17
 800abc4:	0800abef 	.word	0x0800abef
 800abc8:	0800abe1 	.word	0x0800abe1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fa3c 	bl	800b04c <USBD_GetDescriptor>
          break;
 800abd4:	e024      	b.n	800ac20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fba1 	bl	800b320 <USBD_SetAddress>
          break;
 800abde:	e01f      	b.n	800ac20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fbe0 	bl	800b3a8 <USBD_SetConfig>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
          break;
 800abec:	e018      	b.n	800ac20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fc83 	bl	800b4fc <USBD_GetConfig>
          break;
 800abf6:	e013      	b.n	800ac20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fcb4 	bl	800b568 <USBD_GetStatus>
          break;
 800ac00:	e00e      	b.n	800ac20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fce3 	bl	800b5d0 <USBD_SetFeature>
          break;
 800ac0a:	e009      	b.n	800ac20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fd07 	bl	800b622 <USBD_ClrFeature>
          break;
 800ac14:	e004      	b.n	800ac20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fd5e 	bl	800b6da <USBD_CtlError>
          break;
 800ac1e:	bf00      	nop
      }
      break;
 800ac20:	e004      	b.n	800ac2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fd58 	bl	800b6da <USBD_CtlError>
      break;
 800ac2a:	bf00      	nop
  }

  return ret;
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop

0800ac38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac4e:	2b40      	cmp	r3, #64	; 0x40
 800ac50:	d005      	beq.n	800ac5e <USBD_StdItfReq+0x26>
 800ac52:	2b40      	cmp	r3, #64	; 0x40
 800ac54:	d852      	bhi.n	800acfc <USBD_StdItfReq+0xc4>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <USBD_StdItfReq+0x26>
 800ac5a:	2b20      	cmp	r3, #32
 800ac5c:	d14e      	bne.n	800acfc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	3b01      	subs	r3, #1
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d840      	bhi.n	800acee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	889b      	ldrh	r3, [r3, #4]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d836      	bhi.n	800ace4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	889b      	ldrh	r3, [r3, #4]
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fed9 	bl	800aa36 <USBD_CoreFindIF>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2bff      	cmp	r3, #255	; 0xff
 800ac8c:	d01d      	beq.n	800acca <USBD_StdItfReq+0x92>
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d11a      	bne.n	800acca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac94:	7bba      	ldrb	r2, [r7, #14]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	32ae      	adds	r2, #174	; 0xae
 800ac9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00f      	beq.n	800acc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aca4:	7bba      	ldrb	r2, [r7, #14]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800acac:	7bba      	ldrb	r2, [r7, #14]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	32ae      	adds	r2, #174	; 0xae
 800acb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
 800acbe:	4603      	mov	r3, r0
 800acc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acc2:	e004      	b.n	800acce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800acc4:	2303      	movs	r3, #3
 800acc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acc8:	e001      	b.n	800acce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800acca:	2303      	movs	r3, #3
 800accc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	88db      	ldrh	r3, [r3, #6]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d110      	bne.n	800acf8 <USBD_StdItfReq+0xc0>
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10d      	bne.n	800acf8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fdc7 	bl	800b870 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ace2:	e009      	b.n	800acf8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fcf7 	bl	800b6da <USBD_CtlError>
          break;
 800acec:	e004      	b.n	800acf8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fcf2 	bl	800b6da <USBD_CtlError>
          break;
 800acf6:	e000      	b.n	800acfa <USBD_StdItfReq+0xc2>
          break;
 800acf8:	bf00      	nop
      }
      break;
 800acfa:	e004      	b.n	800ad06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fceb 	bl	800b6da <USBD_CtlError>
      break;
 800ad04:	bf00      	nop
  }

  return ret;
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	889b      	ldrh	r3, [r3, #4]
 800ad22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad2c:	2b40      	cmp	r3, #64	; 0x40
 800ad2e:	d007      	beq.n	800ad40 <USBD_StdEPReq+0x30>
 800ad30:	2b40      	cmp	r3, #64	; 0x40
 800ad32:	f200 817f 	bhi.w	800b034 <USBD_StdEPReq+0x324>
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d02a      	beq.n	800ad90 <USBD_StdEPReq+0x80>
 800ad3a:	2b20      	cmp	r3, #32
 800ad3c:	f040 817a 	bne.w	800b034 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7ff fe83 	bl	800aa50 <USBD_CoreFindEP>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad4e:	7b7b      	ldrb	r3, [r7, #13]
 800ad50:	2bff      	cmp	r3, #255	; 0xff
 800ad52:	f000 8174 	beq.w	800b03e <USBD_StdEPReq+0x32e>
 800ad56:	7b7b      	ldrb	r3, [r7, #13]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f040 8170 	bne.w	800b03e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad5e:	7b7a      	ldrb	r2, [r7, #13]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad66:	7b7a      	ldrb	r2, [r7, #13]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	32ae      	adds	r2, #174	; 0xae
 800ad6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 8163 	beq.w	800b03e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad78:	7b7a      	ldrb	r2, [r7, #13]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	32ae      	adds	r2, #174	; 0xae
 800ad7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	4798      	blx	r3
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad8e:	e156      	b.n	800b03e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	785b      	ldrb	r3, [r3, #1]
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d008      	beq.n	800adaa <USBD_StdEPReq+0x9a>
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	f300 8145 	bgt.w	800b028 <USBD_StdEPReq+0x318>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 809b 	beq.w	800aeda <USBD_StdEPReq+0x1ca>
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d03c      	beq.n	800ae22 <USBD_StdEPReq+0x112>
 800ada8:	e13e      	b.n	800b028 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d002      	beq.n	800adbc <USBD_StdEPReq+0xac>
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d016      	beq.n	800ade8 <USBD_StdEPReq+0xd8>
 800adba:	e02c      	b.n	800ae16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00d      	beq.n	800adde <USBD_StdEPReq+0xce>
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b80      	cmp	r3, #128	; 0x80
 800adc6:	d00a      	beq.n	800adde <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f001 f96f 	bl	800c0b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800add2:	2180      	movs	r1, #128	; 0x80
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f96b 	bl	800c0b0 <USBD_LL_StallEP>
 800adda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800addc:	e020      	b.n	800ae20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fc7a 	bl	800b6da <USBD_CtlError>
              break;
 800ade6:	e01b      	b.n	800ae20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	885b      	ldrh	r3, [r3, #2]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10e      	bne.n	800ae0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00b      	beq.n	800ae0e <USBD_StdEPReq+0xfe>
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	2b80      	cmp	r3, #128	; 0x80
 800adfa:	d008      	beq.n	800ae0e <USBD_StdEPReq+0xfe>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	88db      	ldrh	r3, [r3, #6]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 f951 	bl	800c0b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fd2e 	bl	800b870 <USBD_CtlSendStatus>

              break;
 800ae14:	e004      	b.n	800ae20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fc5e 	bl	800b6da <USBD_CtlError>
              break;
 800ae1e:	bf00      	nop
          }
          break;
 800ae20:	e107      	b.n	800b032 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d002      	beq.n	800ae34 <USBD_StdEPReq+0x124>
 800ae2e:	2b03      	cmp	r3, #3
 800ae30:	d016      	beq.n	800ae60 <USBD_StdEPReq+0x150>
 800ae32:	e04b      	b.n	800aecc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00d      	beq.n	800ae56 <USBD_StdEPReq+0x146>
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	2b80      	cmp	r3, #128	; 0x80
 800ae3e:	d00a      	beq.n	800ae56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 f933 	bl	800c0b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae4a:	2180      	movs	r1, #128	; 0x80
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f001 f92f 	bl	800c0b0 <USBD_LL_StallEP>
 800ae52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae54:	e040      	b.n	800aed8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fc3e 	bl	800b6da <USBD_CtlError>
              break;
 800ae5e:	e03b      	b.n	800aed8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	885b      	ldrh	r3, [r3, #2]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d136      	bne.n	800aed6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d004      	beq.n	800ae7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f001 f939 	bl	800c0ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fcf7 	bl	800b870 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff fde2 	bl	800aa50 <USBD_CoreFindEP>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae90:	7b7b      	ldrb	r3, [r7, #13]
 800ae92:	2bff      	cmp	r3, #255	; 0xff
 800ae94:	d01f      	beq.n	800aed6 <USBD_StdEPReq+0x1c6>
 800ae96:	7b7b      	ldrb	r3, [r7, #13]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d11c      	bne.n	800aed6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae9c:	7b7a      	ldrb	r2, [r7, #13]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aea4:	7b7a      	ldrb	r2, [r7, #13]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	32ae      	adds	r2, #174	; 0xae
 800aeaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d010      	beq.n	800aed6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aeb4:	7b7a      	ldrb	r2, [r7, #13]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	32ae      	adds	r2, #174	; 0xae
 800aeba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	4798      	blx	r3
 800aec6:	4603      	mov	r3, r0
 800aec8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aeca:	e004      	b.n	800aed6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fc03 	bl	800b6da <USBD_CtlError>
              break;
 800aed4:	e000      	b.n	800aed8 <USBD_StdEPReq+0x1c8>
              break;
 800aed6:	bf00      	nop
          }
          break;
 800aed8:	e0ab      	b.n	800b032 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d002      	beq.n	800aeec <USBD_StdEPReq+0x1dc>
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d032      	beq.n	800af50 <USBD_StdEPReq+0x240>
 800aeea:	e097      	b.n	800b01c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <USBD_StdEPReq+0x1f2>
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b80      	cmp	r3, #128	; 0x80
 800aef6:	d004      	beq.n	800af02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fbed 	bl	800b6da <USBD_CtlError>
                break;
 800af00:	e091      	b.n	800b026 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af06:	2b00      	cmp	r3, #0
 800af08:	da0b      	bge.n	800af22 <USBD_StdEPReq+0x212>
 800af0a:	7bbb      	ldrb	r3, [r7, #14]
 800af0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	3310      	adds	r3, #16
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	4413      	add	r3, r2
 800af1e:	3304      	adds	r3, #4
 800af20:	e00b      	b.n	800af3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af28:	4613      	mov	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	4413      	add	r3, r2
 800af38:	3304      	adds	r3, #4
 800af3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2202      	movs	r2, #2
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fc37 	bl	800b7bc <USBD_CtlSendData>
              break;
 800af4e:	e06a      	b.n	800b026 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af54:	2b00      	cmp	r3, #0
 800af56:	da11      	bge.n	800af7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	f003 020f 	and.w	r2, r3, #15
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	4613      	mov	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	440b      	add	r3, r1
 800af6a:	3324      	adds	r3, #36	; 0x24
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d117      	bne.n	800afa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fbb0 	bl	800b6da <USBD_CtlError>
                  break;
 800af7a:	e054      	b.n	800b026 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
 800af7e:	f003 020f 	and.w	r2, r3, #15
 800af82:	6879      	ldr	r1, [r7, #4]
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb9d 	bl	800b6da <USBD_CtlError>
                  break;
 800afa0:	e041      	b.n	800b026 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	da0b      	bge.n	800afc2 <USBD_StdEPReq+0x2b2>
 800afaa:	7bbb      	ldrb	r3, [r7, #14]
 800afac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	3310      	adds	r3, #16
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	4413      	add	r3, r2
 800afbe:	3304      	adds	r3, #4
 800afc0:	e00b      	b.n	800afda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	4413      	add	r3, r2
 800afd8:	3304      	adds	r3, #4
 800afda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <USBD_StdEPReq+0x2d8>
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	2b80      	cmp	r3, #128	; 0x80
 800afe6:	d103      	bne.n	800aff0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e00e      	b.n	800b00e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 f899 	bl	800c12c <USBD_LL_IsStallEP>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2201      	movs	r2, #1
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	e002      	b.n	800b00e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2202      	movs	r2, #2
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fbd1 	bl	800b7bc <USBD_CtlSendData>
              break;
 800b01a:	e004      	b.n	800b026 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb5b 	bl	800b6da <USBD_CtlError>
              break;
 800b024:	bf00      	nop
          }
          break;
 800b026:	e004      	b.n	800b032 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fb55 	bl	800b6da <USBD_CtlError>
          break;
 800b030:	bf00      	nop
      }
      break;
 800b032:	e005      	b.n	800b040 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fb4f 	bl	800b6da <USBD_CtlError>
      break;
 800b03c:	e000      	b.n	800b040 <USBD_StdEPReq+0x330>
      break;
 800b03e:	bf00      	nop
  }

  return ret;
 800b040:	7bfb      	ldrb	r3, [r7, #15]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	885b      	ldrh	r3, [r3, #2]
 800b066:	0a1b      	lsrs	r3, r3, #8
 800b068:	b29b      	uxth	r3, r3
 800b06a:	3b01      	subs	r3, #1
 800b06c:	2b06      	cmp	r3, #6
 800b06e:	f200 8128 	bhi.w	800b2c2 <USBD_GetDescriptor+0x276>
 800b072:	a201      	add	r2, pc, #4	; (adr r2, 800b078 <USBD_GetDescriptor+0x2c>)
 800b074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b078:	0800b095 	.word	0x0800b095
 800b07c:	0800b0ad 	.word	0x0800b0ad
 800b080:	0800b0ed 	.word	0x0800b0ed
 800b084:	0800b2c3 	.word	0x0800b2c3
 800b088:	0800b2c3 	.word	0x0800b2c3
 800b08c:	0800b263 	.word	0x0800b263
 800b090:	0800b28f 	.word	0x0800b28f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	7c12      	ldrb	r2, [r2, #16]
 800b0a0:	f107 0108 	add.w	r1, r7, #8
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4798      	blx	r3
 800b0a8:	60f8      	str	r0, [r7, #12]
      break;
 800b0aa:	e112      	b.n	800b2d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	7c1b      	ldrb	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10d      	bne.n	800b0d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0bc:	f107 0208 	add.w	r2, r7, #8
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
 800b0c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0ce:	e100      	b.n	800b2d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	f107 0208 	add.w	r2, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	701a      	strb	r2, [r3, #0]
      break;
 800b0ea:	e0f2      	b.n	800b2d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	885b      	ldrh	r3, [r3, #2]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	f200 80ac 	bhi.w	800b250 <USBD_GetDescriptor+0x204>
 800b0f8:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <USBD_GetDescriptor+0xb4>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b119 	.word	0x0800b119
 800b104:	0800b14d 	.word	0x0800b14d
 800b108:	0800b181 	.word	0x0800b181
 800b10c:	0800b1b5 	.word	0x0800b1b5
 800b110:	0800b1e9 	.word	0x0800b1e9
 800b114:	0800b21d 	.word	0x0800b21d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	7c12      	ldrb	r2, [r2, #16]
 800b130:	f107 0108 	add.w	r1, r7, #8
 800b134:	4610      	mov	r0, r2
 800b136:	4798      	blx	r3
 800b138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b13a:	e091      	b.n	800b260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 facb 	bl	800b6da <USBD_CtlError>
            err++;
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	3301      	adds	r3, #1
 800b148:	72fb      	strb	r3, [r7, #11]
          break;
 800b14a:	e089      	b.n	800b260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	7c12      	ldrb	r2, [r2, #16]
 800b164:	f107 0108 	add.w	r1, r7, #8
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
 800b16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16e:	e077      	b.n	800b260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fab1 	bl	800b6da <USBD_CtlError>
            err++;
 800b178:	7afb      	ldrb	r3, [r7, #11]
 800b17a:	3301      	adds	r3, #1
 800b17c:	72fb      	strb	r3, [r7, #11]
          break;
 800b17e:	e06f      	b.n	800b260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	7c12      	ldrb	r2, [r2, #16]
 800b198:	f107 0108 	add.w	r1, r7, #8
 800b19c:	4610      	mov	r0, r2
 800b19e:	4798      	blx	r3
 800b1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a2:	e05d      	b.n	800b260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa97 	bl	800b6da <USBD_CtlError>
            err++;
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b2:	e055      	b.n	800b260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7c12      	ldrb	r2, [r2, #16]
 800b1cc:	f107 0108 	add.w	r1, r7, #8
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4798      	blx	r3
 800b1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1d6:	e043      	b.n	800b260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa7d 	bl	800b6da <USBD_CtlError>
            err++;
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1e6:	e03b      	b.n	800b260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00b      	beq.n	800b20c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	7c12      	ldrb	r2, [r2, #16]
 800b200:	f107 0108 	add.w	r1, r7, #8
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20a:	e029      	b.n	800b260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa63 	bl	800b6da <USBD_CtlError>
            err++;
 800b214:	7afb      	ldrb	r3, [r7, #11]
 800b216:	3301      	adds	r3, #1
 800b218:	72fb      	strb	r3, [r7, #11]
          break;
 800b21a:	e021      	b.n	800b260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	7c12      	ldrb	r2, [r2, #16]
 800b234:	f107 0108 	add.w	r1, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b23e:	e00f      	b.n	800b260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa49 	bl	800b6da <USBD_CtlError>
            err++;
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	3301      	adds	r3, #1
 800b24c:	72fb      	strb	r3, [r7, #11]
          break;
 800b24e:	e007      	b.n	800b260 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fa41 	bl	800b6da <USBD_CtlError>
          err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b25e:	bf00      	nop
      }
      break;
 800b260:	e037      	b.n	800b2d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7c1b      	ldrb	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d109      	bne.n	800b27e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b272:	f107 0208 	add.w	r2, r7, #8
 800b276:	4610      	mov	r0, r2
 800b278:	4798      	blx	r3
 800b27a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b27c:	e029      	b.n	800b2d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fa2a 	bl	800b6da <USBD_CtlError>
        err++;
 800b286:	7afb      	ldrb	r3, [r7, #11]
 800b288:	3301      	adds	r3, #1
 800b28a:	72fb      	strb	r3, [r7, #11]
      break;
 800b28c:	e021      	b.n	800b2d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7c1b      	ldrb	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10d      	bne.n	800b2b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29e:	f107 0208 	add.w	r2, r7, #8
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	4798      	blx	r3
 800b2a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	2207      	movs	r2, #7
 800b2ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2b0:	e00f      	b.n	800b2d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fa10 	bl	800b6da <USBD_CtlError>
        err++;
 800b2ba:	7afb      	ldrb	r3, [r7, #11]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	72fb      	strb	r3, [r7, #11]
      break;
 800b2c0:	e007      	b.n	800b2d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa08 	bl	800b6da <USBD_CtlError>
      err++;
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d0:	bf00      	nop
  }

  if (err != 0U)
 800b2d2:	7afb      	ldrb	r3, [r7, #11]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d11e      	bne.n	800b316 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	88db      	ldrh	r3, [r3, #6]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d016      	beq.n	800b30e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b2e0:	893b      	ldrh	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00e      	beq.n	800b304 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	88da      	ldrh	r2, [r3, #6]
 800b2ea:	893b      	ldrh	r3, [r7, #8]
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bf28      	it	cs
 800b2f0:	4613      	movcs	r3, r2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2f6:	893b      	ldrh	r3, [r7, #8]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fa5d 	bl	800b7bc <USBD_CtlSendData>
 800b302:	e009      	b.n	800b318 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f9e7 	bl	800b6da <USBD_CtlError>
 800b30c:	e004      	b.n	800b318 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 faae 	bl	800b870 <USBD_CtlSendStatus>
 800b314:	e000      	b.n	800b318 <USBD_GetDescriptor+0x2cc>
    return;
 800b316:	bf00      	nop
  }
}
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop

0800b320 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	889b      	ldrh	r3, [r3, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d131      	bne.n	800b396 <USBD_SetAddress+0x76>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d12d      	bne.n	800b396 <USBD_SetAddress+0x76>
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	2b7f      	cmp	r3, #127	; 0x7f
 800b340:	d829      	bhi.n	800b396 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	885b      	ldrh	r3, [r3, #2]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b34c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b03      	cmp	r3, #3
 800b358:	d104      	bne.n	800b364 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f9bc 	bl	800b6da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b362:	e01d      	b.n	800b3a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	7bfa      	ldrb	r2, [r7, #15]
 800b368:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 ff07 	bl	800c184 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa7a 	bl	800b870 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d004      	beq.n	800b38c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2202      	movs	r2, #2
 800b386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38a:	e009      	b.n	800b3a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b394:	e004      	b.n	800b3a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f99e 	bl	800b6da <USBD_CtlError>
  }
}
 800b39e:	bf00      	nop
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	885b      	ldrh	r3, [r3, #2]
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	4b4e      	ldr	r3, [pc, #312]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b3be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3c0:	4b4d      	ldr	r3, [pc, #308]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d905      	bls.n	800b3d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f985 	bl	800b6da <USBD_CtlError>
    return USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e08c      	b.n	800b4ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d002      	beq.n	800b3e6 <USBD_SetConfig+0x3e>
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d029      	beq.n	800b438 <USBD_SetConfig+0x90>
 800b3e4:	e075      	b.n	800b4d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3e6:	4b44      	ldr	r3, [pc, #272]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d020      	beq.n	800b430 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3ee:	4b42      	ldr	r3, [pc, #264]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3f8:	4b3f      	ldr	r3, [pc, #252]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7fe ffe7 	bl	800a3d2 <USBD_SetClassConfig>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f962 	bl	800b6da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b41e:	e065      	b.n	800b4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa25 	bl	800b870 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2203      	movs	r2, #3
 800b42a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b42e:	e05d      	b.n	800b4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa1d 	bl	800b870 <USBD_CtlSendStatus>
      break;
 800b436:	e059      	b.n	800b4ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b438:	4b2f      	ldr	r3, [pc, #188]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d112      	bne.n	800b466 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b448:	4b2b      	ldr	r3, [pc, #172]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b452:	4b29      	ldr	r3, [pc, #164]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7fe ffd6 	bl	800a40a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa06 	bl	800b870 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b464:	e042      	b.n	800b4ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b466:	4b24      	ldr	r3, [pc, #144]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	429a      	cmp	r2, r3
 800b472:	d02a      	beq.n	800b4ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7fe ffc4 	bl	800a40a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b482:	4b1d      	ldr	r3, [pc, #116]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b48c:	4b1a      	ldr	r3, [pc, #104]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7fe ff9d 	bl	800a3d2 <USBD_SetClassConfig>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00f      	beq.n	800b4c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f918 	bl	800b6da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7fe ffa9 	bl	800a40a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b4c0:	e014      	b.n	800b4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9d4 	bl	800b870 <USBD_CtlSendStatus>
      break;
 800b4c8:	e010      	b.n	800b4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f9d0 	bl	800b870 <USBD_CtlSendStatus>
      break;
 800b4d0:	e00c      	b.n	800b4ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f900 	bl	800b6da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4da:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <USBD_SetConfig+0x150>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fe ff92 	bl	800a40a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ea:	bf00      	nop
  }

  return ret;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000798 	.word	0x20000798

0800b4fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	88db      	ldrh	r3, [r3, #6]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d004      	beq.n	800b518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f8e2 	bl	800b6da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b516:	e023      	b.n	800b560 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	dc02      	bgt.n	800b52a <USBD_GetConfig+0x2e>
 800b524:	2b00      	cmp	r3, #0
 800b526:	dc03      	bgt.n	800b530 <USBD_GetConfig+0x34>
 800b528:	e015      	b.n	800b556 <USBD_GetConfig+0x5a>
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d00b      	beq.n	800b546 <USBD_GetConfig+0x4a>
 800b52e:	e012      	b.n	800b556 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3308      	adds	r3, #8
 800b53a:	2201      	movs	r2, #1
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f93c 	bl	800b7bc <USBD_CtlSendData>
        break;
 800b544:	e00c      	b.n	800b560 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	3304      	adds	r3, #4
 800b54a:	2201      	movs	r2, #1
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f934 	bl	800b7bc <USBD_CtlSendData>
        break;
 800b554:	e004      	b.n	800b560 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f8be 	bl	800b6da <USBD_CtlError>
        break;
 800b55e:	bf00      	nop
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	3b01      	subs	r3, #1
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d81e      	bhi.n	800b5be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	88db      	ldrh	r3, [r3, #6]
 800b584:	2b02      	cmp	r3, #2
 800b586:	d004      	beq.n	800b592 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f8a5 	bl	800b6da <USBD_CtlError>
        break;
 800b590:	e01a      	b.n	800b5c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d005      	beq.n	800b5ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	f043 0202 	orr.w	r2, r3, #2
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	330c      	adds	r3, #12
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f900 	bl	800b7bc <USBD_CtlSendData>
      break;
 800b5bc:	e004      	b.n	800b5c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f88a 	bl	800b6da <USBD_CtlError>
      break;
 800b5c6:	bf00      	nop
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	885b      	ldrh	r3, [r3, #2]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d107      	bne.n	800b5f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f940 	bl	800b870 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5f0:	e013      	b.n	800b61a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	885b      	ldrh	r3, [r3, #2]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d10b      	bne.n	800b612 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	889b      	ldrh	r3, [r3, #4]
 800b5fe:	0a1b      	lsrs	r3, r3, #8
 800b600:	b29b      	uxth	r3, r3
 800b602:	b2da      	uxtb	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f930 	bl	800b870 <USBD_CtlSendStatus>
}
 800b610:	e003      	b.n	800b61a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f860 	bl	800b6da <USBD_CtlError>
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b632:	b2db      	uxtb	r3, r3
 800b634:	3b01      	subs	r3, #1
 800b636:	2b02      	cmp	r3, #2
 800b638:	d80b      	bhi.n	800b652 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	885b      	ldrh	r3, [r3, #2]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d10c      	bne.n	800b65c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f910 	bl	800b870 <USBD_CtlSendStatus>
      }
      break;
 800b650:	e004      	b.n	800b65c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f840 	bl	800b6da <USBD_CtlError>
      break;
 800b65a:	e000      	b.n	800b65e <USBD_ClrFeature+0x3c>
      break;
 800b65c:	bf00      	nop
  }
}
 800b65e:	bf00      	nop
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3301      	adds	r3, #1
 800b680:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3301      	adds	r3, #1
 800b68e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fa41 	bl	800ab18 <SWAPBYTE>
 800b696:	4603      	mov	r3, r0
 800b698:	461a      	mov	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fa34 	bl	800ab18 <SWAPBYTE>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f7ff fa27 	bl	800ab18 <SWAPBYTE>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	80da      	strh	r2, [r3, #6]
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6e4:	2180      	movs	r1, #128	; 0x80
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fce2 	bl	800c0b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fcde 	bl	800c0b0 <USBD_LL_StallEP>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d036      	beq.n	800b780 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	f000 f836 	bl	800b788 <USBD_GetLen>
 800b71c:	4603      	mov	r3, r0
 800b71e:	3301      	adds	r3, #1
 800b720:	b29b      	uxth	r3, r3
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	4413      	add	r3, r2
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	7812      	ldrb	r2, [r2, #0]
 800b734:	701a      	strb	r2, [r3, #0]
  idx++;
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	3301      	adds	r3, #1
 800b73a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b73c:	7dfb      	ldrb	r3, [r7, #23]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	2203      	movs	r2, #3
 800b744:	701a      	strb	r2, [r3, #0]
  idx++;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
 800b748:	3301      	adds	r3, #1
 800b74a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b74c:	e013      	b.n	800b776 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	4413      	add	r3, r2
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	3301      	adds	r3, #1
 800b75e:	613b      	str	r3, [r7, #16]
    idx++;
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	3301      	adds	r3, #1
 800b764:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	4413      	add	r3, r2
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	3301      	adds	r3, #1
 800b774:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e7      	bne.n	800b74e <USBD_GetString+0x52>
 800b77e:	e000      	b.n	800b782 <USBD_GetString+0x86>
    return;
 800b780:	bf00      	nop
  }
}
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b798:	e005      	b.n	800b7a6 <USBD_GetLen+0x1e>
  {
    len++;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	3301      	adds	r3, #1
 800b79e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1f5      	bne.n	800b79a <USBD_GetLen+0x12>
  }

  return len;
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 fced 	bl	800c1c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	2100      	movs	r1, #0
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 fcdc 	bl	800c1c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2203      	movs	r2, #3
 800b824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	2100      	movs	r1, #0
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 fce0 	bl	800c204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	2100      	movs	r1, #0
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fccf 	bl	800c204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2204      	movs	r2, #4
 800b87c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b880:	2300      	movs	r3, #0
 800b882:	2200      	movs	r2, #0
 800b884:	2100      	movs	r1, #0
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fc9b 	bl	800c1c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2205      	movs	r2, #5
 800b8a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fca9 	bl	800c204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	4912      	ldr	r1, [pc, #72]	; (800b90c <MX_USB_DEVICE_Init+0x50>)
 800b8c4:	4812      	ldr	r0, [pc, #72]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8c6:	f7fe fd07 	bl	800a2d8 <USBD_Init>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8d0:	f7f5 fce0 	bl	8001294 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b8d4:	490f      	ldr	r1, [pc, #60]	; (800b914 <MX_USB_DEVICE_Init+0x58>)
 800b8d6:	480e      	ldr	r0, [pc, #56]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8d8:	f7fe fd2e 	bl	800a338 <USBD_RegisterClass>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b8e2:	f7f5 fcd7 	bl	8001294 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b8e6:	490c      	ldr	r1, [pc, #48]	; (800b918 <MX_USB_DEVICE_Init+0x5c>)
 800b8e8:	4809      	ldr	r0, [pc, #36]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8ea:	f7fe fc1f 	bl	800a12c <USBD_CDC_RegisterInterface>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b8f4:	f7f5 fcce 	bl	8001294 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800b8f8:	4805      	ldr	r0, [pc, #20]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8fa:	f7fe fd53 	bl	800a3a4 <USBD_Start>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b904:	f7f5 fcc6 	bl	8001294 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b908:	bf00      	nop
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20000164 	.word	0x20000164
 800b910:	2000079c 	.word	0x2000079c
 800b914:	200000d0 	.word	0x200000d0
 800b918:	20000150 	.word	0x20000150

0800b91c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800b920:	2200      	movs	r2, #0
 800b922:	4905      	ldr	r1, [pc, #20]	; (800b938 <CDC_Init_HS+0x1c>)
 800b924:	4805      	ldr	r0, [pc, #20]	; (800b93c <CDC_Init_HS+0x20>)
 800b926:	f7fe fc1b 	bl	800a160 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800b92a:	4905      	ldr	r1, [pc, #20]	; (800b940 <CDC_Init_HS+0x24>)
 800b92c:	4803      	ldr	r0, [pc, #12]	; (800b93c <CDC_Init_HS+0x20>)
 800b92e:	f7fe fc39 	bl	800a1a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b932:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b934:	4618      	mov	r0, r3
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20001278 	.word	0x20001278
 800b93c:	2000079c 	.word	0x2000079c
 800b940:	20000a78 	.word	0x20000a78

0800b944 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800b944:	b480      	push	{r7}
 800b946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800b948:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	6039      	str	r1, [r7, #0]
 800b95e:	71fb      	strb	r3, [r7, #7]
 800b960:	4613      	mov	r3, r2
 800b962:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b23      	cmp	r3, #35	; 0x23
 800b968:	d84a      	bhi.n	800ba00 <CDC_Control_HS+0xac>
 800b96a:	a201      	add	r2, pc, #4	; (adr r2, 800b970 <CDC_Control_HS+0x1c>)
 800b96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b970:	0800ba01 	.word	0x0800ba01
 800b974:	0800ba01 	.word	0x0800ba01
 800b978:	0800ba01 	.word	0x0800ba01
 800b97c:	0800ba01 	.word	0x0800ba01
 800b980:	0800ba01 	.word	0x0800ba01
 800b984:	0800ba01 	.word	0x0800ba01
 800b988:	0800ba01 	.word	0x0800ba01
 800b98c:	0800ba01 	.word	0x0800ba01
 800b990:	0800ba01 	.word	0x0800ba01
 800b994:	0800ba01 	.word	0x0800ba01
 800b998:	0800ba01 	.word	0x0800ba01
 800b99c:	0800ba01 	.word	0x0800ba01
 800b9a0:	0800ba01 	.word	0x0800ba01
 800b9a4:	0800ba01 	.word	0x0800ba01
 800b9a8:	0800ba01 	.word	0x0800ba01
 800b9ac:	0800ba01 	.word	0x0800ba01
 800b9b0:	0800ba01 	.word	0x0800ba01
 800b9b4:	0800ba01 	.word	0x0800ba01
 800b9b8:	0800ba01 	.word	0x0800ba01
 800b9bc:	0800ba01 	.word	0x0800ba01
 800b9c0:	0800ba01 	.word	0x0800ba01
 800b9c4:	0800ba01 	.word	0x0800ba01
 800b9c8:	0800ba01 	.word	0x0800ba01
 800b9cc:	0800ba01 	.word	0x0800ba01
 800b9d0:	0800ba01 	.word	0x0800ba01
 800b9d4:	0800ba01 	.word	0x0800ba01
 800b9d8:	0800ba01 	.word	0x0800ba01
 800b9dc:	0800ba01 	.word	0x0800ba01
 800b9e0:	0800ba01 	.word	0x0800ba01
 800b9e4:	0800ba01 	.word	0x0800ba01
 800b9e8:	0800ba01 	.word	0x0800ba01
 800b9ec:	0800ba01 	.word	0x0800ba01
 800b9f0:	0800ba01 	.word	0x0800ba01
 800b9f4:	0800ba01 	.word	0x0800ba01
 800b9f8:	0800ba01 	.word	0x0800ba01
 800b9fc:	0800ba01 	.word	0x0800ba01
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba00:	bf00      	nop
  }

  return (USBD_OK);
 800ba02:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4805      	ldr	r0, [pc, #20]	; (800ba34 <CDC_Receive_HS+0x24>)
 800ba1e:	f7fe fbc1 	bl	800a1a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ba22:	4804      	ldr	r0, [pc, #16]	; (800ba34 <CDC_Receive_HS+0x24>)
 800ba24:	f7fe fc22 	bl	800a26c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ba28:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2000079c 	.word	0x2000079c

0800ba38 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <CDC_Transmit_HS+0x48>)
 800ba4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e00b      	b.n	800ba76 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ba5e:	887b      	ldrh	r3, [r7, #2]
 800ba60:	461a      	mov	r2, r3
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	4806      	ldr	r0, [pc, #24]	; (800ba80 <CDC_Transmit_HS+0x48>)
 800ba66:	f7fe fb7b 	bl	800a160 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ba6a:	4805      	ldr	r0, [pc, #20]	; (800ba80 <CDC_Transmit_HS+0x48>)
 800ba6c:	f7fe fbb8 	bl	800a1e0 <USBD_CDC_TransmitPacket>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	2000079c 	.word	0x2000079c

0800ba84 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ba96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
	...

0800baa8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	6039      	str	r1, [r7, #0]
 800bab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2212      	movs	r2, #18
 800bab8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800baba:	4b03      	ldr	r3, [pc, #12]	; (800bac8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800babc:	4618      	mov	r0, r3
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	20000180 	.word	0x20000180

0800bacc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	6039      	str	r1, [r7, #0]
 800bad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2204      	movs	r2, #4
 800badc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bade:	4b03      	ldr	r3, [pc, #12]	; (800baec <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	20000194 	.word	0x20000194

0800baf0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d105      	bne.n	800bb0e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	4907      	ldr	r1, [pc, #28]	; (800bb24 <USBD_HS_ProductStrDescriptor+0x34>)
 800bb06:	4808      	ldr	r0, [pc, #32]	; (800bb28 <USBD_HS_ProductStrDescriptor+0x38>)
 800bb08:	f7ff fdf8 	bl	800b6fc <USBD_GetString>
 800bb0c:	e004      	b.n	800bb18 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	4904      	ldr	r1, [pc, #16]	; (800bb24 <USBD_HS_ProductStrDescriptor+0x34>)
 800bb12:	4805      	ldr	r0, [pc, #20]	; (800bb28 <USBD_HS_ProductStrDescriptor+0x38>)
 800bb14:	f7ff fdf2 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20001a78 	.word	0x20001a78
 800bb28:	0800f154 	.word	0x0800f154

0800bb2c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	6039      	str	r1, [r7, #0]
 800bb36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	4904      	ldr	r1, [pc, #16]	; (800bb4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800bb3c:	4804      	ldr	r0, [pc, #16]	; (800bb50 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800bb3e:	f7ff fddd 	bl	800b6fc <USBD_GetString>
  return USBD_StrDesc;
 800bb42:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20001a78 	.word	0x20001a78
 800bb50:	0800f16c 	.word	0x0800f16c

0800bb54 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	6039      	str	r1, [r7, #0]
 800bb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	221a      	movs	r2, #26
 800bb64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb66:	f000 f843 	bl	800bbf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bb6a:	4b02      	ldr	r3, [pc, #8]	; (800bb74 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	20000198 	.word	0x20000198

0800bb78 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	6039      	str	r1, [r7, #0]
 800bb82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d105      	bne.n	800bb96 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	4907      	ldr	r1, [pc, #28]	; (800bbac <USBD_HS_ConfigStrDescriptor+0x34>)
 800bb8e:	4808      	ldr	r0, [pc, #32]	; (800bbb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bb90:	f7ff fdb4 	bl	800b6fc <USBD_GetString>
 800bb94:	e004      	b.n	800bba0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	4904      	ldr	r1, [pc, #16]	; (800bbac <USBD_HS_ConfigStrDescriptor+0x34>)
 800bb9a:	4805      	ldr	r0, [pc, #20]	; (800bbb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bb9c:	f7ff fdae 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bba0:	4b02      	ldr	r3, [pc, #8]	; (800bbac <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20001a78 	.word	0x20001a78
 800bbb0:	0800f180 	.word	0x0800f180

0800bbb4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	6039      	str	r1, [r7, #0]
 800bbbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d105      	bne.n	800bbd2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	4907      	ldr	r1, [pc, #28]	; (800bbe8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bbca:	4808      	ldr	r0, [pc, #32]	; (800bbec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bbcc:	f7ff fd96 	bl	800b6fc <USBD_GetString>
 800bbd0:	e004      	b.n	800bbdc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	4904      	ldr	r1, [pc, #16]	; (800bbe8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bbd6:	4805      	ldr	r0, [pc, #20]	; (800bbec <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bbd8:	f7ff fd90 	bl	800b6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbdc:	4b02      	ldr	r3, [pc, #8]	; (800bbe8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20001a78 	.word	0x20001a78
 800bbec:	0800f18c 	.word	0x0800f18c

0800bbf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bbf6:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <Get_SerialNum+0x44>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bbfc:	4b0e      	ldr	r3, [pc, #56]	; (800bc38 <Get_SerialNum+0x48>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc02:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <Get_SerialNum+0x4c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d009      	beq.n	800bc2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc16:	2208      	movs	r2, #8
 800bc18:	4909      	ldr	r1, [pc, #36]	; (800bc40 <Get_SerialNum+0x50>)
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 f814 	bl	800bc48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc20:	2204      	movs	r2, #4
 800bc22:	4908      	ldr	r1, [pc, #32]	; (800bc44 <Get_SerialNum+0x54>)
 800bc24:	68b8      	ldr	r0, [r7, #8]
 800bc26:	f000 f80f 	bl	800bc48 <IntToUnicode>
  }
}
 800bc2a:	bf00      	nop
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	1fff7a10 	.word	0x1fff7a10
 800bc38:	1fff7a14 	.word	0x1fff7a14
 800bc3c:	1fff7a18 	.word	0x1fff7a18
 800bc40:	2000019a 	.word	0x2000019a
 800bc44:	200001aa 	.word	0x200001aa

0800bc48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	4613      	mov	r3, r2
 800bc54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	75fb      	strb	r3, [r7, #23]
 800bc5e:	e027      	b.n	800bcb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	0f1b      	lsrs	r3, r3, #28
 800bc64:	2b09      	cmp	r3, #9
 800bc66:	d80b      	bhi.n	800bc80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	0f1b      	lsrs	r3, r3, #28
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	7dfb      	ldrb	r3, [r7, #23]
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	4619      	mov	r1, r3
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	440b      	add	r3, r1
 800bc78:	3230      	adds	r2, #48	; 0x30
 800bc7a:	b2d2      	uxtb	r2, r2
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	e00a      	b.n	800bc96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	0f1b      	lsrs	r3, r3, #28
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	7dfb      	ldrb	r3, [r7, #23]
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	440b      	add	r3, r1
 800bc90:	3237      	adds	r2, #55	; 0x37
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	005b      	lsls	r3, r3, #1
 800bca0:	3301      	adds	r3, #1
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	4413      	add	r3, r2
 800bca6:	2200      	movs	r2, #0
 800bca8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
 800bcac:	3301      	adds	r3, #1
 800bcae:	75fb      	strb	r3, [r7, #23]
 800bcb0:	7dfa      	ldrb	r2, [r7, #23]
 800bcb2:	79fb      	ldrb	r3, [r7, #7]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d3d3      	bcc.n	800bc60 <IntToUnicode+0x18>
  }
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	; 0x28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcd0:	f107 0314 	add.w	r3, r7, #20
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	605a      	str	r2, [r3, #4]
 800bcda:	609a      	str	r2, [r3, #8]
 800bcdc:	60da      	str	r2, [r3, #12]
 800bcde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a1d      	ldr	r2, [pc, #116]	; (800bd5c <HAL_PCD_MspInit+0x94>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d134      	bne.n	800bd54 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bcea:	2300      	movs	r3, #0
 800bcec:	613b      	str	r3, [r7, #16]
 800bcee:	4b1c      	ldr	r3, [pc, #112]	; (800bd60 <HAL_PCD_MspInit+0x98>)
 800bcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf2:	4a1b      	ldr	r2, [pc, #108]	; (800bd60 <HAL_PCD_MspInit+0x98>)
 800bcf4:	f043 0302 	orr.w	r3, r3, #2
 800bcf8:	6313      	str	r3, [r2, #48]	; 0x30
 800bcfa:	4b19      	ldr	r3, [pc, #100]	; (800bd60 <HAL_PCD_MspInit+0x98>)
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	f003 0302 	and.w	r3, r3, #2
 800bd02:	613b      	str	r3, [r7, #16]
 800bd04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800bd06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800bd0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd10:	2300      	movs	r3, #0
 800bd12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd14:	2303      	movs	r3, #3
 800bd16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bd18:	230c      	movs	r3, #12
 800bd1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd1c:	f107 0314 	add.w	r3, r7, #20
 800bd20:	4619      	mov	r1, r3
 800bd22:	4810      	ldr	r0, [pc, #64]	; (800bd64 <HAL_PCD_MspInit+0x9c>)
 800bd24:	f7f8 faaa 	bl	800427c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bd28:	2300      	movs	r3, #0
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <HAL_PCD_MspInit+0x98>)
 800bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd30:	4a0b      	ldr	r2, [pc, #44]	; (800bd60 <HAL_PCD_MspInit+0x98>)
 800bd32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd36:	6313      	str	r3, [r2, #48]	; 0x30
 800bd38:	4b09      	ldr	r3, [pc, #36]	; (800bd60 <HAL_PCD_MspInit+0x98>)
 800bd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	204d      	movs	r0, #77	; 0x4d
 800bd4a:	f7f7 fddc 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bd4e:	204d      	movs	r0, #77	; 0x4d
 800bd50:	f7f7 fdf5 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bd54:	bf00      	nop
 800bd56:	3728      	adds	r7, #40	; 0x28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	40040000 	.word	0x40040000
 800bd60:	40023800 	.word	0x40023800
 800bd64:	40020400 	.word	0x40020400

0800bd68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f7fe fb5d 	bl	800a43e <USBD_LL_SetupStage>
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	6879      	ldr	r1, [r7, #4]
 800bda2:	4613      	mov	r3, r2
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	4413      	add	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	440b      	add	r3, r1
 800bdac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	78fb      	ldrb	r3, [r7, #3]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	f7fe fb97 	bl	800a4e8 <USBD_LL_DataOutStage>
}
 800bdba:	bf00      	nop
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bdd4:	78fa      	ldrb	r2, [r7, #3]
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	440b      	add	r3, r1
 800bde2:	334c      	adds	r3, #76	; 0x4c
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	78fb      	ldrb	r3, [r7, #3]
 800bde8:	4619      	mov	r1, r3
 800bdea:	f7fe fc30 	bl	800a64e <USBD_LL_DataInStage>
}
 800bdee:	bf00      	nop
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be04:	4618      	mov	r0, r3
 800be06:	f7fe fd64 	bl	800a8d2 <USBD_LL_SOF>
}
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be1a:	2301      	movs	r3, #1
 800be1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d102      	bne.n	800be2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
 800be2a:	e008      	b.n	800be3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	2b02      	cmp	r3, #2
 800be32:	d102      	bne.n	800be3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800be34:	2301      	movs	r3, #1
 800be36:	73fb      	strb	r3, [r7, #15]
 800be38:	e001      	b.n	800be3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800be3a:	f7f5 fa2b 	bl	8001294 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be44:	7bfa      	ldrb	r2, [r7, #15]
 800be46:	4611      	mov	r1, r2
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fd04 	bl	800a856 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe fcac 	bl	800a7b2 <USBD_LL_Reset>
}
 800be5a:	bf00      	nop
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe fcff 	bl	800a876 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be8a:	f043 0301 	orr.w	r3, r3, #1
 800be8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d005      	beq.n	800bea4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be98:	4b04      	ldr	r3, [pc, #16]	; (800beac <HAL_PCD_SuspendCallback+0x48>)
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	4a03      	ldr	r2, [pc, #12]	; (800beac <HAL_PCD_SuspendCallback+0x48>)
 800be9e:	f043 0306 	orr.w	r3, r3, #6
 800bea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	e000ed00 	.word	0xe000ed00

0800beb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fe fcef 	bl	800a8a2 <USBD_LL_Resume>
}
 800bec4:	bf00      	nop
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	460b      	mov	r3, r1
 800bed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bede:	78fa      	ldrb	r2, [r7, #3]
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fe fd47 	bl	800a976 <USBD_LL_IsoOUTIncomplete>
}
 800bee8:	bf00      	nop
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	4611      	mov	r1, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe fd03 	bl	800a912 <USBD_LL_IsoINIncomplete>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe fd59 	bl	800a9da <USBD_LL_DevConnected>
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fe fd56 	bl	800a9f0 <USBD_LL_DevDisconnected>
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d140      	bne.n	800bfde <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800bf5c:	4a22      	ldr	r2, [pc, #136]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a20      	ldr	r2, [pc, #128]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bf6c:	4b1e      	ldr	r3, [pc, #120]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf6e:	4a1f      	ldr	r2, [pc, #124]	; (800bfec <USBD_LL_Init+0xa0>)
 800bf70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800bf72:	4b1d      	ldr	r3, [pc, #116]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf74:	2206      	movs	r2, #6
 800bf76:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800bf78:	4b1b      	ldr	r3, [pc, #108]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bf7e:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800bf84:	4b18      	ldr	r3, [pc, #96]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf86:	2202      	movs	r2, #2
 800bf88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bf8a:	4b17      	ldr	r3, [pc, #92]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bf90:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800bf96:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf98:	2200      	movs	r2, #0
 800bf9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bf9c:	4b12      	ldr	r3, [pc, #72]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bfa8:	4b0f      	ldr	r3, [pc, #60]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800bfae:	480e      	ldr	r0, [pc, #56]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bfb0:	f7f8 ff0f 	bl	8004dd2 <HAL_PCD_Init>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800bfba:	f7f5 f96b 	bl	8001294 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800bfbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bfc2:	4809      	ldr	r0, [pc, #36]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bfc4:	f7fa f965 	bl	8006292 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800bfc8:	2280      	movs	r2, #128	; 0x80
 800bfca:	2100      	movs	r1, #0
 800bfcc:	4806      	ldr	r0, [pc, #24]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bfce:	f7fa f919 	bl	8006204 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800bfd2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4803      	ldr	r0, [pc, #12]	; (800bfe8 <USBD_LL_Init+0x9c>)
 800bfda:	f7fa f913 	bl	8006204 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20001c78 	.word	0x20001c78
 800bfec:	40040000 	.word	0x40040000

0800bff0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c006:	4618      	mov	r0, r3
 800c008:	f7f9 f800 	bl	800500c <HAL_PCD_Start>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	4618      	mov	r0, r3
 800c014:	f000 f942 	bl	800c29c <USBD_Get_USB_Status>
 800c018:	4603      	mov	r3, r0
 800c01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	4608      	mov	r0, r1
 800c030:	4611      	mov	r1, r2
 800c032:	461a      	mov	r2, r3
 800c034:	4603      	mov	r3, r0
 800c036:	70fb      	strb	r3, [r7, #3]
 800c038:	460b      	mov	r3, r1
 800c03a:	70bb      	strb	r3, [r7, #2]
 800c03c:	4613      	mov	r3, r2
 800c03e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c04e:	78bb      	ldrb	r3, [r7, #2]
 800c050:	883a      	ldrh	r2, [r7, #0]
 800c052:	78f9      	ldrb	r1, [r7, #3]
 800c054:	f7f9 fcd1 	bl	80059fa <HAL_PCD_EP_Open>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f91c 	bl	800c29c <USBD_Get_USB_Status>
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c068:	7bbb      	ldrb	r3, [r7, #14]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c08c:	78fa      	ldrb	r2, [r7, #3]
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f7f9 fd1a 	bl	8005aca <HAL_PCD_EP_Close>
 800c096:	4603      	mov	r3, r0
 800c098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 f8fd 	bl	800c29c <USBD_Get_USB_Status>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0ca:	78fa      	ldrb	r2, [r7, #3]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7f9 fdf2 	bl	8005cb8 <HAL_PCD_EP_SetStall>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 f8de 	bl	800c29c <USBD_Get_USB_Status>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c108:	78fa      	ldrb	r2, [r7, #3]
 800c10a:	4611      	mov	r1, r2
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7f9 fe37 	bl	8005d80 <HAL_PCD_EP_ClrStall>
 800c112:	4603      	mov	r3, r0
 800c114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 f8bf 	bl	800c29c <USBD_Get_USB_Status>
 800c11e:	4603      	mov	r3, r0
 800c120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c122:	7bbb      	ldrb	r3, [r7, #14]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c13e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c144:	2b00      	cmp	r3, #0
 800c146:	da0b      	bge.n	800c160 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c148:	78fb      	ldrb	r3, [r7, #3]
 800c14a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c14e:	68f9      	ldr	r1, [r7, #12]
 800c150:	4613      	mov	r3, r2
 800c152:	00db      	lsls	r3, r3, #3
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	440b      	add	r3, r1
 800c15a:	333e      	adds	r3, #62	; 0x3e
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	e00b      	b.n	800c178 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	4613      	mov	r3, r2
 800c16a:	00db      	lsls	r3, r3, #3
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	440b      	add	r3, r1
 800c172:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c176:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c19e:	78fa      	ldrb	r2, [r7, #3]
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7f9 fc04 	bl	80059b0 <HAL_PCD_SetAddress>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f874 	bl	800c29c <USBD_Get_USB_Status>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b086      	sub	sp, #24
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	603b      	str	r3, [r7, #0]
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1e0:	7af9      	ldrb	r1, [r7, #11]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	f7f9 fd1d 	bl	8005c24 <HAL_PCD_EP_Transmit>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 f853 	bl	800c29c <USBD_Get_USB_Status>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	607a      	str	r2, [r7, #4]
 800c20e:	603b      	str	r3, [r7, #0]
 800c210:	460b      	mov	r3, r1
 800c212:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c222:	7af9      	ldrb	r1, [r7, #11]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	f7f9 fc99 	bl	8005b5e <HAL_PCD_EP_Receive>
 800c22c:	4603      	mov	r3, r0
 800c22e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c230:	7dfb      	ldrb	r3, [r7, #23]
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f832 	bl	800c29c <USBD_Get_USB_Status>
 800c238:	4603      	mov	r3, r0
 800c23a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c23c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b082      	sub	sp, #8
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	460b      	mov	r3, r1
 800c250:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c258:	78fa      	ldrb	r2, [r7, #3]
 800c25a:	4611      	mov	r1, r2
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7f9 fcc9 	bl	8005bf4 <HAL_PCD_EP_GetRxCount>
 800c262:	4603      	mov	r3, r0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c274:	4b03      	ldr	r3, [pc, #12]	; (800c284 <USBD_static_malloc+0x18>)
}
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	20002184 	.word	0x20002184

0800c288 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]

}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
 800c2ac:	2b03      	cmp	r3, #3
 800c2ae:	d817      	bhi.n	800c2e0 <USBD_Get_USB_Status+0x44>
 800c2b0:	a201      	add	r2, pc, #4	; (adr r2, 800c2b8 <USBD_Get_USB_Status+0x1c>)
 800c2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b6:	bf00      	nop
 800c2b8:	0800c2c9 	.word	0x0800c2c9
 800c2bc:	0800c2cf 	.word	0x0800c2cf
 800c2c0:	0800c2d5 	.word	0x0800c2d5
 800c2c4:	0800c2db 	.word	0x0800c2db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c2cc:	e00b      	b.n	800c2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d2:	e008      	b.n	800c2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d8:	e005      	b.n	800c2e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c2de:	e002      	b.n	800c2e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e4:	bf00      	nop
  }
  return usb_status;
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <__errno>:
 800c2f4:	4b01      	ldr	r3, [pc, #4]	; (800c2fc <__errno+0x8>)
 800c2f6:	6818      	ldr	r0, [r3, #0]
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	200001b4 	.word	0x200001b4

0800c300 <__libc_init_array>:
 800c300:	b570      	push	{r4, r5, r6, lr}
 800c302:	4d0d      	ldr	r5, [pc, #52]	; (800c338 <__libc_init_array+0x38>)
 800c304:	4c0d      	ldr	r4, [pc, #52]	; (800c33c <__libc_init_array+0x3c>)
 800c306:	1b64      	subs	r4, r4, r5
 800c308:	10a4      	asrs	r4, r4, #2
 800c30a:	2600      	movs	r6, #0
 800c30c:	42a6      	cmp	r6, r4
 800c30e:	d109      	bne.n	800c324 <__libc_init_array+0x24>
 800c310:	4d0b      	ldr	r5, [pc, #44]	; (800c340 <__libc_init_array+0x40>)
 800c312:	4c0c      	ldr	r4, [pc, #48]	; (800c344 <__libc_init_array+0x44>)
 800c314:	f002 ff04 	bl	800f120 <_init>
 800c318:	1b64      	subs	r4, r4, r5
 800c31a:	10a4      	asrs	r4, r4, #2
 800c31c:	2600      	movs	r6, #0
 800c31e:	42a6      	cmp	r6, r4
 800c320:	d105      	bne.n	800c32e <__libc_init_array+0x2e>
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	f855 3b04 	ldr.w	r3, [r5], #4
 800c328:	4798      	blx	r3
 800c32a:	3601      	adds	r6, #1
 800c32c:	e7ee      	b.n	800c30c <__libc_init_array+0xc>
 800c32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c332:	4798      	blx	r3
 800c334:	3601      	adds	r6, #1
 800c336:	e7f2      	b.n	800c31e <__libc_init_array+0x1e>
 800c338:	08011c2c 	.word	0x08011c2c
 800c33c:	08011c2c 	.word	0x08011c2c
 800c340:	08011c2c 	.word	0x08011c2c
 800c344:	08011c30 	.word	0x08011c30

0800c348 <memset>:
 800c348:	4402      	add	r2, r0
 800c34a:	4603      	mov	r3, r0
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d100      	bne.n	800c352 <memset+0xa>
 800c350:	4770      	bx	lr
 800c352:	f803 1b01 	strb.w	r1, [r3], #1
 800c356:	e7f9      	b.n	800c34c <memset+0x4>

0800c358 <__cvt>:
 800c358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	ec55 4b10 	vmov	r4, r5, d0
 800c360:	2d00      	cmp	r5, #0
 800c362:	460e      	mov	r6, r1
 800c364:	4619      	mov	r1, r3
 800c366:	462b      	mov	r3, r5
 800c368:	bfbb      	ittet	lt
 800c36a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c36e:	461d      	movlt	r5, r3
 800c370:	2300      	movge	r3, #0
 800c372:	232d      	movlt	r3, #45	; 0x2d
 800c374:	700b      	strb	r3, [r1, #0]
 800c376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c378:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c37c:	4691      	mov	r9, r2
 800c37e:	f023 0820 	bic.w	r8, r3, #32
 800c382:	bfbc      	itt	lt
 800c384:	4622      	movlt	r2, r4
 800c386:	4614      	movlt	r4, r2
 800c388:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c38c:	d005      	beq.n	800c39a <__cvt+0x42>
 800c38e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c392:	d100      	bne.n	800c396 <__cvt+0x3e>
 800c394:	3601      	adds	r6, #1
 800c396:	2102      	movs	r1, #2
 800c398:	e000      	b.n	800c39c <__cvt+0x44>
 800c39a:	2103      	movs	r1, #3
 800c39c:	ab03      	add	r3, sp, #12
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	ab02      	add	r3, sp, #8
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	ec45 4b10 	vmov	d0, r4, r5
 800c3a8:	4653      	mov	r3, sl
 800c3aa:	4632      	mov	r2, r6
 800c3ac:	f000 fcec 	bl	800cd88 <_dtoa_r>
 800c3b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	d102      	bne.n	800c3be <__cvt+0x66>
 800c3b8:	f019 0f01 	tst.w	r9, #1
 800c3bc:	d022      	beq.n	800c404 <__cvt+0xac>
 800c3be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3c2:	eb07 0906 	add.w	r9, r7, r6
 800c3c6:	d110      	bne.n	800c3ea <__cvt+0x92>
 800c3c8:	783b      	ldrb	r3, [r7, #0]
 800c3ca:	2b30      	cmp	r3, #48	; 0x30
 800c3cc:	d10a      	bne.n	800c3e4 <__cvt+0x8c>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7f4 fb87 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3da:	b918      	cbnz	r0, 800c3e4 <__cvt+0x8c>
 800c3dc:	f1c6 0601 	rsb	r6, r6, #1
 800c3e0:	f8ca 6000 	str.w	r6, [sl]
 800c3e4:	f8da 3000 	ldr.w	r3, [sl]
 800c3e8:	4499      	add	r9, r3
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f4 fb79 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3f6:	b108      	cbz	r0, 800c3fc <__cvt+0xa4>
 800c3f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c3fc:	2230      	movs	r2, #48	; 0x30
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	454b      	cmp	r3, r9
 800c402:	d307      	bcc.n	800c414 <__cvt+0xbc>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c408:	1bdb      	subs	r3, r3, r7
 800c40a:	4638      	mov	r0, r7
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	b004      	add	sp, #16
 800c410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c414:	1c59      	adds	r1, r3, #1
 800c416:	9103      	str	r1, [sp, #12]
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	e7f0      	b.n	800c3fe <__cvt+0xa6>

0800c41c <__exponent>:
 800c41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c41e:	4603      	mov	r3, r0
 800c420:	2900      	cmp	r1, #0
 800c422:	bfb8      	it	lt
 800c424:	4249      	neglt	r1, r1
 800c426:	f803 2b02 	strb.w	r2, [r3], #2
 800c42a:	bfb4      	ite	lt
 800c42c:	222d      	movlt	r2, #45	; 0x2d
 800c42e:	222b      	movge	r2, #43	; 0x2b
 800c430:	2909      	cmp	r1, #9
 800c432:	7042      	strb	r2, [r0, #1]
 800c434:	dd2a      	ble.n	800c48c <__exponent+0x70>
 800c436:	f10d 0407 	add.w	r4, sp, #7
 800c43a:	46a4      	mov	ip, r4
 800c43c:	270a      	movs	r7, #10
 800c43e:	46a6      	mov	lr, r4
 800c440:	460a      	mov	r2, r1
 800c442:	fb91 f6f7 	sdiv	r6, r1, r7
 800c446:	fb07 1516 	mls	r5, r7, r6, r1
 800c44a:	3530      	adds	r5, #48	; 0x30
 800c44c:	2a63      	cmp	r2, #99	; 0x63
 800c44e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c452:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c456:	4631      	mov	r1, r6
 800c458:	dcf1      	bgt.n	800c43e <__exponent+0x22>
 800c45a:	3130      	adds	r1, #48	; 0x30
 800c45c:	f1ae 0502 	sub.w	r5, lr, #2
 800c460:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c464:	1c44      	adds	r4, r0, #1
 800c466:	4629      	mov	r1, r5
 800c468:	4561      	cmp	r1, ip
 800c46a:	d30a      	bcc.n	800c482 <__exponent+0x66>
 800c46c:	f10d 0209 	add.w	r2, sp, #9
 800c470:	eba2 020e 	sub.w	r2, r2, lr
 800c474:	4565      	cmp	r5, ip
 800c476:	bf88      	it	hi
 800c478:	2200      	movhi	r2, #0
 800c47a:	4413      	add	r3, r2
 800c47c:	1a18      	subs	r0, r3, r0
 800c47e:	b003      	add	sp, #12
 800c480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c482:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c486:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c48a:	e7ed      	b.n	800c468 <__exponent+0x4c>
 800c48c:	2330      	movs	r3, #48	; 0x30
 800c48e:	3130      	adds	r1, #48	; 0x30
 800c490:	7083      	strb	r3, [r0, #2]
 800c492:	70c1      	strb	r1, [r0, #3]
 800c494:	1d03      	adds	r3, r0, #4
 800c496:	e7f1      	b.n	800c47c <__exponent+0x60>

0800c498 <_printf_float>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	ed2d 8b02 	vpush	{d8}
 800c4a0:	b08d      	sub	sp, #52	; 0x34
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c4a8:	4616      	mov	r6, r2
 800c4aa:	461f      	mov	r7, r3
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	f001 fa59 	bl	800d964 <_localeconv_r>
 800c4b2:	f8d0 a000 	ldr.w	sl, [r0]
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	f7f3 fe9a 	bl	80001f0 <strlen>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	930a      	str	r3, [sp, #40]	; 0x28
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	9305      	str	r3, [sp, #20]
 800c4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c4cc:	3307      	adds	r3, #7
 800c4ce:	f023 0307 	bic.w	r3, r3, #7
 800c4d2:	f103 0208 	add.w	r2, r3, #8
 800c4d6:	f8c8 2000 	str.w	r2, [r8]
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c4e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c4e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4ea:	9307      	str	r3, [sp, #28]
 800c4ec:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4f0:	ee08 0a10 	vmov	s16, r0
 800c4f4:	4b9f      	ldr	r3, [pc, #636]	; (800c774 <_printf_float+0x2dc>)
 800c4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fe:	f7f4 fb25 	bl	8000b4c <__aeabi_dcmpun>
 800c502:	bb88      	cbnz	r0, 800c568 <_printf_float+0xd0>
 800c504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c508:	4b9a      	ldr	r3, [pc, #616]	; (800c774 <_printf_float+0x2dc>)
 800c50a:	f04f 32ff 	mov.w	r2, #4294967295
 800c50e:	f7f4 faff 	bl	8000b10 <__aeabi_dcmple>
 800c512:	bb48      	cbnz	r0, 800c568 <_printf_float+0xd0>
 800c514:	2200      	movs	r2, #0
 800c516:	2300      	movs	r3, #0
 800c518:	4640      	mov	r0, r8
 800c51a:	4649      	mov	r1, r9
 800c51c:	f7f4 faee 	bl	8000afc <__aeabi_dcmplt>
 800c520:	b110      	cbz	r0, 800c528 <_printf_float+0x90>
 800c522:	232d      	movs	r3, #45	; 0x2d
 800c524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c528:	4b93      	ldr	r3, [pc, #588]	; (800c778 <_printf_float+0x2e0>)
 800c52a:	4894      	ldr	r0, [pc, #592]	; (800c77c <_printf_float+0x2e4>)
 800c52c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c530:	bf94      	ite	ls
 800c532:	4698      	movls	r8, r3
 800c534:	4680      	movhi	r8, r0
 800c536:	2303      	movs	r3, #3
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	9b05      	ldr	r3, [sp, #20]
 800c53c:	f023 0204 	bic.w	r2, r3, #4
 800c540:	6022      	str	r2, [r4, #0]
 800c542:	f04f 0900 	mov.w	r9, #0
 800c546:	9700      	str	r7, [sp, #0]
 800c548:	4633      	mov	r3, r6
 800c54a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c54c:	4621      	mov	r1, r4
 800c54e:	4628      	mov	r0, r5
 800c550:	f000 f9d8 	bl	800c904 <_printf_common>
 800c554:	3001      	adds	r0, #1
 800c556:	f040 8090 	bne.w	800c67a <_printf_float+0x1e2>
 800c55a:	f04f 30ff 	mov.w	r0, #4294967295
 800c55e:	b00d      	add	sp, #52	; 0x34
 800c560:	ecbd 8b02 	vpop	{d8}
 800c564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c568:	4642      	mov	r2, r8
 800c56a:	464b      	mov	r3, r9
 800c56c:	4640      	mov	r0, r8
 800c56e:	4649      	mov	r1, r9
 800c570:	f7f4 faec 	bl	8000b4c <__aeabi_dcmpun>
 800c574:	b140      	cbz	r0, 800c588 <_printf_float+0xf0>
 800c576:	464b      	mov	r3, r9
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bfbc      	itt	lt
 800c57c:	232d      	movlt	r3, #45	; 0x2d
 800c57e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c582:	487f      	ldr	r0, [pc, #508]	; (800c780 <_printf_float+0x2e8>)
 800c584:	4b7f      	ldr	r3, [pc, #508]	; (800c784 <_printf_float+0x2ec>)
 800c586:	e7d1      	b.n	800c52c <_printf_float+0x94>
 800c588:	6863      	ldr	r3, [r4, #4]
 800c58a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c58e:	9206      	str	r2, [sp, #24]
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	d13f      	bne.n	800c614 <_printf_float+0x17c>
 800c594:	2306      	movs	r3, #6
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	9b05      	ldr	r3, [sp, #20]
 800c59a:	6861      	ldr	r1, [r4, #4]
 800c59c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	9303      	str	r3, [sp, #12]
 800c5a4:	ab0a      	add	r3, sp, #40	; 0x28
 800c5a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c5aa:	ab09      	add	r3, sp, #36	; 0x24
 800c5ac:	ec49 8b10 	vmov	d0, r8, r9
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	6022      	str	r2, [r4, #0]
 800c5b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f7ff fecd 	bl	800c358 <__cvt>
 800c5be:	9b06      	ldr	r3, [sp, #24]
 800c5c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5c2:	2b47      	cmp	r3, #71	; 0x47
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	d108      	bne.n	800c5da <_printf_float+0x142>
 800c5c8:	1cc8      	adds	r0, r1, #3
 800c5ca:	db02      	blt.n	800c5d2 <_printf_float+0x13a>
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	4299      	cmp	r1, r3
 800c5d0:	dd41      	ble.n	800c656 <_printf_float+0x1be>
 800c5d2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c5d6:	fa5f fb8b 	uxtb.w	fp, fp
 800c5da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5de:	d820      	bhi.n	800c622 <_printf_float+0x18a>
 800c5e0:	3901      	subs	r1, #1
 800c5e2:	465a      	mov	r2, fp
 800c5e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c5e8:	9109      	str	r1, [sp, #36]	; 0x24
 800c5ea:	f7ff ff17 	bl	800c41c <__exponent>
 800c5ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f0:	1813      	adds	r3, r2, r0
 800c5f2:	2a01      	cmp	r2, #1
 800c5f4:	4681      	mov	r9, r0
 800c5f6:	6123      	str	r3, [r4, #16]
 800c5f8:	dc02      	bgt.n	800c600 <_printf_float+0x168>
 800c5fa:	6822      	ldr	r2, [r4, #0]
 800c5fc:	07d2      	lsls	r2, r2, #31
 800c5fe:	d501      	bpl.n	800c604 <_printf_float+0x16c>
 800c600:	3301      	adds	r3, #1
 800c602:	6123      	str	r3, [r4, #16]
 800c604:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d09c      	beq.n	800c546 <_printf_float+0xae>
 800c60c:	232d      	movs	r3, #45	; 0x2d
 800c60e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c612:	e798      	b.n	800c546 <_printf_float+0xae>
 800c614:	9a06      	ldr	r2, [sp, #24]
 800c616:	2a47      	cmp	r2, #71	; 0x47
 800c618:	d1be      	bne.n	800c598 <_printf_float+0x100>
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1bc      	bne.n	800c598 <_printf_float+0x100>
 800c61e:	2301      	movs	r3, #1
 800c620:	e7b9      	b.n	800c596 <_printf_float+0xfe>
 800c622:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c626:	d118      	bne.n	800c65a <_printf_float+0x1c2>
 800c628:	2900      	cmp	r1, #0
 800c62a:	6863      	ldr	r3, [r4, #4]
 800c62c:	dd0b      	ble.n	800c646 <_printf_float+0x1ae>
 800c62e:	6121      	str	r1, [r4, #16]
 800c630:	b913      	cbnz	r3, 800c638 <_printf_float+0x1a0>
 800c632:	6822      	ldr	r2, [r4, #0]
 800c634:	07d0      	lsls	r0, r2, #31
 800c636:	d502      	bpl.n	800c63e <_printf_float+0x1a6>
 800c638:	3301      	adds	r3, #1
 800c63a:	440b      	add	r3, r1
 800c63c:	6123      	str	r3, [r4, #16]
 800c63e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c640:	f04f 0900 	mov.w	r9, #0
 800c644:	e7de      	b.n	800c604 <_printf_float+0x16c>
 800c646:	b913      	cbnz	r3, 800c64e <_printf_float+0x1b6>
 800c648:	6822      	ldr	r2, [r4, #0]
 800c64a:	07d2      	lsls	r2, r2, #31
 800c64c:	d501      	bpl.n	800c652 <_printf_float+0x1ba>
 800c64e:	3302      	adds	r3, #2
 800c650:	e7f4      	b.n	800c63c <_printf_float+0x1a4>
 800c652:	2301      	movs	r3, #1
 800c654:	e7f2      	b.n	800c63c <_printf_float+0x1a4>
 800c656:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65c:	4299      	cmp	r1, r3
 800c65e:	db05      	blt.n	800c66c <_printf_float+0x1d4>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	6121      	str	r1, [r4, #16]
 800c664:	07d8      	lsls	r0, r3, #31
 800c666:	d5ea      	bpl.n	800c63e <_printf_float+0x1a6>
 800c668:	1c4b      	adds	r3, r1, #1
 800c66a:	e7e7      	b.n	800c63c <_printf_float+0x1a4>
 800c66c:	2900      	cmp	r1, #0
 800c66e:	bfd4      	ite	le
 800c670:	f1c1 0202 	rsble	r2, r1, #2
 800c674:	2201      	movgt	r2, #1
 800c676:	4413      	add	r3, r2
 800c678:	e7e0      	b.n	800c63c <_printf_float+0x1a4>
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	055a      	lsls	r2, r3, #21
 800c67e:	d407      	bmi.n	800c690 <_printf_float+0x1f8>
 800c680:	6923      	ldr	r3, [r4, #16]
 800c682:	4642      	mov	r2, r8
 800c684:	4631      	mov	r1, r6
 800c686:	4628      	mov	r0, r5
 800c688:	47b8      	blx	r7
 800c68a:	3001      	adds	r0, #1
 800c68c:	d12c      	bne.n	800c6e8 <_printf_float+0x250>
 800c68e:	e764      	b.n	800c55a <_printf_float+0xc2>
 800c690:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c694:	f240 80e0 	bls.w	800c858 <_printf_float+0x3c0>
 800c698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c69c:	2200      	movs	r2, #0
 800c69e:	2300      	movs	r3, #0
 800c6a0:	f7f4 fa22 	bl	8000ae8 <__aeabi_dcmpeq>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d034      	beq.n	800c712 <_printf_float+0x27a>
 800c6a8:	4a37      	ldr	r2, [pc, #220]	; (800c788 <_printf_float+0x2f0>)
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	47b8      	blx	r7
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	f43f af51 	beq.w	800c55a <_printf_float+0xc2>
 800c6b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	db02      	blt.n	800c6c6 <_printf_float+0x22e>
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	07d8      	lsls	r0, r3, #31
 800c6c4:	d510      	bpl.n	800c6e8 <_printf_float+0x250>
 800c6c6:	ee18 3a10 	vmov	r3, s16
 800c6ca:	4652      	mov	r2, sl
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	47b8      	blx	r7
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	f43f af41 	beq.w	800c55a <_printf_float+0xc2>
 800c6d8:	f04f 0800 	mov.w	r8, #0
 800c6dc:	f104 091a 	add.w	r9, r4, #26
 800c6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	4543      	cmp	r3, r8
 800c6e6:	dc09      	bgt.n	800c6fc <_printf_float+0x264>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	079b      	lsls	r3, r3, #30
 800c6ec:	f100 8105 	bmi.w	800c8fa <_printf_float+0x462>
 800c6f0:	68e0      	ldr	r0, [r4, #12]
 800c6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6f4:	4298      	cmp	r0, r3
 800c6f6:	bfb8      	it	lt
 800c6f8:	4618      	movlt	r0, r3
 800c6fa:	e730      	b.n	800c55e <_printf_float+0xc6>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	464a      	mov	r2, r9
 800c700:	4631      	mov	r1, r6
 800c702:	4628      	mov	r0, r5
 800c704:	47b8      	blx	r7
 800c706:	3001      	adds	r0, #1
 800c708:	f43f af27 	beq.w	800c55a <_printf_float+0xc2>
 800c70c:	f108 0801 	add.w	r8, r8, #1
 800c710:	e7e6      	b.n	800c6e0 <_printf_float+0x248>
 800c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c714:	2b00      	cmp	r3, #0
 800c716:	dc39      	bgt.n	800c78c <_printf_float+0x2f4>
 800c718:	4a1b      	ldr	r2, [pc, #108]	; (800c788 <_printf_float+0x2f0>)
 800c71a:	2301      	movs	r3, #1
 800c71c:	4631      	mov	r1, r6
 800c71e:	4628      	mov	r0, r5
 800c720:	47b8      	blx	r7
 800c722:	3001      	adds	r0, #1
 800c724:	f43f af19 	beq.w	800c55a <_printf_float+0xc2>
 800c728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c72c:	4313      	orrs	r3, r2
 800c72e:	d102      	bne.n	800c736 <_printf_float+0x29e>
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	07d9      	lsls	r1, r3, #31
 800c734:	d5d8      	bpl.n	800c6e8 <_printf_float+0x250>
 800c736:	ee18 3a10 	vmov	r3, s16
 800c73a:	4652      	mov	r2, sl
 800c73c:	4631      	mov	r1, r6
 800c73e:	4628      	mov	r0, r5
 800c740:	47b8      	blx	r7
 800c742:	3001      	adds	r0, #1
 800c744:	f43f af09 	beq.w	800c55a <_printf_float+0xc2>
 800c748:	f04f 0900 	mov.w	r9, #0
 800c74c:	f104 0a1a 	add.w	sl, r4, #26
 800c750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c752:	425b      	negs	r3, r3
 800c754:	454b      	cmp	r3, r9
 800c756:	dc01      	bgt.n	800c75c <_printf_float+0x2c4>
 800c758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c75a:	e792      	b.n	800c682 <_printf_float+0x1ea>
 800c75c:	2301      	movs	r3, #1
 800c75e:	4652      	mov	r2, sl
 800c760:	4631      	mov	r1, r6
 800c762:	4628      	mov	r0, r5
 800c764:	47b8      	blx	r7
 800c766:	3001      	adds	r0, #1
 800c768:	f43f aef7 	beq.w	800c55a <_printf_float+0xc2>
 800c76c:	f109 0901 	add.w	r9, r9, #1
 800c770:	e7ee      	b.n	800c750 <_printf_float+0x2b8>
 800c772:	bf00      	nop
 800c774:	7fefffff 	.word	0x7fefffff
 800c778:	08011850 	.word	0x08011850
 800c77c:	08011854 	.word	0x08011854
 800c780:	0801185c 	.word	0x0801185c
 800c784:	08011858 	.word	0x08011858
 800c788:	08011860 	.word	0x08011860
 800c78c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c78e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c790:	429a      	cmp	r2, r3
 800c792:	bfa8      	it	ge
 800c794:	461a      	movge	r2, r3
 800c796:	2a00      	cmp	r2, #0
 800c798:	4691      	mov	r9, r2
 800c79a:	dc37      	bgt.n	800c80c <_printf_float+0x374>
 800c79c:	f04f 0b00 	mov.w	fp, #0
 800c7a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7a4:	f104 021a 	add.w	r2, r4, #26
 800c7a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7aa:	9305      	str	r3, [sp, #20]
 800c7ac:	eba3 0309 	sub.w	r3, r3, r9
 800c7b0:	455b      	cmp	r3, fp
 800c7b2:	dc33      	bgt.n	800c81c <_printf_float+0x384>
 800c7b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	db3b      	blt.n	800c834 <_printf_float+0x39c>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	07da      	lsls	r2, r3, #31
 800c7c0:	d438      	bmi.n	800c834 <_printf_float+0x39c>
 800c7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c4:	9a05      	ldr	r2, [sp, #20]
 800c7c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7c8:	1a9a      	subs	r2, r3, r2
 800c7ca:	eba3 0901 	sub.w	r9, r3, r1
 800c7ce:	4591      	cmp	r9, r2
 800c7d0:	bfa8      	it	ge
 800c7d2:	4691      	movge	r9, r2
 800c7d4:	f1b9 0f00 	cmp.w	r9, #0
 800c7d8:	dc35      	bgt.n	800c846 <_printf_float+0x3ae>
 800c7da:	f04f 0800 	mov.w	r8, #0
 800c7de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7e2:	f104 0a1a 	add.w	sl, r4, #26
 800c7e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7ea:	1a9b      	subs	r3, r3, r2
 800c7ec:	eba3 0309 	sub.w	r3, r3, r9
 800c7f0:	4543      	cmp	r3, r8
 800c7f2:	f77f af79 	ble.w	800c6e8 <_printf_float+0x250>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b8      	blx	r7
 800c800:	3001      	adds	r0, #1
 800c802:	f43f aeaa 	beq.w	800c55a <_printf_float+0xc2>
 800c806:	f108 0801 	add.w	r8, r8, #1
 800c80a:	e7ec      	b.n	800c7e6 <_printf_float+0x34e>
 800c80c:	4613      	mov	r3, r2
 800c80e:	4631      	mov	r1, r6
 800c810:	4642      	mov	r2, r8
 800c812:	4628      	mov	r0, r5
 800c814:	47b8      	blx	r7
 800c816:	3001      	adds	r0, #1
 800c818:	d1c0      	bne.n	800c79c <_printf_float+0x304>
 800c81a:	e69e      	b.n	800c55a <_printf_float+0xc2>
 800c81c:	2301      	movs	r3, #1
 800c81e:	4631      	mov	r1, r6
 800c820:	4628      	mov	r0, r5
 800c822:	9205      	str	r2, [sp, #20]
 800c824:	47b8      	blx	r7
 800c826:	3001      	adds	r0, #1
 800c828:	f43f ae97 	beq.w	800c55a <_printf_float+0xc2>
 800c82c:	9a05      	ldr	r2, [sp, #20]
 800c82e:	f10b 0b01 	add.w	fp, fp, #1
 800c832:	e7b9      	b.n	800c7a8 <_printf_float+0x310>
 800c834:	ee18 3a10 	vmov	r3, s16
 800c838:	4652      	mov	r2, sl
 800c83a:	4631      	mov	r1, r6
 800c83c:	4628      	mov	r0, r5
 800c83e:	47b8      	blx	r7
 800c840:	3001      	adds	r0, #1
 800c842:	d1be      	bne.n	800c7c2 <_printf_float+0x32a>
 800c844:	e689      	b.n	800c55a <_printf_float+0xc2>
 800c846:	9a05      	ldr	r2, [sp, #20]
 800c848:	464b      	mov	r3, r9
 800c84a:	4442      	add	r2, r8
 800c84c:	4631      	mov	r1, r6
 800c84e:	4628      	mov	r0, r5
 800c850:	47b8      	blx	r7
 800c852:	3001      	adds	r0, #1
 800c854:	d1c1      	bne.n	800c7da <_printf_float+0x342>
 800c856:	e680      	b.n	800c55a <_printf_float+0xc2>
 800c858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c85a:	2a01      	cmp	r2, #1
 800c85c:	dc01      	bgt.n	800c862 <_printf_float+0x3ca>
 800c85e:	07db      	lsls	r3, r3, #31
 800c860:	d538      	bpl.n	800c8d4 <_printf_float+0x43c>
 800c862:	2301      	movs	r3, #1
 800c864:	4642      	mov	r2, r8
 800c866:	4631      	mov	r1, r6
 800c868:	4628      	mov	r0, r5
 800c86a:	47b8      	blx	r7
 800c86c:	3001      	adds	r0, #1
 800c86e:	f43f ae74 	beq.w	800c55a <_printf_float+0xc2>
 800c872:	ee18 3a10 	vmov	r3, s16
 800c876:	4652      	mov	r2, sl
 800c878:	4631      	mov	r1, r6
 800c87a:	4628      	mov	r0, r5
 800c87c:	47b8      	blx	r7
 800c87e:	3001      	adds	r0, #1
 800c880:	f43f ae6b 	beq.w	800c55a <_printf_float+0xc2>
 800c884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c888:	2200      	movs	r2, #0
 800c88a:	2300      	movs	r3, #0
 800c88c:	f7f4 f92c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c890:	b9d8      	cbnz	r0, 800c8ca <_printf_float+0x432>
 800c892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c894:	f108 0201 	add.w	r2, r8, #1
 800c898:	3b01      	subs	r3, #1
 800c89a:	4631      	mov	r1, r6
 800c89c:	4628      	mov	r0, r5
 800c89e:	47b8      	blx	r7
 800c8a0:	3001      	adds	r0, #1
 800c8a2:	d10e      	bne.n	800c8c2 <_printf_float+0x42a>
 800c8a4:	e659      	b.n	800c55a <_printf_float+0xc2>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	47b8      	blx	r7
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	f43f ae52 	beq.w	800c55a <_printf_float+0xc2>
 800c8b6:	f108 0801 	add.w	r8, r8, #1
 800c8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	4543      	cmp	r3, r8
 800c8c0:	dcf1      	bgt.n	800c8a6 <_printf_float+0x40e>
 800c8c2:	464b      	mov	r3, r9
 800c8c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c8c8:	e6dc      	b.n	800c684 <_printf_float+0x1ec>
 800c8ca:	f04f 0800 	mov.w	r8, #0
 800c8ce:	f104 0a1a 	add.w	sl, r4, #26
 800c8d2:	e7f2      	b.n	800c8ba <_printf_float+0x422>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	4642      	mov	r2, r8
 800c8d8:	e7df      	b.n	800c89a <_printf_float+0x402>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	464a      	mov	r2, r9
 800c8de:	4631      	mov	r1, r6
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	47b8      	blx	r7
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	f43f ae38 	beq.w	800c55a <_printf_float+0xc2>
 800c8ea:	f108 0801 	add.w	r8, r8, #1
 800c8ee:	68e3      	ldr	r3, [r4, #12]
 800c8f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8f2:	1a5b      	subs	r3, r3, r1
 800c8f4:	4543      	cmp	r3, r8
 800c8f6:	dcf0      	bgt.n	800c8da <_printf_float+0x442>
 800c8f8:	e6fa      	b.n	800c6f0 <_printf_float+0x258>
 800c8fa:	f04f 0800 	mov.w	r8, #0
 800c8fe:	f104 0919 	add.w	r9, r4, #25
 800c902:	e7f4      	b.n	800c8ee <_printf_float+0x456>

0800c904 <_printf_common>:
 800c904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c908:	4616      	mov	r6, r2
 800c90a:	4699      	mov	r9, r3
 800c90c:	688a      	ldr	r2, [r1, #8]
 800c90e:	690b      	ldr	r3, [r1, #16]
 800c910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c914:	4293      	cmp	r3, r2
 800c916:	bfb8      	it	lt
 800c918:	4613      	movlt	r3, r2
 800c91a:	6033      	str	r3, [r6, #0]
 800c91c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c920:	4607      	mov	r7, r0
 800c922:	460c      	mov	r4, r1
 800c924:	b10a      	cbz	r2, 800c92a <_printf_common+0x26>
 800c926:	3301      	adds	r3, #1
 800c928:	6033      	str	r3, [r6, #0]
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	0699      	lsls	r1, r3, #26
 800c92e:	bf42      	ittt	mi
 800c930:	6833      	ldrmi	r3, [r6, #0]
 800c932:	3302      	addmi	r3, #2
 800c934:	6033      	strmi	r3, [r6, #0]
 800c936:	6825      	ldr	r5, [r4, #0]
 800c938:	f015 0506 	ands.w	r5, r5, #6
 800c93c:	d106      	bne.n	800c94c <_printf_common+0x48>
 800c93e:	f104 0a19 	add.w	sl, r4, #25
 800c942:	68e3      	ldr	r3, [r4, #12]
 800c944:	6832      	ldr	r2, [r6, #0]
 800c946:	1a9b      	subs	r3, r3, r2
 800c948:	42ab      	cmp	r3, r5
 800c94a:	dc26      	bgt.n	800c99a <_printf_common+0x96>
 800c94c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c950:	1e13      	subs	r3, r2, #0
 800c952:	6822      	ldr	r2, [r4, #0]
 800c954:	bf18      	it	ne
 800c956:	2301      	movne	r3, #1
 800c958:	0692      	lsls	r2, r2, #26
 800c95a:	d42b      	bmi.n	800c9b4 <_printf_common+0xb0>
 800c95c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c960:	4649      	mov	r1, r9
 800c962:	4638      	mov	r0, r7
 800c964:	47c0      	blx	r8
 800c966:	3001      	adds	r0, #1
 800c968:	d01e      	beq.n	800c9a8 <_printf_common+0xa4>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	68e5      	ldr	r5, [r4, #12]
 800c96e:	6832      	ldr	r2, [r6, #0]
 800c970:	f003 0306 	and.w	r3, r3, #6
 800c974:	2b04      	cmp	r3, #4
 800c976:	bf08      	it	eq
 800c978:	1aad      	subeq	r5, r5, r2
 800c97a:	68a3      	ldr	r3, [r4, #8]
 800c97c:	6922      	ldr	r2, [r4, #16]
 800c97e:	bf0c      	ite	eq
 800c980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c984:	2500      	movne	r5, #0
 800c986:	4293      	cmp	r3, r2
 800c988:	bfc4      	itt	gt
 800c98a:	1a9b      	subgt	r3, r3, r2
 800c98c:	18ed      	addgt	r5, r5, r3
 800c98e:	2600      	movs	r6, #0
 800c990:	341a      	adds	r4, #26
 800c992:	42b5      	cmp	r5, r6
 800c994:	d11a      	bne.n	800c9cc <_printf_common+0xc8>
 800c996:	2000      	movs	r0, #0
 800c998:	e008      	b.n	800c9ac <_printf_common+0xa8>
 800c99a:	2301      	movs	r3, #1
 800c99c:	4652      	mov	r2, sl
 800c99e:	4649      	mov	r1, r9
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	47c0      	blx	r8
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	d103      	bne.n	800c9b0 <_printf_common+0xac>
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b0:	3501      	adds	r5, #1
 800c9b2:	e7c6      	b.n	800c942 <_printf_common+0x3e>
 800c9b4:	18e1      	adds	r1, r4, r3
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	2030      	movs	r0, #48	; 0x30
 800c9ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9be:	4422      	add	r2, r4
 800c9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9c8:	3302      	adds	r3, #2
 800c9ca:	e7c7      	b.n	800c95c <_printf_common+0x58>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	4622      	mov	r2, r4
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	47c0      	blx	r8
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	d0e6      	beq.n	800c9a8 <_printf_common+0xa4>
 800c9da:	3601      	adds	r6, #1
 800c9dc:	e7d9      	b.n	800c992 <_printf_common+0x8e>
	...

0800c9e0 <_printf_i>:
 800c9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	7e0f      	ldrb	r7, [r1, #24]
 800c9e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9e8:	2f78      	cmp	r7, #120	; 0x78
 800c9ea:	4691      	mov	r9, r2
 800c9ec:	4680      	mov	r8, r0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	469a      	mov	sl, r3
 800c9f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9f6:	d807      	bhi.n	800ca08 <_printf_i+0x28>
 800c9f8:	2f62      	cmp	r7, #98	; 0x62
 800c9fa:	d80a      	bhi.n	800ca12 <_printf_i+0x32>
 800c9fc:	2f00      	cmp	r7, #0
 800c9fe:	f000 80d8 	beq.w	800cbb2 <_printf_i+0x1d2>
 800ca02:	2f58      	cmp	r7, #88	; 0x58
 800ca04:	f000 80a3 	beq.w	800cb4e <_printf_i+0x16e>
 800ca08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca10:	e03a      	b.n	800ca88 <_printf_i+0xa8>
 800ca12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca16:	2b15      	cmp	r3, #21
 800ca18:	d8f6      	bhi.n	800ca08 <_printf_i+0x28>
 800ca1a:	a101      	add	r1, pc, #4	; (adr r1, 800ca20 <_printf_i+0x40>)
 800ca1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca20:	0800ca79 	.word	0x0800ca79
 800ca24:	0800ca8d 	.word	0x0800ca8d
 800ca28:	0800ca09 	.word	0x0800ca09
 800ca2c:	0800ca09 	.word	0x0800ca09
 800ca30:	0800ca09 	.word	0x0800ca09
 800ca34:	0800ca09 	.word	0x0800ca09
 800ca38:	0800ca8d 	.word	0x0800ca8d
 800ca3c:	0800ca09 	.word	0x0800ca09
 800ca40:	0800ca09 	.word	0x0800ca09
 800ca44:	0800ca09 	.word	0x0800ca09
 800ca48:	0800ca09 	.word	0x0800ca09
 800ca4c:	0800cb99 	.word	0x0800cb99
 800ca50:	0800cabd 	.word	0x0800cabd
 800ca54:	0800cb7b 	.word	0x0800cb7b
 800ca58:	0800ca09 	.word	0x0800ca09
 800ca5c:	0800ca09 	.word	0x0800ca09
 800ca60:	0800cbbb 	.word	0x0800cbbb
 800ca64:	0800ca09 	.word	0x0800ca09
 800ca68:	0800cabd 	.word	0x0800cabd
 800ca6c:	0800ca09 	.word	0x0800ca09
 800ca70:	0800ca09 	.word	0x0800ca09
 800ca74:	0800cb83 	.word	0x0800cb83
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	1d1a      	adds	r2, r3, #4
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	602a      	str	r2, [r5, #0]
 800ca80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e0a3      	b.n	800cbd4 <_printf_i+0x1f4>
 800ca8c:	6820      	ldr	r0, [r4, #0]
 800ca8e:	6829      	ldr	r1, [r5, #0]
 800ca90:	0606      	lsls	r6, r0, #24
 800ca92:	f101 0304 	add.w	r3, r1, #4
 800ca96:	d50a      	bpl.n	800caae <_printf_i+0xce>
 800ca98:	680e      	ldr	r6, [r1, #0]
 800ca9a:	602b      	str	r3, [r5, #0]
 800ca9c:	2e00      	cmp	r6, #0
 800ca9e:	da03      	bge.n	800caa8 <_printf_i+0xc8>
 800caa0:	232d      	movs	r3, #45	; 0x2d
 800caa2:	4276      	negs	r6, r6
 800caa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caa8:	485e      	ldr	r0, [pc, #376]	; (800cc24 <_printf_i+0x244>)
 800caaa:	230a      	movs	r3, #10
 800caac:	e019      	b.n	800cae2 <_printf_i+0x102>
 800caae:	680e      	ldr	r6, [r1, #0]
 800cab0:	602b      	str	r3, [r5, #0]
 800cab2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cab6:	bf18      	it	ne
 800cab8:	b236      	sxthne	r6, r6
 800caba:	e7ef      	b.n	800ca9c <_printf_i+0xbc>
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	6820      	ldr	r0, [r4, #0]
 800cac0:	1d19      	adds	r1, r3, #4
 800cac2:	6029      	str	r1, [r5, #0]
 800cac4:	0601      	lsls	r1, r0, #24
 800cac6:	d501      	bpl.n	800cacc <_printf_i+0xec>
 800cac8:	681e      	ldr	r6, [r3, #0]
 800caca:	e002      	b.n	800cad2 <_printf_i+0xf2>
 800cacc:	0646      	lsls	r6, r0, #25
 800cace:	d5fb      	bpl.n	800cac8 <_printf_i+0xe8>
 800cad0:	881e      	ldrh	r6, [r3, #0]
 800cad2:	4854      	ldr	r0, [pc, #336]	; (800cc24 <_printf_i+0x244>)
 800cad4:	2f6f      	cmp	r7, #111	; 0x6f
 800cad6:	bf0c      	ite	eq
 800cad8:	2308      	moveq	r3, #8
 800cada:	230a      	movne	r3, #10
 800cadc:	2100      	movs	r1, #0
 800cade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cae2:	6865      	ldr	r5, [r4, #4]
 800cae4:	60a5      	str	r5, [r4, #8]
 800cae6:	2d00      	cmp	r5, #0
 800cae8:	bfa2      	ittt	ge
 800caea:	6821      	ldrge	r1, [r4, #0]
 800caec:	f021 0104 	bicge.w	r1, r1, #4
 800caf0:	6021      	strge	r1, [r4, #0]
 800caf2:	b90e      	cbnz	r6, 800caf8 <_printf_i+0x118>
 800caf4:	2d00      	cmp	r5, #0
 800caf6:	d04d      	beq.n	800cb94 <_printf_i+0x1b4>
 800caf8:	4615      	mov	r5, r2
 800cafa:	fbb6 f1f3 	udiv	r1, r6, r3
 800cafe:	fb03 6711 	mls	r7, r3, r1, r6
 800cb02:	5dc7      	ldrb	r7, [r0, r7]
 800cb04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb08:	4637      	mov	r7, r6
 800cb0a:	42bb      	cmp	r3, r7
 800cb0c:	460e      	mov	r6, r1
 800cb0e:	d9f4      	bls.n	800cafa <_printf_i+0x11a>
 800cb10:	2b08      	cmp	r3, #8
 800cb12:	d10b      	bne.n	800cb2c <_printf_i+0x14c>
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	07de      	lsls	r6, r3, #31
 800cb18:	d508      	bpl.n	800cb2c <_printf_i+0x14c>
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	6861      	ldr	r1, [r4, #4]
 800cb1e:	4299      	cmp	r1, r3
 800cb20:	bfde      	ittt	le
 800cb22:	2330      	movle	r3, #48	; 0x30
 800cb24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb28:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb2c:	1b52      	subs	r2, r2, r5
 800cb2e:	6122      	str	r2, [r4, #16]
 800cb30:	f8cd a000 	str.w	sl, [sp]
 800cb34:	464b      	mov	r3, r9
 800cb36:	aa03      	add	r2, sp, #12
 800cb38:	4621      	mov	r1, r4
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	f7ff fee2 	bl	800c904 <_printf_common>
 800cb40:	3001      	adds	r0, #1
 800cb42:	d14c      	bne.n	800cbde <_printf_i+0x1fe>
 800cb44:	f04f 30ff 	mov.w	r0, #4294967295
 800cb48:	b004      	add	sp, #16
 800cb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb4e:	4835      	ldr	r0, [pc, #212]	; (800cc24 <_printf_i+0x244>)
 800cb50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb54:	6829      	ldr	r1, [r5, #0]
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb5c:	6029      	str	r1, [r5, #0]
 800cb5e:	061d      	lsls	r5, r3, #24
 800cb60:	d514      	bpl.n	800cb8c <_printf_i+0x1ac>
 800cb62:	07df      	lsls	r7, r3, #31
 800cb64:	bf44      	itt	mi
 800cb66:	f043 0320 	orrmi.w	r3, r3, #32
 800cb6a:	6023      	strmi	r3, [r4, #0]
 800cb6c:	b91e      	cbnz	r6, 800cb76 <_printf_i+0x196>
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	f023 0320 	bic.w	r3, r3, #32
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	2310      	movs	r3, #16
 800cb78:	e7b0      	b.n	800cadc <_printf_i+0xfc>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	f043 0320 	orr.w	r3, r3, #32
 800cb80:	6023      	str	r3, [r4, #0]
 800cb82:	2378      	movs	r3, #120	; 0x78
 800cb84:	4828      	ldr	r0, [pc, #160]	; (800cc28 <_printf_i+0x248>)
 800cb86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb8a:	e7e3      	b.n	800cb54 <_printf_i+0x174>
 800cb8c:	0659      	lsls	r1, r3, #25
 800cb8e:	bf48      	it	mi
 800cb90:	b2b6      	uxthmi	r6, r6
 800cb92:	e7e6      	b.n	800cb62 <_printf_i+0x182>
 800cb94:	4615      	mov	r5, r2
 800cb96:	e7bb      	b.n	800cb10 <_printf_i+0x130>
 800cb98:	682b      	ldr	r3, [r5, #0]
 800cb9a:	6826      	ldr	r6, [r4, #0]
 800cb9c:	6961      	ldr	r1, [r4, #20]
 800cb9e:	1d18      	adds	r0, r3, #4
 800cba0:	6028      	str	r0, [r5, #0]
 800cba2:	0635      	lsls	r5, r6, #24
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	d501      	bpl.n	800cbac <_printf_i+0x1cc>
 800cba8:	6019      	str	r1, [r3, #0]
 800cbaa:	e002      	b.n	800cbb2 <_printf_i+0x1d2>
 800cbac:	0670      	lsls	r0, r6, #25
 800cbae:	d5fb      	bpl.n	800cba8 <_printf_i+0x1c8>
 800cbb0:	8019      	strh	r1, [r3, #0]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	6123      	str	r3, [r4, #16]
 800cbb6:	4615      	mov	r5, r2
 800cbb8:	e7ba      	b.n	800cb30 <_printf_i+0x150>
 800cbba:	682b      	ldr	r3, [r5, #0]
 800cbbc:	1d1a      	adds	r2, r3, #4
 800cbbe:	602a      	str	r2, [r5, #0]
 800cbc0:	681d      	ldr	r5, [r3, #0]
 800cbc2:	6862      	ldr	r2, [r4, #4]
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f7f3 fb1a 	bl	8000200 <memchr>
 800cbcc:	b108      	cbz	r0, 800cbd2 <_printf_i+0x1f2>
 800cbce:	1b40      	subs	r0, r0, r5
 800cbd0:	6060      	str	r0, [r4, #4]
 800cbd2:	6863      	ldr	r3, [r4, #4]
 800cbd4:	6123      	str	r3, [r4, #16]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbdc:	e7a8      	b.n	800cb30 <_printf_i+0x150>
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	4649      	mov	r1, r9
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	47d0      	blx	sl
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d0ab      	beq.n	800cb44 <_printf_i+0x164>
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	079b      	lsls	r3, r3, #30
 800cbf0:	d413      	bmi.n	800cc1a <_printf_i+0x23a>
 800cbf2:	68e0      	ldr	r0, [r4, #12]
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	4298      	cmp	r0, r3
 800cbf8:	bfb8      	it	lt
 800cbfa:	4618      	movlt	r0, r3
 800cbfc:	e7a4      	b.n	800cb48 <_printf_i+0x168>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4632      	mov	r2, r6
 800cc02:	4649      	mov	r1, r9
 800cc04:	4640      	mov	r0, r8
 800cc06:	47d0      	blx	sl
 800cc08:	3001      	adds	r0, #1
 800cc0a:	d09b      	beq.n	800cb44 <_printf_i+0x164>
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	68e3      	ldr	r3, [r4, #12]
 800cc10:	9903      	ldr	r1, [sp, #12]
 800cc12:	1a5b      	subs	r3, r3, r1
 800cc14:	42ab      	cmp	r3, r5
 800cc16:	dcf2      	bgt.n	800cbfe <_printf_i+0x21e>
 800cc18:	e7eb      	b.n	800cbf2 <_printf_i+0x212>
 800cc1a:	2500      	movs	r5, #0
 800cc1c:	f104 0619 	add.w	r6, r4, #25
 800cc20:	e7f5      	b.n	800cc0e <_printf_i+0x22e>
 800cc22:	bf00      	nop
 800cc24:	08011862 	.word	0x08011862
 800cc28:	08011873 	.word	0x08011873

0800cc2c <siprintf>:
 800cc2c:	b40e      	push	{r1, r2, r3}
 800cc2e:	b500      	push	{lr}
 800cc30:	b09c      	sub	sp, #112	; 0x70
 800cc32:	ab1d      	add	r3, sp, #116	; 0x74
 800cc34:	9002      	str	r0, [sp, #8]
 800cc36:	9006      	str	r0, [sp, #24]
 800cc38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc3c:	4809      	ldr	r0, [pc, #36]	; (800cc64 <siprintf+0x38>)
 800cc3e:	9107      	str	r1, [sp, #28]
 800cc40:	9104      	str	r1, [sp, #16]
 800cc42:	4909      	ldr	r1, [pc, #36]	; (800cc68 <siprintf+0x3c>)
 800cc44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc48:	9105      	str	r1, [sp, #20]
 800cc4a:	6800      	ldr	r0, [r0, #0]
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	a902      	add	r1, sp, #8
 800cc50:	f001 fb78 	bl	800e344 <_svfiprintf_r>
 800cc54:	9b02      	ldr	r3, [sp, #8]
 800cc56:	2200      	movs	r2, #0
 800cc58:	701a      	strb	r2, [r3, #0]
 800cc5a:	b01c      	add	sp, #112	; 0x70
 800cc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc60:	b003      	add	sp, #12
 800cc62:	4770      	bx	lr
 800cc64:	200001b4 	.word	0x200001b4
 800cc68:	ffff0208 	.word	0xffff0208

0800cc6c <quorem>:
 800cc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc70:	6903      	ldr	r3, [r0, #16]
 800cc72:	690c      	ldr	r4, [r1, #16]
 800cc74:	42a3      	cmp	r3, r4
 800cc76:	4607      	mov	r7, r0
 800cc78:	f2c0 8081 	blt.w	800cd7e <quorem+0x112>
 800cc7c:	3c01      	subs	r4, #1
 800cc7e:	f101 0814 	add.w	r8, r1, #20
 800cc82:	f100 0514 	add.w	r5, r0, #20
 800cc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc8a:	9301      	str	r3, [sp, #4]
 800cc8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc94:	3301      	adds	r3, #1
 800cc96:	429a      	cmp	r2, r3
 800cc98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cca0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cca4:	d331      	bcc.n	800cd0a <quorem+0x9e>
 800cca6:	f04f 0e00 	mov.w	lr, #0
 800ccaa:	4640      	mov	r0, r8
 800ccac:	46ac      	mov	ip, r5
 800ccae:	46f2      	mov	sl, lr
 800ccb0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ccb4:	b293      	uxth	r3, r2
 800ccb6:	fb06 e303 	mla	r3, r6, r3, lr
 800ccba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	ebaa 0303 	sub.w	r3, sl, r3
 800ccc4:	f8dc a000 	ldr.w	sl, [ip]
 800ccc8:	0c12      	lsrs	r2, r2, #16
 800ccca:	fa13 f38a 	uxtah	r3, r3, sl
 800ccce:	fb06 e202 	mla	r2, r6, r2, lr
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	9b00      	ldr	r3, [sp, #0]
 800ccd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ccda:	b292      	uxth	r2, r2
 800ccdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cce4:	f8bd 3000 	ldrh.w	r3, [sp]
 800cce8:	4581      	cmp	r9, r0
 800ccea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccee:	f84c 3b04 	str.w	r3, [ip], #4
 800ccf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ccf6:	d2db      	bcs.n	800ccb0 <quorem+0x44>
 800ccf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800ccfc:	b92b      	cbnz	r3, 800cd0a <quorem+0x9e>
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	3b04      	subs	r3, #4
 800cd02:	429d      	cmp	r5, r3
 800cd04:	461a      	mov	r2, r3
 800cd06:	d32e      	bcc.n	800cd66 <quorem+0xfa>
 800cd08:	613c      	str	r4, [r7, #16]
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	f001 f8c6 	bl	800de9c <__mcmp>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	db24      	blt.n	800cd5e <quorem+0xf2>
 800cd14:	3601      	adds	r6, #1
 800cd16:	4628      	mov	r0, r5
 800cd18:	f04f 0c00 	mov.w	ip, #0
 800cd1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd20:	f8d0 e000 	ldr.w	lr, [r0]
 800cd24:	b293      	uxth	r3, r2
 800cd26:	ebac 0303 	sub.w	r3, ip, r3
 800cd2a:	0c12      	lsrs	r2, r2, #16
 800cd2c:	fa13 f38e 	uxtah	r3, r3, lr
 800cd30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd3e:	45c1      	cmp	r9, r8
 800cd40:	f840 3b04 	str.w	r3, [r0], #4
 800cd44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd48:	d2e8      	bcs.n	800cd1c <quorem+0xb0>
 800cd4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd52:	b922      	cbnz	r2, 800cd5e <quorem+0xf2>
 800cd54:	3b04      	subs	r3, #4
 800cd56:	429d      	cmp	r5, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	d30a      	bcc.n	800cd72 <quorem+0x106>
 800cd5c:	613c      	str	r4, [r7, #16]
 800cd5e:	4630      	mov	r0, r6
 800cd60:	b003      	add	sp, #12
 800cd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	3b04      	subs	r3, #4
 800cd6a:	2a00      	cmp	r2, #0
 800cd6c:	d1cc      	bne.n	800cd08 <quorem+0x9c>
 800cd6e:	3c01      	subs	r4, #1
 800cd70:	e7c7      	b.n	800cd02 <quorem+0x96>
 800cd72:	6812      	ldr	r2, [r2, #0]
 800cd74:	3b04      	subs	r3, #4
 800cd76:	2a00      	cmp	r2, #0
 800cd78:	d1f0      	bne.n	800cd5c <quorem+0xf0>
 800cd7a:	3c01      	subs	r4, #1
 800cd7c:	e7eb      	b.n	800cd56 <quorem+0xea>
 800cd7e:	2000      	movs	r0, #0
 800cd80:	e7ee      	b.n	800cd60 <quorem+0xf4>
 800cd82:	0000      	movs	r0, r0
 800cd84:	0000      	movs	r0, r0
	...

0800cd88 <_dtoa_r>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	ed2d 8b04 	vpush	{d8-d9}
 800cd90:	ec57 6b10 	vmov	r6, r7, d0
 800cd94:	b093      	sub	sp, #76	; 0x4c
 800cd96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd9c:	9106      	str	r1, [sp, #24]
 800cd9e:	ee10 aa10 	vmov	sl, s0
 800cda2:	4604      	mov	r4, r0
 800cda4:	9209      	str	r2, [sp, #36]	; 0x24
 800cda6:	930c      	str	r3, [sp, #48]	; 0x30
 800cda8:	46bb      	mov	fp, r7
 800cdaa:	b975      	cbnz	r5, 800cdca <_dtoa_r+0x42>
 800cdac:	2010      	movs	r0, #16
 800cdae:	f000 fddd 	bl	800d96c <malloc>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	6260      	str	r0, [r4, #36]	; 0x24
 800cdb6:	b920      	cbnz	r0, 800cdc2 <_dtoa_r+0x3a>
 800cdb8:	4ba7      	ldr	r3, [pc, #668]	; (800d058 <_dtoa_r+0x2d0>)
 800cdba:	21ea      	movs	r1, #234	; 0xea
 800cdbc:	48a7      	ldr	r0, [pc, #668]	; (800d05c <_dtoa_r+0x2d4>)
 800cdbe:	f001 fbd1 	bl	800e564 <__assert_func>
 800cdc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cdc6:	6005      	str	r5, [r0, #0]
 800cdc8:	60c5      	str	r5, [r0, #12]
 800cdca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdcc:	6819      	ldr	r1, [r3, #0]
 800cdce:	b151      	cbz	r1, 800cde6 <_dtoa_r+0x5e>
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	604a      	str	r2, [r1, #4]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	4093      	lsls	r3, r2
 800cdd8:	608b      	str	r3, [r1, #8]
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 fe1c 	bl	800da18 <_Bfree>
 800cde0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	1e3b      	subs	r3, r7, #0
 800cde8:	bfaa      	itet	ge
 800cdea:	2300      	movge	r3, #0
 800cdec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cdf0:	f8c8 3000 	strge.w	r3, [r8]
 800cdf4:	4b9a      	ldr	r3, [pc, #616]	; (800d060 <_dtoa_r+0x2d8>)
 800cdf6:	bfbc      	itt	lt
 800cdf8:	2201      	movlt	r2, #1
 800cdfa:	f8c8 2000 	strlt.w	r2, [r8]
 800cdfe:	ea33 030b 	bics.w	r3, r3, fp
 800ce02:	d11b      	bne.n	800ce3c <_dtoa_r+0xb4>
 800ce04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce06:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce0a:	6013      	str	r3, [r2, #0]
 800ce0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce10:	4333      	orrs	r3, r6
 800ce12:	f000 8592 	beq.w	800d93a <_dtoa_r+0xbb2>
 800ce16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce18:	b963      	cbnz	r3, 800ce34 <_dtoa_r+0xac>
 800ce1a:	4b92      	ldr	r3, [pc, #584]	; (800d064 <_dtoa_r+0x2dc>)
 800ce1c:	e022      	b.n	800ce64 <_dtoa_r+0xdc>
 800ce1e:	4b92      	ldr	r3, [pc, #584]	; (800d068 <_dtoa_r+0x2e0>)
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	3308      	adds	r3, #8
 800ce24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	9801      	ldr	r0, [sp, #4]
 800ce2a:	b013      	add	sp, #76	; 0x4c
 800ce2c:	ecbd 8b04 	vpop	{d8-d9}
 800ce30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce34:	4b8b      	ldr	r3, [pc, #556]	; (800d064 <_dtoa_r+0x2dc>)
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	3303      	adds	r3, #3
 800ce3a:	e7f3      	b.n	800ce24 <_dtoa_r+0x9c>
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2300      	movs	r3, #0
 800ce40:	4650      	mov	r0, sl
 800ce42:	4659      	mov	r1, fp
 800ce44:	f7f3 fe50 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce48:	ec4b ab19 	vmov	d9, sl, fp
 800ce4c:	4680      	mov	r8, r0
 800ce4e:	b158      	cbz	r0, 800ce68 <_dtoa_r+0xe0>
 800ce50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce52:	2301      	movs	r3, #1
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 856b 	beq.w	800d934 <_dtoa_r+0xbac>
 800ce5e:	4883      	ldr	r0, [pc, #524]	; (800d06c <_dtoa_r+0x2e4>)
 800ce60:	6018      	str	r0, [r3, #0]
 800ce62:	1e43      	subs	r3, r0, #1
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	e7df      	b.n	800ce28 <_dtoa_r+0xa0>
 800ce68:	ec4b ab10 	vmov	d0, sl, fp
 800ce6c:	aa10      	add	r2, sp, #64	; 0x40
 800ce6e:	a911      	add	r1, sp, #68	; 0x44
 800ce70:	4620      	mov	r0, r4
 800ce72:	f001 f8b9 	bl	800dfe8 <__d2b>
 800ce76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ce7a:	ee08 0a10 	vmov	s16, r0
 800ce7e:	2d00      	cmp	r5, #0
 800ce80:	f000 8084 	beq.w	800cf8c <_dtoa_r+0x204>
 800ce84:	ee19 3a90 	vmov	r3, s19
 800ce88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce90:	4656      	mov	r6, sl
 800ce92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ce9e:	4b74      	ldr	r3, [pc, #464]	; (800d070 <_dtoa_r+0x2e8>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	4630      	mov	r0, r6
 800cea4:	4639      	mov	r1, r7
 800cea6:	f7f3 f9ff 	bl	80002a8 <__aeabi_dsub>
 800ceaa:	a365      	add	r3, pc, #404	; (adr r3, 800d040 <_dtoa_r+0x2b8>)
 800ceac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb0:	f7f3 fbb2 	bl	8000618 <__aeabi_dmul>
 800ceb4:	a364      	add	r3, pc, #400	; (adr r3, 800d048 <_dtoa_r+0x2c0>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 f9f7 	bl	80002ac <__adddf3>
 800cebe:	4606      	mov	r6, r0
 800cec0:	4628      	mov	r0, r5
 800cec2:	460f      	mov	r7, r1
 800cec4:	f7f3 fb3e 	bl	8000544 <__aeabi_i2d>
 800cec8:	a361      	add	r3, pc, #388	; (adr r3, 800d050 <_dtoa_r+0x2c8>)
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	f7f3 fba3 	bl	8000618 <__aeabi_dmul>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4630      	mov	r0, r6
 800ced8:	4639      	mov	r1, r7
 800ceda:	f7f3 f9e7 	bl	80002ac <__adddf3>
 800cede:	4606      	mov	r6, r0
 800cee0:	460f      	mov	r7, r1
 800cee2:	f7f3 fe49 	bl	8000b78 <__aeabi_d2iz>
 800cee6:	2200      	movs	r2, #0
 800cee8:	9000      	str	r0, [sp, #0]
 800ceea:	2300      	movs	r3, #0
 800ceec:	4630      	mov	r0, r6
 800ceee:	4639      	mov	r1, r7
 800cef0:	f7f3 fe04 	bl	8000afc <__aeabi_dcmplt>
 800cef4:	b150      	cbz	r0, 800cf0c <_dtoa_r+0x184>
 800cef6:	9800      	ldr	r0, [sp, #0]
 800cef8:	f7f3 fb24 	bl	8000544 <__aeabi_i2d>
 800cefc:	4632      	mov	r2, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	f7f3 fdf2 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf04:	b910      	cbnz	r0, 800cf0c <_dtoa_r+0x184>
 800cf06:	9b00      	ldr	r3, [sp, #0]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	9b00      	ldr	r3, [sp, #0]
 800cf0e:	2b16      	cmp	r3, #22
 800cf10:	d85a      	bhi.n	800cfc8 <_dtoa_r+0x240>
 800cf12:	9a00      	ldr	r2, [sp, #0]
 800cf14:	4b57      	ldr	r3, [pc, #348]	; (800d074 <_dtoa_r+0x2ec>)
 800cf16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	ec51 0b19 	vmov	r0, r1, d9
 800cf22:	f7f3 fdeb 	bl	8000afc <__aeabi_dcmplt>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d050      	beq.n	800cfcc <_dtoa_r+0x244>
 800cf2a:	9b00      	ldr	r3, [sp, #0]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	2300      	movs	r3, #0
 800cf32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf36:	1b5d      	subs	r5, r3, r5
 800cf38:	1e6b      	subs	r3, r5, #1
 800cf3a:	9305      	str	r3, [sp, #20]
 800cf3c:	bf45      	ittet	mi
 800cf3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cf42:	9304      	strmi	r3, [sp, #16]
 800cf44:	2300      	movpl	r3, #0
 800cf46:	2300      	movmi	r3, #0
 800cf48:	bf4c      	ite	mi
 800cf4a:	9305      	strmi	r3, [sp, #20]
 800cf4c:	9304      	strpl	r3, [sp, #16]
 800cf4e:	9b00      	ldr	r3, [sp, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	db3d      	blt.n	800cfd0 <_dtoa_r+0x248>
 800cf54:	9b05      	ldr	r3, [sp, #20]
 800cf56:	9a00      	ldr	r2, [sp, #0]
 800cf58:	920a      	str	r2, [sp, #40]	; 0x28
 800cf5a:	4413      	add	r3, r2
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	2300      	movs	r3, #0
 800cf60:	9307      	str	r3, [sp, #28]
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	2b09      	cmp	r3, #9
 800cf66:	f200 8089 	bhi.w	800d07c <_dtoa_r+0x2f4>
 800cf6a:	2b05      	cmp	r3, #5
 800cf6c:	bfc4      	itt	gt
 800cf6e:	3b04      	subgt	r3, #4
 800cf70:	9306      	strgt	r3, [sp, #24]
 800cf72:	9b06      	ldr	r3, [sp, #24]
 800cf74:	f1a3 0302 	sub.w	r3, r3, #2
 800cf78:	bfcc      	ite	gt
 800cf7a:	2500      	movgt	r5, #0
 800cf7c:	2501      	movle	r5, #1
 800cf7e:	2b03      	cmp	r3, #3
 800cf80:	f200 8087 	bhi.w	800d092 <_dtoa_r+0x30a>
 800cf84:	e8df f003 	tbb	[pc, r3]
 800cf88:	59383a2d 	.word	0x59383a2d
 800cf8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cf90:	441d      	add	r5, r3
 800cf92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf96:	2b20      	cmp	r3, #32
 800cf98:	bfc1      	itttt	gt
 800cf9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cfa2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cfa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cfaa:	bfda      	itte	le
 800cfac:	f1c3 0320 	rsble	r3, r3, #32
 800cfb0:	fa06 f003 	lslle.w	r0, r6, r3
 800cfb4:	4318      	orrgt	r0, r3
 800cfb6:	f7f3 fab5 	bl	8000524 <__aeabi_ui2d>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cfc2:	3d01      	subs	r5, #1
 800cfc4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfc6:	e76a      	b.n	800ce9e <_dtoa_r+0x116>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e7b2      	b.n	800cf32 <_dtoa_r+0x1aa>
 800cfcc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cfce:	e7b1      	b.n	800cf34 <_dtoa_r+0x1ac>
 800cfd0:	9b04      	ldr	r3, [sp, #16]
 800cfd2:	9a00      	ldr	r2, [sp, #0]
 800cfd4:	1a9b      	subs	r3, r3, r2
 800cfd6:	9304      	str	r3, [sp, #16]
 800cfd8:	4253      	negs	r3, r2
 800cfda:	9307      	str	r3, [sp, #28]
 800cfdc:	2300      	movs	r3, #0
 800cfde:	930a      	str	r3, [sp, #40]	; 0x28
 800cfe0:	e7bf      	b.n	800cf62 <_dtoa_r+0x1da>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	9308      	str	r3, [sp, #32]
 800cfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	dc55      	bgt.n	800d098 <_dtoa_r+0x310>
 800cfec:	2301      	movs	r3, #1
 800cfee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cff2:	461a      	mov	r2, r3
 800cff4:	9209      	str	r2, [sp, #36]	; 0x24
 800cff6:	e00c      	b.n	800d012 <_dtoa_r+0x28a>
 800cff8:	2301      	movs	r3, #1
 800cffa:	e7f3      	b.n	800cfe4 <_dtoa_r+0x25c>
 800cffc:	2300      	movs	r3, #0
 800cffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d000:	9308      	str	r3, [sp, #32]
 800d002:	9b00      	ldr	r3, [sp, #0]
 800d004:	4413      	add	r3, r2
 800d006:	9302      	str	r3, [sp, #8]
 800d008:	3301      	adds	r3, #1
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	9303      	str	r3, [sp, #12]
 800d00e:	bfb8      	it	lt
 800d010:	2301      	movlt	r3, #1
 800d012:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d014:	2200      	movs	r2, #0
 800d016:	6042      	str	r2, [r0, #4]
 800d018:	2204      	movs	r2, #4
 800d01a:	f102 0614 	add.w	r6, r2, #20
 800d01e:	429e      	cmp	r6, r3
 800d020:	6841      	ldr	r1, [r0, #4]
 800d022:	d93d      	bls.n	800d0a0 <_dtoa_r+0x318>
 800d024:	4620      	mov	r0, r4
 800d026:	f000 fcb7 	bl	800d998 <_Balloc>
 800d02a:	9001      	str	r0, [sp, #4]
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d13b      	bne.n	800d0a8 <_dtoa_r+0x320>
 800d030:	4b11      	ldr	r3, [pc, #68]	; (800d078 <_dtoa_r+0x2f0>)
 800d032:	4602      	mov	r2, r0
 800d034:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d038:	e6c0      	b.n	800cdbc <_dtoa_r+0x34>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e7df      	b.n	800cffe <_dtoa_r+0x276>
 800d03e:	bf00      	nop
 800d040:	636f4361 	.word	0x636f4361
 800d044:	3fd287a7 	.word	0x3fd287a7
 800d048:	8b60c8b3 	.word	0x8b60c8b3
 800d04c:	3fc68a28 	.word	0x3fc68a28
 800d050:	509f79fb 	.word	0x509f79fb
 800d054:	3fd34413 	.word	0x3fd34413
 800d058:	08011891 	.word	0x08011891
 800d05c:	080118a8 	.word	0x080118a8
 800d060:	7ff00000 	.word	0x7ff00000
 800d064:	0801188d 	.word	0x0801188d
 800d068:	08011884 	.word	0x08011884
 800d06c:	08011861 	.word	0x08011861
 800d070:	3ff80000 	.word	0x3ff80000
 800d074:	08011998 	.word	0x08011998
 800d078:	08011903 	.word	0x08011903
 800d07c:	2501      	movs	r5, #1
 800d07e:	2300      	movs	r3, #0
 800d080:	9306      	str	r3, [sp, #24]
 800d082:	9508      	str	r5, [sp, #32]
 800d084:	f04f 33ff 	mov.w	r3, #4294967295
 800d088:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d08c:	2200      	movs	r2, #0
 800d08e:	2312      	movs	r3, #18
 800d090:	e7b0      	b.n	800cff4 <_dtoa_r+0x26c>
 800d092:	2301      	movs	r3, #1
 800d094:	9308      	str	r3, [sp, #32]
 800d096:	e7f5      	b.n	800d084 <_dtoa_r+0x2fc>
 800d098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d09e:	e7b8      	b.n	800d012 <_dtoa_r+0x28a>
 800d0a0:	3101      	adds	r1, #1
 800d0a2:	6041      	str	r1, [r0, #4]
 800d0a4:	0052      	lsls	r2, r2, #1
 800d0a6:	e7b8      	b.n	800d01a <_dtoa_r+0x292>
 800d0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0aa:	9a01      	ldr	r2, [sp, #4]
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	2b0e      	cmp	r3, #14
 800d0b2:	f200 809d 	bhi.w	800d1f0 <_dtoa_r+0x468>
 800d0b6:	2d00      	cmp	r5, #0
 800d0b8:	f000 809a 	beq.w	800d1f0 <_dtoa_r+0x468>
 800d0bc:	9b00      	ldr	r3, [sp, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	dd32      	ble.n	800d128 <_dtoa_r+0x3a0>
 800d0c2:	4ab7      	ldr	r2, [pc, #732]	; (800d3a0 <_dtoa_r+0x618>)
 800d0c4:	f003 030f 	and.w	r3, r3, #15
 800d0c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0d0:	9b00      	ldr	r3, [sp, #0]
 800d0d2:	05d8      	lsls	r0, r3, #23
 800d0d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d0d8:	d516      	bpl.n	800d108 <_dtoa_r+0x380>
 800d0da:	4bb2      	ldr	r3, [pc, #712]	; (800d3a4 <_dtoa_r+0x61c>)
 800d0dc:	ec51 0b19 	vmov	r0, r1, d9
 800d0e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0e4:	f7f3 fbc2 	bl	800086c <__aeabi_ddiv>
 800d0e8:	f007 070f 	and.w	r7, r7, #15
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	468b      	mov	fp, r1
 800d0f0:	2503      	movs	r5, #3
 800d0f2:	4eac      	ldr	r6, [pc, #688]	; (800d3a4 <_dtoa_r+0x61c>)
 800d0f4:	b957      	cbnz	r7, 800d10c <_dtoa_r+0x384>
 800d0f6:	4642      	mov	r2, r8
 800d0f8:	464b      	mov	r3, r9
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	4659      	mov	r1, fp
 800d0fe:	f7f3 fbb5 	bl	800086c <__aeabi_ddiv>
 800d102:	4682      	mov	sl, r0
 800d104:	468b      	mov	fp, r1
 800d106:	e028      	b.n	800d15a <_dtoa_r+0x3d2>
 800d108:	2502      	movs	r5, #2
 800d10a:	e7f2      	b.n	800d0f2 <_dtoa_r+0x36a>
 800d10c:	07f9      	lsls	r1, r7, #31
 800d10e:	d508      	bpl.n	800d122 <_dtoa_r+0x39a>
 800d110:	4640      	mov	r0, r8
 800d112:	4649      	mov	r1, r9
 800d114:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d118:	f7f3 fa7e 	bl	8000618 <__aeabi_dmul>
 800d11c:	3501      	adds	r5, #1
 800d11e:	4680      	mov	r8, r0
 800d120:	4689      	mov	r9, r1
 800d122:	107f      	asrs	r7, r7, #1
 800d124:	3608      	adds	r6, #8
 800d126:	e7e5      	b.n	800d0f4 <_dtoa_r+0x36c>
 800d128:	f000 809b 	beq.w	800d262 <_dtoa_r+0x4da>
 800d12c:	9b00      	ldr	r3, [sp, #0]
 800d12e:	4f9d      	ldr	r7, [pc, #628]	; (800d3a4 <_dtoa_r+0x61c>)
 800d130:	425e      	negs	r6, r3
 800d132:	4b9b      	ldr	r3, [pc, #620]	; (800d3a0 <_dtoa_r+0x618>)
 800d134:	f006 020f 	and.w	r2, r6, #15
 800d138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	ec51 0b19 	vmov	r0, r1, d9
 800d144:	f7f3 fa68 	bl	8000618 <__aeabi_dmul>
 800d148:	1136      	asrs	r6, r6, #4
 800d14a:	4682      	mov	sl, r0
 800d14c:	468b      	mov	fp, r1
 800d14e:	2300      	movs	r3, #0
 800d150:	2502      	movs	r5, #2
 800d152:	2e00      	cmp	r6, #0
 800d154:	d17a      	bne.n	800d24c <_dtoa_r+0x4c4>
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1d3      	bne.n	800d102 <_dtoa_r+0x37a>
 800d15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 8082 	beq.w	800d266 <_dtoa_r+0x4de>
 800d162:	4b91      	ldr	r3, [pc, #580]	; (800d3a8 <_dtoa_r+0x620>)
 800d164:	2200      	movs	r2, #0
 800d166:	4650      	mov	r0, sl
 800d168:	4659      	mov	r1, fp
 800d16a:	f7f3 fcc7 	bl	8000afc <__aeabi_dcmplt>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d079      	beq.n	800d266 <_dtoa_r+0x4de>
 800d172:	9b03      	ldr	r3, [sp, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d076      	beq.n	800d266 <_dtoa_r+0x4de>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	dd36      	ble.n	800d1ec <_dtoa_r+0x464>
 800d17e:	9b00      	ldr	r3, [sp, #0]
 800d180:	4650      	mov	r0, sl
 800d182:	4659      	mov	r1, fp
 800d184:	1e5f      	subs	r7, r3, #1
 800d186:	2200      	movs	r2, #0
 800d188:	4b88      	ldr	r3, [pc, #544]	; (800d3ac <_dtoa_r+0x624>)
 800d18a:	f7f3 fa45 	bl	8000618 <__aeabi_dmul>
 800d18e:	9e02      	ldr	r6, [sp, #8]
 800d190:	4682      	mov	sl, r0
 800d192:	468b      	mov	fp, r1
 800d194:	3501      	adds	r5, #1
 800d196:	4628      	mov	r0, r5
 800d198:	f7f3 f9d4 	bl	8000544 <__aeabi_i2d>
 800d19c:	4652      	mov	r2, sl
 800d19e:	465b      	mov	r3, fp
 800d1a0:	f7f3 fa3a 	bl	8000618 <__aeabi_dmul>
 800d1a4:	4b82      	ldr	r3, [pc, #520]	; (800d3b0 <_dtoa_r+0x628>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f7f3 f880 	bl	80002ac <__adddf3>
 800d1ac:	46d0      	mov	r8, sl
 800d1ae:	46d9      	mov	r9, fp
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d1b6:	2e00      	cmp	r6, #0
 800d1b8:	d158      	bne.n	800d26c <_dtoa_r+0x4e4>
 800d1ba:	4b7e      	ldr	r3, [pc, #504]	; (800d3b4 <_dtoa_r+0x62c>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	f7f3 f871 	bl	80002a8 <__aeabi_dsub>
 800d1c6:	4652      	mov	r2, sl
 800d1c8:	465b      	mov	r3, fp
 800d1ca:	4680      	mov	r8, r0
 800d1cc:	4689      	mov	r9, r1
 800d1ce:	f7f3 fcb3 	bl	8000b38 <__aeabi_dcmpgt>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	f040 8295 	bne.w	800d702 <_dtoa_r+0x97a>
 800d1d8:	4652      	mov	r2, sl
 800d1da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d1de:	4640      	mov	r0, r8
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	f7f3 fc8b 	bl	8000afc <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	f040 8289 	bne.w	800d6fe <_dtoa_r+0x976>
 800d1ec:	ec5b ab19 	vmov	sl, fp, d9
 800d1f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f2c0 8148 	blt.w	800d488 <_dtoa_r+0x700>
 800d1f8:	9a00      	ldr	r2, [sp, #0]
 800d1fa:	2a0e      	cmp	r2, #14
 800d1fc:	f300 8144 	bgt.w	800d488 <_dtoa_r+0x700>
 800d200:	4b67      	ldr	r3, [pc, #412]	; (800d3a0 <_dtoa_r+0x618>)
 800d202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f280 80d5 	bge.w	800d3bc <_dtoa_r+0x634>
 800d212:	9b03      	ldr	r3, [sp, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	f300 80d1 	bgt.w	800d3bc <_dtoa_r+0x634>
 800d21a:	f040 826f 	bne.w	800d6fc <_dtoa_r+0x974>
 800d21e:	4b65      	ldr	r3, [pc, #404]	; (800d3b4 <_dtoa_r+0x62c>)
 800d220:	2200      	movs	r2, #0
 800d222:	4640      	mov	r0, r8
 800d224:	4649      	mov	r1, r9
 800d226:	f7f3 f9f7 	bl	8000618 <__aeabi_dmul>
 800d22a:	4652      	mov	r2, sl
 800d22c:	465b      	mov	r3, fp
 800d22e:	f7f3 fc79 	bl	8000b24 <__aeabi_dcmpge>
 800d232:	9e03      	ldr	r6, [sp, #12]
 800d234:	4637      	mov	r7, r6
 800d236:	2800      	cmp	r0, #0
 800d238:	f040 8245 	bne.w	800d6c6 <_dtoa_r+0x93e>
 800d23c:	9d01      	ldr	r5, [sp, #4]
 800d23e:	2331      	movs	r3, #49	; 0x31
 800d240:	f805 3b01 	strb.w	r3, [r5], #1
 800d244:	9b00      	ldr	r3, [sp, #0]
 800d246:	3301      	adds	r3, #1
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	e240      	b.n	800d6ce <_dtoa_r+0x946>
 800d24c:	07f2      	lsls	r2, r6, #31
 800d24e:	d505      	bpl.n	800d25c <_dtoa_r+0x4d4>
 800d250:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d254:	f7f3 f9e0 	bl	8000618 <__aeabi_dmul>
 800d258:	3501      	adds	r5, #1
 800d25a:	2301      	movs	r3, #1
 800d25c:	1076      	asrs	r6, r6, #1
 800d25e:	3708      	adds	r7, #8
 800d260:	e777      	b.n	800d152 <_dtoa_r+0x3ca>
 800d262:	2502      	movs	r5, #2
 800d264:	e779      	b.n	800d15a <_dtoa_r+0x3d2>
 800d266:	9f00      	ldr	r7, [sp, #0]
 800d268:	9e03      	ldr	r6, [sp, #12]
 800d26a:	e794      	b.n	800d196 <_dtoa_r+0x40e>
 800d26c:	9901      	ldr	r1, [sp, #4]
 800d26e:	4b4c      	ldr	r3, [pc, #304]	; (800d3a0 <_dtoa_r+0x618>)
 800d270:	4431      	add	r1, r6
 800d272:	910d      	str	r1, [sp, #52]	; 0x34
 800d274:	9908      	ldr	r1, [sp, #32]
 800d276:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d27a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d27e:	2900      	cmp	r1, #0
 800d280:	d043      	beq.n	800d30a <_dtoa_r+0x582>
 800d282:	494d      	ldr	r1, [pc, #308]	; (800d3b8 <_dtoa_r+0x630>)
 800d284:	2000      	movs	r0, #0
 800d286:	f7f3 faf1 	bl	800086c <__aeabi_ddiv>
 800d28a:	4652      	mov	r2, sl
 800d28c:	465b      	mov	r3, fp
 800d28e:	f7f3 f80b 	bl	80002a8 <__aeabi_dsub>
 800d292:	9d01      	ldr	r5, [sp, #4]
 800d294:	4682      	mov	sl, r0
 800d296:	468b      	mov	fp, r1
 800d298:	4649      	mov	r1, r9
 800d29a:	4640      	mov	r0, r8
 800d29c:	f7f3 fc6c 	bl	8000b78 <__aeabi_d2iz>
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	f7f3 f94f 	bl	8000544 <__aeabi_i2d>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	4649      	mov	r1, r9
 800d2ae:	f7f2 fffb 	bl	80002a8 <__aeabi_dsub>
 800d2b2:	3630      	adds	r6, #48	; 0x30
 800d2b4:	f805 6b01 	strb.w	r6, [r5], #1
 800d2b8:	4652      	mov	r2, sl
 800d2ba:	465b      	mov	r3, fp
 800d2bc:	4680      	mov	r8, r0
 800d2be:	4689      	mov	r9, r1
 800d2c0:	f7f3 fc1c 	bl	8000afc <__aeabi_dcmplt>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d163      	bne.n	800d390 <_dtoa_r+0x608>
 800d2c8:	4642      	mov	r2, r8
 800d2ca:	464b      	mov	r3, r9
 800d2cc:	4936      	ldr	r1, [pc, #216]	; (800d3a8 <_dtoa_r+0x620>)
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	f7f2 ffea 	bl	80002a8 <__aeabi_dsub>
 800d2d4:	4652      	mov	r2, sl
 800d2d6:	465b      	mov	r3, fp
 800d2d8:	f7f3 fc10 	bl	8000afc <__aeabi_dcmplt>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	f040 80b5 	bne.w	800d44c <_dtoa_r+0x6c4>
 800d2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2e4:	429d      	cmp	r5, r3
 800d2e6:	d081      	beq.n	800d1ec <_dtoa_r+0x464>
 800d2e8:	4b30      	ldr	r3, [pc, #192]	; (800d3ac <_dtoa_r+0x624>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	4650      	mov	r0, sl
 800d2ee:	4659      	mov	r1, fp
 800d2f0:	f7f3 f992 	bl	8000618 <__aeabi_dmul>
 800d2f4:	4b2d      	ldr	r3, [pc, #180]	; (800d3ac <_dtoa_r+0x624>)
 800d2f6:	4682      	mov	sl, r0
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	2200      	movs	r2, #0
 800d300:	f7f3 f98a 	bl	8000618 <__aeabi_dmul>
 800d304:	4680      	mov	r8, r0
 800d306:	4689      	mov	r9, r1
 800d308:	e7c6      	b.n	800d298 <_dtoa_r+0x510>
 800d30a:	4650      	mov	r0, sl
 800d30c:	4659      	mov	r1, fp
 800d30e:	f7f3 f983 	bl	8000618 <__aeabi_dmul>
 800d312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d314:	9d01      	ldr	r5, [sp, #4]
 800d316:	930f      	str	r3, [sp, #60]	; 0x3c
 800d318:	4682      	mov	sl, r0
 800d31a:	468b      	mov	fp, r1
 800d31c:	4649      	mov	r1, r9
 800d31e:	4640      	mov	r0, r8
 800d320:	f7f3 fc2a 	bl	8000b78 <__aeabi_d2iz>
 800d324:	4606      	mov	r6, r0
 800d326:	f7f3 f90d 	bl	8000544 <__aeabi_i2d>
 800d32a:	3630      	adds	r6, #48	; 0x30
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4640      	mov	r0, r8
 800d332:	4649      	mov	r1, r9
 800d334:	f7f2 ffb8 	bl	80002a8 <__aeabi_dsub>
 800d338:	f805 6b01 	strb.w	r6, [r5], #1
 800d33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d33e:	429d      	cmp	r5, r3
 800d340:	4680      	mov	r8, r0
 800d342:	4689      	mov	r9, r1
 800d344:	f04f 0200 	mov.w	r2, #0
 800d348:	d124      	bne.n	800d394 <_dtoa_r+0x60c>
 800d34a:	4b1b      	ldr	r3, [pc, #108]	; (800d3b8 <_dtoa_r+0x630>)
 800d34c:	4650      	mov	r0, sl
 800d34e:	4659      	mov	r1, fp
 800d350:	f7f2 ffac 	bl	80002ac <__adddf3>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4640      	mov	r0, r8
 800d35a:	4649      	mov	r1, r9
 800d35c:	f7f3 fbec 	bl	8000b38 <__aeabi_dcmpgt>
 800d360:	2800      	cmp	r0, #0
 800d362:	d173      	bne.n	800d44c <_dtoa_r+0x6c4>
 800d364:	4652      	mov	r2, sl
 800d366:	465b      	mov	r3, fp
 800d368:	4913      	ldr	r1, [pc, #76]	; (800d3b8 <_dtoa_r+0x630>)
 800d36a:	2000      	movs	r0, #0
 800d36c:	f7f2 ff9c 	bl	80002a8 <__aeabi_dsub>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4640      	mov	r0, r8
 800d376:	4649      	mov	r1, r9
 800d378:	f7f3 fbc0 	bl	8000afc <__aeabi_dcmplt>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f43f af35 	beq.w	800d1ec <_dtoa_r+0x464>
 800d382:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d384:	1e6b      	subs	r3, r5, #1
 800d386:	930f      	str	r3, [sp, #60]	; 0x3c
 800d388:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d38c:	2b30      	cmp	r3, #48	; 0x30
 800d38e:	d0f8      	beq.n	800d382 <_dtoa_r+0x5fa>
 800d390:	9700      	str	r7, [sp, #0]
 800d392:	e049      	b.n	800d428 <_dtoa_r+0x6a0>
 800d394:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <_dtoa_r+0x624>)
 800d396:	f7f3 f93f 	bl	8000618 <__aeabi_dmul>
 800d39a:	4680      	mov	r8, r0
 800d39c:	4689      	mov	r9, r1
 800d39e:	e7bd      	b.n	800d31c <_dtoa_r+0x594>
 800d3a0:	08011998 	.word	0x08011998
 800d3a4:	08011970 	.word	0x08011970
 800d3a8:	3ff00000 	.word	0x3ff00000
 800d3ac:	40240000 	.word	0x40240000
 800d3b0:	401c0000 	.word	0x401c0000
 800d3b4:	40140000 	.word	0x40140000
 800d3b8:	3fe00000 	.word	0x3fe00000
 800d3bc:	9d01      	ldr	r5, [sp, #4]
 800d3be:	4656      	mov	r6, sl
 800d3c0:	465f      	mov	r7, fp
 800d3c2:	4642      	mov	r2, r8
 800d3c4:	464b      	mov	r3, r9
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	f7f3 fa4f 	bl	800086c <__aeabi_ddiv>
 800d3ce:	f7f3 fbd3 	bl	8000b78 <__aeabi_d2iz>
 800d3d2:	4682      	mov	sl, r0
 800d3d4:	f7f3 f8b6 	bl	8000544 <__aeabi_i2d>
 800d3d8:	4642      	mov	r2, r8
 800d3da:	464b      	mov	r3, r9
 800d3dc:	f7f3 f91c 	bl	8000618 <__aeabi_dmul>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d3ec:	f7f2 ff5c 	bl	80002a8 <__aeabi_dsub>
 800d3f0:	f805 6b01 	strb.w	r6, [r5], #1
 800d3f4:	9e01      	ldr	r6, [sp, #4]
 800d3f6:	9f03      	ldr	r7, [sp, #12]
 800d3f8:	1bae      	subs	r6, r5, r6
 800d3fa:	42b7      	cmp	r7, r6
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	d135      	bne.n	800d46e <_dtoa_r+0x6e6>
 800d402:	f7f2 ff53 	bl	80002ac <__adddf3>
 800d406:	4642      	mov	r2, r8
 800d408:	464b      	mov	r3, r9
 800d40a:	4606      	mov	r6, r0
 800d40c:	460f      	mov	r7, r1
 800d40e:	f7f3 fb93 	bl	8000b38 <__aeabi_dcmpgt>
 800d412:	b9d0      	cbnz	r0, 800d44a <_dtoa_r+0x6c2>
 800d414:	4642      	mov	r2, r8
 800d416:	464b      	mov	r3, r9
 800d418:	4630      	mov	r0, r6
 800d41a:	4639      	mov	r1, r7
 800d41c:	f7f3 fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 800d420:	b110      	cbz	r0, 800d428 <_dtoa_r+0x6a0>
 800d422:	f01a 0f01 	tst.w	sl, #1
 800d426:	d110      	bne.n	800d44a <_dtoa_r+0x6c2>
 800d428:	4620      	mov	r0, r4
 800d42a:	ee18 1a10 	vmov	r1, s16
 800d42e:	f000 faf3 	bl	800da18 <_Bfree>
 800d432:	2300      	movs	r3, #0
 800d434:	9800      	ldr	r0, [sp, #0]
 800d436:	702b      	strb	r3, [r5, #0]
 800d438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d43a:	3001      	adds	r0, #1
 800d43c:	6018      	str	r0, [r3, #0]
 800d43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d440:	2b00      	cmp	r3, #0
 800d442:	f43f acf1 	beq.w	800ce28 <_dtoa_r+0xa0>
 800d446:	601d      	str	r5, [r3, #0]
 800d448:	e4ee      	b.n	800ce28 <_dtoa_r+0xa0>
 800d44a:	9f00      	ldr	r7, [sp, #0]
 800d44c:	462b      	mov	r3, r5
 800d44e:	461d      	mov	r5, r3
 800d450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d454:	2a39      	cmp	r2, #57	; 0x39
 800d456:	d106      	bne.n	800d466 <_dtoa_r+0x6de>
 800d458:	9a01      	ldr	r2, [sp, #4]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d1f7      	bne.n	800d44e <_dtoa_r+0x6c6>
 800d45e:	9901      	ldr	r1, [sp, #4]
 800d460:	2230      	movs	r2, #48	; 0x30
 800d462:	3701      	adds	r7, #1
 800d464:	700a      	strb	r2, [r1, #0]
 800d466:	781a      	ldrb	r2, [r3, #0]
 800d468:	3201      	adds	r2, #1
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	e790      	b.n	800d390 <_dtoa_r+0x608>
 800d46e:	4ba6      	ldr	r3, [pc, #664]	; (800d708 <_dtoa_r+0x980>)
 800d470:	2200      	movs	r2, #0
 800d472:	f7f3 f8d1 	bl	8000618 <__aeabi_dmul>
 800d476:	2200      	movs	r2, #0
 800d478:	2300      	movs	r3, #0
 800d47a:	4606      	mov	r6, r0
 800d47c:	460f      	mov	r7, r1
 800d47e:	f7f3 fb33 	bl	8000ae8 <__aeabi_dcmpeq>
 800d482:	2800      	cmp	r0, #0
 800d484:	d09d      	beq.n	800d3c2 <_dtoa_r+0x63a>
 800d486:	e7cf      	b.n	800d428 <_dtoa_r+0x6a0>
 800d488:	9a08      	ldr	r2, [sp, #32]
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	f000 80d7 	beq.w	800d63e <_dtoa_r+0x8b6>
 800d490:	9a06      	ldr	r2, [sp, #24]
 800d492:	2a01      	cmp	r2, #1
 800d494:	f300 80ba 	bgt.w	800d60c <_dtoa_r+0x884>
 800d498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d49a:	2a00      	cmp	r2, #0
 800d49c:	f000 80b2 	beq.w	800d604 <_dtoa_r+0x87c>
 800d4a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d4a4:	9e07      	ldr	r6, [sp, #28]
 800d4a6:	9d04      	ldr	r5, [sp, #16]
 800d4a8:	9a04      	ldr	r2, [sp, #16]
 800d4aa:	441a      	add	r2, r3
 800d4ac:	9204      	str	r2, [sp, #16]
 800d4ae:	9a05      	ldr	r2, [sp, #20]
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	441a      	add	r2, r3
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	9205      	str	r2, [sp, #20]
 800d4b8:	f000 fb66 	bl	800db88 <__i2b>
 800d4bc:	4607      	mov	r7, r0
 800d4be:	2d00      	cmp	r5, #0
 800d4c0:	dd0c      	ble.n	800d4dc <_dtoa_r+0x754>
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dd09      	ble.n	800d4dc <_dtoa_r+0x754>
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	9a04      	ldr	r2, [sp, #16]
 800d4cc:	bfa8      	it	ge
 800d4ce:	462b      	movge	r3, r5
 800d4d0:	1ad2      	subs	r2, r2, r3
 800d4d2:	9204      	str	r2, [sp, #16]
 800d4d4:	9a05      	ldr	r2, [sp, #20]
 800d4d6:	1aed      	subs	r5, r5, r3
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	9305      	str	r3, [sp, #20]
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	b31b      	cbz	r3, 800d528 <_dtoa_r+0x7a0>
 800d4e0:	9b08      	ldr	r3, [sp, #32]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f000 80af 	beq.w	800d646 <_dtoa_r+0x8be>
 800d4e8:	2e00      	cmp	r6, #0
 800d4ea:	dd13      	ble.n	800d514 <_dtoa_r+0x78c>
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 fc09 	bl	800dd08 <__pow5mult>
 800d4f6:	ee18 2a10 	vmov	r2, s16
 800d4fa:	4601      	mov	r1, r0
 800d4fc:	4607      	mov	r7, r0
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 fb58 	bl	800dbb4 <__multiply>
 800d504:	ee18 1a10 	vmov	r1, s16
 800d508:	4680      	mov	r8, r0
 800d50a:	4620      	mov	r0, r4
 800d50c:	f000 fa84 	bl	800da18 <_Bfree>
 800d510:	ee08 8a10 	vmov	s16, r8
 800d514:	9b07      	ldr	r3, [sp, #28]
 800d516:	1b9a      	subs	r2, r3, r6
 800d518:	d006      	beq.n	800d528 <_dtoa_r+0x7a0>
 800d51a:	ee18 1a10 	vmov	r1, s16
 800d51e:	4620      	mov	r0, r4
 800d520:	f000 fbf2 	bl	800dd08 <__pow5mult>
 800d524:	ee08 0a10 	vmov	s16, r0
 800d528:	2101      	movs	r1, #1
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 fb2c 	bl	800db88 <__i2b>
 800d530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d532:	2b00      	cmp	r3, #0
 800d534:	4606      	mov	r6, r0
 800d536:	f340 8088 	ble.w	800d64a <_dtoa_r+0x8c2>
 800d53a:	461a      	mov	r2, r3
 800d53c:	4601      	mov	r1, r0
 800d53e:	4620      	mov	r0, r4
 800d540:	f000 fbe2 	bl	800dd08 <__pow5mult>
 800d544:	9b06      	ldr	r3, [sp, #24]
 800d546:	2b01      	cmp	r3, #1
 800d548:	4606      	mov	r6, r0
 800d54a:	f340 8081 	ble.w	800d650 <_dtoa_r+0x8c8>
 800d54e:	f04f 0800 	mov.w	r8, #0
 800d552:	6933      	ldr	r3, [r6, #16]
 800d554:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d558:	6918      	ldr	r0, [r3, #16]
 800d55a:	f000 fac5 	bl	800dae8 <__hi0bits>
 800d55e:	f1c0 0020 	rsb	r0, r0, #32
 800d562:	9b05      	ldr	r3, [sp, #20]
 800d564:	4418      	add	r0, r3
 800d566:	f010 001f 	ands.w	r0, r0, #31
 800d56a:	f000 8092 	beq.w	800d692 <_dtoa_r+0x90a>
 800d56e:	f1c0 0320 	rsb	r3, r0, #32
 800d572:	2b04      	cmp	r3, #4
 800d574:	f340 808a 	ble.w	800d68c <_dtoa_r+0x904>
 800d578:	f1c0 001c 	rsb	r0, r0, #28
 800d57c:	9b04      	ldr	r3, [sp, #16]
 800d57e:	4403      	add	r3, r0
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	4403      	add	r3, r0
 800d586:	4405      	add	r5, r0
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	9b04      	ldr	r3, [sp, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dd07      	ble.n	800d5a0 <_dtoa_r+0x818>
 800d590:	ee18 1a10 	vmov	r1, s16
 800d594:	461a      	mov	r2, r3
 800d596:	4620      	mov	r0, r4
 800d598:	f000 fc10 	bl	800ddbc <__lshift>
 800d59c:	ee08 0a10 	vmov	s16, r0
 800d5a0:	9b05      	ldr	r3, [sp, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	dd05      	ble.n	800d5b2 <_dtoa_r+0x82a>
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 fc06 	bl	800ddbc <__lshift>
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d06e      	beq.n	800d696 <_dtoa_r+0x90e>
 800d5b8:	ee18 0a10 	vmov	r0, s16
 800d5bc:	4631      	mov	r1, r6
 800d5be:	f000 fc6d 	bl	800de9c <__mcmp>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	da67      	bge.n	800d696 <_dtoa_r+0x90e>
 800d5c6:	9b00      	ldr	r3, [sp, #0]
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	ee18 1a10 	vmov	r1, s16
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	220a      	movs	r2, #10
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 fa41 	bl	800da5c <__multadd>
 800d5da:	9b08      	ldr	r3, [sp, #32]
 800d5dc:	ee08 0a10 	vmov	s16, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 81b1 	beq.w	800d948 <_dtoa_r+0xbc0>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	4639      	mov	r1, r7
 800d5ea:	220a      	movs	r2, #10
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 fa35 	bl	800da5c <__multadd>
 800d5f2:	9b02      	ldr	r3, [sp, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	4607      	mov	r7, r0
 800d5f8:	f300 808e 	bgt.w	800d718 <_dtoa_r+0x990>
 800d5fc:	9b06      	ldr	r3, [sp, #24]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	dc51      	bgt.n	800d6a6 <_dtoa_r+0x91e>
 800d602:	e089      	b.n	800d718 <_dtoa_r+0x990>
 800d604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d606:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d60a:	e74b      	b.n	800d4a4 <_dtoa_r+0x71c>
 800d60c:	9b03      	ldr	r3, [sp, #12]
 800d60e:	1e5e      	subs	r6, r3, #1
 800d610:	9b07      	ldr	r3, [sp, #28]
 800d612:	42b3      	cmp	r3, r6
 800d614:	bfbf      	itttt	lt
 800d616:	9b07      	ldrlt	r3, [sp, #28]
 800d618:	9607      	strlt	r6, [sp, #28]
 800d61a:	1af2      	sublt	r2, r6, r3
 800d61c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d61e:	bfb6      	itet	lt
 800d620:	189b      	addlt	r3, r3, r2
 800d622:	1b9e      	subge	r6, r3, r6
 800d624:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d626:	9b03      	ldr	r3, [sp, #12]
 800d628:	bfb8      	it	lt
 800d62a:	2600      	movlt	r6, #0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	bfb7      	itett	lt
 800d630:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d634:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d638:	1a9d      	sublt	r5, r3, r2
 800d63a:	2300      	movlt	r3, #0
 800d63c:	e734      	b.n	800d4a8 <_dtoa_r+0x720>
 800d63e:	9e07      	ldr	r6, [sp, #28]
 800d640:	9d04      	ldr	r5, [sp, #16]
 800d642:	9f08      	ldr	r7, [sp, #32]
 800d644:	e73b      	b.n	800d4be <_dtoa_r+0x736>
 800d646:	9a07      	ldr	r2, [sp, #28]
 800d648:	e767      	b.n	800d51a <_dtoa_r+0x792>
 800d64a:	9b06      	ldr	r3, [sp, #24]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	dc18      	bgt.n	800d682 <_dtoa_r+0x8fa>
 800d650:	f1ba 0f00 	cmp.w	sl, #0
 800d654:	d115      	bne.n	800d682 <_dtoa_r+0x8fa>
 800d656:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d65a:	b993      	cbnz	r3, 800d682 <_dtoa_r+0x8fa>
 800d65c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d660:	0d1b      	lsrs	r3, r3, #20
 800d662:	051b      	lsls	r3, r3, #20
 800d664:	b183      	cbz	r3, 800d688 <_dtoa_r+0x900>
 800d666:	9b04      	ldr	r3, [sp, #16]
 800d668:	3301      	adds	r3, #1
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	9b05      	ldr	r3, [sp, #20]
 800d66e:	3301      	adds	r3, #1
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	f04f 0801 	mov.w	r8, #1
 800d676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f47f af6a 	bne.w	800d552 <_dtoa_r+0x7ca>
 800d67e:	2001      	movs	r0, #1
 800d680:	e76f      	b.n	800d562 <_dtoa_r+0x7da>
 800d682:	f04f 0800 	mov.w	r8, #0
 800d686:	e7f6      	b.n	800d676 <_dtoa_r+0x8ee>
 800d688:	4698      	mov	r8, r3
 800d68a:	e7f4      	b.n	800d676 <_dtoa_r+0x8ee>
 800d68c:	f43f af7d 	beq.w	800d58a <_dtoa_r+0x802>
 800d690:	4618      	mov	r0, r3
 800d692:	301c      	adds	r0, #28
 800d694:	e772      	b.n	800d57c <_dtoa_r+0x7f4>
 800d696:	9b03      	ldr	r3, [sp, #12]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	dc37      	bgt.n	800d70c <_dtoa_r+0x984>
 800d69c:	9b06      	ldr	r3, [sp, #24]
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	dd34      	ble.n	800d70c <_dtoa_r+0x984>
 800d6a2:	9b03      	ldr	r3, [sp, #12]
 800d6a4:	9302      	str	r3, [sp, #8]
 800d6a6:	9b02      	ldr	r3, [sp, #8]
 800d6a8:	b96b      	cbnz	r3, 800d6c6 <_dtoa_r+0x93e>
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	2205      	movs	r2, #5
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f000 f9d4 	bl	800da5c <__multadd>
 800d6b4:	4601      	mov	r1, r0
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	ee18 0a10 	vmov	r0, s16
 800d6bc:	f000 fbee 	bl	800de9c <__mcmp>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	f73f adbb 	bgt.w	800d23c <_dtoa_r+0x4b4>
 800d6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c8:	9d01      	ldr	r5, [sp, #4]
 800d6ca:	43db      	mvns	r3, r3
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	f04f 0800 	mov.w	r8, #0
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f000 f99f 	bl	800da18 <_Bfree>
 800d6da:	2f00      	cmp	r7, #0
 800d6dc:	f43f aea4 	beq.w	800d428 <_dtoa_r+0x6a0>
 800d6e0:	f1b8 0f00 	cmp.w	r8, #0
 800d6e4:	d005      	beq.n	800d6f2 <_dtoa_r+0x96a>
 800d6e6:	45b8      	cmp	r8, r7
 800d6e8:	d003      	beq.n	800d6f2 <_dtoa_r+0x96a>
 800d6ea:	4641      	mov	r1, r8
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 f993 	bl	800da18 <_Bfree>
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f000 f98f 	bl	800da18 <_Bfree>
 800d6fa:	e695      	b.n	800d428 <_dtoa_r+0x6a0>
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	4637      	mov	r7, r6
 800d700:	e7e1      	b.n	800d6c6 <_dtoa_r+0x93e>
 800d702:	9700      	str	r7, [sp, #0]
 800d704:	4637      	mov	r7, r6
 800d706:	e599      	b.n	800d23c <_dtoa_r+0x4b4>
 800d708:	40240000 	.word	0x40240000
 800d70c:	9b08      	ldr	r3, [sp, #32]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f000 80ca 	beq.w	800d8a8 <_dtoa_r+0xb20>
 800d714:	9b03      	ldr	r3, [sp, #12]
 800d716:	9302      	str	r3, [sp, #8]
 800d718:	2d00      	cmp	r5, #0
 800d71a:	dd05      	ble.n	800d728 <_dtoa_r+0x9a0>
 800d71c:	4639      	mov	r1, r7
 800d71e:	462a      	mov	r2, r5
 800d720:	4620      	mov	r0, r4
 800d722:	f000 fb4b 	bl	800ddbc <__lshift>
 800d726:	4607      	mov	r7, r0
 800d728:	f1b8 0f00 	cmp.w	r8, #0
 800d72c:	d05b      	beq.n	800d7e6 <_dtoa_r+0xa5e>
 800d72e:	6879      	ldr	r1, [r7, #4]
 800d730:	4620      	mov	r0, r4
 800d732:	f000 f931 	bl	800d998 <_Balloc>
 800d736:	4605      	mov	r5, r0
 800d738:	b928      	cbnz	r0, 800d746 <_dtoa_r+0x9be>
 800d73a:	4b87      	ldr	r3, [pc, #540]	; (800d958 <_dtoa_r+0xbd0>)
 800d73c:	4602      	mov	r2, r0
 800d73e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d742:	f7ff bb3b 	b.w	800cdbc <_dtoa_r+0x34>
 800d746:	693a      	ldr	r2, [r7, #16]
 800d748:	3202      	adds	r2, #2
 800d74a:	0092      	lsls	r2, r2, #2
 800d74c:	f107 010c 	add.w	r1, r7, #12
 800d750:	300c      	adds	r0, #12
 800d752:	f000 f913 	bl	800d97c <memcpy>
 800d756:	2201      	movs	r2, #1
 800d758:	4629      	mov	r1, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 fb2e 	bl	800ddbc <__lshift>
 800d760:	9b01      	ldr	r3, [sp, #4]
 800d762:	f103 0901 	add.w	r9, r3, #1
 800d766:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d76a:	4413      	add	r3, r2
 800d76c:	9305      	str	r3, [sp, #20]
 800d76e:	f00a 0301 	and.w	r3, sl, #1
 800d772:	46b8      	mov	r8, r7
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	4607      	mov	r7, r0
 800d778:	4631      	mov	r1, r6
 800d77a:	ee18 0a10 	vmov	r0, s16
 800d77e:	f7ff fa75 	bl	800cc6c <quorem>
 800d782:	4641      	mov	r1, r8
 800d784:	9002      	str	r0, [sp, #8]
 800d786:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d78a:	ee18 0a10 	vmov	r0, s16
 800d78e:	f000 fb85 	bl	800de9c <__mcmp>
 800d792:	463a      	mov	r2, r7
 800d794:	9003      	str	r0, [sp, #12]
 800d796:	4631      	mov	r1, r6
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 fb9b 	bl	800ded4 <__mdiff>
 800d79e:	68c2      	ldr	r2, [r0, #12]
 800d7a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	bb02      	cbnz	r2, 800d7ea <_dtoa_r+0xa62>
 800d7a8:	4601      	mov	r1, r0
 800d7aa:	ee18 0a10 	vmov	r0, s16
 800d7ae:	f000 fb75 	bl	800de9c <__mcmp>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	9207      	str	r2, [sp, #28]
 800d7ba:	f000 f92d 	bl	800da18 <_Bfree>
 800d7be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d7c2:	ea43 0102 	orr.w	r1, r3, r2
 800d7c6:	9b04      	ldr	r3, [sp, #16]
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	464d      	mov	r5, r9
 800d7cc:	d10f      	bne.n	800d7ee <_dtoa_r+0xa66>
 800d7ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7d2:	d02a      	beq.n	800d82a <_dtoa_r+0xaa2>
 800d7d4:	9b03      	ldr	r3, [sp, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	dd02      	ble.n	800d7e0 <_dtoa_r+0xa58>
 800d7da:	9b02      	ldr	r3, [sp, #8]
 800d7dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d7e0:	f88b a000 	strb.w	sl, [fp]
 800d7e4:	e775      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	e7ba      	b.n	800d760 <_dtoa_r+0x9d8>
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	e7e2      	b.n	800d7b4 <_dtoa_r+0xa2c>
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	db04      	blt.n	800d7fe <_dtoa_r+0xa76>
 800d7f4:	9906      	ldr	r1, [sp, #24]
 800d7f6:	430b      	orrs	r3, r1
 800d7f8:	9904      	ldr	r1, [sp, #16]
 800d7fa:	430b      	orrs	r3, r1
 800d7fc:	d122      	bne.n	800d844 <_dtoa_r+0xabc>
 800d7fe:	2a00      	cmp	r2, #0
 800d800:	ddee      	ble.n	800d7e0 <_dtoa_r+0xa58>
 800d802:	ee18 1a10 	vmov	r1, s16
 800d806:	2201      	movs	r2, #1
 800d808:	4620      	mov	r0, r4
 800d80a:	f000 fad7 	bl	800ddbc <__lshift>
 800d80e:	4631      	mov	r1, r6
 800d810:	ee08 0a10 	vmov	s16, r0
 800d814:	f000 fb42 	bl	800de9c <__mcmp>
 800d818:	2800      	cmp	r0, #0
 800d81a:	dc03      	bgt.n	800d824 <_dtoa_r+0xa9c>
 800d81c:	d1e0      	bne.n	800d7e0 <_dtoa_r+0xa58>
 800d81e:	f01a 0f01 	tst.w	sl, #1
 800d822:	d0dd      	beq.n	800d7e0 <_dtoa_r+0xa58>
 800d824:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d828:	d1d7      	bne.n	800d7da <_dtoa_r+0xa52>
 800d82a:	2339      	movs	r3, #57	; 0x39
 800d82c:	f88b 3000 	strb.w	r3, [fp]
 800d830:	462b      	mov	r3, r5
 800d832:	461d      	mov	r5, r3
 800d834:	3b01      	subs	r3, #1
 800d836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d83a:	2a39      	cmp	r2, #57	; 0x39
 800d83c:	d071      	beq.n	800d922 <_dtoa_r+0xb9a>
 800d83e:	3201      	adds	r2, #1
 800d840:	701a      	strb	r2, [r3, #0]
 800d842:	e746      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d844:	2a00      	cmp	r2, #0
 800d846:	dd07      	ble.n	800d858 <_dtoa_r+0xad0>
 800d848:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d84c:	d0ed      	beq.n	800d82a <_dtoa_r+0xaa2>
 800d84e:	f10a 0301 	add.w	r3, sl, #1
 800d852:	f88b 3000 	strb.w	r3, [fp]
 800d856:	e73c      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d858:	9b05      	ldr	r3, [sp, #20]
 800d85a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d85e:	4599      	cmp	r9, r3
 800d860:	d047      	beq.n	800d8f2 <_dtoa_r+0xb6a>
 800d862:	ee18 1a10 	vmov	r1, s16
 800d866:	2300      	movs	r3, #0
 800d868:	220a      	movs	r2, #10
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 f8f6 	bl	800da5c <__multadd>
 800d870:	45b8      	cmp	r8, r7
 800d872:	ee08 0a10 	vmov	s16, r0
 800d876:	f04f 0300 	mov.w	r3, #0
 800d87a:	f04f 020a 	mov.w	r2, #10
 800d87e:	4641      	mov	r1, r8
 800d880:	4620      	mov	r0, r4
 800d882:	d106      	bne.n	800d892 <_dtoa_r+0xb0a>
 800d884:	f000 f8ea 	bl	800da5c <__multadd>
 800d888:	4680      	mov	r8, r0
 800d88a:	4607      	mov	r7, r0
 800d88c:	f109 0901 	add.w	r9, r9, #1
 800d890:	e772      	b.n	800d778 <_dtoa_r+0x9f0>
 800d892:	f000 f8e3 	bl	800da5c <__multadd>
 800d896:	4639      	mov	r1, r7
 800d898:	4680      	mov	r8, r0
 800d89a:	2300      	movs	r3, #0
 800d89c:	220a      	movs	r2, #10
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f000 f8dc 	bl	800da5c <__multadd>
 800d8a4:	4607      	mov	r7, r0
 800d8a6:	e7f1      	b.n	800d88c <_dtoa_r+0xb04>
 800d8a8:	9b03      	ldr	r3, [sp, #12]
 800d8aa:	9302      	str	r3, [sp, #8]
 800d8ac:	9d01      	ldr	r5, [sp, #4]
 800d8ae:	ee18 0a10 	vmov	r0, s16
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	f7ff f9da 	bl	800cc6c <quorem>
 800d8b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d8bc:	9b01      	ldr	r3, [sp, #4]
 800d8be:	f805 ab01 	strb.w	sl, [r5], #1
 800d8c2:	1aea      	subs	r2, r5, r3
 800d8c4:	9b02      	ldr	r3, [sp, #8]
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	dd09      	ble.n	800d8de <_dtoa_r+0xb56>
 800d8ca:	ee18 1a10 	vmov	r1, s16
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	220a      	movs	r2, #10
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 f8c2 	bl	800da5c <__multadd>
 800d8d8:	ee08 0a10 	vmov	s16, r0
 800d8dc:	e7e7      	b.n	800d8ae <_dtoa_r+0xb26>
 800d8de:	9b02      	ldr	r3, [sp, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	bfc8      	it	gt
 800d8e4:	461d      	movgt	r5, r3
 800d8e6:	9b01      	ldr	r3, [sp, #4]
 800d8e8:	bfd8      	it	le
 800d8ea:	2501      	movle	r5, #1
 800d8ec:	441d      	add	r5, r3
 800d8ee:	f04f 0800 	mov.w	r8, #0
 800d8f2:	ee18 1a10 	vmov	r1, s16
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f000 fa5f 	bl	800ddbc <__lshift>
 800d8fe:	4631      	mov	r1, r6
 800d900:	ee08 0a10 	vmov	s16, r0
 800d904:	f000 faca 	bl	800de9c <__mcmp>
 800d908:	2800      	cmp	r0, #0
 800d90a:	dc91      	bgt.n	800d830 <_dtoa_r+0xaa8>
 800d90c:	d102      	bne.n	800d914 <_dtoa_r+0xb8c>
 800d90e:	f01a 0f01 	tst.w	sl, #1
 800d912:	d18d      	bne.n	800d830 <_dtoa_r+0xaa8>
 800d914:	462b      	mov	r3, r5
 800d916:	461d      	mov	r5, r3
 800d918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d91c:	2a30      	cmp	r2, #48	; 0x30
 800d91e:	d0fa      	beq.n	800d916 <_dtoa_r+0xb8e>
 800d920:	e6d7      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d922:	9a01      	ldr	r2, [sp, #4]
 800d924:	429a      	cmp	r2, r3
 800d926:	d184      	bne.n	800d832 <_dtoa_r+0xaaa>
 800d928:	9b00      	ldr	r3, [sp, #0]
 800d92a:	3301      	adds	r3, #1
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	2331      	movs	r3, #49	; 0x31
 800d930:	7013      	strb	r3, [r2, #0]
 800d932:	e6ce      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d934:	4b09      	ldr	r3, [pc, #36]	; (800d95c <_dtoa_r+0xbd4>)
 800d936:	f7ff ba95 	b.w	800ce64 <_dtoa_r+0xdc>
 800d93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f47f aa6e 	bne.w	800ce1e <_dtoa_r+0x96>
 800d942:	4b07      	ldr	r3, [pc, #28]	; (800d960 <_dtoa_r+0xbd8>)
 800d944:	f7ff ba8e 	b.w	800ce64 <_dtoa_r+0xdc>
 800d948:	9b02      	ldr	r3, [sp, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	dcae      	bgt.n	800d8ac <_dtoa_r+0xb24>
 800d94e:	9b06      	ldr	r3, [sp, #24]
 800d950:	2b02      	cmp	r3, #2
 800d952:	f73f aea8 	bgt.w	800d6a6 <_dtoa_r+0x91e>
 800d956:	e7a9      	b.n	800d8ac <_dtoa_r+0xb24>
 800d958:	08011903 	.word	0x08011903
 800d95c:	08011860 	.word	0x08011860
 800d960:	08011884 	.word	0x08011884

0800d964 <_localeconv_r>:
 800d964:	4800      	ldr	r0, [pc, #0]	; (800d968 <_localeconv_r+0x4>)
 800d966:	4770      	bx	lr
 800d968:	20000308 	.word	0x20000308

0800d96c <malloc>:
 800d96c:	4b02      	ldr	r3, [pc, #8]	; (800d978 <malloc+0xc>)
 800d96e:	4601      	mov	r1, r0
 800d970:	6818      	ldr	r0, [r3, #0]
 800d972:	f000 bc17 	b.w	800e1a4 <_malloc_r>
 800d976:	bf00      	nop
 800d978:	200001b4 	.word	0x200001b4

0800d97c <memcpy>:
 800d97c:	440a      	add	r2, r1
 800d97e:	4291      	cmp	r1, r2
 800d980:	f100 33ff 	add.w	r3, r0, #4294967295
 800d984:	d100      	bne.n	800d988 <memcpy+0xc>
 800d986:	4770      	bx	lr
 800d988:	b510      	push	{r4, lr}
 800d98a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d98e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d992:	4291      	cmp	r1, r2
 800d994:	d1f9      	bne.n	800d98a <memcpy+0xe>
 800d996:	bd10      	pop	{r4, pc}

0800d998 <_Balloc>:
 800d998:	b570      	push	{r4, r5, r6, lr}
 800d99a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d99c:	4604      	mov	r4, r0
 800d99e:	460d      	mov	r5, r1
 800d9a0:	b976      	cbnz	r6, 800d9c0 <_Balloc+0x28>
 800d9a2:	2010      	movs	r0, #16
 800d9a4:	f7ff ffe2 	bl	800d96c <malloc>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	6260      	str	r0, [r4, #36]	; 0x24
 800d9ac:	b920      	cbnz	r0, 800d9b8 <_Balloc+0x20>
 800d9ae:	4b18      	ldr	r3, [pc, #96]	; (800da10 <_Balloc+0x78>)
 800d9b0:	4818      	ldr	r0, [pc, #96]	; (800da14 <_Balloc+0x7c>)
 800d9b2:	2166      	movs	r1, #102	; 0x66
 800d9b4:	f000 fdd6 	bl	800e564 <__assert_func>
 800d9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9bc:	6006      	str	r6, [r0, #0]
 800d9be:	60c6      	str	r6, [r0, #12]
 800d9c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9c2:	68f3      	ldr	r3, [r6, #12]
 800d9c4:	b183      	cbz	r3, 800d9e8 <_Balloc+0x50>
 800d9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9ce:	b9b8      	cbnz	r0, 800da00 <_Balloc+0x68>
 800d9d0:	2101      	movs	r1, #1
 800d9d2:	fa01 f605 	lsl.w	r6, r1, r5
 800d9d6:	1d72      	adds	r2, r6, #5
 800d9d8:	0092      	lsls	r2, r2, #2
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 fb60 	bl	800e0a0 <_calloc_r>
 800d9e0:	b160      	cbz	r0, 800d9fc <_Balloc+0x64>
 800d9e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9e6:	e00e      	b.n	800da06 <_Balloc+0x6e>
 800d9e8:	2221      	movs	r2, #33	; 0x21
 800d9ea:	2104      	movs	r1, #4
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f000 fb57 	bl	800e0a0 <_calloc_r>
 800d9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9f4:	60f0      	str	r0, [r6, #12]
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1e4      	bne.n	800d9c6 <_Balloc+0x2e>
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	6802      	ldr	r2, [r0, #0]
 800da02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da06:	2300      	movs	r3, #0
 800da08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da0c:	e7f7      	b.n	800d9fe <_Balloc+0x66>
 800da0e:	bf00      	nop
 800da10:	08011891 	.word	0x08011891
 800da14:	08011914 	.word	0x08011914

0800da18 <_Bfree>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da1c:	4605      	mov	r5, r0
 800da1e:	460c      	mov	r4, r1
 800da20:	b976      	cbnz	r6, 800da40 <_Bfree+0x28>
 800da22:	2010      	movs	r0, #16
 800da24:	f7ff ffa2 	bl	800d96c <malloc>
 800da28:	4602      	mov	r2, r0
 800da2a:	6268      	str	r0, [r5, #36]	; 0x24
 800da2c:	b920      	cbnz	r0, 800da38 <_Bfree+0x20>
 800da2e:	4b09      	ldr	r3, [pc, #36]	; (800da54 <_Bfree+0x3c>)
 800da30:	4809      	ldr	r0, [pc, #36]	; (800da58 <_Bfree+0x40>)
 800da32:	218a      	movs	r1, #138	; 0x8a
 800da34:	f000 fd96 	bl	800e564 <__assert_func>
 800da38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da3c:	6006      	str	r6, [r0, #0]
 800da3e:	60c6      	str	r6, [r0, #12]
 800da40:	b13c      	cbz	r4, 800da52 <_Bfree+0x3a>
 800da42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da44:	6862      	ldr	r2, [r4, #4]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da4c:	6021      	str	r1, [r4, #0]
 800da4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da52:	bd70      	pop	{r4, r5, r6, pc}
 800da54:	08011891 	.word	0x08011891
 800da58:	08011914 	.word	0x08011914

0800da5c <__multadd>:
 800da5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da60:	690d      	ldr	r5, [r1, #16]
 800da62:	4607      	mov	r7, r0
 800da64:	460c      	mov	r4, r1
 800da66:	461e      	mov	r6, r3
 800da68:	f101 0c14 	add.w	ip, r1, #20
 800da6c:	2000      	movs	r0, #0
 800da6e:	f8dc 3000 	ldr.w	r3, [ip]
 800da72:	b299      	uxth	r1, r3
 800da74:	fb02 6101 	mla	r1, r2, r1, r6
 800da78:	0c1e      	lsrs	r6, r3, #16
 800da7a:	0c0b      	lsrs	r3, r1, #16
 800da7c:	fb02 3306 	mla	r3, r2, r6, r3
 800da80:	b289      	uxth	r1, r1
 800da82:	3001      	adds	r0, #1
 800da84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da88:	4285      	cmp	r5, r0
 800da8a:	f84c 1b04 	str.w	r1, [ip], #4
 800da8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da92:	dcec      	bgt.n	800da6e <__multadd+0x12>
 800da94:	b30e      	cbz	r6, 800dada <__multadd+0x7e>
 800da96:	68a3      	ldr	r3, [r4, #8]
 800da98:	42ab      	cmp	r3, r5
 800da9a:	dc19      	bgt.n	800dad0 <__multadd+0x74>
 800da9c:	6861      	ldr	r1, [r4, #4]
 800da9e:	4638      	mov	r0, r7
 800daa0:	3101      	adds	r1, #1
 800daa2:	f7ff ff79 	bl	800d998 <_Balloc>
 800daa6:	4680      	mov	r8, r0
 800daa8:	b928      	cbnz	r0, 800dab6 <__multadd+0x5a>
 800daaa:	4602      	mov	r2, r0
 800daac:	4b0c      	ldr	r3, [pc, #48]	; (800dae0 <__multadd+0x84>)
 800daae:	480d      	ldr	r0, [pc, #52]	; (800dae4 <__multadd+0x88>)
 800dab0:	21b5      	movs	r1, #181	; 0xb5
 800dab2:	f000 fd57 	bl	800e564 <__assert_func>
 800dab6:	6922      	ldr	r2, [r4, #16]
 800dab8:	3202      	adds	r2, #2
 800daba:	f104 010c 	add.w	r1, r4, #12
 800dabe:	0092      	lsls	r2, r2, #2
 800dac0:	300c      	adds	r0, #12
 800dac2:	f7ff ff5b 	bl	800d97c <memcpy>
 800dac6:	4621      	mov	r1, r4
 800dac8:	4638      	mov	r0, r7
 800daca:	f7ff ffa5 	bl	800da18 <_Bfree>
 800dace:	4644      	mov	r4, r8
 800dad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dad4:	3501      	adds	r5, #1
 800dad6:	615e      	str	r6, [r3, #20]
 800dad8:	6125      	str	r5, [r4, #16]
 800dada:	4620      	mov	r0, r4
 800dadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae0:	08011903 	.word	0x08011903
 800dae4:	08011914 	.word	0x08011914

0800dae8 <__hi0bits>:
 800dae8:	0c03      	lsrs	r3, r0, #16
 800daea:	041b      	lsls	r3, r3, #16
 800daec:	b9d3      	cbnz	r3, 800db24 <__hi0bits+0x3c>
 800daee:	0400      	lsls	r0, r0, #16
 800daf0:	2310      	movs	r3, #16
 800daf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800daf6:	bf04      	itt	eq
 800daf8:	0200      	lsleq	r0, r0, #8
 800dafa:	3308      	addeq	r3, #8
 800dafc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db00:	bf04      	itt	eq
 800db02:	0100      	lsleq	r0, r0, #4
 800db04:	3304      	addeq	r3, #4
 800db06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db0a:	bf04      	itt	eq
 800db0c:	0080      	lsleq	r0, r0, #2
 800db0e:	3302      	addeq	r3, #2
 800db10:	2800      	cmp	r0, #0
 800db12:	db05      	blt.n	800db20 <__hi0bits+0x38>
 800db14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db18:	f103 0301 	add.w	r3, r3, #1
 800db1c:	bf08      	it	eq
 800db1e:	2320      	moveq	r3, #32
 800db20:	4618      	mov	r0, r3
 800db22:	4770      	bx	lr
 800db24:	2300      	movs	r3, #0
 800db26:	e7e4      	b.n	800daf2 <__hi0bits+0xa>

0800db28 <__lo0bits>:
 800db28:	6803      	ldr	r3, [r0, #0]
 800db2a:	f013 0207 	ands.w	r2, r3, #7
 800db2e:	4601      	mov	r1, r0
 800db30:	d00b      	beq.n	800db4a <__lo0bits+0x22>
 800db32:	07da      	lsls	r2, r3, #31
 800db34:	d423      	bmi.n	800db7e <__lo0bits+0x56>
 800db36:	0798      	lsls	r0, r3, #30
 800db38:	bf49      	itett	mi
 800db3a:	085b      	lsrmi	r3, r3, #1
 800db3c:	089b      	lsrpl	r3, r3, #2
 800db3e:	2001      	movmi	r0, #1
 800db40:	600b      	strmi	r3, [r1, #0]
 800db42:	bf5c      	itt	pl
 800db44:	600b      	strpl	r3, [r1, #0]
 800db46:	2002      	movpl	r0, #2
 800db48:	4770      	bx	lr
 800db4a:	b298      	uxth	r0, r3
 800db4c:	b9a8      	cbnz	r0, 800db7a <__lo0bits+0x52>
 800db4e:	0c1b      	lsrs	r3, r3, #16
 800db50:	2010      	movs	r0, #16
 800db52:	b2da      	uxtb	r2, r3
 800db54:	b90a      	cbnz	r2, 800db5a <__lo0bits+0x32>
 800db56:	3008      	adds	r0, #8
 800db58:	0a1b      	lsrs	r3, r3, #8
 800db5a:	071a      	lsls	r2, r3, #28
 800db5c:	bf04      	itt	eq
 800db5e:	091b      	lsreq	r3, r3, #4
 800db60:	3004      	addeq	r0, #4
 800db62:	079a      	lsls	r2, r3, #30
 800db64:	bf04      	itt	eq
 800db66:	089b      	lsreq	r3, r3, #2
 800db68:	3002      	addeq	r0, #2
 800db6a:	07da      	lsls	r2, r3, #31
 800db6c:	d403      	bmi.n	800db76 <__lo0bits+0x4e>
 800db6e:	085b      	lsrs	r3, r3, #1
 800db70:	f100 0001 	add.w	r0, r0, #1
 800db74:	d005      	beq.n	800db82 <__lo0bits+0x5a>
 800db76:	600b      	str	r3, [r1, #0]
 800db78:	4770      	bx	lr
 800db7a:	4610      	mov	r0, r2
 800db7c:	e7e9      	b.n	800db52 <__lo0bits+0x2a>
 800db7e:	2000      	movs	r0, #0
 800db80:	4770      	bx	lr
 800db82:	2020      	movs	r0, #32
 800db84:	4770      	bx	lr
	...

0800db88 <__i2b>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	460c      	mov	r4, r1
 800db8c:	2101      	movs	r1, #1
 800db8e:	f7ff ff03 	bl	800d998 <_Balloc>
 800db92:	4602      	mov	r2, r0
 800db94:	b928      	cbnz	r0, 800dba2 <__i2b+0x1a>
 800db96:	4b05      	ldr	r3, [pc, #20]	; (800dbac <__i2b+0x24>)
 800db98:	4805      	ldr	r0, [pc, #20]	; (800dbb0 <__i2b+0x28>)
 800db9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800db9e:	f000 fce1 	bl	800e564 <__assert_func>
 800dba2:	2301      	movs	r3, #1
 800dba4:	6144      	str	r4, [r0, #20]
 800dba6:	6103      	str	r3, [r0, #16]
 800dba8:	bd10      	pop	{r4, pc}
 800dbaa:	bf00      	nop
 800dbac:	08011903 	.word	0x08011903
 800dbb0:	08011914 	.word	0x08011914

0800dbb4 <__multiply>:
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	4691      	mov	r9, r2
 800dbba:	690a      	ldr	r2, [r1, #16]
 800dbbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	bfb8      	it	lt
 800dbc4:	460b      	movlt	r3, r1
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	bfbc      	itt	lt
 800dbca:	464c      	movlt	r4, r9
 800dbcc:	4699      	movlt	r9, r3
 800dbce:	6927      	ldr	r7, [r4, #16]
 800dbd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dbd4:	68a3      	ldr	r3, [r4, #8]
 800dbd6:	6861      	ldr	r1, [r4, #4]
 800dbd8:	eb07 060a 	add.w	r6, r7, sl
 800dbdc:	42b3      	cmp	r3, r6
 800dbde:	b085      	sub	sp, #20
 800dbe0:	bfb8      	it	lt
 800dbe2:	3101      	addlt	r1, #1
 800dbe4:	f7ff fed8 	bl	800d998 <_Balloc>
 800dbe8:	b930      	cbnz	r0, 800dbf8 <__multiply+0x44>
 800dbea:	4602      	mov	r2, r0
 800dbec:	4b44      	ldr	r3, [pc, #272]	; (800dd00 <__multiply+0x14c>)
 800dbee:	4845      	ldr	r0, [pc, #276]	; (800dd04 <__multiply+0x150>)
 800dbf0:	f240 115d 	movw	r1, #349	; 0x15d
 800dbf4:	f000 fcb6 	bl	800e564 <__assert_func>
 800dbf8:	f100 0514 	add.w	r5, r0, #20
 800dbfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc00:	462b      	mov	r3, r5
 800dc02:	2200      	movs	r2, #0
 800dc04:	4543      	cmp	r3, r8
 800dc06:	d321      	bcc.n	800dc4c <__multiply+0x98>
 800dc08:	f104 0314 	add.w	r3, r4, #20
 800dc0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc10:	f109 0314 	add.w	r3, r9, #20
 800dc14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc18:	9202      	str	r2, [sp, #8]
 800dc1a:	1b3a      	subs	r2, r7, r4
 800dc1c:	3a15      	subs	r2, #21
 800dc1e:	f022 0203 	bic.w	r2, r2, #3
 800dc22:	3204      	adds	r2, #4
 800dc24:	f104 0115 	add.w	r1, r4, #21
 800dc28:	428f      	cmp	r7, r1
 800dc2a:	bf38      	it	cc
 800dc2c:	2204      	movcc	r2, #4
 800dc2e:	9201      	str	r2, [sp, #4]
 800dc30:	9a02      	ldr	r2, [sp, #8]
 800dc32:	9303      	str	r3, [sp, #12]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d80c      	bhi.n	800dc52 <__multiply+0x9e>
 800dc38:	2e00      	cmp	r6, #0
 800dc3a:	dd03      	ble.n	800dc44 <__multiply+0x90>
 800dc3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d05a      	beq.n	800dcfa <__multiply+0x146>
 800dc44:	6106      	str	r6, [r0, #16]
 800dc46:	b005      	add	sp, #20
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	f843 2b04 	str.w	r2, [r3], #4
 800dc50:	e7d8      	b.n	800dc04 <__multiply+0x50>
 800dc52:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc56:	f1ba 0f00 	cmp.w	sl, #0
 800dc5a:	d024      	beq.n	800dca6 <__multiply+0xf2>
 800dc5c:	f104 0e14 	add.w	lr, r4, #20
 800dc60:	46a9      	mov	r9, r5
 800dc62:	f04f 0c00 	mov.w	ip, #0
 800dc66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc6a:	f8d9 1000 	ldr.w	r1, [r9]
 800dc6e:	fa1f fb82 	uxth.w	fp, r2
 800dc72:	b289      	uxth	r1, r1
 800dc74:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc7c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc80:	4461      	add	r1, ip
 800dc82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc86:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc8e:	b289      	uxth	r1, r1
 800dc90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc94:	4577      	cmp	r7, lr
 800dc96:	f849 1b04 	str.w	r1, [r9], #4
 800dc9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc9e:	d8e2      	bhi.n	800dc66 <__multiply+0xb2>
 800dca0:	9a01      	ldr	r2, [sp, #4]
 800dca2:	f845 c002 	str.w	ip, [r5, r2]
 800dca6:	9a03      	ldr	r2, [sp, #12]
 800dca8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dcac:	3304      	adds	r3, #4
 800dcae:	f1b9 0f00 	cmp.w	r9, #0
 800dcb2:	d020      	beq.n	800dcf6 <__multiply+0x142>
 800dcb4:	6829      	ldr	r1, [r5, #0]
 800dcb6:	f104 0c14 	add.w	ip, r4, #20
 800dcba:	46ae      	mov	lr, r5
 800dcbc:	f04f 0a00 	mov.w	sl, #0
 800dcc0:	f8bc b000 	ldrh.w	fp, [ip]
 800dcc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dcc8:	fb09 220b 	mla	r2, r9, fp, r2
 800dccc:	4492      	add	sl, r2
 800dcce:	b289      	uxth	r1, r1
 800dcd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dcd4:	f84e 1b04 	str.w	r1, [lr], #4
 800dcd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dcdc:	f8be 1000 	ldrh.w	r1, [lr]
 800dce0:	0c12      	lsrs	r2, r2, #16
 800dce2:	fb09 1102 	mla	r1, r9, r2, r1
 800dce6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dcea:	4567      	cmp	r7, ip
 800dcec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dcf0:	d8e6      	bhi.n	800dcc0 <__multiply+0x10c>
 800dcf2:	9a01      	ldr	r2, [sp, #4]
 800dcf4:	50a9      	str	r1, [r5, r2]
 800dcf6:	3504      	adds	r5, #4
 800dcf8:	e79a      	b.n	800dc30 <__multiply+0x7c>
 800dcfa:	3e01      	subs	r6, #1
 800dcfc:	e79c      	b.n	800dc38 <__multiply+0x84>
 800dcfe:	bf00      	nop
 800dd00:	08011903 	.word	0x08011903
 800dd04:	08011914 	.word	0x08011914

0800dd08 <__pow5mult>:
 800dd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd0c:	4615      	mov	r5, r2
 800dd0e:	f012 0203 	ands.w	r2, r2, #3
 800dd12:	4606      	mov	r6, r0
 800dd14:	460f      	mov	r7, r1
 800dd16:	d007      	beq.n	800dd28 <__pow5mult+0x20>
 800dd18:	4c25      	ldr	r4, [pc, #148]	; (800ddb0 <__pow5mult+0xa8>)
 800dd1a:	3a01      	subs	r2, #1
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd22:	f7ff fe9b 	bl	800da5c <__multadd>
 800dd26:	4607      	mov	r7, r0
 800dd28:	10ad      	asrs	r5, r5, #2
 800dd2a:	d03d      	beq.n	800dda8 <__pow5mult+0xa0>
 800dd2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd2e:	b97c      	cbnz	r4, 800dd50 <__pow5mult+0x48>
 800dd30:	2010      	movs	r0, #16
 800dd32:	f7ff fe1b 	bl	800d96c <malloc>
 800dd36:	4602      	mov	r2, r0
 800dd38:	6270      	str	r0, [r6, #36]	; 0x24
 800dd3a:	b928      	cbnz	r0, 800dd48 <__pow5mult+0x40>
 800dd3c:	4b1d      	ldr	r3, [pc, #116]	; (800ddb4 <__pow5mult+0xac>)
 800dd3e:	481e      	ldr	r0, [pc, #120]	; (800ddb8 <__pow5mult+0xb0>)
 800dd40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dd44:	f000 fc0e 	bl	800e564 <__assert_func>
 800dd48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd4c:	6004      	str	r4, [r0, #0]
 800dd4e:	60c4      	str	r4, [r0, #12]
 800dd50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd58:	b94c      	cbnz	r4, 800dd6e <__pow5mult+0x66>
 800dd5a:	f240 2171 	movw	r1, #625	; 0x271
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f7ff ff12 	bl	800db88 <__i2b>
 800dd64:	2300      	movs	r3, #0
 800dd66:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	6003      	str	r3, [r0, #0]
 800dd6e:	f04f 0900 	mov.w	r9, #0
 800dd72:	07eb      	lsls	r3, r5, #31
 800dd74:	d50a      	bpl.n	800dd8c <__pow5mult+0x84>
 800dd76:	4639      	mov	r1, r7
 800dd78:	4622      	mov	r2, r4
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f7ff ff1a 	bl	800dbb4 <__multiply>
 800dd80:	4639      	mov	r1, r7
 800dd82:	4680      	mov	r8, r0
 800dd84:	4630      	mov	r0, r6
 800dd86:	f7ff fe47 	bl	800da18 <_Bfree>
 800dd8a:	4647      	mov	r7, r8
 800dd8c:	106d      	asrs	r5, r5, #1
 800dd8e:	d00b      	beq.n	800dda8 <__pow5mult+0xa0>
 800dd90:	6820      	ldr	r0, [r4, #0]
 800dd92:	b938      	cbnz	r0, 800dda4 <__pow5mult+0x9c>
 800dd94:	4622      	mov	r2, r4
 800dd96:	4621      	mov	r1, r4
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f7ff ff0b 	bl	800dbb4 <__multiply>
 800dd9e:	6020      	str	r0, [r4, #0]
 800dda0:	f8c0 9000 	str.w	r9, [r0]
 800dda4:	4604      	mov	r4, r0
 800dda6:	e7e4      	b.n	800dd72 <__pow5mult+0x6a>
 800dda8:	4638      	mov	r0, r7
 800ddaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddae:	bf00      	nop
 800ddb0:	08011a60 	.word	0x08011a60
 800ddb4:	08011891 	.word	0x08011891
 800ddb8:	08011914 	.word	0x08011914

0800ddbc <__lshift>:
 800ddbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	6849      	ldr	r1, [r1, #4]
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddca:	68a3      	ldr	r3, [r4, #8]
 800ddcc:	4607      	mov	r7, r0
 800ddce:	4691      	mov	r9, r2
 800ddd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ddd4:	f108 0601 	add.w	r6, r8, #1
 800ddd8:	42b3      	cmp	r3, r6
 800ddda:	db0b      	blt.n	800ddf4 <__lshift+0x38>
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7ff fddb 	bl	800d998 <_Balloc>
 800dde2:	4605      	mov	r5, r0
 800dde4:	b948      	cbnz	r0, 800ddfa <__lshift+0x3e>
 800dde6:	4602      	mov	r2, r0
 800dde8:	4b2a      	ldr	r3, [pc, #168]	; (800de94 <__lshift+0xd8>)
 800ddea:	482b      	ldr	r0, [pc, #172]	; (800de98 <__lshift+0xdc>)
 800ddec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ddf0:	f000 fbb8 	bl	800e564 <__assert_func>
 800ddf4:	3101      	adds	r1, #1
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	e7ee      	b.n	800ddd8 <__lshift+0x1c>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f100 0114 	add.w	r1, r0, #20
 800de00:	f100 0210 	add.w	r2, r0, #16
 800de04:	4618      	mov	r0, r3
 800de06:	4553      	cmp	r3, sl
 800de08:	db37      	blt.n	800de7a <__lshift+0xbe>
 800de0a:	6920      	ldr	r0, [r4, #16]
 800de0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de10:	f104 0314 	add.w	r3, r4, #20
 800de14:	f019 091f 	ands.w	r9, r9, #31
 800de18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800de20:	d02f      	beq.n	800de82 <__lshift+0xc6>
 800de22:	f1c9 0e20 	rsb	lr, r9, #32
 800de26:	468a      	mov	sl, r1
 800de28:	f04f 0c00 	mov.w	ip, #0
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	fa02 f209 	lsl.w	r2, r2, r9
 800de32:	ea42 020c 	orr.w	r2, r2, ip
 800de36:	f84a 2b04 	str.w	r2, [sl], #4
 800de3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de3e:	4298      	cmp	r0, r3
 800de40:	fa22 fc0e 	lsr.w	ip, r2, lr
 800de44:	d8f2      	bhi.n	800de2c <__lshift+0x70>
 800de46:	1b03      	subs	r3, r0, r4
 800de48:	3b15      	subs	r3, #21
 800de4a:	f023 0303 	bic.w	r3, r3, #3
 800de4e:	3304      	adds	r3, #4
 800de50:	f104 0215 	add.w	r2, r4, #21
 800de54:	4290      	cmp	r0, r2
 800de56:	bf38      	it	cc
 800de58:	2304      	movcc	r3, #4
 800de5a:	f841 c003 	str.w	ip, [r1, r3]
 800de5e:	f1bc 0f00 	cmp.w	ip, #0
 800de62:	d001      	beq.n	800de68 <__lshift+0xac>
 800de64:	f108 0602 	add.w	r6, r8, #2
 800de68:	3e01      	subs	r6, #1
 800de6a:	4638      	mov	r0, r7
 800de6c:	612e      	str	r6, [r5, #16]
 800de6e:	4621      	mov	r1, r4
 800de70:	f7ff fdd2 	bl	800da18 <_Bfree>
 800de74:	4628      	mov	r0, r5
 800de76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800de7e:	3301      	adds	r3, #1
 800de80:	e7c1      	b.n	800de06 <__lshift+0x4a>
 800de82:	3904      	subs	r1, #4
 800de84:	f853 2b04 	ldr.w	r2, [r3], #4
 800de88:	f841 2f04 	str.w	r2, [r1, #4]!
 800de8c:	4298      	cmp	r0, r3
 800de8e:	d8f9      	bhi.n	800de84 <__lshift+0xc8>
 800de90:	e7ea      	b.n	800de68 <__lshift+0xac>
 800de92:	bf00      	nop
 800de94:	08011903 	.word	0x08011903
 800de98:	08011914 	.word	0x08011914

0800de9c <__mcmp>:
 800de9c:	b530      	push	{r4, r5, lr}
 800de9e:	6902      	ldr	r2, [r0, #16]
 800dea0:	690c      	ldr	r4, [r1, #16]
 800dea2:	1b12      	subs	r2, r2, r4
 800dea4:	d10e      	bne.n	800dec4 <__mcmp+0x28>
 800dea6:	f100 0314 	add.w	r3, r0, #20
 800deaa:	3114      	adds	r1, #20
 800deac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800deb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800deb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800deb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800debc:	42a5      	cmp	r5, r4
 800debe:	d003      	beq.n	800dec8 <__mcmp+0x2c>
 800dec0:	d305      	bcc.n	800dece <__mcmp+0x32>
 800dec2:	2201      	movs	r2, #1
 800dec4:	4610      	mov	r0, r2
 800dec6:	bd30      	pop	{r4, r5, pc}
 800dec8:	4283      	cmp	r3, r0
 800deca:	d3f3      	bcc.n	800deb4 <__mcmp+0x18>
 800decc:	e7fa      	b.n	800dec4 <__mcmp+0x28>
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	e7f7      	b.n	800dec4 <__mcmp+0x28>

0800ded4 <__mdiff>:
 800ded4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	460c      	mov	r4, r1
 800deda:	4606      	mov	r6, r0
 800dedc:	4611      	mov	r1, r2
 800dede:	4620      	mov	r0, r4
 800dee0:	4690      	mov	r8, r2
 800dee2:	f7ff ffdb 	bl	800de9c <__mcmp>
 800dee6:	1e05      	subs	r5, r0, #0
 800dee8:	d110      	bne.n	800df0c <__mdiff+0x38>
 800deea:	4629      	mov	r1, r5
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff fd53 	bl	800d998 <_Balloc>
 800def2:	b930      	cbnz	r0, 800df02 <__mdiff+0x2e>
 800def4:	4b3a      	ldr	r3, [pc, #232]	; (800dfe0 <__mdiff+0x10c>)
 800def6:	4602      	mov	r2, r0
 800def8:	f240 2132 	movw	r1, #562	; 0x232
 800defc:	4839      	ldr	r0, [pc, #228]	; (800dfe4 <__mdiff+0x110>)
 800defe:	f000 fb31 	bl	800e564 <__assert_func>
 800df02:	2301      	movs	r3, #1
 800df04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	bfa4      	itt	ge
 800df0e:	4643      	movge	r3, r8
 800df10:	46a0      	movge	r8, r4
 800df12:	4630      	mov	r0, r6
 800df14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df18:	bfa6      	itte	ge
 800df1a:	461c      	movge	r4, r3
 800df1c:	2500      	movge	r5, #0
 800df1e:	2501      	movlt	r5, #1
 800df20:	f7ff fd3a 	bl	800d998 <_Balloc>
 800df24:	b920      	cbnz	r0, 800df30 <__mdiff+0x5c>
 800df26:	4b2e      	ldr	r3, [pc, #184]	; (800dfe0 <__mdiff+0x10c>)
 800df28:	4602      	mov	r2, r0
 800df2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df2e:	e7e5      	b.n	800defc <__mdiff+0x28>
 800df30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df34:	6926      	ldr	r6, [r4, #16]
 800df36:	60c5      	str	r5, [r0, #12]
 800df38:	f104 0914 	add.w	r9, r4, #20
 800df3c:	f108 0514 	add.w	r5, r8, #20
 800df40:	f100 0e14 	add.w	lr, r0, #20
 800df44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df4c:	f108 0210 	add.w	r2, r8, #16
 800df50:	46f2      	mov	sl, lr
 800df52:	2100      	movs	r1, #0
 800df54:	f859 3b04 	ldr.w	r3, [r9], #4
 800df58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df5c:	fa1f f883 	uxth.w	r8, r3
 800df60:	fa11 f18b 	uxtah	r1, r1, fp
 800df64:	0c1b      	lsrs	r3, r3, #16
 800df66:	eba1 0808 	sub.w	r8, r1, r8
 800df6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df72:	fa1f f888 	uxth.w	r8, r8
 800df76:	1419      	asrs	r1, r3, #16
 800df78:	454e      	cmp	r6, r9
 800df7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df7e:	f84a 3b04 	str.w	r3, [sl], #4
 800df82:	d8e7      	bhi.n	800df54 <__mdiff+0x80>
 800df84:	1b33      	subs	r3, r6, r4
 800df86:	3b15      	subs	r3, #21
 800df88:	f023 0303 	bic.w	r3, r3, #3
 800df8c:	3304      	adds	r3, #4
 800df8e:	3415      	adds	r4, #21
 800df90:	42a6      	cmp	r6, r4
 800df92:	bf38      	it	cc
 800df94:	2304      	movcc	r3, #4
 800df96:	441d      	add	r5, r3
 800df98:	4473      	add	r3, lr
 800df9a:	469e      	mov	lr, r3
 800df9c:	462e      	mov	r6, r5
 800df9e:	4566      	cmp	r6, ip
 800dfa0:	d30e      	bcc.n	800dfc0 <__mdiff+0xec>
 800dfa2:	f10c 0203 	add.w	r2, ip, #3
 800dfa6:	1b52      	subs	r2, r2, r5
 800dfa8:	f022 0203 	bic.w	r2, r2, #3
 800dfac:	3d03      	subs	r5, #3
 800dfae:	45ac      	cmp	ip, r5
 800dfb0:	bf38      	it	cc
 800dfb2:	2200      	movcc	r2, #0
 800dfb4:	441a      	add	r2, r3
 800dfb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dfba:	b17b      	cbz	r3, 800dfdc <__mdiff+0x108>
 800dfbc:	6107      	str	r7, [r0, #16]
 800dfbe:	e7a3      	b.n	800df08 <__mdiff+0x34>
 800dfc0:	f856 8b04 	ldr.w	r8, [r6], #4
 800dfc4:	fa11 f288 	uxtah	r2, r1, r8
 800dfc8:	1414      	asrs	r4, r2, #16
 800dfca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dfce:	b292      	uxth	r2, r2
 800dfd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dfd4:	f84e 2b04 	str.w	r2, [lr], #4
 800dfd8:	1421      	asrs	r1, r4, #16
 800dfda:	e7e0      	b.n	800df9e <__mdiff+0xca>
 800dfdc:	3f01      	subs	r7, #1
 800dfde:	e7ea      	b.n	800dfb6 <__mdiff+0xe2>
 800dfe0:	08011903 	.word	0x08011903
 800dfe4:	08011914 	.word	0x08011914

0800dfe8 <__d2b>:
 800dfe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfec:	4689      	mov	r9, r1
 800dfee:	2101      	movs	r1, #1
 800dff0:	ec57 6b10 	vmov	r6, r7, d0
 800dff4:	4690      	mov	r8, r2
 800dff6:	f7ff fccf 	bl	800d998 <_Balloc>
 800dffa:	4604      	mov	r4, r0
 800dffc:	b930      	cbnz	r0, 800e00c <__d2b+0x24>
 800dffe:	4602      	mov	r2, r0
 800e000:	4b25      	ldr	r3, [pc, #148]	; (800e098 <__d2b+0xb0>)
 800e002:	4826      	ldr	r0, [pc, #152]	; (800e09c <__d2b+0xb4>)
 800e004:	f240 310a 	movw	r1, #778	; 0x30a
 800e008:	f000 faac 	bl	800e564 <__assert_func>
 800e00c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e014:	bb35      	cbnz	r5, 800e064 <__d2b+0x7c>
 800e016:	2e00      	cmp	r6, #0
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	d028      	beq.n	800e06e <__d2b+0x86>
 800e01c:	4668      	mov	r0, sp
 800e01e:	9600      	str	r6, [sp, #0]
 800e020:	f7ff fd82 	bl	800db28 <__lo0bits>
 800e024:	9900      	ldr	r1, [sp, #0]
 800e026:	b300      	cbz	r0, 800e06a <__d2b+0x82>
 800e028:	9a01      	ldr	r2, [sp, #4]
 800e02a:	f1c0 0320 	rsb	r3, r0, #32
 800e02e:	fa02 f303 	lsl.w	r3, r2, r3
 800e032:	430b      	orrs	r3, r1
 800e034:	40c2      	lsrs	r2, r0
 800e036:	6163      	str	r3, [r4, #20]
 800e038:	9201      	str	r2, [sp, #4]
 800e03a:	9b01      	ldr	r3, [sp, #4]
 800e03c:	61a3      	str	r3, [r4, #24]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	bf14      	ite	ne
 800e042:	2202      	movne	r2, #2
 800e044:	2201      	moveq	r2, #1
 800e046:	6122      	str	r2, [r4, #16]
 800e048:	b1d5      	cbz	r5, 800e080 <__d2b+0x98>
 800e04a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e04e:	4405      	add	r5, r0
 800e050:	f8c9 5000 	str.w	r5, [r9]
 800e054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e058:	f8c8 0000 	str.w	r0, [r8]
 800e05c:	4620      	mov	r0, r4
 800e05e:	b003      	add	sp, #12
 800e060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e068:	e7d5      	b.n	800e016 <__d2b+0x2e>
 800e06a:	6161      	str	r1, [r4, #20]
 800e06c:	e7e5      	b.n	800e03a <__d2b+0x52>
 800e06e:	a801      	add	r0, sp, #4
 800e070:	f7ff fd5a 	bl	800db28 <__lo0bits>
 800e074:	9b01      	ldr	r3, [sp, #4]
 800e076:	6163      	str	r3, [r4, #20]
 800e078:	2201      	movs	r2, #1
 800e07a:	6122      	str	r2, [r4, #16]
 800e07c:	3020      	adds	r0, #32
 800e07e:	e7e3      	b.n	800e048 <__d2b+0x60>
 800e080:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e088:	f8c9 0000 	str.w	r0, [r9]
 800e08c:	6918      	ldr	r0, [r3, #16]
 800e08e:	f7ff fd2b 	bl	800dae8 <__hi0bits>
 800e092:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e096:	e7df      	b.n	800e058 <__d2b+0x70>
 800e098:	08011903 	.word	0x08011903
 800e09c:	08011914 	.word	0x08011914

0800e0a0 <_calloc_r>:
 800e0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0a2:	fba1 2402 	umull	r2, r4, r1, r2
 800e0a6:	b94c      	cbnz	r4, 800e0bc <_calloc_r+0x1c>
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	9201      	str	r2, [sp, #4]
 800e0ac:	f000 f87a 	bl	800e1a4 <_malloc_r>
 800e0b0:	9a01      	ldr	r2, [sp, #4]
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	b930      	cbnz	r0, 800e0c4 <_calloc_r+0x24>
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	b003      	add	sp, #12
 800e0ba:	bd30      	pop	{r4, r5, pc}
 800e0bc:	220c      	movs	r2, #12
 800e0be:	6002      	str	r2, [r0, #0]
 800e0c0:	2500      	movs	r5, #0
 800e0c2:	e7f8      	b.n	800e0b6 <_calloc_r+0x16>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	f7fe f93f 	bl	800c348 <memset>
 800e0ca:	e7f4      	b.n	800e0b6 <_calloc_r+0x16>

0800e0cc <_free_r>:
 800e0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ce:	2900      	cmp	r1, #0
 800e0d0:	d044      	beq.n	800e15c <_free_r+0x90>
 800e0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d6:	9001      	str	r0, [sp, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f1a1 0404 	sub.w	r4, r1, #4
 800e0de:	bfb8      	it	lt
 800e0e0:	18e4      	addlt	r4, r4, r3
 800e0e2:	f000 fa9b 	bl	800e61c <__malloc_lock>
 800e0e6:	4a1e      	ldr	r2, [pc, #120]	; (800e160 <_free_r+0x94>)
 800e0e8:	9801      	ldr	r0, [sp, #4]
 800e0ea:	6813      	ldr	r3, [r2, #0]
 800e0ec:	b933      	cbnz	r3, 800e0fc <_free_r+0x30>
 800e0ee:	6063      	str	r3, [r4, #4]
 800e0f0:	6014      	str	r4, [r2, #0]
 800e0f2:	b003      	add	sp, #12
 800e0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0f8:	f000 ba96 	b.w	800e628 <__malloc_unlock>
 800e0fc:	42a3      	cmp	r3, r4
 800e0fe:	d908      	bls.n	800e112 <_free_r+0x46>
 800e100:	6825      	ldr	r5, [r4, #0]
 800e102:	1961      	adds	r1, r4, r5
 800e104:	428b      	cmp	r3, r1
 800e106:	bf01      	itttt	eq
 800e108:	6819      	ldreq	r1, [r3, #0]
 800e10a:	685b      	ldreq	r3, [r3, #4]
 800e10c:	1949      	addeq	r1, r1, r5
 800e10e:	6021      	streq	r1, [r4, #0]
 800e110:	e7ed      	b.n	800e0ee <_free_r+0x22>
 800e112:	461a      	mov	r2, r3
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	b10b      	cbz	r3, 800e11c <_free_r+0x50>
 800e118:	42a3      	cmp	r3, r4
 800e11a:	d9fa      	bls.n	800e112 <_free_r+0x46>
 800e11c:	6811      	ldr	r1, [r2, #0]
 800e11e:	1855      	adds	r5, r2, r1
 800e120:	42a5      	cmp	r5, r4
 800e122:	d10b      	bne.n	800e13c <_free_r+0x70>
 800e124:	6824      	ldr	r4, [r4, #0]
 800e126:	4421      	add	r1, r4
 800e128:	1854      	adds	r4, r2, r1
 800e12a:	42a3      	cmp	r3, r4
 800e12c:	6011      	str	r1, [r2, #0]
 800e12e:	d1e0      	bne.n	800e0f2 <_free_r+0x26>
 800e130:	681c      	ldr	r4, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	6053      	str	r3, [r2, #4]
 800e136:	4421      	add	r1, r4
 800e138:	6011      	str	r1, [r2, #0]
 800e13a:	e7da      	b.n	800e0f2 <_free_r+0x26>
 800e13c:	d902      	bls.n	800e144 <_free_r+0x78>
 800e13e:	230c      	movs	r3, #12
 800e140:	6003      	str	r3, [r0, #0]
 800e142:	e7d6      	b.n	800e0f2 <_free_r+0x26>
 800e144:	6825      	ldr	r5, [r4, #0]
 800e146:	1961      	adds	r1, r4, r5
 800e148:	428b      	cmp	r3, r1
 800e14a:	bf04      	itt	eq
 800e14c:	6819      	ldreq	r1, [r3, #0]
 800e14e:	685b      	ldreq	r3, [r3, #4]
 800e150:	6063      	str	r3, [r4, #4]
 800e152:	bf04      	itt	eq
 800e154:	1949      	addeq	r1, r1, r5
 800e156:	6021      	streq	r1, [r4, #0]
 800e158:	6054      	str	r4, [r2, #4]
 800e15a:	e7ca      	b.n	800e0f2 <_free_r+0x26>
 800e15c:	b003      	add	sp, #12
 800e15e:	bd30      	pop	{r4, r5, pc}
 800e160:	200023a4 	.word	0x200023a4

0800e164 <sbrk_aligned>:
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	4e0e      	ldr	r6, [pc, #56]	; (800e1a0 <sbrk_aligned+0x3c>)
 800e168:	460c      	mov	r4, r1
 800e16a:	6831      	ldr	r1, [r6, #0]
 800e16c:	4605      	mov	r5, r0
 800e16e:	b911      	cbnz	r1, 800e176 <sbrk_aligned+0x12>
 800e170:	f000 f9e8 	bl	800e544 <_sbrk_r>
 800e174:	6030      	str	r0, [r6, #0]
 800e176:	4621      	mov	r1, r4
 800e178:	4628      	mov	r0, r5
 800e17a:	f000 f9e3 	bl	800e544 <_sbrk_r>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	d00a      	beq.n	800e198 <sbrk_aligned+0x34>
 800e182:	1cc4      	adds	r4, r0, #3
 800e184:	f024 0403 	bic.w	r4, r4, #3
 800e188:	42a0      	cmp	r0, r4
 800e18a:	d007      	beq.n	800e19c <sbrk_aligned+0x38>
 800e18c:	1a21      	subs	r1, r4, r0
 800e18e:	4628      	mov	r0, r5
 800e190:	f000 f9d8 	bl	800e544 <_sbrk_r>
 800e194:	3001      	adds	r0, #1
 800e196:	d101      	bne.n	800e19c <sbrk_aligned+0x38>
 800e198:	f04f 34ff 	mov.w	r4, #4294967295
 800e19c:	4620      	mov	r0, r4
 800e19e:	bd70      	pop	{r4, r5, r6, pc}
 800e1a0:	200023a8 	.word	0x200023a8

0800e1a4 <_malloc_r>:
 800e1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a8:	1ccd      	adds	r5, r1, #3
 800e1aa:	f025 0503 	bic.w	r5, r5, #3
 800e1ae:	3508      	adds	r5, #8
 800e1b0:	2d0c      	cmp	r5, #12
 800e1b2:	bf38      	it	cc
 800e1b4:	250c      	movcc	r5, #12
 800e1b6:	2d00      	cmp	r5, #0
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	db01      	blt.n	800e1c0 <_malloc_r+0x1c>
 800e1bc:	42a9      	cmp	r1, r5
 800e1be:	d905      	bls.n	800e1cc <_malloc_r+0x28>
 800e1c0:	230c      	movs	r3, #12
 800e1c2:	603b      	str	r3, [r7, #0]
 800e1c4:	2600      	movs	r6, #0
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1cc:	4e2e      	ldr	r6, [pc, #184]	; (800e288 <_malloc_r+0xe4>)
 800e1ce:	f000 fa25 	bl	800e61c <__malloc_lock>
 800e1d2:	6833      	ldr	r3, [r6, #0]
 800e1d4:	461c      	mov	r4, r3
 800e1d6:	bb34      	cbnz	r4, 800e226 <_malloc_r+0x82>
 800e1d8:	4629      	mov	r1, r5
 800e1da:	4638      	mov	r0, r7
 800e1dc:	f7ff ffc2 	bl	800e164 <sbrk_aligned>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	d14d      	bne.n	800e282 <_malloc_r+0xde>
 800e1e6:	6834      	ldr	r4, [r6, #0]
 800e1e8:	4626      	mov	r6, r4
 800e1ea:	2e00      	cmp	r6, #0
 800e1ec:	d140      	bne.n	800e270 <_malloc_r+0xcc>
 800e1ee:	6823      	ldr	r3, [r4, #0]
 800e1f0:	4631      	mov	r1, r6
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	eb04 0803 	add.w	r8, r4, r3
 800e1f8:	f000 f9a4 	bl	800e544 <_sbrk_r>
 800e1fc:	4580      	cmp	r8, r0
 800e1fe:	d13a      	bne.n	800e276 <_malloc_r+0xd2>
 800e200:	6821      	ldr	r1, [r4, #0]
 800e202:	3503      	adds	r5, #3
 800e204:	1a6d      	subs	r5, r5, r1
 800e206:	f025 0503 	bic.w	r5, r5, #3
 800e20a:	3508      	adds	r5, #8
 800e20c:	2d0c      	cmp	r5, #12
 800e20e:	bf38      	it	cc
 800e210:	250c      	movcc	r5, #12
 800e212:	4629      	mov	r1, r5
 800e214:	4638      	mov	r0, r7
 800e216:	f7ff ffa5 	bl	800e164 <sbrk_aligned>
 800e21a:	3001      	adds	r0, #1
 800e21c:	d02b      	beq.n	800e276 <_malloc_r+0xd2>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	442b      	add	r3, r5
 800e222:	6023      	str	r3, [r4, #0]
 800e224:	e00e      	b.n	800e244 <_malloc_r+0xa0>
 800e226:	6822      	ldr	r2, [r4, #0]
 800e228:	1b52      	subs	r2, r2, r5
 800e22a:	d41e      	bmi.n	800e26a <_malloc_r+0xc6>
 800e22c:	2a0b      	cmp	r2, #11
 800e22e:	d916      	bls.n	800e25e <_malloc_r+0xba>
 800e230:	1961      	adds	r1, r4, r5
 800e232:	42a3      	cmp	r3, r4
 800e234:	6025      	str	r5, [r4, #0]
 800e236:	bf18      	it	ne
 800e238:	6059      	strne	r1, [r3, #4]
 800e23a:	6863      	ldr	r3, [r4, #4]
 800e23c:	bf08      	it	eq
 800e23e:	6031      	streq	r1, [r6, #0]
 800e240:	5162      	str	r2, [r4, r5]
 800e242:	604b      	str	r3, [r1, #4]
 800e244:	4638      	mov	r0, r7
 800e246:	f104 060b 	add.w	r6, r4, #11
 800e24a:	f000 f9ed 	bl	800e628 <__malloc_unlock>
 800e24e:	f026 0607 	bic.w	r6, r6, #7
 800e252:	1d23      	adds	r3, r4, #4
 800e254:	1af2      	subs	r2, r6, r3
 800e256:	d0b6      	beq.n	800e1c6 <_malloc_r+0x22>
 800e258:	1b9b      	subs	r3, r3, r6
 800e25a:	50a3      	str	r3, [r4, r2]
 800e25c:	e7b3      	b.n	800e1c6 <_malloc_r+0x22>
 800e25e:	6862      	ldr	r2, [r4, #4]
 800e260:	42a3      	cmp	r3, r4
 800e262:	bf0c      	ite	eq
 800e264:	6032      	streq	r2, [r6, #0]
 800e266:	605a      	strne	r2, [r3, #4]
 800e268:	e7ec      	b.n	800e244 <_malloc_r+0xa0>
 800e26a:	4623      	mov	r3, r4
 800e26c:	6864      	ldr	r4, [r4, #4]
 800e26e:	e7b2      	b.n	800e1d6 <_malloc_r+0x32>
 800e270:	4634      	mov	r4, r6
 800e272:	6876      	ldr	r6, [r6, #4]
 800e274:	e7b9      	b.n	800e1ea <_malloc_r+0x46>
 800e276:	230c      	movs	r3, #12
 800e278:	603b      	str	r3, [r7, #0]
 800e27a:	4638      	mov	r0, r7
 800e27c:	f000 f9d4 	bl	800e628 <__malloc_unlock>
 800e280:	e7a1      	b.n	800e1c6 <_malloc_r+0x22>
 800e282:	6025      	str	r5, [r4, #0]
 800e284:	e7de      	b.n	800e244 <_malloc_r+0xa0>
 800e286:	bf00      	nop
 800e288:	200023a4 	.word	0x200023a4

0800e28c <__ssputs_r>:
 800e28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e290:	688e      	ldr	r6, [r1, #8]
 800e292:	429e      	cmp	r6, r3
 800e294:	4682      	mov	sl, r0
 800e296:	460c      	mov	r4, r1
 800e298:	4690      	mov	r8, r2
 800e29a:	461f      	mov	r7, r3
 800e29c:	d838      	bhi.n	800e310 <__ssputs_r+0x84>
 800e29e:	898a      	ldrh	r2, [r1, #12]
 800e2a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2a4:	d032      	beq.n	800e30c <__ssputs_r+0x80>
 800e2a6:	6825      	ldr	r5, [r4, #0]
 800e2a8:	6909      	ldr	r1, [r1, #16]
 800e2aa:	eba5 0901 	sub.w	r9, r5, r1
 800e2ae:	6965      	ldr	r5, [r4, #20]
 800e2b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	444b      	add	r3, r9
 800e2bc:	106d      	asrs	r5, r5, #1
 800e2be:	429d      	cmp	r5, r3
 800e2c0:	bf38      	it	cc
 800e2c2:	461d      	movcc	r5, r3
 800e2c4:	0553      	lsls	r3, r2, #21
 800e2c6:	d531      	bpl.n	800e32c <__ssputs_r+0xa0>
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7ff ff6b 	bl	800e1a4 <_malloc_r>
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	b950      	cbnz	r0, 800e2e8 <__ssputs_r+0x5c>
 800e2d2:	230c      	movs	r3, #12
 800e2d4:	f8ca 3000 	str.w	r3, [sl]
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e8:	6921      	ldr	r1, [r4, #16]
 800e2ea:	464a      	mov	r2, r9
 800e2ec:	f7ff fb46 	bl	800d97c <memcpy>
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2fa:	81a3      	strh	r3, [r4, #12]
 800e2fc:	6126      	str	r6, [r4, #16]
 800e2fe:	6165      	str	r5, [r4, #20]
 800e300:	444e      	add	r6, r9
 800e302:	eba5 0509 	sub.w	r5, r5, r9
 800e306:	6026      	str	r6, [r4, #0]
 800e308:	60a5      	str	r5, [r4, #8]
 800e30a:	463e      	mov	r6, r7
 800e30c:	42be      	cmp	r6, r7
 800e30e:	d900      	bls.n	800e312 <__ssputs_r+0x86>
 800e310:	463e      	mov	r6, r7
 800e312:	6820      	ldr	r0, [r4, #0]
 800e314:	4632      	mov	r2, r6
 800e316:	4641      	mov	r1, r8
 800e318:	f000 f966 	bl	800e5e8 <memmove>
 800e31c:	68a3      	ldr	r3, [r4, #8]
 800e31e:	1b9b      	subs	r3, r3, r6
 800e320:	60a3      	str	r3, [r4, #8]
 800e322:	6823      	ldr	r3, [r4, #0]
 800e324:	4433      	add	r3, r6
 800e326:	6023      	str	r3, [r4, #0]
 800e328:	2000      	movs	r0, #0
 800e32a:	e7db      	b.n	800e2e4 <__ssputs_r+0x58>
 800e32c:	462a      	mov	r2, r5
 800e32e:	f000 f981 	bl	800e634 <_realloc_r>
 800e332:	4606      	mov	r6, r0
 800e334:	2800      	cmp	r0, #0
 800e336:	d1e1      	bne.n	800e2fc <__ssputs_r+0x70>
 800e338:	6921      	ldr	r1, [r4, #16]
 800e33a:	4650      	mov	r0, sl
 800e33c:	f7ff fec6 	bl	800e0cc <_free_r>
 800e340:	e7c7      	b.n	800e2d2 <__ssputs_r+0x46>
	...

0800e344 <_svfiprintf_r>:
 800e344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e348:	4698      	mov	r8, r3
 800e34a:	898b      	ldrh	r3, [r1, #12]
 800e34c:	061b      	lsls	r3, r3, #24
 800e34e:	b09d      	sub	sp, #116	; 0x74
 800e350:	4607      	mov	r7, r0
 800e352:	460d      	mov	r5, r1
 800e354:	4614      	mov	r4, r2
 800e356:	d50e      	bpl.n	800e376 <_svfiprintf_r+0x32>
 800e358:	690b      	ldr	r3, [r1, #16]
 800e35a:	b963      	cbnz	r3, 800e376 <_svfiprintf_r+0x32>
 800e35c:	2140      	movs	r1, #64	; 0x40
 800e35e:	f7ff ff21 	bl	800e1a4 <_malloc_r>
 800e362:	6028      	str	r0, [r5, #0]
 800e364:	6128      	str	r0, [r5, #16]
 800e366:	b920      	cbnz	r0, 800e372 <_svfiprintf_r+0x2e>
 800e368:	230c      	movs	r3, #12
 800e36a:	603b      	str	r3, [r7, #0]
 800e36c:	f04f 30ff 	mov.w	r0, #4294967295
 800e370:	e0d1      	b.n	800e516 <_svfiprintf_r+0x1d2>
 800e372:	2340      	movs	r3, #64	; 0x40
 800e374:	616b      	str	r3, [r5, #20]
 800e376:	2300      	movs	r3, #0
 800e378:	9309      	str	r3, [sp, #36]	; 0x24
 800e37a:	2320      	movs	r3, #32
 800e37c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e380:	f8cd 800c 	str.w	r8, [sp, #12]
 800e384:	2330      	movs	r3, #48	; 0x30
 800e386:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e530 <_svfiprintf_r+0x1ec>
 800e38a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e38e:	f04f 0901 	mov.w	r9, #1
 800e392:	4623      	mov	r3, r4
 800e394:	469a      	mov	sl, r3
 800e396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e39a:	b10a      	cbz	r2, 800e3a0 <_svfiprintf_r+0x5c>
 800e39c:	2a25      	cmp	r2, #37	; 0x25
 800e39e:	d1f9      	bne.n	800e394 <_svfiprintf_r+0x50>
 800e3a0:	ebba 0b04 	subs.w	fp, sl, r4
 800e3a4:	d00b      	beq.n	800e3be <_svfiprintf_r+0x7a>
 800e3a6:	465b      	mov	r3, fp
 800e3a8:	4622      	mov	r2, r4
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	f7ff ff6d 	bl	800e28c <__ssputs_r>
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	f000 80aa 	beq.w	800e50c <_svfiprintf_r+0x1c8>
 800e3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3ba:	445a      	add	r2, fp
 800e3bc:	9209      	str	r2, [sp, #36]	; 0x24
 800e3be:	f89a 3000 	ldrb.w	r3, [sl]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f000 80a2 	beq.w	800e50c <_svfiprintf_r+0x1c8>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3d2:	f10a 0a01 	add.w	sl, sl, #1
 800e3d6:	9304      	str	r3, [sp, #16]
 800e3d8:	9307      	str	r3, [sp, #28]
 800e3da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3de:	931a      	str	r3, [sp, #104]	; 0x68
 800e3e0:	4654      	mov	r4, sl
 800e3e2:	2205      	movs	r2, #5
 800e3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3e8:	4851      	ldr	r0, [pc, #324]	; (800e530 <_svfiprintf_r+0x1ec>)
 800e3ea:	f7f1 ff09 	bl	8000200 <memchr>
 800e3ee:	9a04      	ldr	r2, [sp, #16]
 800e3f0:	b9d8      	cbnz	r0, 800e42a <_svfiprintf_r+0xe6>
 800e3f2:	06d0      	lsls	r0, r2, #27
 800e3f4:	bf44      	itt	mi
 800e3f6:	2320      	movmi	r3, #32
 800e3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3fc:	0711      	lsls	r1, r2, #28
 800e3fe:	bf44      	itt	mi
 800e400:	232b      	movmi	r3, #43	; 0x2b
 800e402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e406:	f89a 3000 	ldrb.w	r3, [sl]
 800e40a:	2b2a      	cmp	r3, #42	; 0x2a
 800e40c:	d015      	beq.n	800e43a <_svfiprintf_r+0xf6>
 800e40e:	9a07      	ldr	r2, [sp, #28]
 800e410:	4654      	mov	r4, sl
 800e412:	2000      	movs	r0, #0
 800e414:	f04f 0c0a 	mov.w	ip, #10
 800e418:	4621      	mov	r1, r4
 800e41a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e41e:	3b30      	subs	r3, #48	; 0x30
 800e420:	2b09      	cmp	r3, #9
 800e422:	d94e      	bls.n	800e4c2 <_svfiprintf_r+0x17e>
 800e424:	b1b0      	cbz	r0, 800e454 <_svfiprintf_r+0x110>
 800e426:	9207      	str	r2, [sp, #28]
 800e428:	e014      	b.n	800e454 <_svfiprintf_r+0x110>
 800e42a:	eba0 0308 	sub.w	r3, r0, r8
 800e42e:	fa09 f303 	lsl.w	r3, r9, r3
 800e432:	4313      	orrs	r3, r2
 800e434:	9304      	str	r3, [sp, #16]
 800e436:	46a2      	mov	sl, r4
 800e438:	e7d2      	b.n	800e3e0 <_svfiprintf_r+0x9c>
 800e43a:	9b03      	ldr	r3, [sp, #12]
 800e43c:	1d19      	adds	r1, r3, #4
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	9103      	str	r1, [sp, #12]
 800e442:	2b00      	cmp	r3, #0
 800e444:	bfbb      	ittet	lt
 800e446:	425b      	neglt	r3, r3
 800e448:	f042 0202 	orrlt.w	r2, r2, #2
 800e44c:	9307      	strge	r3, [sp, #28]
 800e44e:	9307      	strlt	r3, [sp, #28]
 800e450:	bfb8      	it	lt
 800e452:	9204      	strlt	r2, [sp, #16]
 800e454:	7823      	ldrb	r3, [r4, #0]
 800e456:	2b2e      	cmp	r3, #46	; 0x2e
 800e458:	d10c      	bne.n	800e474 <_svfiprintf_r+0x130>
 800e45a:	7863      	ldrb	r3, [r4, #1]
 800e45c:	2b2a      	cmp	r3, #42	; 0x2a
 800e45e:	d135      	bne.n	800e4cc <_svfiprintf_r+0x188>
 800e460:	9b03      	ldr	r3, [sp, #12]
 800e462:	1d1a      	adds	r2, r3, #4
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	9203      	str	r2, [sp, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bfb8      	it	lt
 800e46c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e470:	3402      	adds	r4, #2
 800e472:	9305      	str	r3, [sp, #20]
 800e474:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e540 <_svfiprintf_r+0x1fc>
 800e478:	7821      	ldrb	r1, [r4, #0]
 800e47a:	2203      	movs	r2, #3
 800e47c:	4650      	mov	r0, sl
 800e47e:	f7f1 febf 	bl	8000200 <memchr>
 800e482:	b140      	cbz	r0, 800e496 <_svfiprintf_r+0x152>
 800e484:	2340      	movs	r3, #64	; 0x40
 800e486:	eba0 000a 	sub.w	r0, r0, sl
 800e48a:	fa03 f000 	lsl.w	r0, r3, r0
 800e48e:	9b04      	ldr	r3, [sp, #16]
 800e490:	4303      	orrs	r3, r0
 800e492:	3401      	adds	r4, #1
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e49a:	4826      	ldr	r0, [pc, #152]	; (800e534 <_svfiprintf_r+0x1f0>)
 800e49c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4a0:	2206      	movs	r2, #6
 800e4a2:	f7f1 fead 	bl	8000200 <memchr>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d038      	beq.n	800e51c <_svfiprintf_r+0x1d8>
 800e4aa:	4b23      	ldr	r3, [pc, #140]	; (800e538 <_svfiprintf_r+0x1f4>)
 800e4ac:	bb1b      	cbnz	r3, 800e4f6 <_svfiprintf_r+0x1b2>
 800e4ae:	9b03      	ldr	r3, [sp, #12]
 800e4b0:	3307      	adds	r3, #7
 800e4b2:	f023 0307 	bic.w	r3, r3, #7
 800e4b6:	3308      	adds	r3, #8
 800e4b8:	9303      	str	r3, [sp, #12]
 800e4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4bc:	4433      	add	r3, r6
 800e4be:	9309      	str	r3, [sp, #36]	; 0x24
 800e4c0:	e767      	b.n	800e392 <_svfiprintf_r+0x4e>
 800e4c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4c6:	460c      	mov	r4, r1
 800e4c8:	2001      	movs	r0, #1
 800e4ca:	e7a5      	b.n	800e418 <_svfiprintf_r+0xd4>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	3401      	adds	r4, #1
 800e4d0:	9305      	str	r3, [sp, #20]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	f04f 0c0a 	mov.w	ip, #10
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4de:	3a30      	subs	r2, #48	; 0x30
 800e4e0:	2a09      	cmp	r2, #9
 800e4e2:	d903      	bls.n	800e4ec <_svfiprintf_r+0x1a8>
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d0c5      	beq.n	800e474 <_svfiprintf_r+0x130>
 800e4e8:	9105      	str	r1, [sp, #20]
 800e4ea:	e7c3      	b.n	800e474 <_svfiprintf_r+0x130>
 800e4ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e7f0      	b.n	800e4d8 <_svfiprintf_r+0x194>
 800e4f6:	ab03      	add	r3, sp, #12
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	462a      	mov	r2, r5
 800e4fc:	4b0f      	ldr	r3, [pc, #60]	; (800e53c <_svfiprintf_r+0x1f8>)
 800e4fe:	a904      	add	r1, sp, #16
 800e500:	4638      	mov	r0, r7
 800e502:	f7fd ffc9 	bl	800c498 <_printf_float>
 800e506:	1c42      	adds	r2, r0, #1
 800e508:	4606      	mov	r6, r0
 800e50a:	d1d6      	bne.n	800e4ba <_svfiprintf_r+0x176>
 800e50c:	89ab      	ldrh	r3, [r5, #12]
 800e50e:	065b      	lsls	r3, r3, #25
 800e510:	f53f af2c 	bmi.w	800e36c <_svfiprintf_r+0x28>
 800e514:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e516:	b01d      	add	sp, #116	; 0x74
 800e518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51c:	ab03      	add	r3, sp, #12
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	462a      	mov	r2, r5
 800e522:	4b06      	ldr	r3, [pc, #24]	; (800e53c <_svfiprintf_r+0x1f8>)
 800e524:	a904      	add	r1, sp, #16
 800e526:	4638      	mov	r0, r7
 800e528:	f7fe fa5a 	bl	800c9e0 <_printf_i>
 800e52c:	e7eb      	b.n	800e506 <_svfiprintf_r+0x1c2>
 800e52e:	bf00      	nop
 800e530:	08011a6c 	.word	0x08011a6c
 800e534:	08011a76 	.word	0x08011a76
 800e538:	0800c499 	.word	0x0800c499
 800e53c:	0800e28d 	.word	0x0800e28d
 800e540:	08011a72 	.word	0x08011a72

0800e544 <_sbrk_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4d06      	ldr	r5, [pc, #24]	; (800e560 <_sbrk_r+0x1c>)
 800e548:	2300      	movs	r3, #0
 800e54a:	4604      	mov	r4, r0
 800e54c:	4608      	mov	r0, r1
 800e54e:	602b      	str	r3, [r5, #0]
 800e550:	f7f3 f80e 	bl	8001570 <_sbrk>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	d102      	bne.n	800e55e <_sbrk_r+0x1a>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	b103      	cbz	r3, 800e55e <_sbrk_r+0x1a>
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	200023ac 	.word	0x200023ac

0800e564 <__assert_func>:
 800e564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e566:	4614      	mov	r4, r2
 800e568:	461a      	mov	r2, r3
 800e56a:	4b09      	ldr	r3, [pc, #36]	; (800e590 <__assert_func+0x2c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4605      	mov	r5, r0
 800e570:	68d8      	ldr	r0, [r3, #12]
 800e572:	b14c      	cbz	r4, 800e588 <__assert_func+0x24>
 800e574:	4b07      	ldr	r3, [pc, #28]	; (800e594 <__assert_func+0x30>)
 800e576:	9100      	str	r1, [sp, #0]
 800e578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e57c:	4906      	ldr	r1, [pc, #24]	; (800e598 <__assert_func+0x34>)
 800e57e:	462b      	mov	r3, r5
 800e580:	f000 f80e 	bl	800e5a0 <fiprintf>
 800e584:	f000 faac 	bl	800eae0 <abort>
 800e588:	4b04      	ldr	r3, [pc, #16]	; (800e59c <__assert_func+0x38>)
 800e58a:	461c      	mov	r4, r3
 800e58c:	e7f3      	b.n	800e576 <__assert_func+0x12>
 800e58e:	bf00      	nop
 800e590:	200001b4 	.word	0x200001b4
 800e594:	08011a7d 	.word	0x08011a7d
 800e598:	08011a8a 	.word	0x08011a8a
 800e59c:	08011ab8 	.word	0x08011ab8

0800e5a0 <fiprintf>:
 800e5a0:	b40e      	push	{r1, r2, r3}
 800e5a2:	b503      	push	{r0, r1, lr}
 800e5a4:	4601      	mov	r1, r0
 800e5a6:	ab03      	add	r3, sp, #12
 800e5a8:	4805      	ldr	r0, [pc, #20]	; (800e5c0 <fiprintf+0x20>)
 800e5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ae:	6800      	ldr	r0, [r0, #0]
 800e5b0:	9301      	str	r3, [sp, #4]
 800e5b2:	f000 f897 	bl	800e6e4 <_vfiprintf_r>
 800e5b6:	b002      	add	sp, #8
 800e5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5bc:	b003      	add	sp, #12
 800e5be:	4770      	bx	lr
 800e5c0:	200001b4 	.word	0x200001b4

0800e5c4 <__ascii_mbtowc>:
 800e5c4:	b082      	sub	sp, #8
 800e5c6:	b901      	cbnz	r1, 800e5ca <__ascii_mbtowc+0x6>
 800e5c8:	a901      	add	r1, sp, #4
 800e5ca:	b142      	cbz	r2, 800e5de <__ascii_mbtowc+0x1a>
 800e5cc:	b14b      	cbz	r3, 800e5e2 <__ascii_mbtowc+0x1e>
 800e5ce:	7813      	ldrb	r3, [r2, #0]
 800e5d0:	600b      	str	r3, [r1, #0]
 800e5d2:	7812      	ldrb	r2, [r2, #0]
 800e5d4:	1e10      	subs	r0, r2, #0
 800e5d6:	bf18      	it	ne
 800e5d8:	2001      	movne	r0, #1
 800e5da:	b002      	add	sp, #8
 800e5dc:	4770      	bx	lr
 800e5de:	4610      	mov	r0, r2
 800e5e0:	e7fb      	b.n	800e5da <__ascii_mbtowc+0x16>
 800e5e2:	f06f 0001 	mvn.w	r0, #1
 800e5e6:	e7f8      	b.n	800e5da <__ascii_mbtowc+0x16>

0800e5e8 <memmove>:
 800e5e8:	4288      	cmp	r0, r1
 800e5ea:	b510      	push	{r4, lr}
 800e5ec:	eb01 0402 	add.w	r4, r1, r2
 800e5f0:	d902      	bls.n	800e5f8 <memmove+0x10>
 800e5f2:	4284      	cmp	r4, r0
 800e5f4:	4623      	mov	r3, r4
 800e5f6:	d807      	bhi.n	800e608 <memmove+0x20>
 800e5f8:	1e43      	subs	r3, r0, #1
 800e5fa:	42a1      	cmp	r1, r4
 800e5fc:	d008      	beq.n	800e610 <memmove+0x28>
 800e5fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e602:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e606:	e7f8      	b.n	800e5fa <memmove+0x12>
 800e608:	4402      	add	r2, r0
 800e60a:	4601      	mov	r1, r0
 800e60c:	428a      	cmp	r2, r1
 800e60e:	d100      	bne.n	800e612 <memmove+0x2a>
 800e610:	bd10      	pop	{r4, pc}
 800e612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e61a:	e7f7      	b.n	800e60c <memmove+0x24>

0800e61c <__malloc_lock>:
 800e61c:	4801      	ldr	r0, [pc, #4]	; (800e624 <__malloc_lock+0x8>)
 800e61e:	f000 bc1f 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800e622:	bf00      	nop
 800e624:	200023b0 	.word	0x200023b0

0800e628 <__malloc_unlock>:
 800e628:	4801      	ldr	r0, [pc, #4]	; (800e630 <__malloc_unlock+0x8>)
 800e62a:	f000 bc1a 	b.w	800ee62 <__retarget_lock_release_recursive>
 800e62e:	bf00      	nop
 800e630:	200023b0 	.word	0x200023b0

0800e634 <_realloc_r>:
 800e634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e638:	4680      	mov	r8, r0
 800e63a:	4614      	mov	r4, r2
 800e63c:	460e      	mov	r6, r1
 800e63e:	b921      	cbnz	r1, 800e64a <_realloc_r+0x16>
 800e640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e644:	4611      	mov	r1, r2
 800e646:	f7ff bdad 	b.w	800e1a4 <_malloc_r>
 800e64a:	b92a      	cbnz	r2, 800e658 <_realloc_r+0x24>
 800e64c:	f7ff fd3e 	bl	800e0cc <_free_r>
 800e650:	4625      	mov	r5, r4
 800e652:	4628      	mov	r0, r5
 800e654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e658:	f000 fc6a 	bl	800ef30 <_malloc_usable_size_r>
 800e65c:	4284      	cmp	r4, r0
 800e65e:	4607      	mov	r7, r0
 800e660:	d802      	bhi.n	800e668 <_realloc_r+0x34>
 800e662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e666:	d812      	bhi.n	800e68e <_realloc_r+0x5a>
 800e668:	4621      	mov	r1, r4
 800e66a:	4640      	mov	r0, r8
 800e66c:	f7ff fd9a 	bl	800e1a4 <_malloc_r>
 800e670:	4605      	mov	r5, r0
 800e672:	2800      	cmp	r0, #0
 800e674:	d0ed      	beq.n	800e652 <_realloc_r+0x1e>
 800e676:	42bc      	cmp	r4, r7
 800e678:	4622      	mov	r2, r4
 800e67a:	4631      	mov	r1, r6
 800e67c:	bf28      	it	cs
 800e67e:	463a      	movcs	r2, r7
 800e680:	f7ff f97c 	bl	800d97c <memcpy>
 800e684:	4631      	mov	r1, r6
 800e686:	4640      	mov	r0, r8
 800e688:	f7ff fd20 	bl	800e0cc <_free_r>
 800e68c:	e7e1      	b.n	800e652 <_realloc_r+0x1e>
 800e68e:	4635      	mov	r5, r6
 800e690:	e7df      	b.n	800e652 <_realloc_r+0x1e>

0800e692 <__sfputc_r>:
 800e692:	6893      	ldr	r3, [r2, #8]
 800e694:	3b01      	subs	r3, #1
 800e696:	2b00      	cmp	r3, #0
 800e698:	b410      	push	{r4}
 800e69a:	6093      	str	r3, [r2, #8]
 800e69c:	da08      	bge.n	800e6b0 <__sfputc_r+0x1e>
 800e69e:	6994      	ldr	r4, [r2, #24]
 800e6a0:	42a3      	cmp	r3, r4
 800e6a2:	db01      	blt.n	800e6a8 <__sfputc_r+0x16>
 800e6a4:	290a      	cmp	r1, #10
 800e6a6:	d103      	bne.n	800e6b0 <__sfputc_r+0x1e>
 800e6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ac:	f000 b94a 	b.w	800e944 <__swbuf_r>
 800e6b0:	6813      	ldr	r3, [r2, #0]
 800e6b2:	1c58      	adds	r0, r3, #1
 800e6b4:	6010      	str	r0, [r2, #0]
 800e6b6:	7019      	strb	r1, [r3, #0]
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <__sfputs_r>:
 800e6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460f      	mov	r7, r1
 800e6c6:	4614      	mov	r4, r2
 800e6c8:	18d5      	adds	r5, r2, r3
 800e6ca:	42ac      	cmp	r4, r5
 800e6cc:	d101      	bne.n	800e6d2 <__sfputs_r+0x12>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	e007      	b.n	800e6e2 <__sfputs_r+0x22>
 800e6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6d6:	463a      	mov	r2, r7
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff ffda 	bl	800e692 <__sfputc_r>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	d1f3      	bne.n	800e6ca <__sfputs_r+0xa>
 800e6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e6e4 <_vfiprintf_r>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	b09d      	sub	sp, #116	; 0x74
 800e6ec:	4614      	mov	r4, r2
 800e6ee:	4698      	mov	r8, r3
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	b118      	cbz	r0, 800e6fc <_vfiprintf_r+0x18>
 800e6f4:	6983      	ldr	r3, [r0, #24]
 800e6f6:	b90b      	cbnz	r3, 800e6fc <_vfiprintf_r+0x18>
 800e6f8:	f000 fb14 	bl	800ed24 <__sinit>
 800e6fc:	4b89      	ldr	r3, [pc, #548]	; (800e924 <_vfiprintf_r+0x240>)
 800e6fe:	429d      	cmp	r5, r3
 800e700:	d11b      	bne.n	800e73a <_vfiprintf_r+0x56>
 800e702:	6875      	ldr	r5, [r6, #4]
 800e704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e706:	07d9      	lsls	r1, r3, #31
 800e708:	d405      	bmi.n	800e716 <_vfiprintf_r+0x32>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	059a      	lsls	r2, r3, #22
 800e70e:	d402      	bmi.n	800e716 <_vfiprintf_r+0x32>
 800e710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e712:	f000 fba5 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800e716:	89ab      	ldrh	r3, [r5, #12]
 800e718:	071b      	lsls	r3, r3, #28
 800e71a:	d501      	bpl.n	800e720 <_vfiprintf_r+0x3c>
 800e71c:	692b      	ldr	r3, [r5, #16]
 800e71e:	b9eb      	cbnz	r3, 800e75c <_vfiprintf_r+0x78>
 800e720:	4629      	mov	r1, r5
 800e722:	4630      	mov	r0, r6
 800e724:	f000 f96e 	bl	800ea04 <__swsetup_r>
 800e728:	b1c0      	cbz	r0, 800e75c <_vfiprintf_r+0x78>
 800e72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e72c:	07dc      	lsls	r4, r3, #31
 800e72e:	d50e      	bpl.n	800e74e <_vfiprintf_r+0x6a>
 800e730:	f04f 30ff 	mov.w	r0, #4294967295
 800e734:	b01d      	add	sp, #116	; 0x74
 800e736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73a:	4b7b      	ldr	r3, [pc, #492]	; (800e928 <_vfiprintf_r+0x244>)
 800e73c:	429d      	cmp	r5, r3
 800e73e:	d101      	bne.n	800e744 <_vfiprintf_r+0x60>
 800e740:	68b5      	ldr	r5, [r6, #8]
 800e742:	e7df      	b.n	800e704 <_vfiprintf_r+0x20>
 800e744:	4b79      	ldr	r3, [pc, #484]	; (800e92c <_vfiprintf_r+0x248>)
 800e746:	429d      	cmp	r5, r3
 800e748:	bf08      	it	eq
 800e74a:	68f5      	ldreq	r5, [r6, #12]
 800e74c:	e7da      	b.n	800e704 <_vfiprintf_r+0x20>
 800e74e:	89ab      	ldrh	r3, [r5, #12]
 800e750:	0598      	lsls	r0, r3, #22
 800e752:	d4ed      	bmi.n	800e730 <_vfiprintf_r+0x4c>
 800e754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e756:	f000 fb84 	bl	800ee62 <__retarget_lock_release_recursive>
 800e75a:	e7e9      	b.n	800e730 <_vfiprintf_r+0x4c>
 800e75c:	2300      	movs	r3, #0
 800e75e:	9309      	str	r3, [sp, #36]	; 0x24
 800e760:	2320      	movs	r3, #32
 800e762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e766:	f8cd 800c 	str.w	r8, [sp, #12]
 800e76a:	2330      	movs	r3, #48	; 0x30
 800e76c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e930 <_vfiprintf_r+0x24c>
 800e770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e774:	f04f 0901 	mov.w	r9, #1
 800e778:	4623      	mov	r3, r4
 800e77a:	469a      	mov	sl, r3
 800e77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e780:	b10a      	cbz	r2, 800e786 <_vfiprintf_r+0xa2>
 800e782:	2a25      	cmp	r2, #37	; 0x25
 800e784:	d1f9      	bne.n	800e77a <_vfiprintf_r+0x96>
 800e786:	ebba 0b04 	subs.w	fp, sl, r4
 800e78a:	d00b      	beq.n	800e7a4 <_vfiprintf_r+0xc0>
 800e78c:	465b      	mov	r3, fp
 800e78e:	4622      	mov	r2, r4
 800e790:	4629      	mov	r1, r5
 800e792:	4630      	mov	r0, r6
 800e794:	f7ff ff94 	bl	800e6c0 <__sfputs_r>
 800e798:	3001      	adds	r0, #1
 800e79a:	f000 80aa 	beq.w	800e8f2 <_vfiprintf_r+0x20e>
 800e79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7a0:	445a      	add	r2, fp
 800e7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 80a2 	beq.w	800e8f2 <_vfiprintf_r+0x20e>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7b8:	f10a 0a01 	add.w	sl, sl, #1
 800e7bc:	9304      	str	r3, [sp, #16]
 800e7be:	9307      	str	r3, [sp, #28]
 800e7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800e7c6:	4654      	mov	r4, sl
 800e7c8:	2205      	movs	r2, #5
 800e7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ce:	4858      	ldr	r0, [pc, #352]	; (800e930 <_vfiprintf_r+0x24c>)
 800e7d0:	f7f1 fd16 	bl	8000200 <memchr>
 800e7d4:	9a04      	ldr	r2, [sp, #16]
 800e7d6:	b9d8      	cbnz	r0, 800e810 <_vfiprintf_r+0x12c>
 800e7d8:	06d1      	lsls	r1, r2, #27
 800e7da:	bf44      	itt	mi
 800e7dc:	2320      	movmi	r3, #32
 800e7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7e2:	0713      	lsls	r3, r2, #28
 800e7e4:	bf44      	itt	mi
 800e7e6:	232b      	movmi	r3, #43	; 0x2b
 800e7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f2:	d015      	beq.n	800e820 <_vfiprintf_r+0x13c>
 800e7f4:	9a07      	ldr	r2, [sp, #28]
 800e7f6:	4654      	mov	r4, sl
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	f04f 0c0a 	mov.w	ip, #10
 800e7fe:	4621      	mov	r1, r4
 800e800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e804:	3b30      	subs	r3, #48	; 0x30
 800e806:	2b09      	cmp	r3, #9
 800e808:	d94e      	bls.n	800e8a8 <_vfiprintf_r+0x1c4>
 800e80a:	b1b0      	cbz	r0, 800e83a <_vfiprintf_r+0x156>
 800e80c:	9207      	str	r2, [sp, #28]
 800e80e:	e014      	b.n	800e83a <_vfiprintf_r+0x156>
 800e810:	eba0 0308 	sub.w	r3, r0, r8
 800e814:	fa09 f303 	lsl.w	r3, r9, r3
 800e818:	4313      	orrs	r3, r2
 800e81a:	9304      	str	r3, [sp, #16]
 800e81c:	46a2      	mov	sl, r4
 800e81e:	e7d2      	b.n	800e7c6 <_vfiprintf_r+0xe2>
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	1d19      	adds	r1, r3, #4
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	9103      	str	r1, [sp, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	bfbb      	ittet	lt
 800e82c:	425b      	neglt	r3, r3
 800e82e:	f042 0202 	orrlt.w	r2, r2, #2
 800e832:	9307      	strge	r3, [sp, #28]
 800e834:	9307      	strlt	r3, [sp, #28]
 800e836:	bfb8      	it	lt
 800e838:	9204      	strlt	r2, [sp, #16]
 800e83a:	7823      	ldrb	r3, [r4, #0]
 800e83c:	2b2e      	cmp	r3, #46	; 0x2e
 800e83e:	d10c      	bne.n	800e85a <_vfiprintf_r+0x176>
 800e840:	7863      	ldrb	r3, [r4, #1]
 800e842:	2b2a      	cmp	r3, #42	; 0x2a
 800e844:	d135      	bne.n	800e8b2 <_vfiprintf_r+0x1ce>
 800e846:	9b03      	ldr	r3, [sp, #12]
 800e848:	1d1a      	adds	r2, r3, #4
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	9203      	str	r2, [sp, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	bfb8      	it	lt
 800e852:	f04f 33ff 	movlt.w	r3, #4294967295
 800e856:	3402      	adds	r4, #2
 800e858:	9305      	str	r3, [sp, #20]
 800e85a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e940 <_vfiprintf_r+0x25c>
 800e85e:	7821      	ldrb	r1, [r4, #0]
 800e860:	2203      	movs	r2, #3
 800e862:	4650      	mov	r0, sl
 800e864:	f7f1 fccc 	bl	8000200 <memchr>
 800e868:	b140      	cbz	r0, 800e87c <_vfiprintf_r+0x198>
 800e86a:	2340      	movs	r3, #64	; 0x40
 800e86c:	eba0 000a 	sub.w	r0, r0, sl
 800e870:	fa03 f000 	lsl.w	r0, r3, r0
 800e874:	9b04      	ldr	r3, [sp, #16]
 800e876:	4303      	orrs	r3, r0
 800e878:	3401      	adds	r4, #1
 800e87a:	9304      	str	r3, [sp, #16]
 800e87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e880:	482c      	ldr	r0, [pc, #176]	; (800e934 <_vfiprintf_r+0x250>)
 800e882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e886:	2206      	movs	r2, #6
 800e888:	f7f1 fcba 	bl	8000200 <memchr>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d03f      	beq.n	800e910 <_vfiprintf_r+0x22c>
 800e890:	4b29      	ldr	r3, [pc, #164]	; (800e938 <_vfiprintf_r+0x254>)
 800e892:	bb1b      	cbnz	r3, 800e8dc <_vfiprintf_r+0x1f8>
 800e894:	9b03      	ldr	r3, [sp, #12]
 800e896:	3307      	adds	r3, #7
 800e898:	f023 0307 	bic.w	r3, r3, #7
 800e89c:	3308      	adds	r3, #8
 800e89e:	9303      	str	r3, [sp, #12]
 800e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a2:	443b      	add	r3, r7
 800e8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8a6:	e767      	b.n	800e778 <_vfiprintf_r+0x94>
 800e8a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8ac:	460c      	mov	r4, r1
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7a5      	b.n	800e7fe <_vfiprintf_r+0x11a>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	3401      	adds	r4, #1
 800e8b6:	9305      	str	r3, [sp, #20]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	f04f 0c0a 	mov.w	ip, #10
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8c4:	3a30      	subs	r2, #48	; 0x30
 800e8c6:	2a09      	cmp	r2, #9
 800e8c8:	d903      	bls.n	800e8d2 <_vfiprintf_r+0x1ee>
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0c5      	beq.n	800e85a <_vfiprintf_r+0x176>
 800e8ce:	9105      	str	r1, [sp, #20]
 800e8d0:	e7c3      	b.n	800e85a <_vfiprintf_r+0x176>
 800e8d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e7f0      	b.n	800e8be <_vfiprintf_r+0x1da>
 800e8dc:	ab03      	add	r3, sp, #12
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	462a      	mov	r2, r5
 800e8e2:	4b16      	ldr	r3, [pc, #88]	; (800e93c <_vfiprintf_r+0x258>)
 800e8e4:	a904      	add	r1, sp, #16
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7fd fdd6 	bl	800c498 <_printf_float>
 800e8ec:	4607      	mov	r7, r0
 800e8ee:	1c78      	adds	r0, r7, #1
 800e8f0:	d1d6      	bne.n	800e8a0 <_vfiprintf_r+0x1bc>
 800e8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8f4:	07d9      	lsls	r1, r3, #31
 800e8f6:	d405      	bmi.n	800e904 <_vfiprintf_r+0x220>
 800e8f8:	89ab      	ldrh	r3, [r5, #12]
 800e8fa:	059a      	lsls	r2, r3, #22
 800e8fc:	d402      	bmi.n	800e904 <_vfiprintf_r+0x220>
 800e8fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e900:	f000 faaf 	bl	800ee62 <__retarget_lock_release_recursive>
 800e904:	89ab      	ldrh	r3, [r5, #12]
 800e906:	065b      	lsls	r3, r3, #25
 800e908:	f53f af12 	bmi.w	800e730 <_vfiprintf_r+0x4c>
 800e90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e90e:	e711      	b.n	800e734 <_vfiprintf_r+0x50>
 800e910:	ab03      	add	r3, sp, #12
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	462a      	mov	r2, r5
 800e916:	4b09      	ldr	r3, [pc, #36]	; (800e93c <_vfiprintf_r+0x258>)
 800e918:	a904      	add	r1, sp, #16
 800e91a:	4630      	mov	r0, r6
 800e91c:	f7fe f860 	bl	800c9e0 <_printf_i>
 800e920:	e7e4      	b.n	800e8ec <_vfiprintf_r+0x208>
 800e922:	bf00      	nop
 800e924:	08011be4 	.word	0x08011be4
 800e928:	08011c04 	.word	0x08011c04
 800e92c:	08011bc4 	.word	0x08011bc4
 800e930:	08011a6c 	.word	0x08011a6c
 800e934:	08011a76 	.word	0x08011a76
 800e938:	0800c499 	.word	0x0800c499
 800e93c:	0800e6c1 	.word	0x0800e6c1
 800e940:	08011a72 	.word	0x08011a72

0800e944 <__swbuf_r>:
 800e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e946:	460e      	mov	r6, r1
 800e948:	4614      	mov	r4, r2
 800e94a:	4605      	mov	r5, r0
 800e94c:	b118      	cbz	r0, 800e956 <__swbuf_r+0x12>
 800e94e:	6983      	ldr	r3, [r0, #24]
 800e950:	b90b      	cbnz	r3, 800e956 <__swbuf_r+0x12>
 800e952:	f000 f9e7 	bl	800ed24 <__sinit>
 800e956:	4b21      	ldr	r3, [pc, #132]	; (800e9dc <__swbuf_r+0x98>)
 800e958:	429c      	cmp	r4, r3
 800e95a:	d12b      	bne.n	800e9b4 <__swbuf_r+0x70>
 800e95c:	686c      	ldr	r4, [r5, #4]
 800e95e:	69a3      	ldr	r3, [r4, #24]
 800e960:	60a3      	str	r3, [r4, #8]
 800e962:	89a3      	ldrh	r3, [r4, #12]
 800e964:	071a      	lsls	r2, r3, #28
 800e966:	d52f      	bpl.n	800e9c8 <__swbuf_r+0x84>
 800e968:	6923      	ldr	r3, [r4, #16]
 800e96a:	b36b      	cbz	r3, 800e9c8 <__swbuf_r+0x84>
 800e96c:	6923      	ldr	r3, [r4, #16]
 800e96e:	6820      	ldr	r0, [r4, #0]
 800e970:	1ac0      	subs	r0, r0, r3
 800e972:	6963      	ldr	r3, [r4, #20]
 800e974:	b2f6      	uxtb	r6, r6
 800e976:	4283      	cmp	r3, r0
 800e978:	4637      	mov	r7, r6
 800e97a:	dc04      	bgt.n	800e986 <__swbuf_r+0x42>
 800e97c:	4621      	mov	r1, r4
 800e97e:	4628      	mov	r0, r5
 800e980:	f000 f93c 	bl	800ebfc <_fflush_r>
 800e984:	bb30      	cbnz	r0, 800e9d4 <__swbuf_r+0x90>
 800e986:	68a3      	ldr	r3, [r4, #8]
 800e988:	3b01      	subs	r3, #1
 800e98a:	60a3      	str	r3, [r4, #8]
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	6022      	str	r2, [r4, #0]
 800e992:	701e      	strb	r6, [r3, #0]
 800e994:	6963      	ldr	r3, [r4, #20]
 800e996:	3001      	adds	r0, #1
 800e998:	4283      	cmp	r3, r0
 800e99a:	d004      	beq.n	800e9a6 <__swbuf_r+0x62>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	07db      	lsls	r3, r3, #31
 800e9a0:	d506      	bpl.n	800e9b0 <__swbuf_r+0x6c>
 800e9a2:	2e0a      	cmp	r6, #10
 800e9a4:	d104      	bne.n	800e9b0 <__swbuf_r+0x6c>
 800e9a6:	4621      	mov	r1, r4
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	f000 f927 	bl	800ebfc <_fflush_r>
 800e9ae:	b988      	cbnz	r0, 800e9d4 <__swbuf_r+0x90>
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9b4:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <__swbuf_r+0x9c>)
 800e9b6:	429c      	cmp	r4, r3
 800e9b8:	d101      	bne.n	800e9be <__swbuf_r+0x7a>
 800e9ba:	68ac      	ldr	r4, [r5, #8]
 800e9bc:	e7cf      	b.n	800e95e <__swbuf_r+0x1a>
 800e9be:	4b09      	ldr	r3, [pc, #36]	; (800e9e4 <__swbuf_r+0xa0>)
 800e9c0:	429c      	cmp	r4, r3
 800e9c2:	bf08      	it	eq
 800e9c4:	68ec      	ldreq	r4, [r5, #12]
 800e9c6:	e7ca      	b.n	800e95e <__swbuf_r+0x1a>
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f000 f81a 	bl	800ea04 <__swsetup_r>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d0cb      	beq.n	800e96c <__swbuf_r+0x28>
 800e9d4:	f04f 37ff 	mov.w	r7, #4294967295
 800e9d8:	e7ea      	b.n	800e9b0 <__swbuf_r+0x6c>
 800e9da:	bf00      	nop
 800e9dc:	08011be4 	.word	0x08011be4
 800e9e0:	08011c04 	.word	0x08011c04
 800e9e4:	08011bc4 	.word	0x08011bc4

0800e9e8 <__ascii_wctomb>:
 800e9e8:	b149      	cbz	r1, 800e9fe <__ascii_wctomb+0x16>
 800e9ea:	2aff      	cmp	r2, #255	; 0xff
 800e9ec:	bf85      	ittet	hi
 800e9ee:	238a      	movhi	r3, #138	; 0x8a
 800e9f0:	6003      	strhi	r3, [r0, #0]
 800e9f2:	700a      	strbls	r2, [r1, #0]
 800e9f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e9f8:	bf98      	it	ls
 800e9fa:	2001      	movls	r0, #1
 800e9fc:	4770      	bx	lr
 800e9fe:	4608      	mov	r0, r1
 800ea00:	4770      	bx	lr
	...

0800ea04 <__swsetup_r>:
 800ea04:	4b32      	ldr	r3, [pc, #200]	; (800ead0 <__swsetup_r+0xcc>)
 800ea06:	b570      	push	{r4, r5, r6, lr}
 800ea08:	681d      	ldr	r5, [r3, #0]
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	b125      	cbz	r5, 800ea1a <__swsetup_r+0x16>
 800ea10:	69ab      	ldr	r3, [r5, #24]
 800ea12:	b913      	cbnz	r3, 800ea1a <__swsetup_r+0x16>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f000 f985 	bl	800ed24 <__sinit>
 800ea1a:	4b2e      	ldr	r3, [pc, #184]	; (800ead4 <__swsetup_r+0xd0>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	d10f      	bne.n	800ea40 <__swsetup_r+0x3c>
 800ea20:	686c      	ldr	r4, [r5, #4]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea28:	0719      	lsls	r1, r3, #28
 800ea2a:	d42c      	bmi.n	800ea86 <__swsetup_r+0x82>
 800ea2c:	06dd      	lsls	r5, r3, #27
 800ea2e:	d411      	bmi.n	800ea54 <__swsetup_r+0x50>
 800ea30:	2309      	movs	r3, #9
 800ea32:	6033      	str	r3, [r6, #0]
 800ea34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea38:	81a3      	strh	r3, [r4, #12]
 800ea3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3e:	e03e      	b.n	800eabe <__swsetup_r+0xba>
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <__swsetup_r+0xd4>)
 800ea42:	429c      	cmp	r4, r3
 800ea44:	d101      	bne.n	800ea4a <__swsetup_r+0x46>
 800ea46:	68ac      	ldr	r4, [r5, #8]
 800ea48:	e7eb      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea4a:	4b24      	ldr	r3, [pc, #144]	; (800eadc <__swsetup_r+0xd8>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	bf08      	it	eq
 800ea50:	68ec      	ldreq	r4, [r5, #12]
 800ea52:	e7e6      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea54:	0758      	lsls	r0, r3, #29
 800ea56:	d512      	bpl.n	800ea7e <__swsetup_r+0x7a>
 800ea58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea5a:	b141      	cbz	r1, 800ea6e <__swsetup_r+0x6a>
 800ea5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea60:	4299      	cmp	r1, r3
 800ea62:	d002      	beq.n	800ea6a <__swsetup_r+0x66>
 800ea64:	4630      	mov	r0, r6
 800ea66:	f7ff fb31 	bl	800e0cc <_free_r>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	2300      	movs	r3, #0
 800ea78:	6063      	str	r3, [r4, #4]
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	f043 0308 	orr.w	r3, r3, #8
 800ea84:	81a3      	strh	r3, [r4, #12]
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	b94b      	cbnz	r3, 800ea9e <__swsetup_r+0x9a>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea94:	d003      	beq.n	800ea9e <__swsetup_r+0x9a>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f000 fa09 	bl	800eeb0 <__smakebuf_r>
 800ea9e:	89a0      	ldrh	r0, [r4, #12]
 800eaa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eaa4:	f010 0301 	ands.w	r3, r0, #1
 800eaa8:	d00a      	beq.n	800eac0 <__swsetup_r+0xbc>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	6963      	ldr	r3, [r4, #20]
 800eab0:	425b      	negs	r3, r3
 800eab2:	61a3      	str	r3, [r4, #24]
 800eab4:	6923      	ldr	r3, [r4, #16]
 800eab6:	b943      	cbnz	r3, 800eaca <__swsetup_r+0xc6>
 800eab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eabc:	d1ba      	bne.n	800ea34 <__swsetup_r+0x30>
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	0781      	lsls	r1, r0, #30
 800eac2:	bf58      	it	pl
 800eac4:	6963      	ldrpl	r3, [r4, #20]
 800eac6:	60a3      	str	r3, [r4, #8]
 800eac8:	e7f4      	b.n	800eab4 <__swsetup_r+0xb0>
 800eaca:	2000      	movs	r0, #0
 800eacc:	e7f7      	b.n	800eabe <__swsetup_r+0xba>
 800eace:	bf00      	nop
 800ead0:	200001b4 	.word	0x200001b4
 800ead4:	08011be4 	.word	0x08011be4
 800ead8:	08011c04 	.word	0x08011c04
 800eadc:	08011bc4 	.word	0x08011bc4

0800eae0 <abort>:
 800eae0:	b508      	push	{r3, lr}
 800eae2:	2006      	movs	r0, #6
 800eae4:	f000 fa54 	bl	800ef90 <raise>
 800eae8:	2001      	movs	r0, #1
 800eaea:	f7f2 fcc9 	bl	8001480 <_exit>
	...

0800eaf0 <__sflush_r>:
 800eaf0:	898a      	ldrh	r2, [r1, #12]
 800eaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	0710      	lsls	r0, r2, #28
 800eafa:	460c      	mov	r4, r1
 800eafc:	d458      	bmi.n	800ebb0 <__sflush_r+0xc0>
 800eafe:	684b      	ldr	r3, [r1, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dc05      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	dc02      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d0f9      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb16:	2300      	movs	r3, #0
 800eb18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb1c:	682f      	ldr	r7, [r5, #0]
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	d032      	beq.n	800eb88 <__sflush_r+0x98>
 800eb22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	075a      	lsls	r2, r3, #29
 800eb28:	d505      	bpl.n	800eb36 <__sflush_r+0x46>
 800eb2a:	6863      	ldr	r3, [r4, #4]
 800eb2c:	1ac0      	subs	r0, r0, r3
 800eb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb30:	b10b      	cbz	r3, 800eb36 <__sflush_r+0x46>
 800eb32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb34:	1ac0      	subs	r0, r0, r3
 800eb36:	2300      	movs	r3, #0
 800eb38:	4602      	mov	r2, r0
 800eb3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb3c:	6a21      	ldr	r1, [r4, #32]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	47b0      	blx	r6
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	d106      	bne.n	800eb56 <__sflush_r+0x66>
 800eb48:	6829      	ldr	r1, [r5, #0]
 800eb4a:	291d      	cmp	r1, #29
 800eb4c:	d82c      	bhi.n	800eba8 <__sflush_r+0xb8>
 800eb4e:	4a2a      	ldr	r2, [pc, #168]	; (800ebf8 <__sflush_r+0x108>)
 800eb50:	40ca      	lsrs	r2, r1
 800eb52:	07d6      	lsls	r6, r2, #31
 800eb54:	d528      	bpl.n	800eba8 <__sflush_r+0xb8>
 800eb56:	2200      	movs	r2, #0
 800eb58:	6062      	str	r2, [r4, #4]
 800eb5a:	04d9      	lsls	r1, r3, #19
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	6022      	str	r2, [r4, #0]
 800eb60:	d504      	bpl.n	800eb6c <__sflush_r+0x7c>
 800eb62:	1c42      	adds	r2, r0, #1
 800eb64:	d101      	bne.n	800eb6a <__sflush_r+0x7a>
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	b903      	cbnz	r3, 800eb6c <__sflush_r+0x7c>
 800eb6a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	602f      	str	r7, [r5, #0]
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d0ca      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <__sflush_r+0x92>
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f7ff faa5 	bl	800e0cc <_free_r>
 800eb82:	2000      	movs	r0, #0
 800eb84:	6360      	str	r0, [r4, #52]	; 0x34
 800eb86:	e7c1      	b.n	800eb0c <__sflush_r+0x1c>
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b0      	blx	r6
 800eb90:	1c41      	adds	r1, r0, #1
 800eb92:	d1c7      	bne.n	800eb24 <__sflush_r+0x34>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c4      	beq.n	800eb24 <__sflush_r+0x34>
 800eb9a:	2b1d      	cmp	r3, #29
 800eb9c:	d001      	beq.n	800eba2 <__sflush_r+0xb2>
 800eb9e:	2b16      	cmp	r3, #22
 800eba0:	d101      	bne.n	800eba6 <__sflush_r+0xb6>
 800eba2:	602f      	str	r7, [r5, #0]
 800eba4:	e7b1      	b.n	800eb0a <__sflush_r+0x1a>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebac:	81a3      	strh	r3, [r4, #12]
 800ebae:	e7ad      	b.n	800eb0c <__sflush_r+0x1c>
 800ebb0:	690f      	ldr	r7, [r1, #16]
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	d0a9      	beq.n	800eb0a <__sflush_r+0x1a>
 800ebb6:	0793      	lsls	r3, r2, #30
 800ebb8:	680e      	ldr	r6, [r1, #0]
 800ebba:	bf08      	it	eq
 800ebbc:	694b      	ldreq	r3, [r1, #20]
 800ebbe:	600f      	str	r7, [r1, #0]
 800ebc0:	bf18      	it	ne
 800ebc2:	2300      	movne	r3, #0
 800ebc4:	eba6 0807 	sub.w	r8, r6, r7
 800ebc8:	608b      	str	r3, [r1, #8]
 800ebca:	f1b8 0f00 	cmp.w	r8, #0
 800ebce:	dd9c      	ble.n	800eb0a <__sflush_r+0x1a>
 800ebd0:	6a21      	ldr	r1, [r4, #32]
 800ebd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebd4:	4643      	mov	r3, r8
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b0      	blx	r6
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	dc06      	bgt.n	800ebee <__sflush_r+0xfe>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe6:	81a3      	strh	r3, [r4, #12]
 800ebe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebec:	e78e      	b.n	800eb0c <__sflush_r+0x1c>
 800ebee:	4407      	add	r7, r0
 800ebf0:	eba8 0800 	sub.w	r8, r8, r0
 800ebf4:	e7e9      	b.n	800ebca <__sflush_r+0xda>
 800ebf6:	bf00      	nop
 800ebf8:	20400001 	.word	0x20400001

0800ebfc <_fflush_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	690b      	ldr	r3, [r1, #16]
 800ec00:	4605      	mov	r5, r0
 800ec02:	460c      	mov	r4, r1
 800ec04:	b913      	cbnz	r3, 800ec0c <_fflush_r+0x10>
 800ec06:	2500      	movs	r5, #0
 800ec08:	4628      	mov	r0, r5
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	b118      	cbz	r0, 800ec16 <_fflush_r+0x1a>
 800ec0e:	6983      	ldr	r3, [r0, #24]
 800ec10:	b90b      	cbnz	r3, 800ec16 <_fflush_r+0x1a>
 800ec12:	f000 f887 	bl	800ed24 <__sinit>
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <_fflush_r+0x6c>)
 800ec18:	429c      	cmp	r4, r3
 800ec1a:	d11b      	bne.n	800ec54 <_fflush_r+0x58>
 800ec1c:	686c      	ldr	r4, [r5, #4]
 800ec1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0ef      	beq.n	800ec06 <_fflush_r+0xa>
 800ec26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec28:	07d0      	lsls	r0, r2, #31
 800ec2a:	d404      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec2c:	0599      	lsls	r1, r3, #22
 800ec2e:	d402      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec32:	f000 f915 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800ec36:	4628      	mov	r0, r5
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f7ff ff59 	bl	800eaf0 <__sflush_r>
 800ec3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec40:	07da      	lsls	r2, r3, #31
 800ec42:	4605      	mov	r5, r0
 800ec44:	d4e0      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	059b      	lsls	r3, r3, #22
 800ec4a:	d4dd      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec4e:	f000 f908 	bl	800ee62 <__retarget_lock_release_recursive>
 800ec52:	e7d9      	b.n	800ec08 <_fflush_r+0xc>
 800ec54:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <_fflush_r+0x70>)
 800ec56:	429c      	cmp	r4, r3
 800ec58:	d101      	bne.n	800ec5e <_fflush_r+0x62>
 800ec5a:	68ac      	ldr	r4, [r5, #8]
 800ec5c:	e7df      	b.n	800ec1e <_fflush_r+0x22>
 800ec5e:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <_fflush_r+0x74>)
 800ec60:	429c      	cmp	r4, r3
 800ec62:	bf08      	it	eq
 800ec64:	68ec      	ldreq	r4, [r5, #12]
 800ec66:	e7da      	b.n	800ec1e <_fflush_r+0x22>
 800ec68:	08011be4 	.word	0x08011be4
 800ec6c:	08011c04 	.word	0x08011c04
 800ec70:	08011bc4 	.word	0x08011bc4

0800ec74 <std>:
 800ec74:	2300      	movs	r3, #0
 800ec76:	b510      	push	{r4, lr}
 800ec78:	4604      	mov	r4, r0
 800ec7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec82:	6083      	str	r3, [r0, #8]
 800ec84:	8181      	strh	r1, [r0, #12]
 800ec86:	6643      	str	r3, [r0, #100]	; 0x64
 800ec88:	81c2      	strh	r2, [r0, #14]
 800ec8a:	6183      	str	r3, [r0, #24]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	2208      	movs	r2, #8
 800ec90:	305c      	adds	r0, #92	; 0x5c
 800ec92:	f7fd fb59 	bl	800c348 <memset>
 800ec96:	4b05      	ldr	r3, [pc, #20]	; (800ecac <std+0x38>)
 800ec98:	6263      	str	r3, [r4, #36]	; 0x24
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <std+0x3c>)
 800ec9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec9e:	4b05      	ldr	r3, [pc, #20]	; (800ecb4 <std+0x40>)
 800eca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eca2:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <std+0x44>)
 800eca4:	6224      	str	r4, [r4, #32]
 800eca6:	6323      	str	r3, [r4, #48]	; 0x30
 800eca8:	bd10      	pop	{r4, pc}
 800ecaa:	bf00      	nop
 800ecac:	0800efc9 	.word	0x0800efc9
 800ecb0:	0800efeb 	.word	0x0800efeb
 800ecb4:	0800f023 	.word	0x0800f023
 800ecb8:	0800f047 	.word	0x0800f047

0800ecbc <_cleanup_r>:
 800ecbc:	4901      	ldr	r1, [pc, #4]	; (800ecc4 <_cleanup_r+0x8>)
 800ecbe:	f000 b8af 	b.w	800ee20 <_fwalk_reent>
 800ecc2:	bf00      	nop
 800ecc4:	0800ebfd 	.word	0x0800ebfd

0800ecc8 <__sfmoreglue>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	2268      	movs	r2, #104	; 0x68
 800eccc:	1e4d      	subs	r5, r1, #1
 800ecce:	4355      	muls	r5, r2
 800ecd0:	460e      	mov	r6, r1
 800ecd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecd6:	f7ff fa65 	bl	800e1a4 <_malloc_r>
 800ecda:	4604      	mov	r4, r0
 800ecdc:	b140      	cbz	r0, 800ecf0 <__sfmoreglue+0x28>
 800ecde:	2100      	movs	r1, #0
 800ece0:	e9c0 1600 	strd	r1, r6, [r0]
 800ece4:	300c      	adds	r0, #12
 800ece6:	60a0      	str	r0, [r4, #8]
 800ece8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ecec:	f7fd fb2c 	bl	800c348 <memset>
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}

0800ecf4 <__sfp_lock_acquire>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	; (800ecfc <__sfp_lock_acquire+0x8>)
 800ecf6:	f000 b8b3 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	200023b1 	.word	0x200023b1

0800ed00 <__sfp_lock_release>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__sfp_lock_release+0x8>)
 800ed02:	f000 b8ae 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed06:	bf00      	nop
 800ed08:	200023b1 	.word	0x200023b1

0800ed0c <__sinit_lock_acquire>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	; (800ed14 <__sinit_lock_acquire+0x8>)
 800ed0e:	f000 b8a7 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ed12:	bf00      	nop
 800ed14:	200023b2 	.word	0x200023b2

0800ed18 <__sinit_lock_release>:
 800ed18:	4801      	ldr	r0, [pc, #4]	; (800ed20 <__sinit_lock_release+0x8>)
 800ed1a:	f000 b8a2 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed1e:	bf00      	nop
 800ed20:	200023b2 	.word	0x200023b2

0800ed24 <__sinit>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	4604      	mov	r4, r0
 800ed28:	f7ff fff0 	bl	800ed0c <__sinit_lock_acquire>
 800ed2c:	69a3      	ldr	r3, [r4, #24]
 800ed2e:	b11b      	cbz	r3, 800ed38 <__sinit+0x14>
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed34:	f7ff bff0 	b.w	800ed18 <__sinit_lock_release>
 800ed38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ed3e:	4b13      	ldr	r3, [pc, #76]	; (800ed8c <__sinit+0x68>)
 800ed40:	4a13      	ldr	r2, [pc, #76]	; (800ed90 <__sinit+0x6c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed46:	42a3      	cmp	r3, r4
 800ed48:	bf04      	itt	eq
 800ed4a:	2301      	moveq	r3, #1
 800ed4c:	61a3      	streq	r3, [r4, #24]
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 f820 	bl	800ed94 <__sfp>
 800ed54:	6060      	str	r0, [r4, #4]
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 f81c 	bl	800ed94 <__sfp>
 800ed5c:	60a0      	str	r0, [r4, #8]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 f818 	bl	800ed94 <__sfp>
 800ed64:	2200      	movs	r2, #0
 800ed66:	60e0      	str	r0, [r4, #12]
 800ed68:	2104      	movs	r1, #4
 800ed6a:	6860      	ldr	r0, [r4, #4]
 800ed6c:	f7ff ff82 	bl	800ec74 <std>
 800ed70:	68a0      	ldr	r0, [r4, #8]
 800ed72:	2201      	movs	r2, #1
 800ed74:	2109      	movs	r1, #9
 800ed76:	f7ff ff7d 	bl	800ec74 <std>
 800ed7a:	68e0      	ldr	r0, [r4, #12]
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	2112      	movs	r1, #18
 800ed80:	f7ff ff78 	bl	800ec74 <std>
 800ed84:	2301      	movs	r3, #1
 800ed86:	61a3      	str	r3, [r4, #24]
 800ed88:	e7d2      	b.n	800ed30 <__sinit+0xc>
 800ed8a:	bf00      	nop
 800ed8c:	0801184c 	.word	0x0801184c
 800ed90:	0800ecbd 	.word	0x0800ecbd

0800ed94 <__sfp>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	4607      	mov	r7, r0
 800ed98:	f7ff ffac 	bl	800ecf4 <__sfp_lock_acquire>
 800ed9c:	4b1e      	ldr	r3, [pc, #120]	; (800ee18 <__sfp+0x84>)
 800ed9e:	681e      	ldr	r6, [r3, #0]
 800eda0:	69b3      	ldr	r3, [r6, #24]
 800eda2:	b913      	cbnz	r3, 800edaa <__sfp+0x16>
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff ffbd 	bl	800ed24 <__sinit>
 800edaa:	3648      	adds	r6, #72	; 0x48
 800edac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800edb0:	3b01      	subs	r3, #1
 800edb2:	d503      	bpl.n	800edbc <__sfp+0x28>
 800edb4:	6833      	ldr	r3, [r6, #0]
 800edb6:	b30b      	cbz	r3, 800edfc <__sfp+0x68>
 800edb8:	6836      	ldr	r6, [r6, #0]
 800edba:	e7f7      	b.n	800edac <__sfp+0x18>
 800edbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edc0:	b9d5      	cbnz	r5, 800edf8 <__sfp+0x64>
 800edc2:	4b16      	ldr	r3, [pc, #88]	; (800ee1c <__sfp+0x88>)
 800edc4:	60e3      	str	r3, [r4, #12]
 800edc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800edca:	6665      	str	r5, [r4, #100]	; 0x64
 800edcc:	f000 f847 	bl	800ee5e <__retarget_lock_init_recursive>
 800edd0:	f7ff ff96 	bl	800ed00 <__sfp_lock_release>
 800edd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eddc:	6025      	str	r5, [r4, #0]
 800edde:	61a5      	str	r5, [r4, #24]
 800ede0:	2208      	movs	r2, #8
 800ede2:	4629      	mov	r1, r5
 800ede4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ede8:	f7fd faae 	bl	800c348 <memset>
 800edec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edf4:	4620      	mov	r0, r4
 800edf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf8:	3468      	adds	r4, #104	; 0x68
 800edfa:	e7d9      	b.n	800edb0 <__sfp+0x1c>
 800edfc:	2104      	movs	r1, #4
 800edfe:	4638      	mov	r0, r7
 800ee00:	f7ff ff62 	bl	800ecc8 <__sfmoreglue>
 800ee04:	4604      	mov	r4, r0
 800ee06:	6030      	str	r0, [r6, #0]
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d1d5      	bne.n	800edb8 <__sfp+0x24>
 800ee0c:	f7ff ff78 	bl	800ed00 <__sfp_lock_release>
 800ee10:	230c      	movs	r3, #12
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	e7ee      	b.n	800edf4 <__sfp+0x60>
 800ee16:	bf00      	nop
 800ee18:	0801184c 	.word	0x0801184c
 800ee1c:	ffff0001 	.word	0xffff0001

0800ee20 <_fwalk_reent>:
 800ee20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee24:	4606      	mov	r6, r0
 800ee26:	4688      	mov	r8, r1
 800ee28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee2c:	2700      	movs	r7, #0
 800ee2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee32:	f1b9 0901 	subs.w	r9, r9, #1
 800ee36:	d505      	bpl.n	800ee44 <_fwalk_reent+0x24>
 800ee38:	6824      	ldr	r4, [r4, #0]
 800ee3a:	2c00      	cmp	r4, #0
 800ee3c:	d1f7      	bne.n	800ee2e <_fwalk_reent+0xe>
 800ee3e:	4638      	mov	r0, r7
 800ee40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee44:	89ab      	ldrh	r3, [r5, #12]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d907      	bls.n	800ee5a <_fwalk_reent+0x3a>
 800ee4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	d003      	beq.n	800ee5a <_fwalk_reent+0x3a>
 800ee52:	4629      	mov	r1, r5
 800ee54:	4630      	mov	r0, r6
 800ee56:	47c0      	blx	r8
 800ee58:	4307      	orrs	r7, r0
 800ee5a:	3568      	adds	r5, #104	; 0x68
 800ee5c:	e7e9      	b.n	800ee32 <_fwalk_reent+0x12>

0800ee5e <__retarget_lock_init_recursive>:
 800ee5e:	4770      	bx	lr

0800ee60 <__retarget_lock_acquire_recursive>:
 800ee60:	4770      	bx	lr

0800ee62 <__retarget_lock_release_recursive>:
 800ee62:	4770      	bx	lr

0800ee64 <__swhatbuf_r>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	b096      	sub	sp, #88	; 0x58
 800ee70:	4614      	mov	r4, r2
 800ee72:	461d      	mov	r5, r3
 800ee74:	da08      	bge.n	800ee88 <__swhatbuf_r+0x24>
 800ee76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	602a      	str	r2, [r5, #0]
 800ee7e:	061a      	lsls	r2, r3, #24
 800ee80:	d410      	bmi.n	800eea4 <__swhatbuf_r+0x40>
 800ee82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee86:	e00e      	b.n	800eea6 <__swhatbuf_r+0x42>
 800ee88:	466a      	mov	r2, sp
 800ee8a:	f000 f903 	bl	800f094 <_fstat_r>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	dbf1      	blt.n	800ee76 <__swhatbuf_r+0x12>
 800ee92:	9a01      	ldr	r2, [sp, #4]
 800ee94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee9c:	425a      	negs	r2, r3
 800ee9e:	415a      	adcs	r2, r3
 800eea0:	602a      	str	r2, [r5, #0]
 800eea2:	e7ee      	b.n	800ee82 <__swhatbuf_r+0x1e>
 800eea4:	2340      	movs	r3, #64	; 0x40
 800eea6:	2000      	movs	r0, #0
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	b016      	add	sp, #88	; 0x58
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eeb0 <__smakebuf_r>:
 800eeb0:	898b      	ldrh	r3, [r1, #12]
 800eeb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeb4:	079d      	lsls	r5, r3, #30
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	460c      	mov	r4, r1
 800eeba:	d507      	bpl.n	800eecc <__smakebuf_r+0x1c>
 800eebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	6123      	str	r3, [r4, #16]
 800eec4:	2301      	movs	r3, #1
 800eec6:	6163      	str	r3, [r4, #20]
 800eec8:	b002      	add	sp, #8
 800eeca:	bd70      	pop	{r4, r5, r6, pc}
 800eecc:	ab01      	add	r3, sp, #4
 800eece:	466a      	mov	r2, sp
 800eed0:	f7ff ffc8 	bl	800ee64 <__swhatbuf_r>
 800eed4:	9900      	ldr	r1, [sp, #0]
 800eed6:	4605      	mov	r5, r0
 800eed8:	4630      	mov	r0, r6
 800eeda:	f7ff f963 	bl	800e1a4 <_malloc_r>
 800eede:	b948      	cbnz	r0, 800eef4 <__smakebuf_r+0x44>
 800eee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee4:	059a      	lsls	r2, r3, #22
 800eee6:	d4ef      	bmi.n	800eec8 <__smakebuf_r+0x18>
 800eee8:	f023 0303 	bic.w	r3, r3, #3
 800eeec:	f043 0302 	orr.w	r3, r3, #2
 800eef0:	81a3      	strh	r3, [r4, #12]
 800eef2:	e7e3      	b.n	800eebc <__smakebuf_r+0xc>
 800eef4:	4b0d      	ldr	r3, [pc, #52]	; (800ef2c <__smakebuf_r+0x7c>)
 800eef6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	6020      	str	r0, [r4, #0]
 800eefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef00:	81a3      	strh	r3, [r4, #12]
 800ef02:	9b00      	ldr	r3, [sp, #0]
 800ef04:	6163      	str	r3, [r4, #20]
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	6120      	str	r0, [r4, #16]
 800ef0a:	b15b      	cbz	r3, 800ef24 <__smakebuf_r+0x74>
 800ef0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef10:	4630      	mov	r0, r6
 800ef12:	f000 f8d1 	bl	800f0b8 <_isatty_r>
 800ef16:	b128      	cbz	r0, 800ef24 <__smakebuf_r+0x74>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	f023 0303 	bic.w	r3, r3, #3
 800ef1e:	f043 0301 	orr.w	r3, r3, #1
 800ef22:	81a3      	strh	r3, [r4, #12]
 800ef24:	89a0      	ldrh	r0, [r4, #12]
 800ef26:	4305      	orrs	r5, r0
 800ef28:	81a5      	strh	r5, [r4, #12]
 800ef2a:	e7cd      	b.n	800eec8 <__smakebuf_r+0x18>
 800ef2c:	0800ecbd 	.word	0x0800ecbd

0800ef30 <_malloc_usable_size_r>:
 800ef30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef34:	1f18      	subs	r0, r3, #4
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bfbc      	itt	lt
 800ef3a:	580b      	ldrlt	r3, [r1, r0]
 800ef3c:	18c0      	addlt	r0, r0, r3
 800ef3e:	4770      	bx	lr

0800ef40 <_raise_r>:
 800ef40:	291f      	cmp	r1, #31
 800ef42:	b538      	push	{r3, r4, r5, lr}
 800ef44:	4604      	mov	r4, r0
 800ef46:	460d      	mov	r5, r1
 800ef48:	d904      	bls.n	800ef54 <_raise_r+0x14>
 800ef4a:	2316      	movs	r3, #22
 800ef4c:	6003      	str	r3, [r0, #0]
 800ef4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef52:	bd38      	pop	{r3, r4, r5, pc}
 800ef54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef56:	b112      	cbz	r2, 800ef5e <_raise_r+0x1e>
 800ef58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef5c:	b94b      	cbnz	r3, 800ef72 <_raise_r+0x32>
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f000 f830 	bl	800efc4 <_getpid_r>
 800ef64:	462a      	mov	r2, r5
 800ef66:	4601      	mov	r1, r0
 800ef68:	4620      	mov	r0, r4
 800ef6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef6e:	f000 b817 	b.w	800efa0 <_kill_r>
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d00a      	beq.n	800ef8c <_raise_r+0x4c>
 800ef76:	1c59      	adds	r1, r3, #1
 800ef78:	d103      	bne.n	800ef82 <_raise_r+0x42>
 800ef7a:	2316      	movs	r3, #22
 800ef7c:	6003      	str	r3, [r0, #0]
 800ef7e:	2001      	movs	r0, #1
 800ef80:	e7e7      	b.n	800ef52 <_raise_r+0x12>
 800ef82:	2400      	movs	r4, #0
 800ef84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef88:	4628      	mov	r0, r5
 800ef8a:	4798      	blx	r3
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7e0      	b.n	800ef52 <_raise_r+0x12>

0800ef90 <raise>:
 800ef90:	4b02      	ldr	r3, [pc, #8]	; (800ef9c <raise+0xc>)
 800ef92:	4601      	mov	r1, r0
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	f7ff bfd3 	b.w	800ef40 <_raise_r>
 800ef9a:	bf00      	nop
 800ef9c:	200001b4 	.word	0x200001b4

0800efa0 <_kill_r>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	4d07      	ldr	r5, [pc, #28]	; (800efc0 <_kill_r+0x20>)
 800efa4:	2300      	movs	r3, #0
 800efa6:	4604      	mov	r4, r0
 800efa8:	4608      	mov	r0, r1
 800efaa:	4611      	mov	r1, r2
 800efac:	602b      	str	r3, [r5, #0]
 800efae:	f7f2 fa57 	bl	8001460 <_kill>
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	d102      	bne.n	800efbc <_kill_r+0x1c>
 800efb6:	682b      	ldr	r3, [r5, #0]
 800efb8:	b103      	cbz	r3, 800efbc <_kill_r+0x1c>
 800efba:	6023      	str	r3, [r4, #0]
 800efbc:	bd38      	pop	{r3, r4, r5, pc}
 800efbe:	bf00      	nop
 800efc0:	200023ac 	.word	0x200023ac

0800efc4 <_getpid_r>:
 800efc4:	f7f2 ba44 	b.w	8001450 <_getpid>

0800efc8 <__sread>:
 800efc8:	b510      	push	{r4, lr}
 800efca:	460c      	mov	r4, r1
 800efcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd0:	f000 f894 	bl	800f0fc <_read_r>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	bfab      	itete	ge
 800efd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efda:	89a3      	ldrhlt	r3, [r4, #12]
 800efdc:	181b      	addge	r3, r3, r0
 800efde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efe2:	bfac      	ite	ge
 800efe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800efe6:	81a3      	strhlt	r3, [r4, #12]
 800efe8:	bd10      	pop	{r4, pc}

0800efea <__swrite>:
 800efea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efee:	461f      	mov	r7, r3
 800eff0:	898b      	ldrh	r3, [r1, #12]
 800eff2:	05db      	lsls	r3, r3, #23
 800eff4:	4605      	mov	r5, r0
 800eff6:	460c      	mov	r4, r1
 800eff8:	4616      	mov	r6, r2
 800effa:	d505      	bpl.n	800f008 <__swrite+0x1e>
 800effc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f000:	2302      	movs	r3, #2
 800f002:	2200      	movs	r2, #0
 800f004:	f000 f868 	bl	800f0d8 <_lseek_r>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f012:	81a3      	strh	r3, [r4, #12]
 800f014:	4632      	mov	r2, r6
 800f016:	463b      	mov	r3, r7
 800f018:	4628      	mov	r0, r5
 800f01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01e:	f000 b817 	b.w	800f050 <_write_r>

0800f022 <__sseek>:
 800f022:	b510      	push	{r4, lr}
 800f024:	460c      	mov	r4, r1
 800f026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02a:	f000 f855 	bl	800f0d8 <_lseek_r>
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	bf15      	itete	ne
 800f034:	6560      	strne	r0, [r4, #84]	; 0x54
 800f036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f03e:	81a3      	strheq	r3, [r4, #12]
 800f040:	bf18      	it	ne
 800f042:	81a3      	strhne	r3, [r4, #12]
 800f044:	bd10      	pop	{r4, pc}

0800f046 <__sclose>:
 800f046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f04a:	f000 b813 	b.w	800f074 <_close_r>
	...

0800f050 <_write_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4d07      	ldr	r5, [pc, #28]	; (800f070 <_write_r+0x20>)
 800f054:	4604      	mov	r4, r0
 800f056:	4608      	mov	r0, r1
 800f058:	4611      	mov	r1, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	602a      	str	r2, [r5, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	f7f2 fa35 	bl	80014ce <_write>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_write_r+0x1e>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_write_r+0x1e>
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	200023ac 	.word	0x200023ac

0800f074 <_close_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d06      	ldr	r5, [pc, #24]	; (800f090 <_close_r+0x1c>)
 800f078:	2300      	movs	r3, #0
 800f07a:	4604      	mov	r4, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	602b      	str	r3, [r5, #0]
 800f080:	f7f2 fa41 	bl	8001506 <_close>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_close_r+0x1a>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_close_r+0x1a>
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	200023ac 	.word	0x200023ac

0800f094 <_fstat_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4d07      	ldr	r5, [pc, #28]	; (800f0b4 <_fstat_r+0x20>)
 800f098:	2300      	movs	r3, #0
 800f09a:	4604      	mov	r4, r0
 800f09c:	4608      	mov	r0, r1
 800f09e:	4611      	mov	r1, r2
 800f0a0:	602b      	str	r3, [r5, #0]
 800f0a2:	f7f2 fa3c 	bl	800151e <_fstat>
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	d102      	bne.n	800f0b0 <_fstat_r+0x1c>
 800f0aa:	682b      	ldr	r3, [r5, #0]
 800f0ac:	b103      	cbz	r3, 800f0b0 <_fstat_r+0x1c>
 800f0ae:	6023      	str	r3, [r4, #0]
 800f0b0:	bd38      	pop	{r3, r4, r5, pc}
 800f0b2:	bf00      	nop
 800f0b4:	200023ac 	.word	0x200023ac

0800f0b8 <_isatty_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4d06      	ldr	r5, [pc, #24]	; (800f0d4 <_isatty_r+0x1c>)
 800f0bc:	2300      	movs	r3, #0
 800f0be:	4604      	mov	r4, r0
 800f0c0:	4608      	mov	r0, r1
 800f0c2:	602b      	str	r3, [r5, #0]
 800f0c4:	f7f2 fa3b 	bl	800153e <_isatty>
 800f0c8:	1c43      	adds	r3, r0, #1
 800f0ca:	d102      	bne.n	800f0d2 <_isatty_r+0x1a>
 800f0cc:	682b      	ldr	r3, [r5, #0]
 800f0ce:	b103      	cbz	r3, 800f0d2 <_isatty_r+0x1a>
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	200023ac 	.word	0x200023ac

0800f0d8 <_lseek_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d07      	ldr	r5, [pc, #28]	; (800f0f8 <_lseek_r+0x20>)
 800f0dc:	4604      	mov	r4, r0
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f7f2 fa34 	bl	8001554 <_lseek>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_lseek_r+0x1e>
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_lseek_r+0x1e>
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	200023ac 	.word	0x200023ac

0800f0fc <_read_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4d07      	ldr	r5, [pc, #28]	; (800f11c <_read_r+0x20>)
 800f100:	4604      	mov	r4, r0
 800f102:	4608      	mov	r0, r1
 800f104:	4611      	mov	r1, r2
 800f106:	2200      	movs	r2, #0
 800f108:	602a      	str	r2, [r5, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	f7f2 f9c2 	bl	8001494 <_read>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_read_r+0x1e>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_read_r+0x1e>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	200023ac 	.word	0x200023ac

0800f120 <_init>:
 800f120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f122:	bf00      	nop
 800f124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f126:	bc08      	pop	{r3}
 800f128:	469e      	mov	lr, r3
 800f12a:	4770      	bx	lr

0800f12c <_fini>:
 800f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12e:	bf00      	nop
 800f130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f132:	bc08      	pop	{r3}
 800f134:	469e      	mov	lr, r3
 800f136:	4770      	bx	lr


LAB2_Gyroscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f8c  0800acc0  0800acc0  0001acc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc4c  0800cc4c  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc4c  0800cc4c  0001cc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc54  0800cc54  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc54  0800cc54  0001cc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc58  0800cc58  0001cc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800cc5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002025c  2**0
                  CONTENTS
 10 .bss          000002e4  2000025c  2000025c  0002025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000540  20000540  0002025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001199c  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f6e  00000000  00000000  00031c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00034b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  00035c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265ac  00000000  00000000  00036b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138a7  00000000  00000000  0005d11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd1f  00000000  00000000  000709c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001506e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005934  00000000  00000000  00150734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aca8 	.word	0x0800aca8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000260 	.word	0x20000260
 80001ec:	0800aca8 	.word	0x0800aca8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09e      	sub	sp, #120	; 0x78
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f001 fff1 	bl	8003004 <HAL_Init>
  BSP_GYRO_Init();
 8001022:	f001 f913 	bl	800224c <BSP_GYRO_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f859 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 f8ff 	bl	800122c <MX_GPIO_Init>
  MX_SPI5_Init();
 800102e:	f000 f8c7 	bl	80011c0 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8001032:	f001 f985 	bl	8002340 <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8001036:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800103a:	2001      	movs	r0, #1
 800103c:	f001 fa02 	bl	8002444 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8001040:	2001      	movs	r0, #1
 8001042:	f001 fa63 	bl	800250c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8001046:	f001 fc15 	bl	8002874 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <main+0xb4>)
 800104c:	f001 fad0 	bl	80025f0 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001050:	481e      	ldr	r0, [pc, #120]	; (80010cc <main+0xb4>)
 8001052:	f001 fa83 	bl	800255c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	f001 fa67 	bl	800252c <BSP_LCD_SetTextColor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BSP_GYRO_GetXYZ(pfData);
 800105e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001062:	4618      	mov	r0, r3
 8001064:	f001 f958 	bl	8002318 <BSP_GYRO_GetXYZ>
    /* USER CODE END WHILE */
	 sprintf(buffer, "X %4f", pfData[0]);
 8001068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa7c 	bl	8000568 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4638      	mov	r0, r7
 8001076:	4916      	ldr	r1, [pc, #88]	; (80010d0 <main+0xb8>)
 8001078:	f006 f826 	bl	80070c8 <siprintf>
	 BSP_LCD_DisplayStringAtLine(2, buffer);
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	2002      	movs	r0, #2
 8001082:	f001 fbdf 	bl	8002844 <BSP_LCD_DisplayStringAtLine>
	 sprintf(buffer, "Y %4f", pfData[1]);
 8001086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa6d 	bl	8000568 <__aeabi_f2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4638      	mov	r0, r7
 8001094:	490f      	ldr	r1, [pc, #60]	; (80010d4 <main+0xbc>)
 8001096:	f006 f817 	bl	80070c8 <siprintf>
	 BSP_LCD_DisplayStringAtLine(3, buffer);
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	2003      	movs	r0, #3
 80010a0:	f001 fbd0 	bl	8002844 <BSP_LCD_DisplayStringAtLine>
	 sprintf(buffer, "Z %4f", pfData[2]);
 80010a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa5e 	bl	8000568 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4638      	mov	r0, r7
 80010b2:	4909      	ldr	r1, [pc, #36]	; (80010d8 <main+0xc0>)
 80010b4:	f006 f808 	bl	80070c8 <siprintf>
	 BSP_LCD_DisplayStringAtLine(4, buffer);
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	2004      	movs	r0, #4
 80010be:	f001 fbc1 	bl	8002844 <BSP_LCD_DisplayStringAtLine>
	 HAL_Delay(1000);
 80010c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c6:	f002 f80f 	bl	80030e8 <HAL_Delay>
  {
 80010ca:	e7c8      	b.n	800105e <main+0x46>
 80010cc:	ff0000ff 	.word	0xff0000ff
 80010d0:	0800acc0 	.word	0x0800acc0
 80010d4:	0800acc8 	.word	0x0800acc8
 80010d8:	0800acd0 	.word	0x0800acd0

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 f964 	bl	80063b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <SystemClock_Config+0xdc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <SystemClock_Config+0xdc>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <SystemClock_Config+0xdc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <SystemClock_Config+0xe0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a25      	ldr	r2, [pc, #148]	; (80011bc <SystemClock_Config+0xe0>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <SystemClock_Config+0xe0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001146:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800114c:	2308      	movs	r3, #8
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001150:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800115a:	2304      	movs	r3, #4
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	4618      	mov	r0, r3
 8001164:	f003 fb46 	bl	80047f4 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800116e:	f000 f885 	bl	800127c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001172:	f003 faef 	bl	8004754 <HAL_PWREx_EnableOverDrive>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800117c:	f000 f87e 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2105      	movs	r1, #5
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fda0 	bl	8004ce4 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011aa:	f000 f867 	bl	800127c <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_SPI5_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_SPI5_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_SPI5_Init+0x64>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_SPI5_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI5_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_SPI5_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_SPI5_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SPI5_Init+0x64>)
 80011ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_SPI5_Init+0x64>)
 80011f4:	2218      	movs	r2, #24
 80011f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI5_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_SPI5_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI5_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SPI5_Init+0x64>)
 800120c:	220a      	movs	r2, #10
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_SPI5_Init+0x64>)
 8001212:	f004 f9ae 	bl	8005572 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 f82e 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000278 	.word	0x20000278
 8001228:	40015000 	.word	0x40015000

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_GPIO_Init+0x4c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <MX_GPIO_Init+0x4c>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_GPIO_Init+0x4c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_GPIO_Init+0x4c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <MX_GPIO_Init+0x4c>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_GPIO_Init+0x4c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_SPI_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12c      	bne.n	8001354 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_SPI_MspInit+0x88>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_SPI_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001332:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001344:	2305      	movs	r3, #5
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_SPI_MspInit+0x8c>)
 8001350:	f002 fc54 	bl	8003bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40015000 	.word	0x40015000
 8001360:	40023800 	.word	0x40023800
 8001364:	40021400 	.word	0x40021400

08001368 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_SPI_MspDeInit+0x30>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10a      	bne.n	8001390 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_SPI_MspDeInit+0x34>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_SPI_MspDeInit+0x34>)
 8001380:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001386:	f44f 7160 	mov.w	r1, #896	; 0x380
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_SPI_MspDeInit+0x38>)
 800138c:	f002 fde2 	bl	8003f54 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40015000 	.word	0x40015000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40021400 	.word	0x40021400

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f001 fe5a 	bl	80030a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_kill>:

int _kill(int pid, int sig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001412:	f004 ffa7 	bl	8006364 <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2216      	movs	r2, #22
 800141a:	601a      	str	r2, [r3, #0]
	return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_exit>:

void _exit (int status)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffe7 	bl	8001408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800143a:	e7fe      	b.n	800143a <_exit+0x12>

0800143c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	605a      	str	r2, [r3, #4]
	return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:

int _isatty(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f004 ff0c 	bl	8006364 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20030000 	.word	0x20030000
 8001578:	00000400 	.word	0x00000400
 800157c:	200002d0 	.word	0x200002d0
 8001580:	20000540 	.word	0x20000540

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d2:	f7ff ffd7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f004 fecb 	bl	8006370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff fd1d 	bl	8001018 <main>
  bx  lr    
 80015de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80015ec:	0800cc5c 	.word	0x0800cc5c
  ldr r2, =_sbss
 80015f0:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80015f4:	20000540 	.word	0x20000540

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>

080015fa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80015fe:	f000 fc73 	bl	8001ee8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001602:	20ca      	movs	r0, #202	; 0xca
 8001604:	f000 f95d 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001608:	20c3      	movs	r0, #195	; 0xc3
 800160a:	f000 f967 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800160e:	2008      	movs	r0, #8
 8001610:	f000 f964 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001614:	2050      	movs	r0, #80	; 0x50
 8001616:	f000 f961 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800161a:	20cf      	movs	r0, #207	; 0xcf
 800161c:	f000 f951 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001620:	2000      	movs	r0, #0
 8001622:	f000 f95b 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001626:	20c1      	movs	r0, #193	; 0xc1
 8001628:	f000 f958 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800162c:	2030      	movs	r0, #48	; 0x30
 800162e:	f000 f955 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001632:	20ed      	movs	r0, #237	; 0xed
 8001634:	f000 f945 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001638:	2064      	movs	r0, #100	; 0x64
 800163a:	f000 f94f 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 f94c 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001644:	2012      	movs	r0, #18
 8001646:	f000 f949 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800164a:	2081      	movs	r0, #129	; 0x81
 800164c:	f000 f946 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001650:	20e8      	movs	r0, #232	; 0xe8
 8001652:	f000 f936 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001656:	2085      	movs	r0, #133	; 0x85
 8001658:	f000 f940 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800165c:	2000      	movs	r0, #0
 800165e:	f000 f93d 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001662:	2078      	movs	r0, #120	; 0x78
 8001664:	f000 f93a 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001668:	20cb      	movs	r0, #203	; 0xcb
 800166a:	f000 f92a 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800166e:	2039      	movs	r0, #57	; 0x39
 8001670:	f000 f934 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001674:	202c      	movs	r0, #44	; 0x2c
 8001676:	f000 f931 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800167a:	2000      	movs	r0, #0
 800167c:	f000 f92e 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001680:	2034      	movs	r0, #52	; 0x34
 8001682:	f000 f92b 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001686:	2002      	movs	r0, #2
 8001688:	f000 f928 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800168c:	20f7      	movs	r0, #247	; 0xf7
 800168e:	f000 f918 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001692:	2020      	movs	r0, #32
 8001694:	f000 f922 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001698:	20ea      	movs	r0, #234	; 0xea
 800169a:	f000 f912 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f91c 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f919 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80016aa:	20b1      	movs	r0, #177	; 0xb1
 80016ac:	f000 f909 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 f913 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80016b6:	201b      	movs	r0, #27
 80016b8:	f000 f910 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80016bc:	20b6      	movs	r0, #182	; 0xb6
 80016be:	f000 f900 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80016c2:	200a      	movs	r0, #10
 80016c4:	f000 f90a 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80016c8:	20a2      	movs	r0, #162	; 0xa2
 80016ca:	f000 f907 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80016ce:	20c0      	movs	r0, #192	; 0xc0
 80016d0:	f000 f8f7 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80016d4:	2010      	movs	r0, #16
 80016d6:	f000 f901 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80016da:	20c1      	movs	r0, #193	; 0xc1
 80016dc:	f000 f8f1 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80016e0:	2010      	movs	r0, #16
 80016e2:	f000 f8fb 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80016e6:	20c5      	movs	r0, #197	; 0xc5
 80016e8:	f000 f8eb 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80016ec:	2045      	movs	r0, #69	; 0x45
 80016ee:	f000 f8f5 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80016f2:	2015      	movs	r0, #21
 80016f4:	f000 f8f2 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80016f8:	20c7      	movs	r0, #199	; 0xc7
 80016fa:	f000 f8e2 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80016fe:	2090      	movs	r0, #144	; 0x90
 8001700:	f000 f8ec 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001704:	2036      	movs	r0, #54	; 0x36
 8001706:	f000 f8dc 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800170a:	20c8      	movs	r0, #200	; 0xc8
 800170c:	f000 f8e6 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001710:	20f2      	movs	r0, #242	; 0xf2
 8001712:	f000 f8d6 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f8e0 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800171c:	20b0      	movs	r0, #176	; 0xb0
 800171e:	f000 f8d0 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001722:	20c2      	movs	r0, #194	; 0xc2
 8001724:	f000 f8da 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001728:	20b6      	movs	r0, #182	; 0xb6
 800172a:	f000 f8ca 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800172e:	200a      	movs	r0, #10
 8001730:	f000 f8d4 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001734:	20a7      	movs	r0, #167	; 0xa7
 8001736:	f000 f8d1 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800173a:	2027      	movs	r0, #39	; 0x27
 800173c:	f000 f8ce 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001740:	2004      	movs	r0, #4
 8001742:	f000 f8cb 	bl	80018dc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001746:	202a      	movs	r0, #42	; 0x2a
 8001748:	f000 f8bb 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800174c:	2000      	movs	r0, #0
 800174e:	f000 f8c5 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f8c2 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f8bf 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800175e:	20ef      	movs	r0, #239	; 0xef
 8001760:	f000 f8bc 	bl	80018dc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001764:	202b      	movs	r0, #43	; 0x2b
 8001766:	f000 f8ac 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f8b6 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f8b3 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001776:	2001      	movs	r0, #1
 8001778:	f000 f8b0 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800177c:	203f      	movs	r0, #63	; 0x3f
 800177e:	f000 f8ad 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001782:	20f6      	movs	r0, #246	; 0xf6
 8001784:	f000 f89d 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001788:	2001      	movs	r0, #1
 800178a:	f000 f8a7 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f8a4 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001794:	2006      	movs	r0, #6
 8001796:	f000 f8a1 	bl	80018dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800179a:	202c      	movs	r0, #44	; 0x2c
 800179c:	f000 f891 	bl	80018c2 <ili9341_WriteReg>
  LCD_Delay(200);
 80017a0:	20c8      	movs	r0, #200	; 0xc8
 80017a2:	f000 fc8f 	bl	80020c4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80017a6:	2026      	movs	r0, #38	; 0x26
 80017a8:	f000 f88b 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 f895 	bl	80018dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80017b2:	20e0      	movs	r0, #224	; 0xe0
 80017b4:	f000 f885 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80017b8:	200f      	movs	r0, #15
 80017ba:	f000 f88f 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80017be:	2029      	movs	r0, #41	; 0x29
 80017c0:	f000 f88c 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80017c4:	2024      	movs	r0, #36	; 0x24
 80017c6:	f000 f889 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80017ca:	200c      	movs	r0, #12
 80017cc:	f000 f886 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80017d0:	200e      	movs	r0, #14
 80017d2:	f000 f883 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80017d6:	2009      	movs	r0, #9
 80017d8:	f000 f880 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80017dc:	204e      	movs	r0, #78	; 0x4e
 80017de:	f000 f87d 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80017e2:	2078      	movs	r0, #120	; 0x78
 80017e4:	f000 f87a 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80017e8:	203c      	movs	r0, #60	; 0x3c
 80017ea:	f000 f877 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80017ee:	2009      	movs	r0, #9
 80017f0:	f000 f874 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80017f4:	2013      	movs	r0, #19
 80017f6:	f000 f871 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80017fa:	2005      	movs	r0, #5
 80017fc:	f000 f86e 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001800:	2017      	movs	r0, #23
 8001802:	f000 f86b 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001806:	2011      	movs	r0, #17
 8001808:	f000 f868 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800180c:	2000      	movs	r0, #0
 800180e:	f000 f865 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001812:	20e1      	movs	r0, #225	; 0xe1
 8001814:	f000 f855 	bl	80018c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f85f 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800181e:	2016      	movs	r0, #22
 8001820:	f000 f85c 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001824:	201b      	movs	r0, #27
 8001826:	f000 f859 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800182a:	2004      	movs	r0, #4
 800182c:	f000 f856 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001830:	2011      	movs	r0, #17
 8001832:	f000 f853 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001836:	2007      	movs	r0, #7
 8001838:	f000 f850 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800183c:	2031      	movs	r0, #49	; 0x31
 800183e:	f000 f84d 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001842:	2033      	movs	r0, #51	; 0x33
 8001844:	f000 f84a 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001848:	2042      	movs	r0, #66	; 0x42
 800184a:	f000 f847 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800184e:	2005      	movs	r0, #5
 8001850:	f000 f844 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001854:	200c      	movs	r0, #12
 8001856:	f000 f841 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800185a:	200a      	movs	r0, #10
 800185c:	f000 f83e 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001860:	2028      	movs	r0, #40	; 0x28
 8001862:	f000 f83b 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001866:	202f      	movs	r0, #47	; 0x2f
 8001868:	f000 f838 	bl	80018dc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800186c:	200f      	movs	r0, #15
 800186e:	f000 f835 	bl	80018dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001872:	2011      	movs	r0, #17
 8001874:	f000 f825 	bl	80018c2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001878:	20c8      	movs	r0, #200	; 0xc8
 800187a:	f000 fc23 	bl	80020c4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800187e:	2029      	movs	r0, #41	; 0x29
 8001880:	f000 f81f 	bl	80018c2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001884:	202c      	movs	r0, #44	; 0x2c
 8001886:	f000 f81c 	bl	80018c2 <ili9341_WriteReg>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}

0800188e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001892:	f000 fb29 	bl	8001ee8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001896:	2103      	movs	r1, #3
 8001898:	20d3      	movs	r0, #211	; 0xd3
 800189a:	f000 f82c 	bl	80018f6 <ili9341_ReadData>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29b      	uxth	r3, r3
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80018aa:	2029      	movs	r0, #41	; 0x29
 80018ac:	f000 f809 	bl	80018c2 <ili9341_WriteReg>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80018b8:	2028      	movs	r0, #40	; 0x28
 80018ba:	f000 f802 	bl	80018c2 <ili9341_WriteReg>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fba4 	bl	800201c <LCD_IO_WriteReg>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fb75 	bl	8001fd8 <LCD_IO_WriteData>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	460a      	mov	r2, r1
 8001900:	80fb      	strh	r3, [r7, #6]
 8001902:	4613      	mov	r3, r2
 8001904:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001906:	797a      	ldrb	r2, [r7, #5]
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fba7 	bl	8002060 <LCD_IO_ReadData>
 8001912:	4603      	mov	r3, r0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001920:	23f0      	movs	r3, #240	; 0xf0
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001930:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800194c:	f000 fbc6 	bl	80020dc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001956:	f107 030f 	add.w	r3, r7, #15
 800195a:	2201      	movs	r2, #1
 800195c:	2120      	movs	r1, #32
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fc08 	bl	8002174 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	b29b      	uxth	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800196e:	f107 030f 	add.w	r3, r7, #15
 8001972:	2201      	movs	r2, #1
 8001974:	2123      	movs	r1, #35	; 0x23
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fbfc 	bl	8002174 <GYRO_IO_Write>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001998:	f000 fba0 	bl	80020dc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	2201      	movs	r2, #1
 80019a0:	210f      	movs	r1, #15
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fc18 	bl	80021d8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	2201      	movs	r2, #1
 80019bc:	2124      	movs	r1, #36	; 0x24
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fc0a 	bl	80021d8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	2201      	movs	r2, #1
 80019d2:	2124      	movs	r1, #36	; 0x24
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fbcd 	bl	8002174 <GYRO_IO_Write>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80019f6:	f107 030f 	add.w	r3, r7, #15
 80019fa:	2201      	movs	r2, #1
 80019fc:	2120      	movs	r1, #32
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fbb8 	bl	8002174 <GYRO_IO_Write>
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001a1e:	f107 030f 	add.w	r3, r7, #15
 8001a22:	2201      	movs	r2, #1
 8001a24:	2130      	movs	r1, #48	; 0x30
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fbd6 	bl	80021d8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001a2c:	f107 030e 	add.w	r3, r7, #14
 8001a30:	2201      	movs	r2, #1
 8001a32:	2122      	movs	r1, #34	; 0x22
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fbcf 	bl	80021d8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	121b      	asrs	r3, r3, #8
 8001a4a:	b25a      	sxtb	r2, r3
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	f023 0320 	bic.w	r3, r3, #32
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001a6e:	f107 030f 	add.w	r3, r7, #15
 8001a72:	2201      	movs	r2, #1
 8001a74:	2130      	movs	r1, #48	; 0x30
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fb7c 	bl	8002174 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001a7c:	f107 030e 	add.w	r3, r7, #14
 8001a80:	2201      	movs	r2, #1
 8001a82:	2122      	movs	r1, #34	; 0x22
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fb75 	bl	8002174 <GYRO_IO_Write>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001a9c:	f107 030f 	add.w	r3, r7, #15
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2122      	movs	r1, #34	; 0x22
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fb97 	bl	80021d8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e00c      	b.n	8001ae0 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d109      	bne.n	8001ae0 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	f023 0308 	bic.w	r3, r3, #8
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ae0:	f107 030f 	add.w	r3, r7, #15
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2122      	movs	r1, #34	; 0x22
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fb43 	bl	8002174 <GYRO_IO_Write>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b00:	f107 030f 	add.w	r3, r7, #15
 8001b04:	2201      	movs	r2, #1
 8001b06:	2122      	movs	r1, #34	; 0x22
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fb65 	bl	80021d8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e009      	b.n	8001b38 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d106      	bne.n	8001b38 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	f023 0308 	bic.w	r3, r3, #8
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b38:	f107 030f 	add.w	r3, r7, #15
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2122      	movs	r1, #34	; 0x22
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fb17 	bl	8002174 <GYRO_IO_Write>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001b58:	f107 030f 	add.w	r3, r7, #15
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2121      	movs	r1, #33	; 0x21
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fb39 	bl	80021d8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001b7a:	f107 030f 	add.w	r3, r7, #15
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2121      	movs	r1, #33	; 0x21
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 faf6 	bl	8002174 <GYRO_IO_Write>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b9a:	f107 030f 	add.w	r3, r7, #15
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2124      	movs	r1, #36	; 0x24
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fb18 	bl	80021d8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	f023 0310 	bic.w	r3, r3, #16
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001bbc:	f107 030f 	add.w	r3, r7, #15
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2124      	movs	r1, #36	; 0x24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fad5 	bl	8002174 <GYRO_IO_Write>
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	2300      	movs	r3, #0
 8001be2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001bfc:	f107 030f 	add.w	r3, r7, #15
 8001c00:	2201      	movs	r2, #1
 8001c02:	2123      	movs	r1, #35	; 0x23
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fae7 	bl	80021d8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	2206      	movs	r2, #6
 8001c10:	2128      	movs	r1, #40	; 0x28
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fae0 	bl	80021d8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d123      	bne.n	8001c6a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	e01c      	b.n	8001c62 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	3328      	adds	r3, #40	; 0x28
 8001c30:	443b      	add	r3, r7
 8001c32:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	3328      	adds	r3, #40	; 0x28
 8001c42:	443b      	add	r3, r7
 8001c44:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	3328      	adds	r3, #40	; 0x28
 8001c56:	443b      	add	r3, r7
 8001c58:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	623b      	str	r3, [r7, #32]
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	dddf      	ble.n	8001c28 <L3GD20_ReadXYZAngRate+0x54>
 8001c68:	e022      	b.n	8001cb0 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	e01c      	b.n	8001caa <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	3328      	adds	r3, #40	; 0x28
 8001c76:	443b      	add	r3, r7
 8001c78:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	3301      	adds	r3, #1
 8001c88:	3328      	adds	r3, #40	; 0x28
 8001c8a:	443b      	add	r3, r7
 8001c8c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	3328      	adds	r3, #40	; 0x28
 8001c9e:	443b      	add	r3, r7
 8001ca0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	dddf      	ble.n	8001c70 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d00c      	beq.n	8001cd4 <L3GD20_ReadXYZAngRate+0x100>
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	dc0d      	bgt.n	8001cda <L3GD20_ReadXYZAngRate+0x106>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <L3GD20_ReadXYZAngRate+0xf4>
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d003      	beq.n	8001cce <L3GD20_ReadXYZAngRate+0xfa>
 8001cc6:	e008      	b.n	8001cda <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <L3GD20_ReadXYZAngRate+0x14c>)
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001ccc:	e005      	b.n	8001cda <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <L3GD20_ReadXYZAngRate+0x150>)
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001cd2:	e002      	b.n	8001cda <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <L3GD20_ReadXYZAngRate+0x154>)
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001cd8:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	e016      	b.n	8001d0e <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	3328      	adds	r3, #40	; 0x28
 8001ce6:	443b      	add	r3, r7
 8001ce8:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d04:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	dde5      	ble.n	8001ce0 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	410c0000 	.word	0x410c0000
 8001d24:	418c0000 	.word	0x418c0000
 8001d28:	428c0000 	.word	0x428c0000

08001d2c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001d30:	4819      	ldr	r0, [pc, #100]	; (8001d98 <SPIx_Init+0x6c>)
 8001d32:	f004 f8be 	bl	8005eb2 <HAL_SPI_GetState>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d12b      	bne.n	8001d94 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <SPIx_Init+0x6c>)
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <SPIx_Init+0x70>)
 8001d40:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <SPIx_Init+0x6c>)
 8001d44:	2218      	movs	r2, #24
 8001d46:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <SPIx_Init+0x6c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <SPIx_Init+0x6c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <SPIx_Init+0x6c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <SPIx_Init+0x6c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <SPIx_Init+0x6c>)
 8001d62:	2207      	movs	r2, #7
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <SPIx_Init+0x6c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <SPIx_Init+0x6c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <SPIx_Init+0x6c>)
 8001d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d78:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <SPIx_Init+0x6c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SPIx_Init+0x6c>)
 8001d82:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d86:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <SPIx_Init+0x6c>)
 8001d8a:	f000 f873 	bl	8001e74 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d8e:	4802      	ldr	r0, [pc, #8]	; (8001d98 <SPIx_Init+0x6c>)
 8001d90:	f003 fbef 	bl	8005572 <HAL_SPI_Init>
  } 
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200002d4 	.word	0x200002d4
 8001d9c:	40015000 	.word	0x40015000

08001da0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <SPIx_Read+0x38>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f107 0108 	add.w	r1, r7, #8
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <SPIx_Read+0x3c>)
 8001dbc:	f003 fdc6 	bl	800594c <HAL_SPI_Receive>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001dca:	f000 f847 	bl	8001e5c <SPIx_Error>
  }
  
  return readvalue;
 8001dce:	68bb      	ldr	r3, [r7, #8]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000070 	.word	0x20000070
 8001ddc:	200002d4 	.word	0x200002d4

08001de0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <SPIx_Write+0x34>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1db9      	adds	r1, r7, #6
 8001df4:	2201      	movs	r2, #1
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <SPIx_Write+0x38>)
 8001df8:	f003 fc6c 	bl	80056d4 <HAL_SPI_Transmit>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e06:	f000 f829 	bl	8001e5c <SPIx_Error>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000070 	.word	0x20000070
 8001e18:	200002d4 	.word	0x200002d4

08001e1c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <SPIx_WriteRead+0x38>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f107 020f 	add.w	r2, r7, #15
 8001e32:	1df9      	adds	r1, r7, #7
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2301      	movs	r3, #1
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <SPIx_WriteRead+0x3c>)
 8001e3a:	f003 fe98 	bl	8005b6e <HAL_SPI_TransmitReceive>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001e44:	f000 f80a 	bl	8001e5c <SPIx_Error>
  }
  
  return receivedbyte;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000070 	.word	0x20000070
 8001e58:	200002d4 	.word	0x200002d4

08001e5c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <SPIx_Error+0x14>)
 8001e62:	f003 fc0f 	bl	8005684 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001e66:	f7ff ff61 	bl	8001d2c <SPIx_Init>
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200002d4 	.word	0x200002d4

08001e74 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <SPIx_MspInit+0x6c>)
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <SPIx_MspInit+0x6c>)
 8001e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <SPIx_MspInit+0x6c>)
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <SPIx_MspInit+0x6c>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <SPIx_MspInit+0x6c>)
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <SPIx_MspInit+0x6c>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001eb4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <SPIx_MspInit+0x70>)
 8001ed2:	f001 fe93 	bl	8003bfc <HAL_GPIO_Init>
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40021400 	.word	0x40021400

08001ee8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <LCD_IO_Init+0xe0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d164      	bne.n	8001fc0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001ef6:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <LCD_IO_Init+0xe0>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a31      	ldr	r2, [pc, #196]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4827      	ldr	r0, [pc, #156]	; (8001fd0 <LCD_IO_Init+0xe8>)
 8001f32:	f001 fe63 	bl	8003bfc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <LCD_IO_Init+0xe8>)
 8001f6c:	f001 fe46 	bl	8003bfc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <LCD_IO_Init+0xe4>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <LCD_IO_Init+0xec>)
 8001fa4:	f001 fe2a 	bl	8003bfc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2104      	movs	r1, #4
 8001fac:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <LCD_IO_Init+0xec>)
 8001fae:	f002 f8dd 	bl	800416c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <LCD_IO_Init+0xec>)
 8001fb8:	f002 f8d8 	bl	800416c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001fbc:	f7ff feb6 	bl	8001d2c <SPIx_Init>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2000032c 	.word	0x2000032c
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40020800 	.word	0x40020800

08001fd8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe8:	480a      	ldr	r0, [pc, #40]	; (8002014 <LCD_IO_WriteData+0x3c>)
 8001fea:	f002 f8bf 	bl	800416c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	4809      	ldr	r0, [pc, #36]	; (8002018 <LCD_IO_WriteData+0x40>)
 8001ff4:	f002 f8ba 	bl	800416c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fef0 	bl	8001de0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002000:	2201      	movs	r2, #1
 8002002:	2104      	movs	r1, #4
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <LCD_IO_WriteData+0x40>)
 8002006:	f002 f8b1 	bl	800416c <HAL_GPIO_WritePin>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40020800 	.word	0x40020800

0800201c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800202c:	480a      	ldr	r0, [pc, #40]	; (8002058 <LCD_IO_WriteReg+0x3c>)
 800202e:	f002 f89d 	bl	800416c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002032:	2200      	movs	r2, #0
 8002034:	2104      	movs	r1, #4
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <LCD_IO_WriteReg+0x40>)
 8002038:	f002 f898 	bl	800416c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	b29b      	uxth	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fecd 	bl	8001de0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002046:	2201      	movs	r2, #1
 8002048:	2104      	movs	r1, #4
 800204a:	4804      	ldr	r0, [pc, #16]	; (800205c <LCD_IO_WriteReg+0x40>)
 800204c:	f002 f88e 	bl	800416c <HAL_GPIO_WritePin>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40020800 	.word	0x40020800

08002060 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	460a      	mov	r2, r1
 800206a:	80fb      	strh	r3, [r7, #6]
 800206c:	4613      	mov	r3, r2
 800206e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002074:	2200      	movs	r2, #0
 8002076:	2104      	movs	r1, #4
 8002078:	4810      	ldr	r0, [pc, #64]	; (80020bc <LCD_IO_ReadData+0x5c>)
 800207a:	f002 f877 	bl	800416c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002084:	480e      	ldr	r0, [pc, #56]	; (80020c0 <LCD_IO_ReadData+0x60>)
 8002086:	f002 f871 	bl	800416c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fea7 	bl	8001de0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002092:	797b      	ldrb	r3, [r7, #5]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fe83 	bl	8001da0 <SPIx_Read>
 800209a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <LCD_IO_ReadData+0x60>)
 80020a4:	f002 f862 	bl	800416c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020a8:	2201      	movs	r2, #1
 80020aa:	2104      	movs	r1, #4
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <LCD_IO_ReadData+0x5c>)
 80020ae:	f002 f85d 	bl	800416c <HAL_GPIO_WritePin>
  
  return readvalue;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40020c00 	.word	0x40020c00

080020c4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f001 f80b 	bl	80030e8 <HAL_Delay>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <GYRO_IO_Init+0x8c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <GYRO_IO_Init+0x8c>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <GYRO_IO_Init+0x8c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80020fe:	2302      	movs	r3, #2
 8002100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	4619      	mov	r1, r3
 8002114:	4815      	ldr	r0, [pc, #84]	; (800216c <GYRO_IO_Init+0x90>)
 8002116:	f001 fd71 	bl	8003bfc <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800211a:	2201      	movs	r2, #1
 800211c:	2102      	movs	r1, #2
 800211e:	4813      	ldr	r0, [pc, #76]	; (800216c <GYRO_IO_Init+0x90>)
 8002120:	f002 f824 	bl	800416c <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <GYRO_IO_Init+0x8c>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <GYRO_IO_Init+0x8c>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <GYRO_IO_Init+0x8c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002140:	2306      	movs	r3, #6
 8002142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4619      	mov	r1, r3
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <GYRO_IO_Init+0x94>)
 8002158:	f001 fd50 	bl	8003bfc <HAL_GPIO_Init>

  SPIx_Init();
 800215c:	f7ff fde6 	bl	8001d2c <SPIx_Init>
}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	40020800 	.word	0x40020800
 8002170:	40020000 	.word	0x40020000

08002174 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
 8002180:	4613      	mov	r3, r2
 8002182:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002184:	883b      	ldrh	r3, [r7, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d903      	bls.n	8002192 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002190:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002192:	2200      	movs	r2, #0
 8002194:	2102      	movs	r1, #2
 8002196:	480f      	ldr	r0, [pc, #60]	; (80021d4 <GYRO_IO_Write+0x60>)
 8002198:	f001 ffe8 	bl	800416c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe3c 	bl	8001e1c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80021a4:	e00a      	b.n	80021bc <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fe36 	bl	8001e1c <SPIx_WriteRead>
    NumByteToWrite--;
 80021b0:	883b      	ldrh	r3, [r7, #0]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3301      	adds	r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80021bc:	883b      	ldrh	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f1      	bne.n	80021a6 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80021c2:	2201      	movs	r2, #1
 80021c4:	2102      	movs	r1, #2
 80021c6:	4803      	ldr	r0, [pc, #12]	; (80021d4 <GYRO_IO_Write+0x60>)
 80021c8:	f001 ffd0 	bl	800416c <HAL_GPIO_WritePin>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40020800 	.word	0x40020800

080021d8 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
 80021e4:	4613      	mov	r3, r2
 80021e6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80021e8:	883b      	ldrh	r3, [r7, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d904      	bls.n	80021f8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80021f4:	70fb      	strb	r3, [r7, #3]
 80021f6:	e003      	b.n	8002200 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021fe:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002200:	2200      	movs	r2, #0
 8002202:	2102      	movs	r1, #2
 8002204:	4810      	ldr	r0, [pc, #64]	; (8002248 <GYRO_IO_Read+0x70>)
 8002206:	f001 ffb1 	bl	800416c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fe05 	bl	8001e1c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002212:	e00c      	b.n	800222e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff fe01 	bl	8001e1c <SPIx_WriteRead>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002222:	883b      	ldrh	r3, [r7, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3301      	adds	r3, #1
 800222c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800222e:	883b      	ldrh	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ef      	bne.n	8002214 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002234:	2201      	movs	r2, #1
 8002236:	2102      	movs	r1, #2
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <GYRO_IO_Read+0x70>)
 800223a:	f001 ff97 	bl	800416c <HAL_GPIO_WritePin>
}  
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40020800 	.word	0x40020800

0800224c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002256:	2300      	movs	r3, #0
 8002258:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800225a:	2300      	movs	r3, #0
 800225c:	703b      	strb	r3, [r7, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <BSP_GYRO_Init+0xc4>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4798      	blx	r3
 8002268:	4603      	mov	r3, r0
 800226a:	2bd4      	cmp	r3, #212	; 0xd4
 800226c:	d005      	beq.n	800227a <BSP_GYRO_Init+0x2e>
 800226e:	4b28      	ldr	r3, [pc, #160]	; (8002310 <BSP_GYRO_Init+0xc4>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4798      	blx	r3
 8002274:	4603      	mov	r3, r0
 8002276:	2bd5      	cmp	r3, #213	; 0xd5
 8002278:	d145      	bne.n	8002306 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <BSP_GYRO_Init+0xc8>)
 800227c:	4a24      	ldr	r2, [pc, #144]	; (8002310 <BSP_GYRO_Init+0xc4>)
 800227e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002280:	2308      	movs	r3, #8
 8002282:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002284:	2300      	movs	r3, #0
 8002286:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002288:	2307      	movs	r3, #7
 800228a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800228c:	2330      	movs	r3, #48	; 0x30
 800228e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002290:	2300      	movs	r3, #0
 8002292:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002294:	2300      	movs	r3, #0
 8002296:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002298:	2310      	movs	r3, #16
 800229a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800229c:	793a      	ldrb	r2, [r7, #4]
 800229e:	797b      	ldrb	r3, [r7, #5]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80022a4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80022b2:	7a3a      	ldrb	r2, [r7, #8]
 80022b4:	7a7b      	ldrb	r3, [r7, #9]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80022ba:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80022bc:	4313      	orrs	r3, r2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	89bb      	ldrh	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <BSP_GYRO_Init+0xc8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	89ba      	ldrh	r2, [r7, #12]
 80022d4:	4610      	mov	r0, r2
 80022d6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80022d8:	2300      	movs	r3, #0
 80022da:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80022dc:	2300      	movs	r3, #0
 80022de:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80022e0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80022e2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <BSP_GYRO_Init+0xc8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	89ba      	ldrh	r2, [r7, #12]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	4610      	mov	r0, r2
 80022f6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <BSP_GYRO_Init+0xc8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	2010      	movs	r0, #16
 8002300:	4798      	blx	r3

    ret = GYRO_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	2000003c 	.word	0x2000003c
 8002314:	20000330 	.word	0x20000330

08002318 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <BSP_GYRO_GetXYZ+0x24>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <BSP_GYRO_GetXYZ+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
  }
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000330 	.word	0x20000330

08002340 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <BSP_LCD_Init+0xbc>)
 8002346:	4a2e      	ldr	r2, [pc, #184]	; (8002400 <BSP_LCD_Init+0xc0>)
 8002348:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <BSP_LCD_Init+0xbc>)
 800234c:	2209      	movs	r2, #9
 800234e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <BSP_LCD_Init+0xbc>)
 8002352:	2201      	movs	r2, #1
 8002354:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <BSP_LCD_Init+0xbc>)
 8002358:	221d      	movs	r2, #29
 800235a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <BSP_LCD_Init+0xbc>)
 800235e:	2203      	movs	r2, #3
 8002360:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <BSP_LCD_Init+0xbc>)
 8002364:	f240 120d 	movw	r2, #269	; 0x10d
 8002368:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <BSP_LCD_Init+0xbc>)
 800236c:	f240 1243 	movw	r2, #323	; 0x143
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <BSP_LCD_Init+0xbc>)
 8002374:	f240 1217 	movw	r2, #279	; 0x117
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <BSP_LCD_Init+0xbc>)
 800237c:	f240 1247 	movw	r2, #327	; 0x147
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <BSP_LCD_Init+0xbc>)
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <BSP_LCD_Init+0xbc>)
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <BSP_LCD_Init+0xbc>)
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <BSP_LCD_Init+0xc4>)
 800239c:	2208      	movs	r2, #8
 800239e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <BSP_LCD_Init+0xc4>)
 80023a2:	22c0      	movs	r2, #192	; 0xc0
 80023a4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <BSP_LCD_Init+0xc4>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <BSP_LCD_Init+0xc4>)
 80023ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80023b4:	4813      	ldr	r0, [pc, #76]	; (8002404 <BSP_LCD_Init+0xc4>)
 80023b6:	f002 fe81 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <BSP_LCD_Init+0xbc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <BSP_LCD_Init+0xbc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <BSP_LCD_Init+0xbc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <BSP_LCD_Init+0xbc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80023d2:	f000 fa5f 	bl	8002894 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80023d6:	4809      	ldr	r0, [pc, #36]	; (80023fc <BSP_LCD_Init+0xbc>)
 80023d8:	f001 fee2 	bl	80041a0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <BSP_LCD_Init+0xc8>)
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <BSP_LCD_Init+0xcc>)
 80023e0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <BSP_LCD_Init+0xc8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80023ea:	f000 fc41 	bl	8002c70 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80023ee:	4808      	ldr	r0, [pc, #32]	; (8002410 <BSP_LCD_Init+0xd0>)
 80023f0:	f000 f8ce 	bl	8002590 <BSP_LCD_SetFont>

  return LCD_OK;
 80023f4:	2300      	movs	r3, #0
}  
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000334 	.word	0x20000334
 8002400:	40016800 	.word	0x40016800
 8002404:	2000041c 	.word	0x2000041c
 8002408:	20000468 	.word	0x20000468
 800240c:	20000004 	.word	0x20000004
 8002410:	20000074 	.word	0x20000074

08002414 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <BSP_LCD_GetXSize+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	4798      	blx	r3
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000468 	.word	0x20000468

0800242c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <BSP_LCD_GetYSize+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	4798      	blx	r3
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000468 	.word	0x20000468

08002444 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002444:	b580      	push	{r7, lr}
 8002446:	b090      	sub	sp, #64	; 0x40
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002454:	f7ff ffde 	bl	8002414 <BSP_LCD_GetXSize>
 8002458:	4603      	mov	r3, r0
 800245a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002460:	f7ff ffe4 	bl	800242c <BSP_LCD_GetYSize>
 8002464:	4603      	mov	r3, r0
 8002466:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002470:	23ff      	movs	r3, #255	; 0xff
 8002472:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800248a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002490:	2307      	movs	r3, #7
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002494:	f7ff ffbe 	bl	8002414 <BSP_LCD_GetXSize>
 8002498:	4603      	mov	r3, r0
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800249c:	f7ff ffc6 	bl	800242c <BSP_LCD_GetYSize>
 80024a0:	4603      	mov	r3, r0
 80024a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80024a4:	88fa      	ldrh	r2, [r7, #6]
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4619      	mov	r1, r3
 80024ac:	4814      	ldr	r0, [pc, #80]	; (8002500 <BSP_LCD_LayerDefaultInit+0xbc>)
 80024ae:	f001 ff51 	bl	8004354 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	4913      	ldr	r1, [pc, #76]	; (8002504 <BSP_LCD_LayerDefaultInit+0xc0>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3304      	adds	r3, #4
 80024c2:	f04f 32ff 	mov.w	r2, #4294967295
 80024c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	490e      	ldr	r1, [pc, #56]	; (8002504 <BSP_LCD_LayerDefaultInit+0xc0>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3308      	adds	r3, #8
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <BSP_LCD_LayerDefaultInit+0xc4>)
 80024da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	4909      	ldr	r1, [pc, #36]	; (8002504 <BSP_LCD_LayerDefaultInit+0xc0>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80024ee:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <BSP_LCD_LayerDefaultInit+0xbc>)
 80024f2:	f001 ff6d 	bl	80043d0 <HAL_LTDC_EnableDither>
}
 80024f6:	bf00      	nop
 80024f8:	3740      	adds	r7, #64	; 0x40
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000334 	.word	0x20000334
 8002504:	20000450 	.word	0x20000450
 8002508:	20000074 	.word	0x20000074

0800250c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <BSP_LCD_SelectLayer+0x1c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	2000044c 	.word	0x2000044c

0800252c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <BSP_LCD_SetTextColor+0x28>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <BSP_LCD_SetTextColor+0x2c>)
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	2000044c 	.word	0x2000044c
 8002558:	20000450 	.word	0x20000450

0800255c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <BSP_LCD_SetBackColor+0x2c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4908      	ldr	r1, [pc, #32]	; (800258c <BSP_LCD_SetBackColor+0x30>)
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	3304      	adds	r3, #4
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	601a      	str	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000044c 	.word	0x2000044c
 800258c:	20000450 	.word	0x20000450

08002590 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <BSP_LCD_SetFont+0x2c>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4908      	ldr	r1, [pc, #32]	; (80025c0 <BSP_LCD_SetFont+0x30>)
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3308      	adds	r3, #8
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	2000044c 	.word	0x2000044c
 80025c0:	20000450 	.word	0x20000450

080025c4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <BSP_LCD_GetFont+0x24>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <BSP_LCD_GetFont+0x28>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3308      	adds	r3, #8
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	2000044c 	.word	0x2000044c
 80025ec:	20000450 	.word	0x20000450

080025f0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <BSP_LCD_Clear+0x48>)
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <BSP_LCD_Clear+0x48>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <BSP_LCD_Clear+0x4c>)
 8002602:	2134      	movs	r1, #52	; 0x34
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	335c      	adds	r3, #92	; 0x5c
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461e      	mov	r6, r3
 8002610:	f7ff ff00 	bl	8002414 <BSP_LCD_GetXSize>
 8002614:	4605      	mov	r5, r0
 8002616:	f7ff ff09 	bl	800242c <BSP_LCD_GetYSize>
 800261a:	4602      	mov	r2, r0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	2300      	movs	r3, #0
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	462a      	mov	r2, r5
 8002628:	4631      	mov	r1, r6
 800262a:	4620      	mov	r0, r4
 800262c:	f000 fae8 	bl	8002c00 <FillBuffer>
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002638:	2000044c 	.word	0x2000044c
 800263c:	20000334 	.word	0x20000334

08002640 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
 800264a:	460b      	mov	r3, r1
 800264c:	80bb      	strh	r3, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <BSP_LCD_DisplayChar+0x80>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	491b      	ldr	r1, [pc, #108]	; (80026c4 <BSP_LCD_DisplayChar+0x84>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3308      	adds	r3, #8
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <BSP_LCD_DisplayChar+0x80>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4c14      	ldr	r4, [pc, #80]	; (80026c4 <BSP_LCD_DisplayChar+0x84>)
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4423      	add	r3, r4
 800267e:	3308      	adds	r3, #8
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002684:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <BSP_LCD_DisplayChar+0x80>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4c0d      	ldr	r4, [pc, #52]	; (80026c4 <BSP_LCD_DisplayChar+0x84>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4423      	add	r3, r4
 8002698:	3308      	adds	r3, #8
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	889b      	ldrh	r3, [r3, #4]
 800269e:	3307      	adds	r3, #7
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da00      	bge.n	80026a6 <BSP_LCD_DisplayChar+0x66>
 80026a4:	3307      	adds	r3, #7
 80026a6:	10db      	asrs	r3, r3, #3
 80026a8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80026ac:	18ca      	adds	r2, r1, r3
 80026ae:	88b9      	ldrh	r1, [r7, #4]
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f9ea 	bl	8002a8c <DrawChar>
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}
 80026c0:	2000044c 	.word	0x2000044c
 80026c4:	20000450 	.word	0x20000450

080026c8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80026c8:	b5b0      	push	{r4, r5, r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60ba      	str	r2, [r7, #8]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	81fb      	strh	r3, [r7, #14]
 80026d6:	460b      	mov	r3, r1
 80026d8:	81bb      	strh	r3, [r7, #12]
 80026da:	4613      	mov	r3, r2
 80026dc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80026de:	2301      	movs	r3, #1
 80026e0:	83fb      	strh	r3, [r7, #30]
 80026e2:	2300      	movs	r3, #0
 80026e4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80026f2:	e002      	b.n	80026fa <BSP_LCD_DisplayStringAt+0x32>
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	3301      	adds	r3, #1
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	617a      	str	r2, [r7, #20]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f6      	bne.n	80026f4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002706:	f7ff fe85 	bl	8002414 <BSP_LCD_GetXSize>
 800270a:	4601      	mov	r1, r0
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <BSP_LCD_DisplayStringAt+0x174>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	484b      	ldr	r0, [pc, #300]	; (8002840 <BSP_LCD_DisplayStringAt+0x178>)
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4403      	add	r3, r0
 800271c:	3308      	adds	r3, #8
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	889b      	ldrh	r3, [r3, #4]
 8002722:	fbb1 f3f3 	udiv	r3, r1, r3
 8002726:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d01c      	beq.n	8002768 <BSP_LCD_DisplayStringAt+0xa0>
 800272e:	2b03      	cmp	r3, #3
 8002730:	dc33      	bgt.n	800279a <BSP_LCD_DisplayStringAt+0xd2>
 8002732:	2b01      	cmp	r3, #1
 8002734:	d002      	beq.n	800273c <BSP_LCD_DisplayStringAt+0x74>
 8002736:	2b02      	cmp	r3, #2
 8002738:	d019      	beq.n	800276e <BSP_LCD_DisplayStringAt+0xa6>
 800273a:	e02e      	b.n	800279a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad1      	subs	r1, r2, r3
 8002742:	4b3e      	ldr	r3, [pc, #248]	; (800283c <BSP_LCD_DisplayStringAt+0x174>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	483e      	ldr	r0, [pc, #248]	; (8002840 <BSP_LCD_DisplayStringAt+0x178>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4403      	add	r3, r0
 8002752:	3308      	adds	r3, #8
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	889b      	ldrh	r3, [r3, #4]
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	89fb      	ldrh	r3, [r7, #14]
 8002762:	4413      	add	r3, r2
 8002764:	83fb      	strh	r3, [r7, #30]
      break;
 8002766:	e01b      	b.n	80027a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002768:	89fb      	ldrh	r3, [r7, #14]
 800276a:	83fb      	strh	r3, [r7, #30]
      break;
 800276c:	e018      	b.n	80027a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	b299      	uxth	r1, r3
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <BSP_LCD_DisplayStringAt+0x174>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4831      	ldr	r0, [pc, #196]	; (8002840 <BSP_LCD_DisplayStringAt+0x178>)
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4403      	add	r3, r0
 8002786:	3308      	adds	r3, #8
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	889b      	ldrh	r3, [r3, #4]
 800278c:	fb11 f303 	smulbb	r3, r1, r3
 8002790:	b29a      	uxth	r2, r3
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	4413      	add	r3, r2
 8002796:	83fb      	strh	r3, [r7, #30]
      break;
 8002798:	e002      	b.n	80027a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	83fb      	strh	r3, [r7, #30]
      break;
 800279e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80027a0:	e01a      	b.n	80027d8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	89b9      	ldrh	r1, [r7, #12]
 80027a8:	8bfb      	ldrh	r3, [r7, #30]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff48 	bl	8002640 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <BSP_LCD_DisplayStringAt+0x174>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4922      	ldr	r1, [pc, #136]	; (8002840 <BSP_LCD_DisplayStringAt+0x178>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3308      	adds	r3, #8
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	889a      	ldrh	r2, [r3, #4]
 80027c6:	8bfb      	ldrh	r3, [r7, #30]
 80027c8:	4413      	add	r3, r2
 80027ca:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	3301      	adds	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
    i++;
 80027d2:	8bbb      	ldrh	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2dc      	uxtb	r4, r3
 80027e6:	f7ff fe15 	bl	8002414 <BSP_LCD_GetXSize>
 80027ea:	8bb9      	ldrh	r1, [r7, #28]
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <BSP_LCD_DisplayStringAt+0x174>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4d13      	ldr	r5, [pc, #76]	; (8002840 <BSP_LCD_DisplayStringAt+0x178>)
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	442b      	add	r3, r5
 80027fc:	3308      	adds	r3, #8
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	889b      	ldrh	r3, [r3, #4]
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	1ac3      	subs	r3, r0, r3
 8002808:	b299      	uxth	r1, r3
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <BSP_LCD_DisplayStringAt+0x174>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	480c      	ldr	r0, [pc, #48]	; (8002840 <BSP_LCD_DisplayStringAt+0x178>)
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	3308      	adds	r3, #8
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	889b      	ldrh	r3, [r3, #4]
 8002820:	4299      	cmp	r1, r3
 8002822:	bf2c      	ite	cs
 8002824:	2301      	movcs	r3, #1
 8002826:	2300      	movcc	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4023      	ands	r3, r4
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1b7      	bne.n	80027a2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002832:	bf00      	nop
 8002834:	bf00      	nop
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}
 800283c:	2000044c 	.word	0x2000044c
 8002840:	20000450 	.word	0x20000450

08002844 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002850:	f7ff feb8 	bl	80025c4 <BSP_LCD_GetFont>
 8002854:	4603      	mov	r3, r0
 8002856:	88db      	ldrh	r3, [r3, #6]
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	fb12 f303 	smulbb	r3, r2, r3
 800285e:	b299      	uxth	r1, r3
 8002860:	2303      	movs	r3, #3
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff ff2f 	bl	80026c8 <BSP_LCD_DisplayStringAt>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <BSP_LCD_DisplayOn+0x1c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002882:	4b03      	ldr	r3, [pc, #12]	; (8002890 <BSP_LCD_DisplayOn+0x1c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4798      	blx	r3
  }
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000468 	.word	0x20000468

08002894 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08e      	sub	sp, #56	; 0x38
 8002898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a60      	ldr	r2, [pc, #384]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028b2:	623b      	str	r3, [r7, #32]
 80028b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a59      	ldr	r2, [pc, #356]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a4b      	ldr	r2, [pc, #300]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a44      	ldr	r2, [pc, #272]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a3d      	ldr	r2, [pc, #244]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a36      	ldr	r2, [pc, #216]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 800294c:	f043 0320 	orr.w	r3, r3, #32
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <BSP_LCD_MspInit+0x190>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800297a:	f641 0358 	movw	r3, #6232	; 0x1858
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002988:	2302      	movs	r3, #2
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800298c:	230e      	movs	r3, #14
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	4824      	ldr	r0, [pc, #144]	; (8002a28 <BSP_LCD_MspInit+0x194>)
 8002998:	f001 f930 	bl	8003bfc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800299c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a6:	4619      	mov	r1, r3
 80029a8:	4820      	ldr	r0, [pc, #128]	; (8002a2c <BSP_LCD_MspInit+0x198>)
 80029aa:	f001 f927 	bl	8003bfc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80029ae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	481d      	ldr	r0, [pc, #116]	; (8002a30 <BSP_LCD_MspInit+0x19c>)
 80029bc:	f001 f91e 	bl	8003bfc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80029c0:	2348      	movs	r3, #72	; 0x48
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80029c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	481a      	ldr	r0, [pc, #104]	; (8002a34 <BSP_LCD_MspInit+0x1a0>)
 80029cc:	f001 f916 	bl	8003bfc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80029d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029da:	4619      	mov	r1, r3
 80029dc:	4816      	ldr	r0, [pc, #88]	; (8002a38 <BSP_LCD_MspInit+0x1a4>)
 80029de:	f001 f90d 	bl	8003bfc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80029e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	4813      	ldr	r0, [pc, #76]	; (8002a3c <BSP_LCD_MspInit+0x1a8>)
 80029f0:	f001 f904 	bl	8003bfc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80029f4:	2303      	movs	r3, #3
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80029f8:	2309      	movs	r3, #9
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a00:	4619      	mov	r1, r3
 8002a02:	480a      	ldr	r0, [pc, #40]	; (8002a2c <BSP_LCD_MspInit+0x198>)
 8002a04:	f001 f8fa 	bl	8003bfc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002a08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a12:	4619      	mov	r1, r3
 8002a14:	4809      	ldr	r0, [pc, #36]	; (8002a3c <BSP_LCD_MspInit+0x1a8>)
 8002a16:	f001 f8f1 	bl	8003bfc <HAL_GPIO_Init>
}
 8002a1a:	bf00      	nop
 8002a1c:	3738      	adds	r7, #56	; 0x38
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021400 	.word	0x40021400
 8002a3c:	40021800 	.word	0x40021800

08002a40 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	603a      	str	r2, [r7, #0]
 8002a4a:	80fb      	strh	r3, [r7, #6]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <BSP_LCD_DrawPixel+0x44>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <BSP_LCD_DrawPixel+0x48>)
 8002a56:	2134      	movs	r1, #52	; 0x34
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	335c      	adds	r3, #92	; 0x5c
 8002a60:	681c      	ldr	r4, [r3, #0]
 8002a62:	88bd      	ldrh	r5, [r7, #4]
 8002a64:	f7ff fcd6 	bl	8002414 <BSP_LCD_GetXSize>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	fb03 f205 	mul.w	r2, r3, r5
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4423      	add	r3, r4
 8002a76:	461a      	mov	r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bdb0      	pop	{r4, r5, r7, pc}
 8002a84:	2000044c 	.word	0x2000044c
 8002a88:	20000334 	.word	0x20000334

08002a8c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	603a      	str	r2, [r7, #0]
 8002a96:	80fb      	strh	r3, [r7, #6]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002aa8:	4b53      	ldr	r3, [pc, #332]	; (8002bf8 <DrawChar+0x16c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4953      	ldr	r1, [pc, #332]	; (8002bfc <DrawChar+0x170>)
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3308      	adds	r3, #8
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	88db      	ldrh	r3, [r3, #6]
 8002abe:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <DrawChar+0x16c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	494d      	ldr	r1, [pc, #308]	; (8002bfc <DrawChar+0x170>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	889b      	ldrh	r3, [r3, #4]
 8002ad6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002ad8:	8a3b      	ldrh	r3, [r7, #16]
 8002ada:	3307      	adds	r3, #7
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	da00      	bge.n	8002ae2 <DrawChar+0x56>
 8002ae0:	3307      	adds	r3, #7
 8002ae2:	10db      	asrs	r3, r3, #3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8a3b      	ldrh	r3, [r7, #16]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e076      	b.n	8002be6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002af8:	8a3b      	ldrh	r3, [r7, #16]
 8002afa:	3307      	adds	r3, #7
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	da00      	bge.n	8002b02 <DrawChar+0x76>
 8002b00:	3307      	adds	r3, #7
 8002b02:	10db      	asrs	r3, r3, #3
 8002b04:	461a      	mov	r2, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002b12:	8a3b      	ldrh	r3, [r7, #16]
 8002b14:	3307      	adds	r3, #7
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da00      	bge.n	8002b1c <DrawChar+0x90>
 8002b1a:	3307      	adds	r3, #7
 8002b1c:	10db      	asrs	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d002      	beq.n	8002b28 <DrawChar+0x9c>
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d004      	beq.n	8002b30 <DrawChar+0xa4>
 8002b26:	e00c      	b.n	8002b42 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
      break;
 8002b2e:	e016      	b.n	8002b5e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	3201      	adds	r2, #1
 8002b3a:	7812      	ldrb	r2, [r2, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
      break;
 8002b40:	e00d      	b.n	8002b5e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	4313      	orrs	r3, r2
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	3202      	adds	r2, #2
 8002b56:	7812      	ldrb	r2, [r2, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
      break;
 8002b5c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e036      	b.n	8002bd2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002b64:	8a3a      	ldrh	r2, [r7, #16]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	2201      	movs	r2, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	4413      	add	r3, r2
 8002b88:	b298      	uxth	r0, r3
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <DrawChar+0x16c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	491b      	ldr	r1, [pc, #108]	; (8002bfc <DrawChar+0x170>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f7ff ff4e 	bl	8002a40 <BSP_LCD_DrawPixel>
 8002ba4:	e012      	b.n	8002bcc <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	4413      	add	r3, r2
 8002bae:	b298      	uxth	r0, r3
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <DrawChar+0x16c>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4911      	ldr	r1, [pc, #68]	; (8002bfc <DrawChar+0x170>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	88bb      	ldrh	r3, [r7, #4]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7ff ff3a 	bl	8002a40 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	8a3b      	ldrh	r3, [r7, #16]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3c4      	bcc.n	8002b64 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002bda:	88bb      	ldrh	r3, [r7, #4]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	8a7b      	ldrh	r3, [r7, #18]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d384      	bcc.n	8002af8 <DrawChar+0x6c>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	2000044c 	.word	0x2000044c
 8002bfc:	20000450 	.word	0x20000450

08002c00 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <FillBuffer+0x68>)
 8002c10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c14:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <FillBuffer+0x68>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <FillBuffer+0x68>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <FillBuffer+0x68>)
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <FillBuffer+0x6c>)
 8002c26:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002c28:	480f      	ldr	r0, [pc, #60]	; (8002c68 <FillBuffer+0x68>)
 8002c2a:	f000 fd51 	bl	80036d0 <HAL_DMA2D_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d115      	bne.n	8002c60 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	480c      	ldr	r0, [pc, #48]	; (8002c68 <FillBuffer+0x68>)
 8002c38:	f000 feb2 	bl	80039a0 <HAL_DMA2D_ConfigLayer>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69f9      	ldr	r1, [r7, #28]
 8002c4c:	4806      	ldr	r0, [pc, #24]	; (8002c68 <FillBuffer+0x68>)
 8002c4e:	f000 fd92 	bl	8003776 <HAL_DMA2D_Start>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002c58:	210a      	movs	r1, #10
 8002c5a:	4803      	ldr	r0, [pc, #12]	; (8002c68 <FillBuffer+0x68>)
 8002c5c:	f000 fdb6 	bl	80037cc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200003dc 	.word	0x200003dc
 8002c6c:	4002b000 	.word	0x4002b000

08002c70 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002c74:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002c76:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <BSP_SDRAM_Init+0xb0>)
 8002c78:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002c82:	2207      	movs	r2, #7
 8002c84:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002c86:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002c88:	2204      	movs	r2, #4
 8002c8a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002c8e:	2207      	movs	r2, #7
 8002c90:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002c94:	2202      	movs	r2, #2
 8002c96:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cb8:	2210      	movs	r2, #16
 8002cba:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002cbc:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cc4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002cc8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cea:	f000 f87f 	bl	8002dec <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002cee:	490d      	ldr	r1, [pc, #52]	; (8002d24 <BSP_SDRAM_Init+0xb4>)
 8002cf0:	480a      	ldr	r0, [pc, #40]	; (8002d1c <BSP_SDRAM_Init+0xac>)
 8002cf2:	f002 fba3 	bl	800543c <HAL_SDRAM_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <BSP_SDRAM_Init+0xb8>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e002      	b.n	8002d0a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <BSP_SDRAM_Init+0xb8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002d0a:	f240 506a 	movw	r0, #1386	; 0x56a
 8002d0e:	f000 f80d 	bl	8002d2c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <BSP_SDRAM_Init+0xb8>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000046c 	.word	0x2000046c
 8002d20:	a0000140 	.word	0xa0000140
 8002d24:	200004a0 	.word	0x200004a0
 8002d28:	2000007c 	.word	0x2000007c

08002d2c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d40:	2208      	movs	r2, #8
 8002d42:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d54:	4923      	ldr	r1, [pc, #140]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d56:	4824      	ldr	r0, [pc, #144]	; (8002de8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d58:	f002 fbae 	bl	80054b8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f000 f9c3 	bl	80030e8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7e:	4919      	ldr	r1, [pc, #100]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d80:	4819      	ldr	r0, [pc, #100]	; (8002de8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d82:	f002 fb99 	bl	80054b8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d88:	2203      	movs	r2, #3
 8002d8a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d8e:	2208      	movs	r2, #8
 8002d90:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d94:	2204      	movs	r2, #4
 8002d96:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da2:	4910      	ldr	r1, [pc, #64]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002da4:	4810      	ldr	r0, [pc, #64]	; (8002de8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002da6:	f002 fb87 	bl	80054b8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002daa:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002dae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002db2:	2204      	movs	r2, #4
 8002db4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002db8:	2208      	movs	r2, #8
 8002dba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dc6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dcc:	4905      	ldr	r1, [pc, #20]	; (8002de4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dce:	4806      	ldr	r0, [pc, #24]	; (8002de8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dd0:	f002 fb72 	bl	80054b8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4804      	ldr	r0, [pc, #16]	; (8002de8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dd8:	f002 fba3 	bl	8005522 <HAL_SDRAM_ProgramRefreshRate>
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200004bc 	.word	0x200004bc
 8002de8:	2000046c 	.word	0x2000046c

08002dec <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b090      	sub	sp, #64	; 0x40
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80ec 	beq.w	8002fd6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	4b77      	ldr	r3, [pc, #476]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	4a76      	ldr	r2, [pc, #472]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6393      	str	r3, [r2, #56]	; 0x38
 8002e0e:	4b74      	ldr	r3, [pc, #464]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	4b70      	ldr	r3, [pc, #448]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b6d      	ldr	r3, [pc, #436]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
 8002e3a:	4b69      	ldr	r3, [pc, #420]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a61      	ldr	r2, [pc, #388]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a5a      	ldr	r2, [pc, #360]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a53      	ldr	r2, [pc, #332]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e94:	f043 0310 	orr.w	r3, r3, #16
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a4c      	ldr	r2, [pc, #304]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <BSP_SDRAM_MspInit+0x1f4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002eea:	230c      	movs	r3, #12
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002eee:	2360      	movs	r3, #96	; 0x60
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	483a      	ldr	r0, [pc, #232]	; (8002fe4 <BSP_SDRAM_MspInit+0x1f8>)
 8002efa:	f000 fe7f 	bl	8003bfc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f06:	4619      	mov	r1, r3
 8002f08:	4837      	ldr	r0, [pc, #220]	; (8002fe8 <BSP_SDRAM_MspInit+0x1fc>)
 8002f0a:	f000 fe77 	bl	8003bfc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002f0e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4834      	ldr	r0, [pc, #208]	; (8002fec <BSP_SDRAM_MspInit+0x200>)
 8002f1c:	f000 fe6e 	bl	8003bfc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002f20:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4830      	ldr	r0, [pc, #192]	; (8002ff0 <BSP_SDRAM_MspInit+0x204>)
 8002f2e:	f000 fe65 	bl	8003bfc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002f32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	482d      	ldr	r0, [pc, #180]	; (8002ff4 <BSP_SDRAM_MspInit+0x208>)
 8002f40:	f000 fe5c 	bl	8003bfc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002f44:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4829      	ldr	r0, [pc, #164]	; (8002ff8 <BSP_SDRAM_MspInit+0x20c>)
 8002f52:	f000 fe53 	bl	8003bfc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f70:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f78:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f80:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f8e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f98:	2203      	movs	r2, #3
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002faa:	4a15      	ldr	r2, [pc, #84]	; (8003000 <BSP_SDRAM_MspInit+0x214>)
 8002fac:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb4:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002fba:	4810      	ldr	r0, [pc, #64]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002fbc:	f000 fa78 	bl	80034b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002fc0:	480e      	ldr	r0, [pc, #56]	; (8002ffc <BSP_SDRAM_MspInit+0x210>)
 8002fc2:	f000 f9c7 	bl	8003354 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	210f      	movs	r1, #15
 8002fca:	2038      	movs	r0, #56	; 0x38
 8002fcc:	f000 f98b 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002fd0:	2038      	movs	r0, #56	; 0x38
 8002fd2:	f000 f9a4 	bl	800331e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002fd6:	bf00      	nop
 8002fd8:	3740      	adds	r7, #64	; 0x40
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	40020800 	.word	0x40020800
 8002fec:	40020c00 	.word	0x40020c00
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40021400 	.word	0x40021400
 8002ff8:	40021800 	.word	0x40021800
 8002ffc:	200004cc 	.word	0x200004cc
 8003000:	40026410 	.word	0x40026410

08003004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_Init+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_Init+0x40>)
 800300e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_Init+0x40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_Init+0x40>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_Init+0x40>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302c:	2003      	movs	r0, #3
 800302e:	f000 f94f 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003032:	200f      	movs	r0, #15
 8003034:	f000 f808 	bl	8003048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003038:	f7fe f926 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_InitTick+0x54>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_InitTick+0x58>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800305e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f967 	bl	800333a <HAL_SYSTICK_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00e      	b.n	8003094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d80a      	bhi.n	8003092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307c:	2200      	movs	r2, #0
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f000 f92f 	bl	80032e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003088:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <HAL_InitTick+0x5c>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000084 	.word	0x20000084
 80030a4:	20000080 	.word	0x20000080

080030a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_IncTick+0x20>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_IncTick+0x24>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <HAL_IncTick+0x24>)
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000084 	.word	0x20000084
 80030cc:	2000052c 	.word	0x2000052c

080030d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return uwTick;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_GetTick+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	2000052c 	.word	0x2000052c

080030e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff ffee 	bl	80030d0 <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d005      	beq.n	800310e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_Delay+0x44>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800310e:	bf00      	nop
 8003110:	f7ff ffde 	bl	80030d0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	429a      	cmp	r2, r3
 800311e:	d8f7      	bhi.n	8003110 <HAL_Delay+0x28>
  {
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000084 	.word	0x20000084

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff29 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f8:	f7ff ff3e 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff8e 	bl	8003224 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5d 	bl	80031d0 <__NVIC_SetPriority>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff31 	bl	8003194 <__NVIC_EnableIRQ>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffa2 	bl	800328c <SysTick_Config>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff feb6 	bl	80030d0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e099      	b.n	80034a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003390:	e00f      	b.n	80033b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003392:	f7ff fe9d 	bl	80030d0 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b05      	cmp	r3, #5
 800339e:	d908      	bls.n	80033b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2203      	movs	r2, #3
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e078      	b.n	80034a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e8      	bne.n	8003392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_DMA_Init+0x158>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4313      	orrs	r3, r2
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b04      	cmp	r3, #4
 8003444:	d117      	bne.n	8003476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8bd 	bl	80035d8 <DMA_CheckFifoParam>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003472:	2301      	movs	r3, #1
 8003474:	e016      	b.n	80034a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f874 	bl	800356c <DMA_CalcBaseAndBitshift>
 8003484:	4603      	mov	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	223f      	movs	r2, #63	; 0x3f
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	f010803f 	.word	0xf010803f

080034b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e050      	b.n	8003564 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
 80034d0:	e048      	b.n	8003564 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2221      	movs	r2, #33	; 0x21
 8003510:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f82a 	bl	800356c <DMA_CalcBaseAndBitshift>
 8003518:	4603      	mov	r3, r0
 800351a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3b10      	subs	r3, #16
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <DMA_CalcBaseAndBitshift+0x64>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d909      	bls.n	80035ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
 80035ac:	e007      	b.n	80035be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	aaaaaaab 	.word	0xaaaaaaab
 80035d4:	0800c7a0 	.word	0x0800c7a0

080035d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d856      	bhi.n	80036a6 <DMA_CheckFifoParam+0xce>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <DMA_CheckFifoParam+0x28>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003623 	.word	0x08003623
 8003608:	08003611 	.word	0x08003611
 800360c:	080036a7 	.word	0x080036a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d046      	beq.n	80036aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e043      	b.n	80036aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362a:	d140      	bne.n	80036ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e03d      	b.n	80036ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	d121      	bne.n	8003680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d837      	bhi.n	80036b2 <DMA_CheckFifoParam+0xda>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <DMA_CheckFifoParam+0x70>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	08003659 	.word	0x08003659
 800364c:	0800365f 	.word	0x0800365f
 8003650:	08003659 	.word	0x08003659
 8003654:	08003671 	.word	0x08003671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e030      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d025      	beq.n	80036b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e022      	b.n	80036b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003678:	d11f      	bne.n	80036ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800367e:	e01c      	b.n	80036ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d903      	bls.n	800368e <DMA_CheckFifoParam+0xb6>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d003      	beq.n	8003694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800368c:	e018      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      break;
 8003692:	e015      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e00b      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036a6:	bf00      	nop
 80036a8:	e00a      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e008      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e006      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e004      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
    }
  } 
  
  return status; 
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e03b      	b.n	800375a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f833 	bl	8003762 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	f023 0107 	bic.w	r1, r3, #7
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800373a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68d1      	ldr	r1, [r2, #12]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	430b      	orrs	r3, r1
 8003748:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af02      	add	r7, sp, #8
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_DMA2D_Start+0x1c>
 800378e:	2302      	movs	r3, #2
 8003790:	e018      	b.n	80037c4 <HAL_DMA2D_Start+0x4e>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f989 	bl	8003ac4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d056      	beq.n	8003896 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037e8:	f7ff fc72 	bl	80030d0 <HAL_GetTick>
 80037ec:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80037ee:	e04b      	b.n	8003888 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d023      	beq.n	800384a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	f043 0202 	orr.w	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2221      	movs	r2, #33	; 0x21
 8003834:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0a5      	b.n	8003996 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d01a      	beq.n	8003888 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7ff fc3d 	bl	80030d0 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <HAL_DMA2D_PollForTransfer+0x9c>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10f      	bne.n	8003888 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2203      	movs	r2, #3
 8003878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e086      	b.n	8003996 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ac      	beq.n	80037f0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d061      	beq.n	800397c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b8:	f7ff fc0a 	bl	80030d0 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038be:	e056      	b.n	800396e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02e      	beq.n	8003930 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	f043 0204 	orr.w	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2229      	movs	r2, #41	; 0x29
 800391a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2204      	movs	r2, #4
 8003920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d01a      	beq.n	800396e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003938:	f7ff fbca 	bl	80030d0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <HAL_DMA2D_PollForTransfer+0x182>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	f043 0220 	orr.w	r2, r3, #32
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2203      	movs	r2, #3
 800395e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e013      	b.n	8003996 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0a1      	beq.n	80038c0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2212      	movs	r2, #18
 8003982:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA2D_ConfigLayer+0x20>
 80039bc:	2302      	movs	r3, #2
 80039be:	e079      	b.n	8003ab4 <HAL_DMA2D_ConfigLayer+0x114>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	3318      	adds	r3, #24
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80039ea:	4b35      	ldr	r3, [pc, #212]	; (8003ac0 <HAL_DMA2D_ConfigLayer+0x120>)
 80039ec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b0a      	cmp	r3, #10
 80039f4:	d003      	beq.n	80039fe <HAL_DMA2D_ConfigLayer+0x5e>
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b09      	cmp	r3, #9
 80039fc:	d107      	bne.n	8003a0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e005      	b.n	8003a1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	061b      	lsls	r3, r3, #24
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d120      	bne.n	8003a62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	ea02 0103 	and.w	r1, r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b0a      	cmp	r3, #10
 8003a48:	d003      	beq.n	8003a52 <HAL_DMA2D_ConfigLayer+0xb2>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	d127      	bne.n	8003aa2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a60:	e01f      	b.n	8003aa2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	ea02 0103 	and.w	r1, r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b0a      	cmp	r3, #10
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA2D_ConfigLayer+0xf4>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	d106      	bne.n	8003aa2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003aa0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	ff03000f 	.word	0xff03000f

08003ac4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b08b      	sub	sp, #44	; 0x2c
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	041a      	lsls	r2, r3, #16
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003afc:	d174      	bne.n	8003be8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b04:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b0c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b14:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	e053      	b.n	8003bde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d106      	bne.n	8003b4c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	e048      	b.n	8003bde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d111      	bne.n	8003b78 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	0cdb      	lsrs	r3, r3, #19
 8003b58:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	0a9b      	lsrs	r3, r3, #10
 8003b5e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	08db      	lsrs	r3, r3, #3
 8003b64:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	02db      	lsls	r3, r3, #11
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	e032      	b.n	8003bde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d117      	bne.n	8003bb0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	0fdb      	lsrs	r3, r3, #31
 8003b84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	0cdb      	lsrs	r3, r3, #19
 8003b8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	0adb      	lsrs	r3, r3, #11
 8003b90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	029b      	lsls	r3, r3, #10
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	03db      	lsls	r3, r3, #15
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e016      	b.n	8003bde <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	0f1b      	lsrs	r3, r3, #28
 8003bb4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	0d1b      	lsrs	r3, r3, #20
 8003bba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	0b1b      	lsrs	r3, r3, #12
 8003bc0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	011a      	lsls	r2, r3, #4
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	031b      	lsls	r3, r3, #12
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003be6:	e003      	b.n	8003bf0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	60da      	str	r2, [r3, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	372c      	adds	r7, #44	; 0x2c
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b089      	sub	sp, #36	; 0x24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	e177      	b.n	8003f08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c18:	2201      	movs	r2, #1
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	f040 8166 	bne.w	8003f02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d005      	beq.n	8003c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d130      	bne.n	8003cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	2203      	movs	r2, #3
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c84:	2201      	movs	r2, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 0201 	and.w	r2, r3, #1
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d017      	beq.n	8003cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d123      	bne.n	8003d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	69b9      	ldr	r1, [r7, #24]
 8003d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0203 	and.w	r2, r3, #3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80c0 	beq.w	8003f02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	4b66      	ldr	r3, [pc, #408]	; (8003f20 <HAL_GPIO_Init+0x324>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	4a65      	ldr	r2, [pc, #404]	; (8003f20 <HAL_GPIO_Init+0x324>)
 8003d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d90:	6453      	str	r3, [r2, #68]	; 0x44
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_GPIO_Init+0x324>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d9e:	4a61      	ldr	r2, [pc, #388]	; (8003f24 <HAL_GPIO_Init+0x328>)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	3302      	adds	r3, #2
 8003da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	220f      	movs	r2, #15
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a58      	ldr	r2, [pc, #352]	; (8003f28 <HAL_GPIO_Init+0x32c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d037      	beq.n	8003e3a <HAL_GPIO_Init+0x23e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a57      	ldr	r2, [pc, #348]	; (8003f2c <HAL_GPIO_Init+0x330>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d031      	beq.n	8003e36 <HAL_GPIO_Init+0x23a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a56      	ldr	r2, [pc, #344]	; (8003f30 <HAL_GPIO_Init+0x334>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02b      	beq.n	8003e32 <HAL_GPIO_Init+0x236>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a55      	ldr	r2, [pc, #340]	; (8003f34 <HAL_GPIO_Init+0x338>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d025      	beq.n	8003e2e <HAL_GPIO_Init+0x232>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a54      	ldr	r2, [pc, #336]	; (8003f38 <HAL_GPIO_Init+0x33c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01f      	beq.n	8003e2a <HAL_GPIO_Init+0x22e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a53      	ldr	r2, [pc, #332]	; (8003f3c <HAL_GPIO_Init+0x340>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d019      	beq.n	8003e26 <HAL_GPIO_Init+0x22a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a52      	ldr	r2, [pc, #328]	; (8003f40 <HAL_GPIO_Init+0x344>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0x226>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a51      	ldr	r2, [pc, #324]	; (8003f44 <HAL_GPIO_Init+0x348>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00d      	beq.n	8003e1e <HAL_GPIO_Init+0x222>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a50      	ldr	r2, [pc, #320]	; (8003f48 <HAL_GPIO_Init+0x34c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <HAL_GPIO_Init+0x21e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4f      	ldr	r2, [pc, #316]	; (8003f4c <HAL_GPIO_Init+0x350>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_GPIO_Init+0x21a>
 8003e12:	2309      	movs	r3, #9
 8003e14:	e012      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e16:	230a      	movs	r3, #10
 8003e18:	e010      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	e00e      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e1e:	2307      	movs	r3, #7
 8003e20:	e00c      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e22:	2306      	movs	r3, #6
 8003e24:	e00a      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e26:	2305      	movs	r3, #5
 8003e28:	e008      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e004      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	f002 0203 	and.w	r2, r2, #3
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	4093      	lsls	r3, r2
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e4c:	4935      	ldr	r1, [pc, #212]	; (8003f24 <HAL_GPIO_Init+0x328>)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e7e:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e84:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <HAL_GPIO_Init+0x354>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	f67f ae84 	bls.w	8003c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3724      	adds	r7, #36	; 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400
 8003f30:	40020800 	.word	0x40020800
 8003f34:	40020c00 	.word	0x40020c00
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40021400 	.word	0x40021400
 8003f40:	40021800 	.word	0x40021800
 8003f44:	40021c00 	.word	0x40021c00
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	40022400 	.word	0x40022400
 8003f50:	40013c00 	.word	0x40013c00

08003f54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	e0d9      	b.n	8004124 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f70:	2201      	movs	r2, #1
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	f040 80c9 	bne.w	800411e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f8c:	4a6b      	ldr	r2, [pc, #428]	; (800413c <HAL_GPIO_DeInit+0x1e8>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f98:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	220f      	movs	r2, #15
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a63      	ldr	r2, [pc, #396]	; (8004140 <HAL_GPIO_DeInit+0x1ec>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d037      	beq.n	8004026 <HAL_GPIO_DeInit+0xd2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a62      	ldr	r2, [pc, #392]	; (8004144 <HAL_GPIO_DeInit+0x1f0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d031      	beq.n	8004022 <HAL_GPIO_DeInit+0xce>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a61      	ldr	r2, [pc, #388]	; (8004148 <HAL_GPIO_DeInit+0x1f4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02b      	beq.n	800401e <HAL_GPIO_DeInit+0xca>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a60      	ldr	r2, [pc, #384]	; (800414c <HAL_GPIO_DeInit+0x1f8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d025      	beq.n	800401a <HAL_GPIO_DeInit+0xc6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a5f      	ldr	r2, [pc, #380]	; (8004150 <HAL_GPIO_DeInit+0x1fc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <HAL_GPIO_DeInit+0xc2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a5e      	ldr	r2, [pc, #376]	; (8004154 <HAL_GPIO_DeInit+0x200>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d019      	beq.n	8004012 <HAL_GPIO_DeInit+0xbe>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a5d      	ldr	r2, [pc, #372]	; (8004158 <HAL_GPIO_DeInit+0x204>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_GPIO_DeInit+0xba>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a5c      	ldr	r2, [pc, #368]	; (800415c <HAL_GPIO_DeInit+0x208>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00d      	beq.n	800400a <HAL_GPIO_DeInit+0xb6>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a5b      	ldr	r2, [pc, #364]	; (8004160 <HAL_GPIO_DeInit+0x20c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <HAL_GPIO_DeInit+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_GPIO_DeInit+0x210>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_GPIO_DeInit+0xae>
 8003ffe:	2309      	movs	r3, #9
 8004000:	e012      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 8004002:	230a      	movs	r3, #10
 8004004:	e010      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 8004006:	2308      	movs	r3, #8
 8004008:	e00e      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 800400a:	2307      	movs	r3, #7
 800400c:	e00c      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 800400e:	2306      	movs	r3, #6
 8004010:	e00a      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 8004012:	2305      	movs	r3, #5
 8004014:	e008      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 8004016:	2304      	movs	r3, #4
 8004018:	e006      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 800401a:	2303      	movs	r3, #3
 800401c:	e004      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 800401e:	2302      	movs	r3, #2
 8004020:	e002      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_GPIO_DeInit+0xd4>
 8004026:	2300      	movs	r3, #0
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	f002 0203 	and.w	r2, r2, #3
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	4093      	lsls	r3, r2
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	d132      	bne.n	800409e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004038:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	43db      	mvns	r3, r3
 8004040:	4949      	ldr	r1, [pc, #292]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 8004042:	4013      	ands	r3, r2
 8004044:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004046:	4b48      	ldr	r3, [pc, #288]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43db      	mvns	r3, r3
 800404e:	4946      	ldr	r1, [pc, #280]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 8004050:	4013      	ands	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004054:	4b44      	ldr	r3, [pc, #272]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43db      	mvns	r3, r3
 800405c:	4942      	ldr	r1, [pc, #264]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 800405e:	4013      	ands	r3, r2
 8004060:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	493f      	ldr	r1, [pc, #252]	; (8004168 <HAL_GPIO_DeInit+0x214>)
 800406c:	4013      	ands	r3, r2
 800406e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	220f      	movs	r2, #15
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004080:	4a2e      	ldr	r2, [pc, #184]	; (800413c <HAL_GPIO_DeInit+0x1e8>)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	3302      	adds	r3, #2
 8004088:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	43da      	mvns	r2, r3
 8004090:	482a      	ldr	r0, [pc, #168]	; (800413c <HAL_GPIO_DeInit+0x1e8>)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	400a      	ands	r2, r1
 8004098:	3302      	adds	r3, #2
 800409a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2103      	movs	r1, #3
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	08d2      	lsrs	r2, r2, #3
 80040d4:	4019      	ands	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3208      	adds	r2, #8
 80040da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2103      	movs	r1, #3
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	2101      	movs	r1, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2103      	movs	r1, #3
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	401a      	ands	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	3301      	adds	r3, #1
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b0f      	cmp	r3, #15
 8004128:	f67f af22 	bls.w	8003f70 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40013800 	.word	0x40013800
 8004140:	40020000 	.word	0x40020000
 8004144:	40020400 	.word	0x40020400
 8004148:	40020800 	.word	0x40020800
 800414c:	40020c00 	.word	0x40020c00
 8004150:	40021000 	.word	0x40021000
 8004154:	40021400 	.word	0x40021400
 8004158:	40021800 	.word	0x40021800
 800415c:	40021c00 	.word	0x40021c00
 8004160:	40022000 	.word	0x40022000
 8004164:	40022400 	.word	0x40022400
 8004168:	40013c00 	.word	0x40013c00

0800416c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800417c:	787b      	ldrb	r3, [r7, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004188:	e003      	b.n	8004192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	619a      	str	r2, [r3, #24]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0bf      	b.n	8004332 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8ba 	bl	8004340 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80041e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_LTDC_Init+0x19c>)
 8004214:	400b      	ands	r3, r1
 8004216:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68d9      	ldr	r1, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <HAL_LTDC_Init+0x19c>)
 8004242:	400b      	ands	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	041b      	lsls	r3, r3, #16
 800424c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68d9      	ldr	r1, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6919      	ldr	r1, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <HAL_LTDC_Init+0x19c>)
 8004270:	400b      	ands	r3, r1
 8004272:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6919      	ldr	r1, [r3, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6959      	ldr	r1, [r3, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b27      	ldr	r3, [pc, #156]	; (800433c <HAL_LTDC_Init+0x19c>)
 800429e:	400b      	ands	r3, r1
 80042a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6959      	ldr	r1, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0206 	orr.w	r2, r2, #6
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	f000f800 	.word	0xf000f800

08004340 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_LTDC_ConfigLayer+0x1a>
 800436a:	2302      	movs	r3, #2
 800436c:	e02c      	b.n	80043c8 <HAL_LTDC_ConfigLayer+0x74>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2134      	movs	r1, #52	; 0x34
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4614      	mov	r4, r2
 8004392:	461d      	mov	r5, r3
 8004394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f83b 	bl	8004424 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bdb0      	pop	{r4, r5, r7, pc}

080043d0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_LTDC_EnableDither+0x16>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e016      	b.n	8004414 <HAL_LTDC_EnableDither+0x44>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_LTDC_EnableDither+0x50>)
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_LTDC_EnableDither+0x50>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40016800 	.word	0x40016800

08004424 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	4413      	add	r3, r2
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	4413      	add	r3, r2
 8004452:	3384      	adds	r3, #132	; 0x84
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	4611      	mov	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	01d2      	lsls	r2, r2, #7
 8004460:	440a      	add	r2, r1
 8004462:	3284      	adds	r2, #132	; 0x84
 8004464:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004468:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800447a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800447c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4619      	mov	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	01db      	lsls	r3, r3, #7
 8004488:	440b      	add	r3, r1
 800448a:	3384      	adds	r3, #132	; 0x84
 800448c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004492:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a2:	4413      	add	r3, r2
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	01db      	lsls	r3, r3, #7
 80044b2:	4413      	add	r3, r2
 80044b4:	3384      	adds	r3, #132	; 0x84
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	4611      	mov	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	01d2      	lsls	r2, r2, #7
 80044c2:	440a      	add	r2, r1
 80044c4:	3284      	adds	r2, #132	; 0x84
 80044c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044da:	4413      	add	r3, r2
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	01db      	lsls	r3, r3, #7
 80044e8:	440b      	add	r3, r1
 80044ea:	3384      	adds	r3, #132	; 0x84
 80044ec:	4619      	mov	r1, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	01db      	lsls	r3, r3, #7
 80044fe:	4413      	add	r3, r2
 8004500:	3384      	adds	r3, #132	; 0x84
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	4611      	mov	r1, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	01d2      	lsls	r2, r2, #7
 800450e:	440a      	add	r2, r1
 8004510:	3284      	adds	r2, #132	; 0x84
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	01db      	lsls	r3, r3, #7
 8004522:	4413      	add	r3, r2
 8004524:	3384      	adds	r3, #132	; 0x84
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	061b      	lsls	r3, r3, #24
 8004548:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	01db      	lsls	r3, r3, #7
 8004554:	4413      	add	r3, r2
 8004556:	3384      	adds	r3, #132	; 0x84
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	4413      	add	r3, r2
 8004566:	3384      	adds	r3, #132	; 0x84
 8004568:	461a      	mov	r2, r3
 800456a:	2300      	movs	r3, #0
 800456c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004574:	461a      	mov	r2, r3
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	431a      	orrs	r2, r3
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4619      	mov	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	01db      	lsls	r3, r3, #7
 8004588:	440b      	add	r3, r1
 800458a:	3384      	adds	r3, #132	; 0x84
 800458c:	4619      	mov	r1, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	01db      	lsls	r3, r3, #7
 800459e:	4413      	add	r3, r2
 80045a0:	3384      	adds	r3, #132	; 0x84
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	4611      	mov	r1, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	01d2      	lsls	r2, r2, #7
 80045ae:	440a      	add	r2, r1
 80045b0:	3284      	adds	r2, #132	; 0x84
 80045b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	01db      	lsls	r3, r3, #7
 80045c2:	4413      	add	r3, r2
 80045c4:	3384      	adds	r3, #132	; 0x84
 80045c6:	461a      	mov	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	01db      	lsls	r3, r3, #7
 80045d8:	4413      	add	r3, r2
 80045da:	3384      	adds	r3, #132	; 0x84
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	4611      	mov	r1, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	01d2      	lsls	r2, r2, #7
 80045e8:	440a      	add	r2, r1
 80045ea:	3284      	adds	r2, #132	; 0x84
 80045ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	6809      	ldr	r1, [r1, #0]
 8004602:	4608      	mov	r0, r1
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	01c9      	lsls	r1, r1, #7
 8004608:	4401      	add	r1, r0
 800460a:	3184      	adds	r1, #132	; 0x84
 800460c:	4313      	orrs	r3, r2
 800460e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	01db      	lsls	r3, r3, #7
 800461a:	4413      	add	r3, r2
 800461c:	3384      	adds	r3, #132	; 0x84
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	01db      	lsls	r3, r3, #7
 800462a:	4413      	add	r3, r2
 800462c:	3384      	adds	r3, #132	; 0x84
 800462e:	461a      	mov	r2, r3
 8004630:	2300      	movs	r3, #0
 8004632:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	4413      	add	r3, r2
 8004640:	3384      	adds	r3, #132	; 0x84
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004652:	2304      	movs	r3, #4
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e01b      	b.n	8004690 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d102      	bne.n	8004666 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004660:	2303      	movs	r3, #3
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	e014      	b.n	8004690 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d00b      	beq.n	8004686 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004672:	2b02      	cmp	r3, #2
 8004674:	d007      	beq.n	8004686 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800467a:	2b03      	cmp	r3, #3
 800467c:	d003      	beq.n	8004686 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004682:	2b07      	cmp	r3, #7
 8004684:	d102      	bne.n	800468c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004686:	2302      	movs	r3, #2
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	e001      	b.n	8004690 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800468c:	2301      	movs	r3, #1
 800468e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	01db      	lsls	r3, r3, #7
 800469a:	4413      	add	r3, r2
 800469c:	3384      	adds	r3, #132	; 0x84
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	4611      	mov	r1, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	01d2      	lsls	r2, r2, #7
 80046aa:	440a      	add	r2, r1
 80046ac:	3284      	adds	r2, #132	; 0x84
 80046ae:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80046b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	1acb      	subs	r3, r1, r3
 80046ca:	69f9      	ldr	r1, [r7, #28]
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	6809      	ldr	r1, [r1, #0]
 80046d6:	4608      	mov	r0, r1
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	01c9      	lsls	r1, r1, #7
 80046dc:	4401      	add	r1, r0
 80046de:	3184      	adds	r1, #132	; 0x84
 80046e0:	4313      	orrs	r3, r2
 80046e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	4413      	add	r3, r2
 80046f0:	3384      	adds	r3, #132	; 0x84
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	4611      	mov	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	01d2      	lsls	r2, r2, #7
 80046fe:	440a      	add	r2, r1
 8004700:	3284      	adds	r2, #132	; 0x84
 8004702:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004706:	f023 0307 	bic.w	r3, r3, #7
 800470a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	01db      	lsls	r3, r3, #7
 8004716:	4413      	add	r3, r2
 8004718:	3384      	adds	r3, #132	; 0x84
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	01db      	lsls	r3, r3, #7
 800472c:	4413      	add	r3, r2
 800472e:	3384      	adds	r3, #132	; 0x84
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	4611      	mov	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	01d2      	lsls	r2, r2, #7
 800473c:	440a      	add	r2, r1
 800473e:	3284      	adds	r2, #132	; 0x84
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6013      	str	r3, [r2, #0]
}
 8004746:	bf00      	nop
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800477a:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004780:	f7fe fca6 	bl	80030d0 <HAL_GetTick>
 8004784:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004786:	e009      	b.n	800479c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004788:	f7fe fca2 	bl	80030d0 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004796:	d901      	bls.n	800479c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e01f      	b.n	80047dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800479c:	4b13      	ldr	r3, [pc, #76]	; (80047ec <HAL_PWREx_EnableOverDrive+0x98>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a8:	d1ee      	bne.n	8004788 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b0:	f7fe fc8e 	bl	80030d0 <HAL_GetTick>
 80047b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047b6:	e009      	b.n	80047cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047b8:	f7fe fc8a 	bl	80030d0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047c6:	d901      	bls.n	80047cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e007      	b.n	80047dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047cc:	4b07      	ldr	r3, [pc, #28]	; (80047ec <HAL_PWREx_EnableOverDrive+0x98>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047d8:	d1ee      	bne.n	80047b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	420e0040 	.word	0x420e0040
 80047ec:	40007000 	.word	0x40007000
 80047f0:	420e0044 	.word	0x420e0044

080047f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e267      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d075      	beq.n	80048fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004812:	4b88      	ldr	r3, [pc, #544]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b04      	cmp	r3, #4
 800481c:	d00c      	beq.n	8004838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481e:	4b85      	ldr	r3, [pc, #532]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	2b08      	cmp	r3, #8
 8004828:	d112      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482a:	4b82      	ldr	r3, [pc, #520]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004836:	d10b      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004838:	4b7e      	ldr	r3, [pc, #504]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05b      	beq.n	80048fc <HAL_RCC_OscConfig+0x108>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d157      	bne.n	80048fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e242      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d106      	bne.n	8004868 <HAL_RCC_OscConfig+0x74>
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a75      	ldr	r2, [pc, #468]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e01d      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x98>
 8004872:	4b70      	ldr	r3, [pc, #448]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a6f      	ldr	r2, [pc, #444]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b6d      	ldr	r3, [pc, #436]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6c      	ldr	r2, [pc, #432]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 800488c:	4b69      	ldr	r3, [pc, #420]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a68      	ldr	r2, [pc, #416]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b66      	ldr	r3, [pc, #408]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a65      	ldr	r2, [pc, #404]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fe fc10 	bl	80030d0 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b4:	f7fe fc0c 	bl	80030d0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b64      	cmp	r3, #100	; 0x64
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e207      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b5b      	ldr	r3, [pc, #364]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0xc0>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fbfc 	bl	80030d0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fe fbf8 	bl	80030d0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1f3      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	4b51      	ldr	r3, [pc, #324]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0xe8>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d063      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800490a:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	2b08      	cmp	r3, #8
 8004920:	d11c      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004922:	4b44      	ldr	r3, [pc, #272]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e1c7      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4937      	ldr	r1, [pc, #220]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	e03a      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <HAL_RCC_OscConfig+0x244>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fe fbb1 	bl	80030d0 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004972:	f7fe fbad 	bl	80030d0 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e1a8      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4925      	ldr	r1, [pc, #148]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e015      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <HAL_RCC_OscConfig+0x244>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fe fb90 	bl	80030d0 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fe fb8c 	bl	80030d0 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e187      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d036      	beq.n	8004a4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_RCC_OscConfig+0x248>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fe fb70 	bl	80030d0 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fe fb6c 	bl	80030d0 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e167      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCC_OscConfig+0x240>)
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x200>
 8004a12:	e01b      	b.n	8004a4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_OscConfig+0x248>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1a:	f7fe fb59 	bl	80030d0 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	e00e      	b.n	8004a40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a22:	f7fe fb55 	bl	80030d0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d907      	bls.n	8004a40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e150      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
 8004a34:	40023800 	.word	0x40023800
 8004a38:	42470000 	.word	0x42470000
 8004a3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a40:	4b88      	ldr	r3, [pc, #544]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ea      	bne.n	8004a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8097 	beq.w	8004b88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5e:	4b81      	ldr	r3, [pc, #516]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	4b7d      	ldr	r3, [pc, #500]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	4a7c      	ldr	r2, [pc, #496]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7a:	4b7a      	ldr	r3, [pc, #488]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a86:	2301      	movs	r3, #1
 8004a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8a:	4b77      	ldr	r3, [pc, #476]	; (8004c68 <HAL_RCC_OscConfig+0x474>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d118      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a96:	4b74      	ldr	r3, [pc, #464]	; (8004c68 <HAL_RCC_OscConfig+0x474>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a73      	ldr	r2, [pc, #460]	; (8004c68 <HAL_RCC_OscConfig+0x474>)
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa2:	f7fe fb15 	bl	80030d0 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aaa:	f7fe fb11 	bl	80030d0 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e10c      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	4b6a      	ldr	r3, [pc, #424]	; (8004c68 <HAL_RCC_OscConfig+0x474>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x2ea>
 8004ad0:	4b64      	ldr	r3, [pc, #400]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	4a63      	ldr	r2, [pc, #396]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6713      	str	r3, [r2, #112]	; 0x70
 8004adc:	e01c      	b.n	8004b18 <HAL_RCC_OscConfig+0x324>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x30c>
 8004ae6:	4b5f      	ldr	r3, [pc, #380]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a5e      	ldr	r2, [pc, #376]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004aec:	f043 0304 	orr.w	r3, r3, #4
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
 8004af2:	4b5c      	ldr	r3, [pc, #368]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a5b      	ldr	r2, [pc, #364]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0x324>
 8004b00:	4b58      	ldr	r3, [pc, #352]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a57      	ldr	r2, [pc, #348]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0c:	4b55      	ldr	r3, [pc, #340]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a54      	ldr	r2, [pc, #336]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b12:	f023 0304 	bic.w	r3, r3, #4
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fe fad6 	bl	80030d0 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fe fad2 	bl	80030d0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0cb      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3e:	4b49      	ldr	r3, [pc, #292]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ee      	beq.n	8004b28 <HAL_RCC_OscConfig+0x334>
 8004b4a:	e014      	b.n	8004b76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4c:	f7fe fac0 	bl	80030d0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fe fabc 	bl	80030d0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e0b5      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6a:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ee      	bne.n	8004b54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b39      	ldr	r3, [pc, #228]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	4a38      	ldr	r2, [pc, #224]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80a1 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b92:	4b34      	ldr	r3, [pc, #208]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d05c      	beq.n	8004c58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d141      	bne.n	8004c2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba6:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_RCC_OscConfig+0x478>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe fa90 	bl	80030d0 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7fe fa8c 	bl	80030d0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e087      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	019b      	lsls	r3, r3, #6
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	3b01      	subs	r3, #1
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	491b      	ldr	r1, [pc, #108]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCC_OscConfig+0x478>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c02:	f7fe fa65 	bl	80030d0 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0a:	f7fe fa61 	bl	80030d0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e05c      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x416>
 8004c28:	e054      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_RCC_OscConfig+0x478>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe fa4e 	bl	80030d0 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fe fa4a 	bl	80030d0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e045      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x444>
 8004c56:	e03d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e038      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40007000 	.word	0x40007000
 8004c6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x4ec>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d028      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d121      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d11a      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ca6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d111      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d107      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800

08004ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0cc      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90c      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0b8      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b50      	ldr	r3, [pc, #320]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	494d      	ldr	r1, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d044      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d119      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db2:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e067      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4934      	ldr	r1, [pc, #208]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fe f97c 	bl	80030d0 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fe f978 	bl	80030d0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e04f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 020c 	and.w	r2, r3, #12
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1eb      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d20c      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e032      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4916      	ldr	r1, [pc, #88]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e6a:	f000 f821 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	490a      	ldr	r1, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	5ccb      	ldrb	r3, [r1, r3]
 8004e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe f8dc 	bl	8003048 <HAL_InitTick>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	0800acd8 	.word	0x0800acd8
 8004ea8:	20000000 	.word	0x20000000
 8004eac:	20000080 	.word	0x20000080

08004eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb4:	b094      	sub	sp, #80	; 0x50
 8004eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	647b      	str	r3, [r7, #68]	; 0x44
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec8:	4b79      	ldr	r3, [pc, #484]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	f200 80e1 	bhi.w	800509c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ee2:	e0db      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee4:	4b73      	ldr	r3, [pc, #460]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ee6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ee8:	e0db      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eea:	4b73      	ldr	r3, [pc, #460]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eee:	e0d8      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ef0:	4b6f      	ldr	r3, [pc, #444]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004efa:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d063      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f06:	4b6a      	ldr	r3, [pc, #424]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	099b      	lsrs	r3, r3, #6
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f22:	4622      	mov	r2, r4
 8004f24:	462b      	mov	r3, r5
 8004f26:	f04f 0000 	mov.w	r0, #0
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	0159      	lsls	r1, r3, #5
 8004f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f34:	0150      	lsls	r0, r2, #5
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	1a51      	subs	r1, r2, r1
 8004f3e:	6139      	str	r1, [r7, #16]
 8004f40:	4629      	mov	r1, r5
 8004f42:	eb63 0301 	sbc.w	r3, r3, r1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f54:	4659      	mov	r1, fp
 8004f56:	018b      	lsls	r3, r1, #6
 8004f58:	4651      	mov	r1, sl
 8004f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f5e:	4651      	mov	r1, sl
 8004f60:	018a      	lsls	r2, r1, #6
 8004f62:	4651      	mov	r1, sl
 8004f64:	ebb2 0801 	subs.w	r8, r2, r1
 8004f68:	4659      	mov	r1, fp
 8004f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f82:	4690      	mov	r8, r2
 8004f84:	4699      	mov	r9, r3
 8004f86:	4623      	mov	r3, r4
 8004f88:	eb18 0303 	adds.w	r3, r8, r3
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	462b      	mov	r3, r5
 8004f90:	eb49 0303 	adc.w	r3, r9, r3
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	024b      	lsls	r3, r1, #9
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fac:	4621      	mov	r1, r4
 8004fae:	024a      	lsls	r2, r1, #9
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fc0:	f7fb fe72 	bl	8000ca8 <__aeabi_uldivmod>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4613      	mov	r3, r2
 8004fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fcc:	e058      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fce:	4b38      	ldr	r3, [pc, #224]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	099b      	lsrs	r3, r3, #6
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	4611      	mov	r1, r2
 8004fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fde:	623b      	str	r3, [r7, #32]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fe8:	4642      	mov	r2, r8
 8004fea:	464b      	mov	r3, r9
 8004fec:	f04f 0000 	mov.w	r0, #0
 8004ff0:	f04f 0100 	mov.w	r1, #0
 8004ff4:	0159      	lsls	r1, r3, #5
 8004ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ffa:	0150      	lsls	r0, r2, #5
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4641      	mov	r1, r8
 8005002:	ebb2 0a01 	subs.w	sl, r2, r1
 8005006:	4649      	mov	r1, r9
 8005008:	eb63 0b01 	sbc.w	fp, r3, r1
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800501c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005020:	ebb2 040a 	subs.w	r4, r2, sl
 8005024:	eb63 050b 	sbc.w	r5, r3, fp
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	00eb      	lsls	r3, r5, #3
 8005032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005036:	00e2      	lsls	r2, r4, #3
 8005038:	4614      	mov	r4, r2
 800503a:	461d      	mov	r5, r3
 800503c:	4643      	mov	r3, r8
 800503e:	18e3      	adds	r3, r4, r3
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	464b      	mov	r3, r9
 8005044:	eb45 0303 	adc.w	r3, r5, r3
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005056:	4629      	mov	r1, r5
 8005058:	028b      	lsls	r3, r1, #10
 800505a:	4621      	mov	r1, r4
 800505c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005060:	4621      	mov	r1, r4
 8005062:	028a      	lsls	r2, r1, #10
 8005064:	4610      	mov	r0, r2
 8005066:	4619      	mov	r1, r3
 8005068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506a:	2200      	movs	r2, #0
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	61fa      	str	r2, [r7, #28]
 8005070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005074:	f7fb fe18 	bl	8000ca8 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4613      	mov	r3, r2
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	3301      	adds	r3, #1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800509a:	e002      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800509e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3750      	adds	r7, #80	; 0x50
 80050a8:	46bd      	mov	sp, r7
 80050aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	007a1200 	.word	0x007a1200

080050bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d075      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050f0:	4b91      	ldr	r3, [pc, #580]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050f6:	f7fd ffeb 	bl	80030d0 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050fe:	f7fd ffe7 	bl	80030d0 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e189      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005110:	4b8a      	ldr	r3, [pc, #552]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d009      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	019a      	lsls	r2, r3, #6
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	071b      	lsls	r3, r3, #28
 8005134:	4981      	ldr	r1, [pc, #516]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01f      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005148:	4b7c      	ldr	r3, [pc, #496]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800514a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514e:	0f1b      	lsrs	r3, r3, #28
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	019a      	lsls	r2, r3, #6
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	431a      	orrs	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	071b      	lsls	r3, r3, #28
 8005168:	4974      	ldr	r1, [pc, #464]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005170:	4b72      	ldr	r3, [pc, #456]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005176:	f023 021f 	bic.w	r2, r3, #31
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	3b01      	subs	r3, #1
 8005180:	496e      	ldr	r1, [pc, #440]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	019a      	lsls	r2, r3, #6
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	061b      	lsls	r3, r3, #24
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	071b      	lsls	r3, r3, #28
 80051a8:	4964      	ldr	r1, [pc, #400]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051b0:	4b61      	ldr	r3, [pc, #388]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051b6:	f7fd ff8b 	bl	80030d0 <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051be:	f7fd ff87 	bl	80030d0 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e129      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d0:	4b5a      	ldr	r3, [pc, #360]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d079      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051f4:	4b52      	ldr	r3, [pc, #328]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051fa:	f7fd ff69 	bl	80030d0 <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005202:	f7fd ff65 	bl	80030d0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e107      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005214:	4b49      	ldr	r3, [pc, #292]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005220:	d0ef      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d020      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800522e:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	0f1b      	lsrs	r3, r3, #28
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	019a      	lsls	r2, r3, #6
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	061b      	lsls	r3, r3, #24
 8005248:	431a      	orrs	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	071b      	lsls	r3, r3, #28
 800524e:	493b      	ldr	r1, [pc, #236]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	3b01      	subs	r3, #1
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	4934      	ldr	r1, [pc, #208]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01e      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800527c:	4b2f      	ldr	r3, [pc, #188]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	0e1b      	lsrs	r3, r3, #24
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	019a      	lsls	r2, r3, #6
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	071b      	lsls	r3, r3, #28
 800529c:	4927      	ldr	r1, [pc, #156]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	4922      	ldr	r1, [pc, #136]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c0:	f7fd ff06 	bl	80030d0 <HAL_GetTick>
 80052c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052c8:	f7fd ff02 	bl	80030d0 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0a4      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052da:	4b18      	ldr	r3, [pc, #96]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e6:	d1ef      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 808b 	beq.w	800540c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	4a0f      	ldr	r2, [pc, #60]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005304:	6413      	str	r3, [r2, #64]	; 0x40
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800531e:	f7fd fed7 	bl	80030d0 <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005324:	e010      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005326:	f7fd fed3 	bl	80030d0 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d909      	bls.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e075      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005338:	42470068 	.word	0x42470068
 800533c:	40023800 	.word	0x40023800
 8005340:	42470070 	.word	0x42470070
 8005344:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005348:	4b38      	ldr	r3, [pc, #224]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0e8      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005354:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02f      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d028      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005372:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800537c:	4b2d      	ldr	r3, [pc, #180]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005382:	4b2c      	ldr	r3, [pc, #176]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005388:	4a29      	ldr	r2, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800538e:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b01      	cmp	r3, #1
 8005398:	d114      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800539a:	f7fd fe99 	bl	80030d0 <HAL_GetTick>
 800539e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fd fe95 	bl	80030d0 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e035      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ee      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d0:	d10d      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x332>
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e6:	4912      	ldr	r1, [pc, #72]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
 80053ec:	e005      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053f8:	6093      	str	r3, [r2, #8]
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005406:	490a      	ldr	r1, [pc, #40]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005408:	4313      	orrs	r3, r2
 800540a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800541e:	4b06      	ldr	r3, [pc, #24]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005420:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40007000 	.word	0x40007000
 8005430:	40023800 	.word	0x40023800
 8005434:	42470e40 	.word	0x42470e40
 8005438:	424711e0 	.word	0x424711e0

0800543c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e025      	b.n	800549c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f81d 	bl	80054a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f000 fe57 	bl	8006130 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	461a      	mov	r2, r3
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	f000 feac 	bl	80061ea <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054ca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d101      	bne.n	80054d6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
 80054d4:	e021      	b.n	800551a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d002      	beq.n	80054e2 <HAL_SDRAM_SendCommand+0x2a>
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d118      	bne.n	8005514 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fee2 	bl	80062bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d104      	bne.n	800550a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2205      	movs	r2, #5
 8005504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005508:	e006      	b.n	8005518 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005512:	e001      	b.n	8005518 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d101      	bne.n	800553c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
 800553a:	e016      	b.n	800556a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d10f      	bne.n	8005568 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 feed 	bl	8006336 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	e000      	b.n	800556a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e07b      	b.n	800567c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005594:	d009      	beq.n	80055aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	61da      	str	r2, [r3, #28]
 800559c:	e005      	b.n	80055aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fb fe87 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	ea42 0103 	orr.w	r1, r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	f003 0104 	and.w	r1, r3, #4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f003 0210 	and.w	r2, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e01a      	b.n	80056cc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb fe5a 	bl	8001368 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_SPI_Transmit+0x22>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e126      	b.n	8005944 <HAL_SPI_Transmit+0x270>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056fe:	f7fd fce7 	bl	80030d0 <HAL_GetTick>
 8005702:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d002      	beq.n	800571a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005714:	2302      	movs	r3, #2
 8005716:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005718:	e10b      	b.n	8005932 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_SPI_Transmit+0x52>
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800572a:	e102      	b.n	8005932 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2203      	movs	r2, #3
 8005730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005772:	d10f      	bne.n	8005794 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005782:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005792:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d007      	beq.n	80057b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ba:	d14b      	bne.n	8005854 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_SPI_Transmit+0xf6>
 80057c4:	8afb      	ldrh	r3, [r7, #22]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d13e      	bne.n	8005848 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	881a      	ldrh	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	1c9a      	adds	r2, r3, #2
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057ee:	e02b      	b.n	8005848 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d112      	bne.n	8005824 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	881a      	ldrh	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
 8005822:	e011      	b.n	8005848 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005824:	f7fd fc54 	bl	80030d0 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d803      	bhi.n	800583c <HAL_SPI_Transmit+0x168>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d102      	bne.n	8005842 <HAL_SPI_Transmit+0x16e>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d102      	bne.n	8005848 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005846:	e074      	b.n	8005932 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ce      	bne.n	80057f0 <HAL_SPI_Transmit+0x11c>
 8005852:	e04c      	b.n	80058ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_SPI_Transmit+0x18e>
 800585c:	8afb      	ldrh	r3, [r7, #22]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d140      	bne.n	80058e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	7812      	ldrb	r2, [r2, #0]
 800586e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005888:	e02c      	b.n	80058e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b02      	cmp	r3, #2
 8005896:	d113      	bne.n	80058c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	7812      	ldrb	r2, [r2, #0]
 80058a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80058be:	e011      	b.n	80058e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c0:	f7fd fc06 	bl	80030d0 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d803      	bhi.n	80058d8 <HAL_SPI_Transmit+0x204>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d6:	d102      	bne.n	80058de <HAL_SPI_Transmit+0x20a>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058e2:	e026      	b.n	8005932 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1cd      	bne.n	800588a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fbda 	bl	80060ac <SPI_EndRxTxTransaction>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e000      	b.n	8005932 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005930:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005942:	7ffb      	ldrb	r3, [r7, #31]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005968:	d112      	bne.n	8005990 <HAL_SPI_Receive+0x44>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10e      	bne.n	8005990 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2204      	movs	r2, #4
 8005976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f8f1 	bl	8005b6e <HAL_SPI_TransmitReceive>
 800598c:	4603      	mov	r3, r0
 800598e:	e0ea      	b.n	8005b66 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_SPI_Receive+0x52>
 800599a:	2302      	movs	r3, #2
 800599c:	e0e3      	b.n	8005b66 <HAL_SPI_Receive+0x21a>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059a6:	f7fd fb93 	bl	80030d0 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
 80059ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059bc:	e0ca      	b.n	8005b54 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Receive+0x7e>
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059ce:	e0c1      	b.n	8005b54 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2204      	movs	r2, #4
 80059d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a16:	d10f      	bne.n	8005a38 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d007      	beq.n	8005a56 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d162      	bne.n	8005b24 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a5e:	e02e      	b.n	8005abe <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d115      	bne.n	8005a9a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f103 020c 	add.w	r2, r3, #12
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	7812      	ldrb	r2, [r2, #0]
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a98:	e011      	b.n	8005abe <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a9a:	f7fd fb19 	bl	80030d0 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d803      	bhi.n	8005ab2 <HAL_SPI_Receive+0x166>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d102      	bne.n	8005ab8 <HAL_SPI_Receive+0x16c>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005abc:	e04a      	b.n	8005b54 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1cb      	bne.n	8005a60 <HAL_SPI_Receive+0x114>
 8005ac8:	e031      	b.n	8005b2e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d113      	bne.n	8005b00 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	b292      	uxth	r2, r2
 8005ae4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005afe:	e011      	b.n	8005b24 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b00:	f7fd fae6 	bl	80030d0 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d803      	bhi.n	8005b18 <HAL_SPI_Receive+0x1cc>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d102      	bne.n	8005b1e <HAL_SPI_Receive+0x1d2>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b22:	e017      	b.n	8005b54 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1cd      	bne.n	8005aca <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fa54 	bl	8005fe0 <SPI_EndRxTransaction>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
 8005b50:	e000      	b.n	8005b54 <HAL_SPI_Receive+0x208>
  }

error :
 8005b52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b08c      	sub	sp, #48	; 0x30
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x26>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e18a      	b.n	8005eaa <HAL_SPI_TransmitReceive+0x33c>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b9c:	f7fd fa98 	bl	80030d0 <HAL_GetTick>
 8005ba0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005bb2:	887b      	ldrh	r3, [r7, #2]
 8005bb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d00f      	beq.n	8005bde <HAL_SPI_TransmitReceive+0x70>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc4:	d107      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x68>
 8005bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d003      	beq.n	8005bde <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bdc:	e15b      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x82>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x82>
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bf6:	e14e      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d003      	beq.n	8005c0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2205      	movs	r2, #5
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	887a      	ldrh	r2, [r7, #2]
 8005c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	887a      	ldrh	r2, [r7, #2]
 8005c22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	887a      	ldrh	r2, [r7, #2]
 8005c2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	887a      	ldrh	r2, [r7, #2]
 8005c34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d007      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c68:	d178      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x10a>
 8005c72:	8b7b      	ldrh	r3, [r7, #26]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d166      	bne.n	8005d46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	881a      	ldrh	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c9c:	e053      	b.n	8005d46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d11b      	bne.n	8005ce4 <HAL_SPI_TransmitReceive+0x176>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_SPI_TransmitReceive+0x176>
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d113      	bne.n	8005ce4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	1c9a      	adds	r2, r3, #2
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d119      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x1b8>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d014      	beq.n	8005d26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	b292      	uxth	r2, r2
 8005d08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d22:	2301      	movs	r3, #1
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d26:	f7fd f9d3 	bl	80030d0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d807      	bhi.n	8005d46 <HAL_SPI_TransmitReceive+0x1d8>
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d003      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d44:	e0a7      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1a6      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x130>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1a1      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x130>
 8005d5a:	e07c      	b.n	8005e56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x1fc>
 8005d64:	8b7b      	ldrh	r3, [r7, #26]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d16b      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d90:	e057      	b.n	8005e42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d11c      	bne.n	8005dda <HAL_SPI_TransmitReceive+0x26c>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d017      	beq.n	8005dda <HAL_SPI_TransmitReceive+0x26c>
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d114      	bne.n	8005dda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d119      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x2ae>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d014      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e1c:	f7fd f958 	bl	80030d0 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d803      	bhi.n	8005e34 <HAL_SPI_TransmitReceive+0x2c6>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d102      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x2cc>
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e40:	e029      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1a2      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x224>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d19d      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f926 	bl	80060ac <SPI_EndRxTxTransaction>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d006      	beq.n	8005e74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e72:	e010      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	e000      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005e94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3730      	adds	r7, #48	; 0x30
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ec0:	b2db      	uxtb	r3, r3
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ee0:	f7fd f8f6 	bl	80030d0 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ef0:	f7fd f8ee 	bl	80030d0 <HAL_GetTick>
 8005ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ef6:	4b39      	ldr	r3, [pc, #228]	; (8005fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	015b      	lsls	r3, r3, #5
 8005efc:	0d1b      	lsrs	r3, r3, #20
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f06:	e054      	b.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d050      	beq.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f10:	f7fd f8de 	bl	80030d0 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d902      	bls.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d13d      	bne.n	8005fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3e:	d111      	bne.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f48:	d004      	beq.n	8005f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f52:	d107      	bne.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6c:	d10f      	bne.n	8005f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e017      	b.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d19b      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000000 	.word	0x20000000

08005fe0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff4:	d111      	bne.n	800601a <SPI_EndRxTransaction+0x3a>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffe:	d004      	beq.n	800600a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d107      	bne.n	800601a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006018:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006022:	d12a      	bne.n	800607a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	d012      	beq.n	8006054 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	; 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff ff49 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d02d      	beq.n	80060a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e026      	b.n	80060a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2200      	movs	r2, #0
 800605c:	2101      	movs	r1, #1
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff ff36 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01a      	beq.n	80060a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	f043 0220 	orr.w	r2, r3, #32
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e013      	b.n	80060a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2200      	movs	r2, #0
 8006082:	2101      	movs	r1, #1
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff ff23 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e000      	b.n	80060a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060b8:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <SPI_EndRxTxTransaction+0x7c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1b      	ldr	r2, [pc, #108]	; (800612c <SPI_EndRxTxTransaction+0x80>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	0d5b      	lsrs	r3, r3, #21
 80060c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060c8:	fb02 f303 	mul.w	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d6:	d112      	bne.n	80060fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	2180      	movs	r1, #128	; 0x80
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff fef4 	bl	8005ed0 <SPI_WaitFlagStateUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e00f      	b.n	800611e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	3b01      	subs	r3, #1
 8006108:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d0f2      	beq.n	80060fe <SPI_EndRxTxTransaction+0x52>
 8006118:	e000      	b.n	800611c <SPI_EndRxTxTransaction+0x70>
        break;
 800611a:	bf00      	nop
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000000 	.word	0x20000000
 800612c:	165e9f81 	.word	0x165e9f81

08006130 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d123      	bne.n	800618a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800614a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	6851      	ldr	r1, [r2, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	6892      	ldr	r2, [r2, #8]
 8006156:	4311      	orrs	r1, r2
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	68d2      	ldr	r2, [r2, #12]
 800615c:	4311      	orrs	r1, r2
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	6912      	ldr	r2, [r2, #16]
 8006162:	4311      	orrs	r1, r2
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	6952      	ldr	r2, [r2, #20]
 8006168:	4311      	orrs	r1, r2
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	6992      	ldr	r2, [r2, #24]
 800616e:	4311      	orrs	r1, r2
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	69d2      	ldr	r2, [r2, #28]
 8006174:	4311      	orrs	r1, r2
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	6a12      	ldr	r2, [r2, #32]
 800617a:	4311      	orrs	r1, r2
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006180:	430a      	orrs	r2, r1
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e028      	b.n	80061dc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	69d9      	ldr	r1, [r3, #28]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4319      	orrs	r1, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	430b      	orrs	r3, r1
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80061b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	6851      	ldr	r1, [r2, #4]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	6892      	ldr	r2, [r2, #8]
 80061bc:	4311      	orrs	r1, r2
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	68d2      	ldr	r2, [r2, #12]
 80061c2:	4311      	orrs	r1, r2
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	6912      	ldr	r2, [r2, #16]
 80061c8:	4311      	orrs	r1, r2
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	6952      	ldr	r2, [r2, #20]
 80061ce:	4311      	orrs	r1, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	6992      	ldr	r2, [r2, #24]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d128      	bne.n	800624e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	1e59      	subs	r1, r3, #1
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	3b01      	subs	r3, #1
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4319      	orrs	r1, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	3b01      	subs	r3, #1
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	4319      	orrs	r1, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	3b01      	subs	r3, #1
 8006224:	031b      	lsls	r3, r3, #12
 8006226:	4319      	orrs	r1, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	3b01      	subs	r3, #1
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	4319      	orrs	r1, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	3b01      	subs	r3, #1
 8006238:	051b      	lsls	r3, r3, #20
 800623a:	4319      	orrs	r1, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	3b01      	subs	r3, #1
 8006242:	061b      	lsls	r3, r3, #24
 8006244:	430b      	orrs	r3, r1
 8006246:	431a      	orrs	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	609a      	str	r2, [r3, #8]
 800624c:	e02f      	b.n	80062ae <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006256:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	68d2      	ldr	r2, [r2, #12]
 800625e:	3a01      	subs	r2, #1
 8006260:	0311      	lsls	r1, r2, #12
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	6952      	ldr	r2, [r2, #20]
 8006266:	3a01      	subs	r2, #1
 8006268:	0512      	lsls	r2, r2, #20
 800626a:	430a      	orrs	r2, r1
 800626c:	431a      	orrs	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	1e59      	subs	r1, r3, #1
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	3b01      	subs	r3, #1
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	4319      	orrs	r1, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	3b01      	subs	r3, #1
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	4319      	orrs	r1, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	3b01      	subs	r3, #1
 800629a:	041b      	lsls	r3, r3, #16
 800629c:	4319      	orrs	r1, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	430b      	orrs	r3, r1
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	0d9b      	lsrs	r3, r3, #22
 80062d2:	059b      	lsls	r3, r3, #22
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	6811      	ldr	r1, [r2, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	6852      	ldr	r2, [r2, #4]
 80062dc:	4311      	orrs	r1, r2
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	6892      	ldr	r2, [r2, #8]
 80062e2:	3a01      	subs	r2, #1
 80062e4:	0152      	lsls	r2, r2, #5
 80062e6:	4311      	orrs	r1, r2
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	68d2      	ldr	r2, [r2, #12]
 80062ec:	0252      	lsls	r2, r2, #9
 80062ee:	430a      	orrs	r2, r1
 80062f0:	431a      	orrs	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80062f6:	f7fc feeb 	bl	80030d0 <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80062fc:	e010      	b.n	8006320 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d00c      	beq.n	8006320 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <FMC_SDRAM_SendCommand+0x60>
 800630c:	f7fc fee0 	bl	80030d0 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d201      	bcs.n	8006320 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e006      	b.n	800632e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d0e8      	beq.n	80062fe <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006348:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	0052      	lsls	r2, r2, #1
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <__errno>:
 8006364:	4b01      	ldr	r3, [pc, #4]	; (800636c <__errno+0x8>)
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20000088 	.word	0x20000088

08006370 <__libc_init_array>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4d0d      	ldr	r5, [pc, #52]	; (80063a8 <__libc_init_array+0x38>)
 8006374:	4c0d      	ldr	r4, [pc, #52]	; (80063ac <__libc_init_array+0x3c>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	2600      	movs	r6, #0
 800637c:	42a6      	cmp	r6, r4
 800637e:	d109      	bne.n	8006394 <__libc_init_array+0x24>
 8006380:	4d0b      	ldr	r5, [pc, #44]	; (80063b0 <__libc_init_array+0x40>)
 8006382:	4c0c      	ldr	r4, [pc, #48]	; (80063b4 <__libc_init_array+0x44>)
 8006384:	f004 fc90 	bl	800aca8 <_init>
 8006388:	1b64      	subs	r4, r4, r5
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	2600      	movs	r6, #0
 800638e:	42a6      	cmp	r6, r4
 8006390:	d105      	bne.n	800639e <__libc_init_array+0x2e>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	f855 3b04 	ldr.w	r3, [r5], #4
 8006398:	4798      	blx	r3
 800639a:	3601      	adds	r6, #1
 800639c:	e7ee      	b.n	800637c <__libc_init_array+0xc>
 800639e:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a2:	4798      	blx	r3
 80063a4:	3601      	adds	r6, #1
 80063a6:	e7f2      	b.n	800638e <__libc_init_array+0x1e>
 80063a8:	0800cc54 	.word	0x0800cc54
 80063ac:	0800cc54 	.word	0x0800cc54
 80063b0:	0800cc54 	.word	0x0800cc54
 80063b4:	0800cc58 	.word	0x0800cc58

080063b8 <memset>:
 80063b8:	4402      	add	r2, r0
 80063ba:	4603      	mov	r3, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	d100      	bne.n	80063c2 <memset+0xa>
 80063c0:	4770      	bx	lr
 80063c2:	f803 1b01 	strb.w	r1, [r3], #1
 80063c6:	e7f9      	b.n	80063bc <memset+0x4>

080063c8 <__cvt>:
 80063c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	ec55 4b10 	vmov	r4, r5, d0
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	460e      	mov	r6, r1
 80063d4:	4619      	mov	r1, r3
 80063d6:	462b      	mov	r3, r5
 80063d8:	bfbb      	ittet	lt
 80063da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063de:	461d      	movlt	r5, r3
 80063e0:	2300      	movge	r3, #0
 80063e2:	232d      	movlt	r3, #45	; 0x2d
 80063e4:	700b      	strb	r3, [r1, #0]
 80063e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063ec:	4691      	mov	r9, r2
 80063ee:	f023 0820 	bic.w	r8, r3, #32
 80063f2:	bfbc      	itt	lt
 80063f4:	4622      	movlt	r2, r4
 80063f6:	4614      	movlt	r4, r2
 80063f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063fc:	d005      	beq.n	800640a <__cvt+0x42>
 80063fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006402:	d100      	bne.n	8006406 <__cvt+0x3e>
 8006404:	3601      	adds	r6, #1
 8006406:	2102      	movs	r1, #2
 8006408:	e000      	b.n	800640c <__cvt+0x44>
 800640a:	2103      	movs	r1, #3
 800640c:	ab03      	add	r3, sp, #12
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	ab02      	add	r3, sp, #8
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	ec45 4b10 	vmov	d0, r4, r5
 8006418:	4653      	mov	r3, sl
 800641a:	4632      	mov	r2, r6
 800641c:	f001 fdac 	bl	8007f78 <_dtoa_r>
 8006420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006424:	4607      	mov	r7, r0
 8006426:	d102      	bne.n	800642e <__cvt+0x66>
 8006428:	f019 0f01 	tst.w	r9, #1
 800642c:	d022      	beq.n	8006474 <__cvt+0xac>
 800642e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006432:	eb07 0906 	add.w	r9, r7, r6
 8006436:	d110      	bne.n	800645a <__cvt+0x92>
 8006438:	783b      	ldrb	r3, [r7, #0]
 800643a:	2b30      	cmp	r3, #48	; 0x30
 800643c:	d10a      	bne.n	8006454 <__cvt+0x8c>
 800643e:	2200      	movs	r2, #0
 8006440:	2300      	movs	r3, #0
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800644a:	b918      	cbnz	r0, 8006454 <__cvt+0x8c>
 800644c:	f1c6 0601 	rsb	r6, r6, #1
 8006450:	f8ca 6000 	str.w	r6, [sl]
 8006454:	f8da 3000 	ldr.w	r3, [sl]
 8006458:	4499      	add	r9, r3
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	4620      	mov	r0, r4
 8006460:	4629      	mov	r1, r5
 8006462:	f7fa fb41 	bl	8000ae8 <__aeabi_dcmpeq>
 8006466:	b108      	cbz	r0, 800646c <__cvt+0xa4>
 8006468:	f8cd 900c 	str.w	r9, [sp, #12]
 800646c:	2230      	movs	r2, #48	; 0x30
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	454b      	cmp	r3, r9
 8006472:	d307      	bcc.n	8006484 <__cvt+0xbc>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006478:	1bdb      	subs	r3, r3, r7
 800647a:	4638      	mov	r0, r7
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	b004      	add	sp, #16
 8006480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	9103      	str	r1, [sp, #12]
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e7f0      	b.n	800646e <__cvt+0xa6>

0800648c <__exponent>:
 800648c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648e:	4603      	mov	r3, r0
 8006490:	2900      	cmp	r1, #0
 8006492:	bfb8      	it	lt
 8006494:	4249      	neglt	r1, r1
 8006496:	f803 2b02 	strb.w	r2, [r3], #2
 800649a:	bfb4      	ite	lt
 800649c:	222d      	movlt	r2, #45	; 0x2d
 800649e:	222b      	movge	r2, #43	; 0x2b
 80064a0:	2909      	cmp	r1, #9
 80064a2:	7042      	strb	r2, [r0, #1]
 80064a4:	dd2a      	ble.n	80064fc <__exponent+0x70>
 80064a6:	f10d 0407 	add.w	r4, sp, #7
 80064aa:	46a4      	mov	ip, r4
 80064ac:	270a      	movs	r7, #10
 80064ae:	46a6      	mov	lr, r4
 80064b0:	460a      	mov	r2, r1
 80064b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80064b6:	fb07 1516 	mls	r5, r7, r6, r1
 80064ba:	3530      	adds	r5, #48	; 0x30
 80064bc:	2a63      	cmp	r2, #99	; 0x63
 80064be:	f104 34ff 	add.w	r4, r4, #4294967295
 80064c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064c6:	4631      	mov	r1, r6
 80064c8:	dcf1      	bgt.n	80064ae <__exponent+0x22>
 80064ca:	3130      	adds	r1, #48	; 0x30
 80064cc:	f1ae 0502 	sub.w	r5, lr, #2
 80064d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064d4:	1c44      	adds	r4, r0, #1
 80064d6:	4629      	mov	r1, r5
 80064d8:	4561      	cmp	r1, ip
 80064da:	d30a      	bcc.n	80064f2 <__exponent+0x66>
 80064dc:	f10d 0209 	add.w	r2, sp, #9
 80064e0:	eba2 020e 	sub.w	r2, r2, lr
 80064e4:	4565      	cmp	r5, ip
 80064e6:	bf88      	it	hi
 80064e8:	2200      	movhi	r2, #0
 80064ea:	4413      	add	r3, r2
 80064ec:	1a18      	subs	r0, r3, r0
 80064ee:	b003      	add	sp, #12
 80064f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064fa:	e7ed      	b.n	80064d8 <__exponent+0x4c>
 80064fc:	2330      	movs	r3, #48	; 0x30
 80064fe:	3130      	adds	r1, #48	; 0x30
 8006500:	7083      	strb	r3, [r0, #2]
 8006502:	70c1      	strb	r1, [r0, #3]
 8006504:	1d03      	adds	r3, r0, #4
 8006506:	e7f1      	b.n	80064ec <__exponent+0x60>

08006508 <_printf_float>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	ed2d 8b02 	vpush	{d8}
 8006510:	b08d      	sub	sp, #52	; 0x34
 8006512:	460c      	mov	r4, r1
 8006514:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006518:	4616      	mov	r6, r2
 800651a:	461f      	mov	r7, r3
 800651c:	4605      	mov	r5, r0
 800651e:	f002 fe89 	bl	8009234 <_localeconv_r>
 8006522:	f8d0 a000 	ldr.w	sl, [r0]
 8006526:	4650      	mov	r0, sl
 8006528:	f7f9 fe62 	bl	80001f0 <strlen>
 800652c:	2300      	movs	r3, #0
 800652e:	930a      	str	r3, [sp, #40]	; 0x28
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	9305      	str	r3, [sp, #20]
 8006534:	f8d8 3000 	ldr.w	r3, [r8]
 8006538:	f894 b018 	ldrb.w	fp, [r4, #24]
 800653c:	3307      	adds	r3, #7
 800653e:	f023 0307 	bic.w	r3, r3, #7
 8006542:	f103 0208 	add.w	r2, r3, #8
 8006546:	f8c8 2000 	str.w	r2, [r8]
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006552:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006560:	ee08 0a10 	vmov	s16, r0
 8006564:	4b9f      	ldr	r3, [pc, #636]	; (80067e4 <_printf_float+0x2dc>)
 8006566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	f7fa faed 	bl	8000b4c <__aeabi_dcmpun>
 8006572:	bb88      	cbnz	r0, 80065d8 <_printf_float+0xd0>
 8006574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006578:	4b9a      	ldr	r3, [pc, #616]	; (80067e4 <_printf_float+0x2dc>)
 800657a:	f04f 32ff 	mov.w	r2, #4294967295
 800657e:	f7fa fac7 	bl	8000b10 <__aeabi_dcmple>
 8006582:	bb48      	cbnz	r0, 80065d8 <_printf_float+0xd0>
 8006584:	2200      	movs	r2, #0
 8006586:	2300      	movs	r3, #0
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa fab6 	bl	8000afc <__aeabi_dcmplt>
 8006590:	b110      	cbz	r0, 8006598 <_printf_float+0x90>
 8006592:	232d      	movs	r3, #45	; 0x2d
 8006594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006598:	4b93      	ldr	r3, [pc, #588]	; (80067e8 <_printf_float+0x2e0>)
 800659a:	4894      	ldr	r0, [pc, #592]	; (80067ec <_printf_float+0x2e4>)
 800659c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065a0:	bf94      	ite	ls
 80065a2:	4698      	movls	r8, r3
 80065a4:	4680      	movhi	r8, r0
 80065a6:	2303      	movs	r3, #3
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	9b05      	ldr	r3, [sp, #20]
 80065ac:	f023 0204 	bic.w	r2, r3, #4
 80065b0:	6022      	str	r2, [r4, #0]
 80065b2:	f04f 0900 	mov.w	r9, #0
 80065b6:	9700      	str	r7, [sp, #0]
 80065b8:	4633      	mov	r3, r6
 80065ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80065bc:	4621      	mov	r1, r4
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 f9d8 	bl	8006974 <_printf_common>
 80065c4:	3001      	adds	r0, #1
 80065c6:	f040 8090 	bne.w	80066ea <_printf_float+0x1e2>
 80065ca:	f04f 30ff 	mov.w	r0, #4294967295
 80065ce:	b00d      	add	sp, #52	; 0x34
 80065d0:	ecbd 8b02 	vpop	{d8}
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	4642      	mov	r2, r8
 80065da:	464b      	mov	r3, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	4649      	mov	r1, r9
 80065e0:	f7fa fab4 	bl	8000b4c <__aeabi_dcmpun>
 80065e4:	b140      	cbz	r0, 80065f8 <_printf_float+0xf0>
 80065e6:	464b      	mov	r3, r9
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfbc      	itt	lt
 80065ec:	232d      	movlt	r3, #45	; 0x2d
 80065ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065f2:	487f      	ldr	r0, [pc, #508]	; (80067f0 <_printf_float+0x2e8>)
 80065f4:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <_printf_float+0x2ec>)
 80065f6:	e7d1      	b.n	800659c <_printf_float+0x94>
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065fe:	9206      	str	r2, [sp, #24]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	d13f      	bne.n	8006684 <_printf_float+0x17c>
 8006604:	2306      	movs	r3, #6
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	6861      	ldr	r1, [r4, #4]
 800660c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006610:	2300      	movs	r3, #0
 8006612:	9303      	str	r3, [sp, #12]
 8006614:	ab0a      	add	r3, sp, #40	; 0x28
 8006616:	e9cd b301 	strd	fp, r3, [sp, #4]
 800661a:	ab09      	add	r3, sp, #36	; 0x24
 800661c:	ec49 8b10 	vmov	d0, r8, r9
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	6022      	str	r2, [r4, #0]
 8006624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006628:	4628      	mov	r0, r5
 800662a:	f7ff fecd 	bl	80063c8 <__cvt>
 800662e:	9b06      	ldr	r3, [sp, #24]
 8006630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006632:	2b47      	cmp	r3, #71	; 0x47
 8006634:	4680      	mov	r8, r0
 8006636:	d108      	bne.n	800664a <_printf_float+0x142>
 8006638:	1cc8      	adds	r0, r1, #3
 800663a:	db02      	blt.n	8006642 <_printf_float+0x13a>
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	4299      	cmp	r1, r3
 8006640:	dd41      	ble.n	80066c6 <_printf_float+0x1be>
 8006642:	f1ab 0b02 	sub.w	fp, fp, #2
 8006646:	fa5f fb8b 	uxtb.w	fp, fp
 800664a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800664e:	d820      	bhi.n	8006692 <_printf_float+0x18a>
 8006650:	3901      	subs	r1, #1
 8006652:	465a      	mov	r2, fp
 8006654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006658:	9109      	str	r1, [sp, #36]	; 0x24
 800665a:	f7ff ff17 	bl	800648c <__exponent>
 800665e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006660:	1813      	adds	r3, r2, r0
 8006662:	2a01      	cmp	r2, #1
 8006664:	4681      	mov	r9, r0
 8006666:	6123      	str	r3, [r4, #16]
 8006668:	dc02      	bgt.n	8006670 <_printf_float+0x168>
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	07d2      	lsls	r2, r2, #31
 800666e:	d501      	bpl.n	8006674 <_printf_float+0x16c>
 8006670:	3301      	adds	r3, #1
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006678:	2b00      	cmp	r3, #0
 800667a:	d09c      	beq.n	80065b6 <_printf_float+0xae>
 800667c:	232d      	movs	r3, #45	; 0x2d
 800667e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006682:	e798      	b.n	80065b6 <_printf_float+0xae>
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	2a47      	cmp	r2, #71	; 0x47
 8006688:	d1be      	bne.n	8006608 <_printf_float+0x100>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1bc      	bne.n	8006608 <_printf_float+0x100>
 800668e:	2301      	movs	r3, #1
 8006690:	e7b9      	b.n	8006606 <_printf_float+0xfe>
 8006692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006696:	d118      	bne.n	80066ca <_printf_float+0x1c2>
 8006698:	2900      	cmp	r1, #0
 800669a:	6863      	ldr	r3, [r4, #4]
 800669c:	dd0b      	ble.n	80066b6 <_printf_float+0x1ae>
 800669e:	6121      	str	r1, [r4, #16]
 80066a0:	b913      	cbnz	r3, 80066a8 <_printf_float+0x1a0>
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	07d0      	lsls	r0, r2, #31
 80066a6:	d502      	bpl.n	80066ae <_printf_float+0x1a6>
 80066a8:	3301      	adds	r3, #1
 80066aa:	440b      	add	r3, r1
 80066ac:	6123      	str	r3, [r4, #16]
 80066ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80066b0:	f04f 0900 	mov.w	r9, #0
 80066b4:	e7de      	b.n	8006674 <_printf_float+0x16c>
 80066b6:	b913      	cbnz	r3, 80066be <_printf_float+0x1b6>
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	07d2      	lsls	r2, r2, #31
 80066bc:	d501      	bpl.n	80066c2 <_printf_float+0x1ba>
 80066be:	3302      	adds	r3, #2
 80066c0:	e7f4      	b.n	80066ac <_printf_float+0x1a4>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e7f2      	b.n	80066ac <_printf_float+0x1a4>
 80066c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066cc:	4299      	cmp	r1, r3
 80066ce:	db05      	blt.n	80066dc <_printf_float+0x1d4>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	6121      	str	r1, [r4, #16]
 80066d4:	07d8      	lsls	r0, r3, #31
 80066d6:	d5ea      	bpl.n	80066ae <_printf_float+0x1a6>
 80066d8:	1c4b      	adds	r3, r1, #1
 80066da:	e7e7      	b.n	80066ac <_printf_float+0x1a4>
 80066dc:	2900      	cmp	r1, #0
 80066de:	bfd4      	ite	le
 80066e0:	f1c1 0202 	rsble	r2, r1, #2
 80066e4:	2201      	movgt	r2, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	e7e0      	b.n	80066ac <_printf_float+0x1a4>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	055a      	lsls	r2, r3, #21
 80066ee:	d407      	bmi.n	8006700 <_printf_float+0x1f8>
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	4642      	mov	r2, r8
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	d12c      	bne.n	8006758 <_printf_float+0x250>
 80066fe:	e764      	b.n	80065ca <_printf_float+0xc2>
 8006700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006704:	f240 80e0 	bls.w	80068c8 <_printf_float+0x3c0>
 8006708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	f7fa f9ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8006714:	2800      	cmp	r0, #0
 8006716:	d034      	beq.n	8006782 <_printf_float+0x27a>
 8006718:	4a37      	ldr	r2, [pc, #220]	; (80067f8 <_printf_float+0x2f0>)
 800671a:	2301      	movs	r3, #1
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af51 	beq.w	80065ca <_printf_float+0xc2>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	db02      	blt.n	8006736 <_printf_float+0x22e>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07d8      	lsls	r0, r3, #31
 8006734:	d510      	bpl.n	8006758 <_printf_float+0x250>
 8006736:	ee18 3a10 	vmov	r3, s16
 800673a:	4652      	mov	r2, sl
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af41 	beq.w	80065ca <_printf_float+0xc2>
 8006748:	f04f 0800 	mov.w	r8, #0
 800674c:	f104 091a 	add.w	r9, r4, #26
 8006750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006752:	3b01      	subs	r3, #1
 8006754:	4543      	cmp	r3, r8
 8006756:	dc09      	bgt.n	800676c <_printf_float+0x264>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	079b      	lsls	r3, r3, #30
 800675c:	f100 8105 	bmi.w	800696a <_printf_float+0x462>
 8006760:	68e0      	ldr	r0, [r4, #12]
 8006762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006764:	4298      	cmp	r0, r3
 8006766:	bfb8      	it	lt
 8006768:	4618      	movlt	r0, r3
 800676a:	e730      	b.n	80065ce <_printf_float+0xc6>
 800676c:	2301      	movs	r3, #1
 800676e:	464a      	mov	r2, r9
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f af27 	beq.w	80065ca <_printf_float+0xc2>
 800677c:	f108 0801 	add.w	r8, r8, #1
 8006780:	e7e6      	b.n	8006750 <_printf_float+0x248>
 8006782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006784:	2b00      	cmp	r3, #0
 8006786:	dc39      	bgt.n	80067fc <_printf_float+0x2f4>
 8006788:	4a1b      	ldr	r2, [pc, #108]	; (80067f8 <_printf_float+0x2f0>)
 800678a:	2301      	movs	r3, #1
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af19 	beq.w	80065ca <_printf_float+0xc2>
 8006798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800679c:	4313      	orrs	r3, r2
 800679e:	d102      	bne.n	80067a6 <_printf_float+0x29e>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07d9      	lsls	r1, r3, #31
 80067a4:	d5d8      	bpl.n	8006758 <_printf_float+0x250>
 80067a6:	ee18 3a10 	vmov	r3, s16
 80067aa:	4652      	mov	r2, sl
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f af09 	beq.w	80065ca <_printf_float+0xc2>
 80067b8:	f04f 0900 	mov.w	r9, #0
 80067bc:	f104 0a1a 	add.w	sl, r4, #26
 80067c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c2:	425b      	negs	r3, r3
 80067c4:	454b      	cmp	r3, r9
 80067c6:	dc01      	bgt.n	80067cc <_printf_float+0x2c4>
 80067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ca:	e792      	b.n	80066f2 <_printf_float+0x1ea>
 80067cc:	2301      	movs	r3, #1
 80067ce:	4652      	mov	r2, sl
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f aef7 	beq.w	80065ca <_printf_float+0xc2>
 80067dc:	f109 0901 	add.w	r9, r9, #1
 80067e0:	e7ee      	b.n	80067c0 <_printf_float+0x2b8>
 80067e2:	bf00      	nop
 80067e4:	7fefffff 	.word	0x7fefffff
 80067e8:	0800c7ac 	.word	0x0800c7ac
 80067ec:	0800c7b0 	.word	0x0800c7b0
 80067f0:	0800c7b8 	.word	0x0800c7b8
 80067f4:	0800c7b4 	.word	0x0800c7b4
 80067f8:	0800c7bc 	.word	0x0800c7bc
 80067fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006800:	429a      	cmp	r2, r3
 8006802:	bfa8      	it	ge
 8006804:	461a      	movge	r2, r3
 8006806:	2a00      	cmp	r2, #0
 8006808:	4691      	mov	r9, r2
 800680a:	dc37      	bgt.n	800687c <_printf_float+0x374>
 800680c:	f04f 0b00 	mov.w	fp, #0
 8006810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006814:	f104 021a 	add.w	r2, r4, #26
 8006818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	eba3 0309 	sub.w	r3, r3, r9
 8006820:	455b      	cmp	r3, fp
 8006822:	dc33      	bgt.n	800688c <_printf_float+0x384>
 8006824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006828:	429a      	cmp	r2, r3
 800682a:	db3b      	blt.n	80068a4 <_printf_float+0x39c>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	07da      	lsls	r2, r3, #31
 8006830:	d438      	bmi.n	80068a4 <_printf_float+0x39c>
 8006832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006834:	9a05      	ldr	r2, [sp, #20]
 8006836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006838:	1a9a      	subs	r2, r3, r2
 800683a:	eba3 0901 	sub.w	r9, r3, r1
 800683e:	4591      	cmp	r9, r2
 8006840:	bfa8      	it	ge
 8006842:	4691      	movge	r9, r2
 8006844:	f1b9 0f00 	cmp.w	r9, #0
 8006848:	dc35      	bgt.n	80068b6 <_printf_float+0x3ae>
 800684a:	f04f 0800 	mov.w	r8, #0
 800684e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006852:	f104 0a1a 	add.w	sl, r4, #26
 8006856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	eba3 0309 	sub.w	r3, r3, r9
 8006860:	4543      	cmp	r3, r8
 8006862:	f77f af79 	ble.w	8006758 <_printf_float+0x250>
 8006866:	2301      	movs	r3, #1
 8006868:	4652      	mov	r2, sl
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f aeaa 	beq.w	80065ca <_printf_float+0xc2>
 8006876:	f108 0801 	add.w	r8, r8, #1
 800687a:	e7ec      	b.n	8006856 <_printf_float+0x34e>
 800687c:	4613      	mov	r3, r2
 800687e:	4631      	mov	r1, r6
 8006880:	4642      	mov	r2, r8
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	d1c0      	bne.n	800680c <_printf_float+0x304>
 800688a:	e69e      	b.n	80065ca <_printf_float+0xc2>
 800688c:	2301      	movs	r3, #1
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	9205      	str	r2, [sp, #20]
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f ae97 	beq.w	80065ca <_printf_float+0xc2>
 800689c:	9a05      	ldr	r2, [sp, #20]
 800689e:	f10b 0b01 	add.w	fp, fp, #1
 80068a2:	e7b9      	b.n	8006818 <_printf_float+0x310>
 80068a4:	ee18 3a10 	vmov	r3, s16
 80068a8:	4652      	mov	r2, sl
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d1be      	bne.n	8006832 <_printf_float+0x32a>
 80068b4:	e689      	b.n	80065ca <_printf_float+0xc2>
 80068b6:	9a05      	ldr	r2, [sp, #20]
 80068b8:	464b      	mov	r3, r9
 80068ba:	4442      	add	r2, r8
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	d1c1      	bne.n	800684a <_printf_float+0x342>
 80068c6:	e680      	b.n	80065ca <_printf_float+0xc2>
 80068c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ca:	2a01      	cmp	r2, #1
 80068cc:	dc01      	bgt.n	80068d2 <_printf_float+0x3ca>
 80068ce:	07db      	lsls	r3, r3, #31
 80068d0:	d538      	bpl.n	8006944 <_printf_float+0x43c>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4642      	mov	r2, r8
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f ae74 	beq.w	80065ca <_printf_float+0xc2>
 80068e2:	ee18 3a10 	vmov	r3, s16
 80068e6:	4652      	mov	r2, sl
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f ae6b 	beq.w	80065ca <_printf_float+0xc2>
 80068f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f8:	2200      	movs	r2, #0
 80068fa:	2300      	movs	r3, #0
 80068fc:	f7fa f8f4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006900:	b9d8      	cbnz	r0, 800693a <_printf_float+0x432>
 8006902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006904:	f108 0201 	add.w	r2, r8, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	d10e      	bne.n	8006932 <_printf_float+0x42a>
 8006914:	e659      	b.n	80065ca <_printf_float+0xc2>
 8006916:	2301      	movs	r3, #1
 8006918:	4652      	mov	r2, sl
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f ae52 	beq.w	80065ca <_printf_float+0xc2>
 8006926:	f108 0801 	add.w	r8, r8, #1
 800692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	4543      	cmp	r3, r8
 8006930:	dcf1      	bgt.n	8006916 <_printf_float+0x40e>
 8006932:	464b      	mov	r3, r9
 8006934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006938:	e6dc      	b.n	80066f4 <_printf_float+0x1ec>
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	f104 0a1a 	add.w	sl, r4, #26
 8006942:	e7f2      	b.n	800692a <_printf_float+0x422>
 8006944:	2301      	movs	r3, #1
 8006946:	4642      	mov	r2, r8
 8006948:	e7df      	b.n	800690a <_printf_float+0x402>
 800694a:	2301      	movs	r3, #1
 800694c:	464a      	mov	r2, r9
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae38 	beq.w	80065ca <_printf_float+0xc2>
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006962:	1a5b      	subs	r3, r3, r1
 8006964:	4543      	cmp	r3, r8
 8006966:	dcf0      	bgt.n	800694a <_printf_float+0x442>
 8006968:	e6fa      	b.n	8006760 <_printf_float+0x258>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	f104 0919 	add.w	r9, r4, #25
 8006972:	e7f4      	b.n	800695e <_printf_float+0x456>

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4616      	mov	r6, r2
 800697a:	4699      	mov	r9, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006984:	4293      	cmp	r3, r2
 8006986:	bfb8      	it	lt
 8006988:	4613      	movlt	r3, r2
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006990:	4607      	mov	r7, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b10a      	cbz	r2, 800699a <_printf_common+0x26>
 8006996:	3301      	adds	r3, #1
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0699      	lsls	r1, r3, #26
 800699e:	bf42      	ittt	mi
 80069a0:	6833      	ldrmi	r3, [r6, #0]
 80069a2:	3302      	addmi	r3, #2
 80069a4:	6033      	strmi	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	f015 0506 	ands.w	r5, r5, #6
 80069ac:	d106      	bne.n	80069bc <_printf_common+0x48>
 80069ae:	f104 0a19 	add.w	sl, r4, #25
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dc26      	bgt.n	8006a0a <_printf_common+0x96>
 80069bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069c0:	1e13      	subs	r3, r2, #0
 80069c2:	6822      	ldr	r2, [r4, #0]
 80069c4:	bf18      	it	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	0692      	lsls	r2, r2, #26
 80069ca:	d42b      	bmi.n	8006a24 <_printf_common+0xb0>
 80069cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069d0:	4649      	mov	r1, r9
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c0      	blx	r8
 80069d6:	3001      	adds	r0, #1
 80069d8:	d01e      	beq.n	8006a18 <_printf_common+0xa4>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	68e5      	ldr	r5, [r4, #12]
 80069de:	6832      	ldr	r2, [r6, #0]
 80069e0:	f003 0306 	and.w	r3, r3, #6
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	bf08      	it	eq
 80069e8:	1aad      	subeq	r5, r5, r2
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	bf0c      	ite	eq
 80069f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f4:	2500      	movne	r5, #0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bfc4      	itt	gt
 80069fa:	1a9b      	subgt	r3, r3, r2
 80069fc:	18ed      	addgt	r5, r5, r3
 80069fe:	2600      	movs	r6, #0
 8006a00:	341a      	adds	r4, #26
 8006a02:	42b5      	cmp	r5, r6
 8006a04:	d11a      	bne.n	8006a3c <_printf_common+0xc8>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e008      	b.n	8006a1c <_printf_common+0xa8>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4638      	mov	r0, r7
 8006a12:	47c0      	blx	r8
 8006a14:	3001      	adds	r0, #1
 8006a16:	d103      	bne.n	8006a20 <_printf_common+0xac>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	3501      	adds	r5, #1
 8006a22:	e7c6      	b.n	80069b2 <_printf_common+0x3e>
 8006a24:	18e1      	adds	r1, r4, r3
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	2030      	movs	r0, #48	; 0x30
 8006a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a2e:	4422      	add	r2, r4
 8006a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a38:	3302      	adds	r3, #2
 8006a3a:	e7c7      	b.n	80069cc <_printf_common+0x58>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4649      	mov	r1, r9
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d0e6      	beq.n	8006a18 <_printf_common+0xa4>
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7d9      	b.n	8006a02 <_printf_common+0x8e>
	...

08006a50 <_printf_i>:
 8006a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	7e0f      	ldrb	r7, [r1, #24]
 8006a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a58:	2f78      	cmp	r7, #120	; 0x78
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	469a      	mov	sl, r3
 8006a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a66:	d807      	bhi.n	8006a78 <_printf_i+0x28>
 8006a68:	2f62      	cmp	r7, #98	; 0x62
 8006a6a:	d80a      	bhi.n	8006a82 <_printf_i+0x32>
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f000 80d8 	beq.w	8006c22 <_printf_i+0x1d2>
 8006a72:	2f58      	cmp	r7, #88	; 0x58
 8006a74:	f000 80a3 	beq.w	8006bbe <_printf_i+0x16e>
 8006a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a80:	e03a      	b.n	8006af8 <_printf_i+0xa8>
 8006a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a86:	2b15      	cmp	r3, #21
 8006a88:	d8f6      	bhi.n	8006a78 <_printf_i+0x28>
 8006a8a:	a101      	add	r1, pc, #4	; (adr r1, 8006a90 <_printf_i+0x40>)
 8006a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006a79 	.word	0x08006a79
 8006a9c:	08006a79 	.word	0x08006a79
 8006aa0:	08006a79 	.word	0x08006a79
 8006aa4:	08006a79 	.word	0x08006a79
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006a79 	.word	0x08006a79
 8006ab0:	08006a79 	.word	0x08006a79
 8006ab4:	08006a79 	.word	0x08006a79
 8006ab8:	08006a79 	.word	0x08006a79
 8006abc:	08006c09 	.word	0x08006c09
 8006ac0:	08006b2d 	.word	0x08006b2d
 8006ac4:	08006beb 	.word	0x08006beb
 8006ac8:	08006a79 	.word	0x08006a79
 8006acc:	08006a79 	.word	0x08006a79
 8006ad0:	08006c2b 	.word	0x08006c2b
 8006ad4:	08006a79 	.word	0x08006a79
 8006ad8:	08006b2d 	.word	0x08006b2d
 8006adc:	08006a79 	.word	0x08006a79
 8006ae0:	08006a79 	.word	0x08006a79
 8006ae4:	08006bf3 	.word	0x08006bf3
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	602a      	str	r2, [r5, #0]
 8006af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0a3      	b.n	8006c44 <_printf_i+0x1f4>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	6829      	ldr	r1, [r5, #0]
 8006b00:	0606      	lsls	r6, r0, #24
 8006b02:	f101 0304 	add.w	r3, r1, #4
 8006b06:	d50a      	bpl.n	8006b1e <_printf_i+0xce>
 8006b08:	680e      	ldr	r6, [r1, #0]
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	da03      	bge.n	8006b18 <_printf_i+0xc8>
 8006b10:	232d      	movs	r3, #45	; 0x2d
 8006b12:	4276      	negs	r6, r6
 8006b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b18:	485e      	ldr	r0, [pc, #376]	; (8006c94 <_printf_i+0x244>)
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	e019      	b.n	8006b52 <_printf_i+0x102>
 8006b1e:	680e      	ldr	r6, [r1, #0]
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b26:	bf18      	it	ne
 8006b28:	b236      	sxthne	r6, r6
 8006b2a:	e7ef      	b.n	8006b0c <_printf_i+0xbc>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	1d19      	adds	r1, r3, #4
 8006b32:	6029      	str	r1, [r5, #0]
 8006b34:	0601      	lsls	r1, r0, #24
 8006b36:	d501      	bpl.n	8006b3c <_printf_i+0xec>
 8006b38:	681e      	ldr	r6, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <_printf_i+0xf2>
 8006b3c:	0646      	lsls	r6, r0, #25
 8006b3e:	d5fb      	bpl.n	8006b38 <_printf_i+0xe8>
 8006b40:	881e      	ldrh	r6, [r3, #0]
 8006b42:	4854      	ldr	r0, [pc, #336]	; (8006c94 <_printf_i+0x244>)
 8006b44:	2f6f      	cmp	r7, #111	; 0x6f
 8006b46:	bf0c      	ite	eq
 8006b48:	2308      	moveq	r3, #8
 8006b4a:	230a      	movne	r3, #10
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b52:	6865      	ldr	r5, [r4, #4]
 8006b54:	60a5      	str	r5, [r4, #8]
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	bfa2      	ittt	ge
 8006b5a:	6821      	ldrge	r1, [r4, #0]
 8006b5c:	f021 0104 	bicge.w	r1, r1, #4
 8006b60:	6021      	strge	r1, [r4, #0]
 8006b62:	b90e      	cbnz	r6, 8006b68 <_printf_i+0x118>
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	d04d      	beq.n	8006c04 <_printf_i+0x1b4>
 8006b68:	4615      	mov	r5, r2
 8006b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b72:	5dc7      	ldrb	r7, [r0, r7]
 8006b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b78:	4637      	mov	r7, r6
 8006b7a:	42bb      	cmp	r3, r7
 8006b7c:	460e      	mov	r6, r1
 8006b7e:	d9f4      	bls.n	8006b6a <_printf_i+0x11a>
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d10b      	bne.n	8006b9c <_printf_i+0x14c>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	07de      	lsls	r6, r3, #31
 8006b88:	d508      	bpl.n	8006b9c <_printf_i+0x14c>
 8006b8a:	6923      	ldr	r3, [r4, #16]
 8006b8c:	6861      	ldr	r1, [r4, #4]
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	bfde      	ittt	le
 8006b92:	2330      	movle	r3, #48	; 0x30
 8006b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b9c:	1b52      	subs	r2, r2, r5
 8006b9e:	6122      	str	r2, [r4, #16]
 8006ba0:	f8cd a000 	str.w	sl, [sp]
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	aa03      	add	r2, sp, #12
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4640      	mov	r0, r8
 8006bac:	f7ff fee2 	bl	8006974 <_printf_common>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d14c      	bne.n	8006c4e <_printf_i+0x1fe>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	b004      	add	sp, #16
 8006bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbe:	4835      	ldr	r0, [pc, #212]	; (8006c94 <_printf_i+0x244>)
 8006bc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bc4:	6829      	ldr	r1, [r5, #0]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bcc:	6029      	str	r1, [r5, #0]
 8006bce:	061d      	lsls	r5, r3, #24
 8006bd0:	d514      	bpl.n	8006bfc <_printf_i+0x1ac>
 8006bd2:	07df      	lsls	r7, r3, #31
 8006bd4:	bf44      	itt	mi
 8006bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bda:	6023      	strmi	r3, [r4, #0]
 8006bdc:	b91e      	cbnz	r6, 8006be6 <_printf_i+0x196>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f023 0320 	bic.w	r3, r3, #32
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	2310      	movs	r3, #16
 8006be8:	e7b0      	b.n	8006b4c <_printf_i+0xfc>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	f043 0320 	orr.w	r3, r3, #32
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	2378      	movs	r3, #120	; 0x78
 8006bf4:	4828      	ldr	r0, [pc, #160]	; (8006c98 <_printf_i+0x248>)
 8006bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bfa:	e7e3      	b.n	8006bc4 <_printf_i+0x174>
 8006bfc:	0659      	lsls	r1, r3, #25
 8006bfe:	bf48      	it	mi
 8006c00:	b2b6      	uxthmi	r6, r6
 8006c02:	e7e6      	b.n	8006bd2 <_printf_i+0x182>
 8006c04:	4615      	mov	r5, r2
 8006c06:	e7bb      	b.n	8006b80 <_printf_i+0x130>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	6826      	ldr	r6, [r4, #0]
 8006c0c:	6961      	ldr	r1, [r4, #20]
 8006c0e:	1d18      	adds	r0, r3, #4
 8006c10:	6028      	str	r0, [r5, #0]
 8006c12:	0635      	lsls	r5, r6, #24
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	d501      	bpl.n	8006c1c <_printf_i+0x1cc>
 8006c18:	6019      	str	r1, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <_printf_i+0x1d2>
 8006c1c:	0670      	lsls	r0, r6, #25
 8006c1e:	d5fb      	bpl.n	8006c18 <_printf_i+0x1c8>
 8006c20:	8019      	strh	r1, [r3, #0]
 8006c22:	2300      	movs	r3, #0
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	4615      	mov	r5, r2
 8006c28:	e7ba      	b.n	8006ba0 <_printf_i+0x150>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	602a      	str	r2, [r5, #0]
 8006c30:	681d      	ldr	r5, [r3, #0]
 8006c32:	6862      	ldr	r2, [r4, #4]
 8006c34:	2100      	movs	r1, #0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f7f9 fae2 	bl	8000200 <memchr>
 8006c3c:	b108      	cbz	r0, 8006c42 <_printf_i+0x1f2>
 8006c3e:	1b40      	subs	r0, r0, r5
 8006c40:	6060      	str	r0, [r4, #4]
 8006c42:	6863      	ldr	r3, [r4, #4]
 8006c44:	6123      	str	r3, [r4, #16]
 8006c46:	2300      	movs	r3, #0
 8006c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4c:	e7a8      	b.n	8006ba0 <_printf_i+0x150>
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	462a      	mov	r2, r5
 8006c52:	4649      	mov	r1, r9
 8006c54:	4640      	mov	r0, r8
 8006c56:	47d0      	blx	sl
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d0ab      	beq.n	8006bb4 <_printf_i+0x164>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	079b      	lsls	r3, r3, #30
 8006c60:	d413      	bmi.n	8006c8a <_printf_i+0x23a>
 8006c62:	68e0      	ldr	r0, [r4, #12]
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	4298      	cmp	r0, r3
 8006c68:	bfb8      	it	lt
 8006c6a:	4618      	movlt	r0, r3
 8006c6c:	e7a4      	b.n	8006bb8 <_printf_i+0x168>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4632      	mov	r2, r6
 8006c72:	4649      	mov	r1, r9
 8006c74:	4640      	mov	r0, r8
 8006c76:	47d0      	blx	sl
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d09b      	beq.n	8006bb4 <_printf_i+0x164>
 8006c7c:	3501      	adds	r5, #1
 8006c7e:	68e3      	ldr	r3, [r4, #12]
 8006c80:	9903      	ldr	r1, [sp, #12]
 8006c82:	1a5b      	subs	r3, r3, r1
 8006c84:	42ab      	cmp	r3, r5
 8006c86:	dcf2      	bgt.n	8006c6e <_printf_i+0x21e>
 8006c88:	e7eb      	b.n	8006c62 <_printf_i+0x212>
 8006c8a:	2500      	movs	r5, #0
 8006c8c:	f104 0619 	add.w	r6, r4, #25
 8006c90:	e7f5      	b.n	8006c7e <_printf_i+0x22e>
 8006c92:	bf00      	nop
 8006c94:	0800c7be 	.word	0x0800c7be
 8006c98:	0800c7cf 	.word	0x0800c7cf

08006c9c <_scanf_float>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	4617      	mov	r7, r2
 8006ca4:	9303      	str	r3, [sp, #12]
 8006ca6:	688b      	ldr	r3, [r1, #8]
 8006ca8:	1e5a      	subs	r2, r3, #1
 8006caa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cae:	bf83      	ittte	hi
 8006cb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cb4:	195b      	addhi	r3, r3, r5
 8006cb6:	9302      	strhi	r3, [sp, #8]
 8006cb8:	2300      	movls	r3, #0
 8006cba:	bf86      	itte	hi
 8006cbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cc0:	608b      	strhi	r3, [r1, #8]
 8006cc2:	9302      	strls	r3, [sp, #8]
 8006cc4:	680b      	ldr	r3, [r1, #0]
 8006cc6:	468b      	mov	fp, r1
 8006cc8:	2500      	movs	r5, #0
 8006cca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006cce:	f84b 3b1c 	str.w	r3, [fp], #28
 8006cd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	460c      	mov	r4, r1
 8006cda:	465e      	mov	r6, fp
 8006cdc:	46aa      	mov	sl, r5
 8006cde:	46a9      	mov	r9, r5
 8006ce0:	9501      	str	r5, [sp, #4]
 8006ce2:	68a2      	ldr	r2, [r4, #8]
 8006ce4:	b152      	cbz	r2, 8006cfc <_scanf_float+0x60>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b4e      	cmp	r3, #78	; 0x4e
 8006cec:	d864      	bhi.n	8006db8 <_scanf_float+0x11c>
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d83c      	bhi.n	8006d6c <_scanf_float+0xd0>
 8006cf2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006cf6:	b2c8      	uxtb	r0, r1
 8006cf8:	280e      	cmp	r0, #14
 8006cfa:	d93a      	bls.n	8006d72 <_scanf_float+0xd6>
 8006cfc:	f1b9 0f00 	cmp.w	r9, #0
 8006d00:	d003      	beq.n	8006d0a <_scanf_float+0x6e>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d0e:	f1ba 0f01 	cmp.w	sl, #1
 8006d12:	f200 8113 	bhi.w	8006f3c <_scanf_float+0x2a0>
 8006d16:	455e      	cmp	r6, fp
 8006d18:	f200 8105 	bhi.w	8006f26 <_scanf_float+0x28a>
 8006d1c:	2501      	movs	r5, #1
 8006d1e:	4628      	mov	r0, r5
 8006d20:	b007      	add	sp, #28
 8006d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d2a:	2a0d      	cmp	r2, #13
 8006d2c:	d8e6      	bhi.n	8006cfc <_scanf_float+0x60>
 8006d2e:	a101      	add	r1, pc, #4	; (adr r1, 8006d34 <_scanf_float+0x98>)
 8006d30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d34:	08006e73 	.word	0x08006e73
 8006d38:	08006cfd 	.word	0x08006cfd
 8006d3c:	08006cfd 	.word	0x08006cfd
 8006d40:	08006cfd 	.word	0x08006cfd
 8006d44:	08006ed3 	.word	0x08006ed3
 8006d48:	08006eab 	.word	0x08006eab
 8006d4c:	08006cfd 	.word	0x08006cfd
 8006d50:	08006cfd 	.word	0x08006cfd
 8006d54:	08006e81 	.word	0x08006e81
 8006d58:	08006cfd 	.word	0x08006cfd
 8006d5c:	08006cfd 	.word	0x08006cfd
 8006d60:	08006cfd 	.word	0x08006cfd
 8006d64:	08006cfd 	.word	0x08006cfd
 8006d68:	08006e39 	.word	0x08006e39
 8006d6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d70:	e7db      	b.n	8006d2a <_scanf_float+0x8e>
 8006d72:	290e      	cmp	r1, #14
 8006d74:	d8c2      	bhi.n	8006cfc <_scanf_float+0x60>
 8006d76:	a001      	add	r0, pc, #4	; (adr r0, 8006d7c <_scanf_float+0xe0>)
 8006d78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d7c:	08006e2b 	.word	0x08006e2b
 8006d80:	08006cfd 	.word	0x08006cfd
 8006d84:	08006e2b 	.word	0x08006e2b
 8006d88:	08006ebf 	.word	0x08006ebf
 8006d8c:	08006cfd 	.word	0x08006cfd
 8006d90:	08006dd9 	.word	0x08006dd9
 8006d94:	08006e15 	.word	0x08006e15
 8006d98:	08006e15 	.word	0x08006e15
 8006d9c:	08006e15 	.word	0x08006e15
 8006da0:	08006e15 	.word	0x08006e15
 8006da4:	08006e15 	.word	0x08006e15
 8006da8:	08006e15 	.word	0x08006e15
 8006dac:	08006e15 	.word	0x08006e15
 8006db0:	08006e15 	.word	0x08006e15
 8006db4:	08006e15 	.word	0x08006e15
 8006db8:	2b6e      	cmp	r3, #110	; 0x6e
 8006dba:	d809      	bhi.n	8006dd0 <_scanf_float+0x134>
 8006dbc:	2b60      	cmp	r3, #96	; 0x60
 8006dbe:	d8b2      	bhi.n	8006d26 <_scanf_float+0x8a>
 8006dc0:	2b54      	cmp	r3, #84	; 0x54
 8006dc2:	d077      	beq.n	8006eb4 <_scanf_float+0x218>
 8006dc4:	2b59      	cmp	r3, #89	; 0x59
 8006dc6:	d199      	bne.n	8006cfc <_scanf_float+0x60>
 8006dc8:	2d07      	cmp	r5, #7
 8006dca:	d197      	bne.n	8006cfc <_scanf_float+0x60>
 8006dcc:	2508      	movs	r5, #8
 8006dce:	e029      	b.n	8006e24 <_scanf_float+0x188>
 8006dd0:	2b74      	cmp	r3, #116	; 0x74
 8006dd2:	d06f      	beq.n	8006eb4 <_scanf_float+0x218>
 8006dd4:	2b79      	cmp	r3, #121	; 0x79
 8006dd6:	e7f6      	b.n	8006dc6 <_scanf_float+0x12a>
 8006dd8:	6821      	ldr	r1, [r4, #0]
 8006dda:	05c8      	lsls	r0, r1, #23
 8006ddc:	d51a      	bpl.n	8006e14 <_scanf_float+0x178>
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006de4:	6021      	str	r1, [r4, #0]
 8006de6:	f109 0901 	add.w	r9, r9, #1
 8006dea:	b11b      	cbz	r3, 8006df4 <_scanf_float+0x158>
 8006dec:	3b01      	subs	r3, #1
 8006dee:	3201      	adds	r2, #1
 8006df0:	9302      	str	r3, [sp, #8]
 8006df2:	60a2      	str	r2, [r4, #8]
 8006df4:	68a3      	ldr	r3, [r4, #8]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	60a3      	str	r3, [r4, #8]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	f340 8084 	ble.w	8006f14 <_scanf_float+0x278>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	e766      	b.n	8006ce2 <_scanf_float+0x46>
 8006e14:	eb1a 0f05 	cmn.w	sl, r5
 8006e18:	f47f af70 	bne.w	8006cfc <_scanf_float+0x60>
 8006e1c:	6822      	ldr	r2, [r4, #0]
 8006e1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	f806 3b01 	strb.w	r3, [r6], #1
 8006e28:	e7e4      	b.n	8006df4 <_scanf_float+0x158>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	0610      	lsls	r0, r2, #24
 8006e2e:	f57f af65 	bpl.w	8006cfc <_scanf_float+0x60>
 8006e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e36:	e7f4      	b.n	8006e22 <_scanf_float+0x186>
 8006e38:	f1ba 0f00 	cmp.w	sl, #0
 8006e3c:	d10e      	bne.n	8006e5c <_scanf_float+0x1c0>
 8006e3e:	f1b9 0f00 	cmp.w	r9, #0
 8006e42:	d10e      	bne.n	8006e62 <_scanf_float+0x1c6>
 8006e44:	6822      	ldr	r2, [r4, #0]
 8006e46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e4e:	d108      	bne.n	8006e62 <_scanf_float+0x1c6>
 8006e50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e54:	6022      	str	r2, [r4, #0]
 8006e56:	f04f 0a01 	mov.w	sl, #1
 8006e5a:	e7e3      	b.n	8006e24 <_scanf_float+0x188>
 8006e5c:	f1ba 0f02 	cmp.w	sl, #2
 8006e60:	d055      	beq.n	8006f0e <_scanf_float+0x272>
 8006e62:	2d01      	cmp	r5, #1
 8006e64:	d002      	beq.n	8006e6c <_scanf_float+0x1d0>
 8006e66:	2d04      	cmp	r5, #4
 8006e68:	f47f af48 	bne.w	8006cfc <_scanf_float+0x60>
 8006e6c:	3501      	adds	r5, #1
 8006e6e:	b2ed      	uxtb	r5, r5
 8006e70:	e7d8      	b.n	8006e24 <_scanf_float+0x188>
 8006e72:	f1ba 0f01 	cmp.w	sl, #1
 8006e76:	f47f af41 	bne.w	8006cfc <_scanf_float+0x60>
 8006e7a:	f04f 0a02 	mov.w	sl, #2
 8006e7e:	e7d1      	b.n	8006e24 <_scanf_float+0x188>
 8006e80:	b97d      	cbnz	r5, 8006ea2 <_scanf_float+0x206>
 8006e82:	f1b9 0f00 	cmp.w	r9, #0
 8006e86:	f47f af3c 	bne.w	8006d02 <_scanf_float+0x66>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e94:	f47f af39 	bne.w	8006d0a <_scanf_float+0x6e>
 8006e98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	2501      	movs	r5, #1
 8006ea0:	e7c0      	b.n	8006e24 <_scanf_float+0x188>
 8006ea2:	2d03      	cmp	r5, #3
 8006ea4:	d0e2      	beq.n	8006e6c <_scanf_float+0x1d0>
 8006ea6:	2d05      	cmp	r5, #5
 8006ea8:	e7de      	b.n	8006e68 <_scanf_float+0x1cc>
 8006eaa:	2d02      	cmp	r5, #2
 8006eac:	f47f af26 	bne.w	8006cfc <_scanf_float+0x60>
 8006eb0:	2503      	movs	r5, #3
 8006eb2:	e7b7      	b.n	8006e24 <_scanf_float+0x188>
 8006eb4:	2d06      	cmp	r5, #6
 8006eb6:	f47f af21 	bne.w	8006cfc <_scanf_float+0x60>
 8006eba:	2507      	movs	r5, #7
 8006ebc:	e7b2      	b.n	8006e24 <_scanf_float+0x188>
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	0591      	lsls	r1, r2, #22
 8006ec2:	f57f af1b 	bpl.w	8006cfc <_scanf_float+0x60>
 8006ec6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006eca:	6022      	str	r2, [r4, #0]
 8006ecc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ed0:	e7a8      	b.n	8006e24 <_scanf_float+0x188>
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ed8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006edc:	d006      	beq.n	8006eec <_scanf_float+0x250>
 8006ede:	0550      	lsls	r0, r2, #21
 8006ee0:	f57f af0c 	bpl.w	8006cfc <_scanf_float+0x60>
 8006ee4:	f1b9 0f00 	cmp.w	r9, #0
 8006ee8:	f43f af0f 	beq.w	8006d0a <_scanf_float+0x6e>
 8006eec:	0591      	lsls	r1, r2, #22
 8006eee:	bf58      	it	pl
 8006ef0:	9901      	ldrpl	r1, [sp, #4]
 8006ef2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ef6:	bf58      	it	pl
 8006ef8:	eba9 0101 	subpl.w	r1, r9, r1
 8006efc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f00:	bf58      	it	pl
 8006f02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f06:	6022      	str	r2, [r4, #0]
 8006f08:	f04f 0900 	mov.w	r9, #0
 8006f0c:	e78a      	b.n	8006e24 <_scanf_float+0x188>
 8006f0e:	f04f 0a03 	mov.w	sl, #3
 8006f12:	e787      	b.n	8006e24 <_scanf_float+0x188>
 8006f14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	4798      	blx	r3
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f aedf 	beq.w	8006ce2 <_scanf_float+0x46>
 8006f24:	e6ea      	b.n	8006cfc <_scanf_float+0x60>
 8006f26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f2e:	463a      	mov	r2, r7
 8006f30:	4640      	mov	r0, r8
 8006f32:	4798      	blx	r3
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	e6ec      	b.n	8006d16 <_scanf_float+0x7a>
 8006f3c:	1e6b      	subs	r3, r5, #1
 8006f3e:	2b06      	cmp	r3, #6
 8006f40:	d825      	bhi.n	8006f8e <_scanf_float+0x2f2>
 8006f42:	2d02      	cmp	r5, #2
 8006f44:	d836      	bhi.n	8006fb4 <_scanf_float+0x318>
 8006f46:	455e      	cmp	r6, fp
 8006f48:	f67f aee8 	bls.w	8006d1c <_scanf_float+0x80>
 8006f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f54:	463a      	mov	r2, r7
 8006f56:	4640      	mov	r0, r8
 8006f58:	4798      	blx	r3
 8006f5a:	6923      	ldr	r3, [r4, #16]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	e7f1      	b.n	8006f46 <_scanf_float+0x2aa>
 8006f62:	9802      	ldr	r0, [sp, #8]
 8006f64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f68:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f6c:	9002      	str	r0, [sp, #8]
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4640      	mov	r0, r8
 8006f72:	4798      	blx	r3
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f7e:	fa5f fa8a 	uxtb.w	sl, sl
 8006f82:	f1ba 0f02 	cmp.w	sl, #2
 8006f86:	d1ec      	bne.n	8006f62 <_scanf_float+0x2c6>
 8006f88:	3d03      	subs	r5, #3
 8006f8a:	b2ed      	uxtb	r5, r5
 8006f8c:	1b76      	subs	r6, r6, r5
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	05da      	lsls	r2, r3, #23
 8006f92:	d52f      	bpl.n	8006ff4 <_scanf_float+0x358>
 8006f94:	055b      	lsls	r3, r3, #21
 8006f96:	d510      	bpl.n	8006fba <_scanf_float+0x31e>
 8006f98:	455e      	cmp	r6, fp
 8006f9a:	f67f aebf 	bls.w	8006d1c <_scanf_float+0x80>
 8006f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4798      	blx	r3
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	e7f1      	b.n	8006f98 <_scanf_float+0x2fc>
 8006fb4:	46aa      	mov	sl, r5
 8006fb6:	9602      	str	r6, [sp, #8]
 8006fb8:	e7df      	b.n	8006f7a <_scanf_float+0x2de>
 8006fba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	2965      	cmp	r1, #101	; 0x65
 8006fc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fc6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	d00c      	beq.n	8006fe8 <_scanf_float+0x34c>
 8006fce:	2945      	cmp	r1, #69	; 0x45
 8006fd0:	d00a      	beq.n	8006fe8 <_scanf_float+0x34c>
 8006fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fd6:	463a      	mov	r2, r7
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4798      	blx	r3
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	1eb5      	subs	r5, r6, #2
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fec:	463a      	mov	r2, r7
 8006fee:	4640      	mov	r0, r8
 8006ff0:	4798      	blx	r3
 8006ff2:	462e      	mov	r6, r5
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	f015 0510 	ands.w	r5, r5, #16
 8006ffa:	d159      	bne.n	80070b0 <_scanf_float+0x414>
 8006ffc:	7035      	strb	r5, [r6, #0]
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007008:	d11b      	bne.n	8007042 <_scanf_float+0x3a6>
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	454b      	cmp	r3, r9
 800700e:	eba3 0209 	sub.w	r2, r3, r9
 8007012:	d123      	bne.n	800705c <_scanf_float+0x3c0>
 8007014:	2200      	movs	r2, #0
 8007016:	4659      	mov	r1, fp
 8007018:	4640      	mov	r0, r8
 800701a:	f000 fe97 	bl	8007d4c <_strtod_r>
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	f012 0f02 	tst.w	r2, #2
 8007026:	ec57 6b10 	vmov	r6, r7, d0
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	d021      	beq.n	8007072 <_scanf_float+0x3d6>
 800702e:	9903      	ldr	r1, [sp, #12]
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	600a      	str	r2, [r1, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	e9c3 6700 	strd	r6, r7, [r3]
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60e3      	str	r3, [r4, #12]
 8007040:	e66d      	b.n	8006d1e <_scanf_float+0x82>
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0e5      	beq.n	8007014 <_scanf_float+0x378>
 8007048:	9905      	ldr	r1, [sp, #20]
 800704a:	230a      	movs	r3, #10
 800704c:	462a      	mov	r2, r5
 800704e:	3101      	adds	r1, #1
 8007050:	4640      	mov	r0, r8
 8007052:	f000 ff03 	bl	8007e5c <_strtol_r>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	9e05      	ldr	r6, [sp, #20]
 800705a:	1ac2      	subs	r2, r0, r3
 800705c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007060:	429e      	cmp	r6, r3
 8007062:	bf28      	it	cs
 8007064:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007068:	4912      	ldr	r1, [pc, #72]	; (80070b4 <_scanf_float+0x418>)
 800706a:	4630      	mov	r0, r6
 800706c:	f000 f82c 	bl	80070c8 <siprintf>
 8007070:	e7d0      	b.n	8007014 <_scanf_float+0x378>
 8007072:	9903      	ldr	r1, [sp, #12]
 8007074:	f012 0f04 	tst.w	r2, #4
 8007078:	f103 0204 	add.w	r2, r3, #4
 800707c:	600a      	str	r2, [r1, #0]
 800707e:	d1d9      	bne.n	8007034 <_scanf_float+0x398>
 8007080:	f8d3 8000 	ldr.w	r8, [r3]
 8007084:	ee10 2a10 	vmov	r2, s0
 8007088:	ee10 0a10 	vmov	r0, s0
 800708c:	463b      	mov	r3, r7
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 fd5c 	bl	8000b4c <__aeabi_dcmpun>
 8007094:	b128      	cbz	r0, 80070a2 <_scanf_float+0x406>
 8007096:	4808      	ldr	r0, [pc, #32]	; (80070b8 <_scanf_float+0x41c>)
 8007098:	f000 f810 	bl	80070bc <nanf>
 800709c:	ed88 0a00 	vstr	s0, [r8]
 80070a0:	e7cb      	b.n	800703a <_scanf_float+0x39e>
 80070a2:	4630      	mov	r0, r6
 80070a4:	4639      	mov	r1, r7
 80070a6:	f7f9 fdaf 	bl	8000c08 <__aeabi_d2f>
 80070aa:	f8c8 0000 	str.w	r0, [r8]
 80070ae:	e7c4      	b.n	800703a <_scanf_float+0x39e>
 80070b0:	2500      	movs	r5, #0
 80070b2:	e634      	b.n	8006d1e <_scanf_float+0x82>
 80070b4:	0800c7e0 	.word	0x0800c7e0
 80070b8:	0800cbe8 	.word	0x0800cbe8

080070bc <nanf>:
 80070bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070c4 <nanf+0x8>
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	7fc00000 	.word	0x7fc00000

080070c8 <siprintf>:
 80070c8:	b40e      	push	{r1, r2, r3}
 80070ca:	b500      	push	{lr}
 80070cc:	b09c      	sub	sp, #112	; 0x70
 80070ce:	ab1d      	add	r3, sp, #116	; 0x74
 80070d0:	9002      	str	r0, [sp, #8]
 80070d2:	9006      	str	r0, [sp, #24]
 80070d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <siprintf+0x38>)
 80070da:	9107      	str	r1, [sp, #28]
 80070dc:	9104      	str	r1, [sp, #16]
 80070de:	4909      	ldr	r1, [pc, #36]	; (8007104 <siprintf+0x3c>)
 80070e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e4:	9105      	str	r1, [sp, #20]
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	a902      	add	r1, sp, #8
 80070ec:	f002 fee2 	bl	8009eb4 <_svfiprintf_r>
 80070f0:	9b02      	ldr	r3, [sp, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	b01c      	add	sp, #112	; 0x70
 80070f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070fc:	b003      	add	sp, #12
 80070fe:	4770      	bx	lr
 8007100:	20000088 	.word	0x20000088
 8007104:	ffff0208 	.word	0xffff0208

08007108 <sulp>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	ec45 4b10 	vmov	d0, r4, r5
 8007112:	4616      	mov	r6, r2
 8007114:	f002 fc2c 	bl	8009970 <__ulp>
 8007118:	ec51 0b10 	vmov	r0, r1, d0
 800711c:	b17e      	cbz	r6, 800713e <sulp+0x36>
 800711e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007126:	2b00      	cmp	r3, #0
 8007128:	dd09      	ble.n	800713e <sulp+0x36>
 800712a:	051b      	lsls	r3, r3, #20
 800712c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007130:	2400      	movs	r4, #0
 8007132:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	f7f9 fa6d 	bl	8000618 <__aeabi_dmul>
 800713e:	bd70      	pop	{r4, r5, r6, pc}

08007140 <_strtod_l>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
 8007148:	b09d      	sub	sp, #116	; 0x74
 800714a:	461f      	mov	r7, r3
 800714c:	2300      	movs	r3, #0
 800714e:	9318      	str	r3, [sp, #96]	; 0x60
 8007150:	4ba2      	ldr	r3, [pc, #648]	; (80073dc <_strtod_l+0x29c>)
 8007152:	9213      	str	r2, [sp, #76]	; 0x4c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	4604      	mov	r4, r0
 800715a:	4618      	mov	r0, r3
 800715c:	4688      	mov	r8, r1
 800715e:	f7f9 f847 	bl	80001f0 <strlen>
 8007162:	f04f 0a00 	mov.w	sl, #0
 8007166:	4605      	mov	r5, r0
 8007168:	f04f 0b00 	mov.w	fp, #0
 800716c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	2a2b      	cmp	r2, #43	; 0x2b
 8007176:	d04e      	beq.n	8007216 <_strtod_l+0xd6>
 8007178:	d83b      	bhi.n	80071f2 <_strtod_l+0xb2>
 800717a:	2a0d      	cmp	r2, #13
 800717c:	d834      	bhi.n	80071e8 <_strtod_l+0xa8>
 800717e:	2a08      	cmp	r2, #8
 8007180:	d834      	bhi.n	80071ec <_strtod_l+0xac>
 8007182:	2a00      	cmp	r2, #0
 8007184:	d03e      	beq.n	8007204 <_strtod_l+0xc4>
 8007186:	2300      	movs	r3, #0
 8007188:	930a      	str	r3, [sp, #40]	; 0x28
 800718a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800718c:	7833      	ldrb	r3, [r6, #0]
 800718e:	2b30      	cmp	r3, #48	; 0x30
 8007190:	f040 80b0 	bne.w	80072f4 <_strtod_l+0x1b4>
 8007194:	7873      	ldrb	r3, [r6, #1]
 8007196:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800719a:	2b58      	cmp	r3, #88	; 0x58
 800719c:	d168      	bne.n	8007270 <_strtod_l+0x130>
 800719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	ab18      	add	r3, sp, #96	; 0x60
 80071a4:	9702      	str	r7, [sp, #8]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4a8d      	ldr	r2, [pc, #564]	; (80073e0 <_strtod_l+0x2a0>)
 80071aa:	ab19      	add	r3, sp, #100	; 0x64
 80071ac:	a917      	add	r1, sp, #92	; 0x5c
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fd38 	bl	8008c24 <__gethex>
 80071b4:	f010 0707 	ands.w	r7, r0, #7
 80071b8:	4605      	mov	r5, r0
 80071ba:	d005      	beq.n	80071c8 <_strtod_l+0x88>
 80071bc:	2f06      	cmp	r7, #6
 80071be:	d12c      	bne.n	800721a <_strtod_l+0xda>
 80071c0:	3601      	adds	r6, #1
 80071c2:	2300      	movs	r3, #0
 80071c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80071c6:	930a      	str	r3, [sp, #40]	; 0x28
 80071c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 8590 	bne.w	8007cf0 <_strtod_l+0xbb0>
 80071d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d2:	b1eb      	cbz	r3, 8007210 <_strtod_l+0xd0>
 80071d4:	4652      	mov	r2, sl
 80071d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071da:	ec43 2b10 	vmov	d0, r2, r3
 80071de:	b01d      	add	sp, #116	; 0x74
 80071e0:	ecbd 8b02 	vpop	{d8}
 80071e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e8:	2a20      	cmp	r2, #32
 80071ea:	d1cc      	bne.n	8007186 <_strtod_l+0x46>
 80071ec:	3301      	adds	r3, #1
 80071ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80071f0:	e7be      	b.n	8007170 <_strtod_l+0x30>
 80071f2:	2a2d      	cmp	r2, #45	; 0x2d
 80071f4:	d1c7      	bne.n	8007186 <_strtod_l+0x46>
 80071f6:	2201      	movs	r2, #1
 80071f8:	920a      	str	r2, [sp, #40]	; 0x28
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1c2      	bne.n	800718a <_strtod_l+0x4a>
 8007204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007206:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 856e 	bne.w	8007cec <_strtod_l+0xbac>
 8007210:	4652      	mov	r2, sl
 8007212:	465b      	mov	r3, fp
 8007214:	e7e1      	b.n	80071da <_strtod_l+0x9a>
 8007216:	2200      	movs	r2, #0
 8007218:	e7ee      	b.n	80071f8 <_strtod_l+0xb8>
 800721a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800721c:	b13a      	cbz	r2, 800722e <_strtod_l+0xee>
 800721e:	2135      	movs	r1, #53	; 0x35
 8007220:	a81a      	add	r0, sp, #104	; 0x68
 8007222:	f002 fcb0 	bl	8009b86 <__copybits>
 8007226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007228:	4620      	mov	r0, r4
 800722a:	f002 f86f 	bl	800930c <_Bfree>
 800722e:	3f01      	subs	r7, #1
 8007230:	2f04      	cmp	r7, #4
 8007232:	d806      	bhi.n	8007242 <_strtod_l+0x102>
 8007234:	e8df f007 	tbb	[pc, r7]
 8007238:	1714030a 	.word	0x1714030a
 800723c:	0a          	.byte	0x0a
 800723d:	00          	.byte	0x00
 800723e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007242:	0728      	lsls	r0, r5, #28
 8007244:	d5c0      	bpl.n	80071c8 <_strtod_l+0x88>
 8007246:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800724a:	e7bd      	b.n	80071c8 <_strtod_l+0x88>
 800724c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007250:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007252:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007256:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800725a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800725e:	e7f0      	b.n	8007242 <_strtod_l+0x102>
 8007260:	f8df b180 	ldr.w	fp, [pc, #384]	; 80073e4 <_strtod_l+0x2a4>
 8007264:	e7ed      	b.n	8007242 <_strtod_l+0x102>
 8007266:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800726a:	f04f 3aff 	mov.w	sl, #4294967295
 800726e:	e7e8      	b.n	8007242 <_strtod_l+0x102>
 8007270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	9217      	str	r2, [sp, #92]	; 0x5c
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b30      	cmp	r3, #48	; 0x30
 800727a:	d0f9      	beq.n	8007270 <_strtod_l+0x130>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0a3      	beq.n	80071c8 <_strtod_l+0x88>
 8007280:	2301      	movs	r3, #1
 8007282:	f04f 0900 	mov.w	r9, #0
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800728a:	9308      	str	r3, [sp, #32]
 800728c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007290:	464f      	mov	r7, r9
 8007292:	220a      	movs	r2, #10
 8007294:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007296:	7806      	ldrb	r6, [r0, #0]
 8007298:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800729c:	b2d9      	uxtb	r1, r3
 800729e:	2909      	cmp	r1, #9
 80072a0:	d92a      	bls.n	80072f8 <_strtod_l+0x1b8>
 80072a2:	9905      	ldr	r1, [sp, #20]
 80072a4:	462a      	mov	r2, r5
 80072a6:	f002 ff1f 	bl	800a0e8 <strncmp>
 80072aa:	b398      	cbz	r0, 8007314 <_strtod_l+0x1d4>
 80072ac:	2000      	movs	r0, #0
 80072ae:	4632      	mov	r2, r6
 80072b0:	463d      	mov	r5, r7
 80072b2:	9005      	str	r0, [sp, #20]
 80072b4:	4603      	mov	r3, r0
 80072b6:	2a65      	cmp	r2, #101	; 0x65
 80072b8:	d001      	beq.n	80072be <_strtod_l+0x17e>
 80072ba:	2a45      	cmp	r2, #69	; 0x45
 80072bc:	d118      	bne.n	80072f0 <_strtod_l+0x1b0>
 80072be:	b91d      	cbnz	r5, 80072c8 <_strtod_l+0x188>
 80072c0:	9a04      	ldr	r2, [sp, #16]
 80072c2:	4302      	orrs	r2, r0
 80072c4:	d09e      	beq.n	8007204 <_strtod_l+0xc4>
 80072c6:	2500      	movs	r5, #0
 80072c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80072cc:	f108 0201 	add.w	r2, r8, #1
 80072d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80072d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80072d6:	2a2b      	cmp	r2, #43	; 0x2b
 80072d8:	d075      	beq.n	80073c6 <_strtod_l+0x286>
 80072da:	2a2d      	cmp	r2, #45	; 0x2d
 80072dc:	d07b      	beq.n	80073d6 <_strtod_l+0x296>
 80072de:	f04f 0c00 	mov.w	ip, #0
 80072e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072e6:	2909      	cmp	r1, #9
 80072e8:	f240 8082 	bls.w	80073f0 <_strtod_l+0x2b0>
 80072ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072f0:	2600      	movs	r6, #0
 80072f2:	e09d      	b.n	8007430 <_strtod_l+0x2f0>
 80072f4:	2300      	movs	r3, #0
 80072f6:	e7c4      	b.n	8007282 <_strtod_l+0x142>
 80072f8:	2f08      	cmp	r7, #8
 80072fa:	bfd8      	it	le
 80072fc:	9907      	ldrle	r1, [sp, #28]
 80072fe:	f100 0001 	add.w	r0, r0, #1
 8007302:	bfda      	itte	le
 8007304:	fb02 3301 	mlale	r3, r2, r1, r3
 8007308:	9307      	strle	r3, [sp, #28]
 800730a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800730e:	3701      	adds	r7, #1
 8007310:	9017      	str	r0, [sp, #92]	; 0x5c
 8007312:	e7bf      	b.n	8007294 <_strtod_l+0x154>
 8007314:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007316:	195a      	adds	r2, r3, r5
 8007318:	9217      	str	r2, [sp, #92]	; 0x5c
 800731a:	5d5a      	ldrb	r2, [r3, r5]
 800731c:	2f00      	cmp	r7, #0
 800731e:	d037      	beq.n	8007390 <_strtod_l+0x250>
 8007320:	9005      	str	r0, [sp, #20]
 8007322:	463d      	mov	r5, r7
 8007324:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007328:	2b09      	cmp	r3, #9
 800732a:	d912      	bls.n	8007352 <_strtod_l+0x212>
 800732c:	2301      	movs	r3, #1
 800732e:	e7c2      	b.n	80072b6 <_strtod_l+0x176>
 8007330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	9217      	str	r2, [sp, #92]	; 0x5c
 8007336:	785a      	ldrb	r2, [r3, #1]
 8007338:	3001      	adds	r0, #1
 800733a:	2a30      	cmp	r2, #48	; 0x30
 800733c:	d0f8      	beq.n	8007330 <_strtod_l+0x1f0>
 800733e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007342:	2b08      	cmp	r3, #8
 8007344:	f200 84d9 	bhi.w	8007cfa <_strtod_l+0xbba>
 8007348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800734a:	9005      	str	r0, [sp, #20]
 800734c:	2000      	movs	r0, #0
 800734e:	9308      	str	r3, [sp, #32]
 8007350:	4605      	mov	r5, r0
 8007352:	3a30      	subs	r2, #48	; 0x30
 8007354:	f100 0301 	add.w	r3, r0, #1
 8007358:	d014      	beq.n	8007384 <_strtod_l+0x244>
 800735a:	9905      	ldr	r1, [sp, #20]
 800735c:	4419      	add	r1, r3
 800735e:	9105      	str	r1, [sp, #20]
 8007360:	462b      	mov	r3, r5
 8007362:	eb00 0e05 	add.w	lr, r0, r5
 8007366:	210a      	movs	r1, #10
 8007368:	4573      	cmp	r3, lr
 800736a:	d113      	bne.n	8007394 <_strtod_l+0x254>
 800736c:	182b      	adds	r3, r5, r0
 800736e:	2b08      	cmp	r3, #8
 8007370:	f105 0501 	add.w	r5, r5, #1
 8007374:	4405      	add	r5, r0
 8007376:	dc1c      	bgt.n	80073b2 <_strtod_l+0x272>
 8007378:	9907      	ldr	r1, [sp, #28]
 800737a:	230a      	movs	r3, #10
 800737c:	fb03 2301 	mla	r3, r3, r1, r2
 8007380:	9307      	str	r3, [sp, #28]
 8007382:	2300      	movs	r3, #0
 8007384:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007386:	1c51      	adds	r1, r2, #1
 8007388:	9117      	str	r1, [sp, #92]	; 0x5c
 800738a:	7852      	ldrb	r2, [r2, #1]
 800738c:	4618      	mov	r0, r3
 800738e:	e7c9      	b.n	8007324 <_strtod_l+0x1e4>
 8007390:	4638      	mov	r0, r7
 8007392:	e7d2      	b.n	800733a <_strtod_l+0x1fa>
 8007394:	2b08      	cmp	r3, #8
 8007396:	dc04      	bgt.n	80073a2 <_strtod_l+0x262>
 8007398:	9e07      	ldr	r6, [sp, #28]
 800739a:	434e      	muls	r6, r1
 800739c:	9607      	str	r6, [sp, #28]
 800739e:	3301      	adds	r3, #1
 80073a0:	e7e2      	b.n	8007368 <_strtod_l+0x228>
 80073a2:	f103 0c01 	add.w	ip, r3, #1
 80073a6:	f1bc 0f10 	cmp.w	ip, #16
 80073aa:	bfd8      	it	le
 80073ac:	fb01 f909 	mulle.w	r9, r1, r9
 80073b0:	e7f5      	b.n	800739e <_strtod_l+0x25e>
 80073b2:	2d10      	cmp	r5, #16
 80073b4:	bfdc      	itt	le
 80073b6:	230a      	movle	r3, #10
 80073b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80073bc:	e7e1      	b.n	8007382 <_strtod_l+0x242>
 80073be:	2300      	movs	r3, #0
 80073c0:	9305      	str	r3, [sp, #20]
 80073c2:	2301      	movs	r3, #1
 80073c4:	e77c      	b.n	80072c0 <_strtod_l+0x180>
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	f108 0202 	add.w	r2, r8, #2
 80073ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80073d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80073d4:	e785      	b.n	80072e2 <_strtod_l+0x1a2>
 80073d6:	f04f 0c01 	mov.w	ip, #1
 80073da:	e7f6      	b.n	80073ca <_strtod_l+0x28a>
 80073dc:	0800ca30 	.word	0x0800ca30
 80073e0:	0800c7e8 	.word	0x0800c7e8
 80073e4:	7ff00000 	.word	0x7ff00000
 80073e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073ea:	1c51      	adds	r1, r2, #1
 80073ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80073ee:	7852      	ldrb	r2, [r2, #1]
 80073f0:	2a30      	cmp	r2, #48	; 0x30
 80073f2:	d0f9      	beq.n	80073e8 <_strtod_l+0x2a8>
 80073f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073f8:	2908      	cmp	r1, #8
 80073fa:	f63f af79 	bhi.w	80072f0 <_strtod_l+0x1b0>
 80073fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007402:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007404:	9206      	str	r2, [sp, #24]
 8007406:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007408:	1c51      	adds	r1, r2, #1
 800740a:	9117      	str	r1, [sp, #92]	; 0x5c
 800740c:	7852      	ldrb	r2, [r2, #1]
 800740e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007412:	2e09      	cmp	r6, #9
 8007414:	d937      	bls.n	8007486 <_strtod_l+0x346>
 8007416:	9e06      	ldr	r6, [sp, #24]
 8007418:	1b89      	subs	r1, r1, r6
 800741a:	2908      	cmp	r1, #8
 800741c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007420:	dc02      	bgt.n	8007428 <_strtod_l+0x2e8>
 8007422:	4576      	cmp	r6, lr
 8007424:	bfa8      	it	ge
 8007426:	4676      	movge	r6, lr
 8007428:	f1bc 0f00 	cmp.w	ip, #0
 800742c:	d000      	beq.n	8007430 <_strtod_l+0x2f0>
 800742e:	4276      	negs	r6, r6
 8007430:	2d00      	cmp	r5, #0
 8007432:	d14d      	bne.n	80074d0 <_strtod_l+0x390>
 8007434:	9904      	ldr	r1, [sp, #16]
 8007436:	4301      	orrs	r1, r0
 8007438:	f47f aec6 	bne.w	80071c8 <_strtod_l+0x88>
 800743c:	2b00      	cmp	r3, #0
 800743e:	f47f aee1 	bne.w	8007204 <_strtod_l+0xc4>
 8007442:	2a69      	cmp	r2, #105	; 0x69
 8007444:	d027      	beq.n	8007496 <_strtod_l+0x356>
 8007446:	dc24      	bgt.n	8007492 <_strtod_l+0x352>
 8007448:	2a49      	cmp	r2, #73	; 0x49
 800744a:	d024      	beq.n	8007496 <_strtod_l+0x356>
 800744c:	2a4e      	cmp	r2, #78	; 0x4e
 800744e:	f47f aed9 	bne.w	8007204 <_strtod_l+0xc4>
 8007452:	499f      	ldr	r1, [pc, #636]	; (80076d0 <_strtod_l+0x590>)
 8007454:	a817      	add	r0, sp, #92	; 0x5c
 8007456:	f001 fe3d 	bl	80090d4 <__match>
 800745a:	2800      	cmp	r0, #0
 800745c:	f43f aed2 	beq.w	8007204 <_strtod_l+0xc4>
 8007460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b28      	cmp	r3, #40	; 0x28
 8007466:	d12d      	bne.n	80074c4 <_strtod_l+0x384>
 8007468:	499a      	ldr	r1, [pc, #616]	; (80076d4 <_strtod_l+0x594>)
 800746a:	aa1a      	add	r2, sp, #104	; 0x68
 800746c:	a817      	add	r0, sp, #92	; 0x5c
 800746e:	f001 fe45 	bl	80090fc <__hexnan>
 8007472:	2805      	cmp	r0, #5
 8007474:	d126      	bne.n	80074c4 <_strtod_l+0x384>
 8007476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007478:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800747c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007480:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007484:	e6a0      	b.n	80071c8 <_strtod_l+0x88>
 8007486:	210a      	movs	r1, #10
 8007488:	fb01 2e0e 	mla	lr, r1, lr, r2
 800748c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007490:	e7b9      	b.n	8007406 <_strtod_l+0x2c6>
 8007492:	2a6e      	cmp	r2, #110	; 0x6e
 8007494:	e7db      	b.n	800744e <_strtod_l+0x30e>
 8007496:	4990      	ldr	r1, [pc, #576]	; (80076d8 <_strtod_l+0x598>)
 8007498:	a817      	add	r0, sp, #92	; 0x5c
 800749a:	f001 fe1b 	bl	80090d4 <__match>
 800749e:	2800      	cmp	r0, #0
 80074a0:	f43f aeb0 	beq.w	8007204 <_strtod_l+0xc4>
 80074a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074a6:	498d      	ldr	r1, [pc, #564]	; (80076dc <_strtod_l+0x59c>)
 80074a8:	3b01      	subs	r3, #1
 80074aa:	a817      	add	r0, sp, #92	; 0x5c
 80074ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80074ae:	f001 fe11 	bl	80090d4 <__match>
 80074b2:	b910      	cbnz	r0, 80074ba <_strtod_l+0x37a>
 80074b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b6:	3301      	adds	r3, #1
 80074b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80074ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076ec <_strtod_l+0x5ac>
 80074be:	f04f 0a00 	mov.w	sl, #0
 80074c2:	e681      	b.n	80071c8 <_strtod_l+0x88>
 80074c4:	4886      	ldr	r0, [pc, #536]	; (80076e0 <_strtod_l+0x5a0>)
 80074c6:	f002 fdf7 	bl	800a0b8 <nan>
 80074ca:	ec5b ab10 	vmov	sl, fp, d0
 80074ce:	e67b      	b.n	80071c8 <_strtod_l+0x88>
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	9807      	ldr	r0, [sp, #28]
 80074d4:	1af3      	subs	r3, r6, r3
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	bf08      	it	eq
 80074da:	462f      	moveq	r7, r5
 80074dc:	2d10      	cmp	r5, #16
 80074de:	9306      	str	r3, [sp, #24]
 80074e0:	46a8      	mov	r8, r5
 80074e2:	bfa8      	it	ge
 80074e4:	f04f 0810 	movge.w	r8, #16
 80074e8:	f7f9 f81c 	bl	8000524 <__aeabi_ui2d>
 80074ec:	2d09      	cmp	r5, #9
 80074ee:	4682      	mov	sl, r0
 80074f0:	468b      	mov	fp, r1
 80074f2:	dd13      	ble.n	800751c <_strtod_l+0x3dc>
 80074f4:	4b7b      	ldr	r3, [pc, #492]	; (80076e4 <_strtod_l+0x5a4>)
 80074f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074fe:	f7f9 f88b 	bl	8000618 <__aeabi_dmul>
 8007502:	4682      	mov	sl, r0
 8007504:	4648      	mov	r0, r9
 8007506:	468b      	mov	fp, r1
 8007508:	f7f9 f80c 	bl	8000524 <__aeabi_ui2d>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	f7f8 feca 	bl	80002ac <__adddf3>
 8007518:	4682      	mov	sl, r0
 800751a:	468b      	mov	fp, r1
 800751c:	2d0f      	cmp	r5, #15
 800751e:	dc38      	bgt.n	8007592 <_strtod_l+0x452>
 8007520:	9b06      	ldr	r3, [sp, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f43f ae50 	beq.w	80071c8 <_strtod_l+0x88>
 8007528:	dd24      	ble.n	8007574 <_strtod_l+0x434>
 800752a:	2b16      	cmp	r3, #22
 800752c:	dc0b      	bgt.n	8007546 <_strtod_l+0x406>
 800752e:	496d      	ldr	r1, [pc, #436]	; (80076e4 <_strtod_l+0x5a4>)
 8007530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007538:	4652      	mov	r2, sl
 800753a:	465b      	mov	r3, fp
 800753c:	f7f9 f86c 	bl	8000618 <__aeabi_dmul>
 8007540:	4682      	mov	sl, r0
 8007542:	468b      	mov	fp, r1
 8007544:	e640      	b.n	80071c8 <_strtod_l+0x88>
 8007546:	9a06      	ldr	r2, [sp, #24]
 8007548:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800754c:	4293      	cmp	r3, r2
 800754e:	db20      	blt.n	8007592 <_strtod_l+0x452>
 8007550:	4c64      	ldr	r4, [pc, #400]	; (80076e4 <_strtod_l+0x5a4>)
 8007552:	f1c5 050f 	rsb	r5, r5, #15
 8007556:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800755a:	4652      	mov	r2, sl
 800755c:	465b      	mov	r3, fp
 800755e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007562:	f7f9 f859 	bl	8000618 <__aeabi_dmul>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	1b5d      	subs	r5, r3, r5
 800756a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800756e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007572:	e7e3      	b.n	800753c <_strtod_l+0x3fc>
 8007574:	9b06      	ldr	r3, [sp, #24]
 8007576:	3316      	adds	r3, #22
 8007578:	db0b      	blt.n	8007592 <_strtod_l+0x452>
 800757a:	9b05      	ldr	r3, [sp, #20]
 800757c:	1b9e      	subs	r6, r3, r6
 800757e:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <_strtod_l+0x5a4>)
 8007580:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007584:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007588:	4650      	mov	r0, sl
 800758a:	4659      	mov	r1, fp
 800758c:	f7f9 f96e 	bl	800086c <__aeabi_ddiv>
 8007590:	e7d6      	b.n	8007540 <_strtod_l+0x400>
 8007592:	9b06      	ldr	r3, [sp, #24]
 8007594:	eba5 0808 	sub.w	r8, r5, r8
 8007598:	4498      	add	r8, r3
 800759a:	f1b8 0f00 	cmp.w	r8, #0
 800759e:	dd74      	ble.n	800768a <_strtod_l+0x54a>
 80075a0:	f018 030f 	ands.w	r3, r8, #15
 80075a4:	d00a      	beq.n	80075bc <_strtod_l+0x47c>
 80075a6:	494f      	ldr	r1, [pc, #316]	; (80076e4 <_strtod_l+0x5a4>)
 80075a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075ac:	4652      	mov	r2, sl
 80075ae:	465b      	mov	r3, fp
 80075b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b4:	f7f9 f830 	bl	8000618 <__aeabi_dmul>
 80075b8:	4682      	mov	sl, r0
 80075ba:	468b      	mov	fp, r1
 80075bc:	f038 080f 	bics.w	r8, r8, #15
 80075c0:	d04f      	beq.n	8007662 <_strtod_l+0x522>
 80075c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80075c6:	dd22      	ble.n	800760e <_strtod_l+0x4ce>
 80075c8:	2500      	movs	r5, #0
 80075ca:	462e      	mov	r6, r5
 80075cc:	9507      	str	r5, [sp, #28]
 80075ce:	9505      	str	r5, [sp, #20]
 80075d0:	2322      	movs	r3, #34	; 0x22
 80075d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076ec <_strtod_l+0x5ac>
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	f04f 0a00 	mov.w	sl, #0
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f43f adf2 	beq.w	80071c8 <_strtod_l+0x88>
 80075e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075e6:	4620      	mov	r0, r4
 80075e8:	f001 fe90 	bl	800930c <_Bfree>
 80075ec:	9905      	ldr	r1, [sp, #20]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f001 fe8c 	bl	800930c <_Bfree>
 80075f4:	4631      	mov	r1, r6
 80075f6:	4620      	mov	r0, r4
 80075f8:	f001 fe88 	bl	800930c <_Bfree>
 80075fc:	9907      	ldr	r1, [sp, #28]
 80075fe:	4620      	mov	r0, r4
 8007600:	f001 fe84 	bl	800930c <_Bfree>
 8007604:	4629      	mov	r1, r5
 8007606:	4620      	mov	r0, r4
 8007608:	f001 fe80 	bl	800930c <_Bfree>
 800760c:	e5dc      	b.n	80071c8 <_strtod_l+0x88>
 800760e:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <_strtod_l+0x5a8>)
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	2300      	movs	r3, #0
 8007614:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007618:	4650      	mov	r0, sl
 800761a:	4659      	mov	r1, fp
 800761c:	4699      	mov	r9, r3
 800761e:	f1b8 0f01 	cmp.w	r8, #1
 8007622:	dc21      	bgt.n	8007668 <_strtod_l+0x528>
 8007624:	b10b      	cbz	r3, 800762a <_strtod_l+0x4ea>
 8007626:	4682      	mov	sl, r0
 8007628:	468b      	mov	fp, r1
 800762a:	4b2f      	ldr	r3, [pc, #188]	; (80076e8 <_strtod_l+0x5a8>)
 800762c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007630:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007634:	4652      	mov	r2, sl
 8007636:	465b      	mov	r3, fp
 8007638:	e9d9 0100 	ldrd	r0, r1, [r9]
 800763c:	f7f8 ffec 	bl	8000618 <__aeabi_dmul>
 8007640:	4b2a      	ldr	r3, [pc, #168]	; (80076ec <_strtod_l+0x5ac>)
 8007642:	460a      	mov	r2, r1
 8007644:	400b      	ands	r3, r1
 8007646:	492a      	ldr	r1, [pc, #168]	; (80076f0 <_strtod_l+0x5b0>)
 8007648:	428b      	cmp	r3, r1
 800764a:	4682      	mov	sl, r0
 800764c:	d8bc      	bhi.n	80075c8 <_strtod_l+0x488>
 800764e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007652:	428b      	cmp	r3, r1
 8007654:	bf86      	itte	hi
 8007656:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80076f4 <_strtod_l+0x5b4>
 800765a:	f04f 3aff 	movhi.w	sl, #4294967295
 800765e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007662:	2300      	movs	r3, #0
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	e084      	b.n	8007772 <_strtod_l+0x632>
 8007668:	f018 0f01 	tst.w	r8, #1
 800766c:	d005      	beq.n	800767a <_strtod_l+0x53a>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f7f8 ffd0 	bl	8000618 <__aeabi_dmul>
 8007678:	2301      	movs	r3, #1
 800767a:	9a04      	ldr	r2, [sp, #16]
 800767c:	3208      	adds	r2, #8
 800767e:	f109 0901 	add.w	r9, r9, #1
 8007682:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007686:	9204      	str	r2, [sp, #16]
 8007688:	e7c9      	b.n	800761e <_strtod_l+0x4de>
 800768a:	d0ea      	beq.n	8007662 <_strtod_l+0x522>
 800768c:	f1c8 0800 	rsb	r8, r8, #0
 8007690:	f018 020f 	ands.w	r2, r8, #15
 8007694:	d00a      	beq.n	80076ac <_strtod_l+0x56c>
 8007696:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <_strtod_l+0x5a4>)
 8007698:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800769c:	4650      	mov	r0, sl
 800769e:	4659      	mov	r1, fp
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f7f9 f8e2 	bl	800086c <__aeabi_ddiv>
 80076a8:	4682      	mov	sl, r0
 80076aa:	468b      	mov	fp, r1
 80076ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076b0:	d0d7      	beq.n	8007662 <_strtod_l+0x522>
 80076b2:	f1b8 0f1f 	cmp.w	r8, #31
 80076b6:	dd1f      	ble.n	80076f8 <_strtod_l+0x5b8>
 80076b8:	2500      	movs	r5, #0
 80076ba:	462e      	mov	r6, r5
 80076bc:	9507      	str	r5, [sp, #28]
 80076be:	9505      	str	r5, [sp, #20]
 80076c0:	2322      	movs	r3, #34	; 0x22
 80076c2:	f04f 0a00 	mov.w	sl, #0
 80076c6:	f04f 0b00 	mov.w	fp, #0
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	e786      	b.n	80075dc <_strtod_l+0x49c>
 80076ce:	bf00      	nop
 80076d0:	0800c7b9 	.word	0x0800c7b9
 80076d4:	0800c7fc 	.word	0x0800c7fc
 80076d8:	0800c7b1 	.word	0x0800c7b1
 80076dc:	0800c93c 	.word	0x0800c93c
 80076e0:	0800cbe8 	.word	0x0800cbe8
 80076e4:	0800cac8 	.word	0x0800cac8
 80076e8:	0800caa0 	.word	0x0800caa0
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	7ca00000 	.word	0x7ca00000
 80076f4:	7fefffff 	.word	0x7fefffff
 80076f8:	f018 0310 	ands.w	r3, r8, #16
 80076fc:	bf18      	it	ne
 80076fe:	236a      	movne	r3, #106	; 0x6a
 8007700:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ab0 <_strtod_l+0x970>
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	2300      	movs	r3, #0
 800770c:	f018 0f01 	tst.w	r8, #1
 8007710:	d004      	beq.n	800771c <_strtod_l+0x5dc>
 8007712:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007716:	f7f8 ff7f 	bl	8000618 <__aeabi_dmul>
 800771a:	2301      	movs	r3, #1
 800771c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007720:	f109 0908 	add.w	r9, r9, #8
 8007724:	d1f2      	bne.n	800770c <_strtod_l+0x5cc>
 8007726:	b10b      	cbz	r3, 800772c <_strtod_l+0x5ec>
 8007728:	4682      	mov	sl, r0
 800772a:	468b      	mov	fp, r1
 800772c:	9b04      	ldr	r3, [sp, #16]
 800772e:	b1c3      	cbz	r3, 8007762 <_strtod_l+0x622>
 8007730:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007734:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007738:	2b00      	cmp	r3, #0
 800773a:	4659      	mov	r1, fp
 800773c:	dd11      	ble.n	8007762 <_strtod_l+0x622>
 800773e:	2b1f      	cmp	r3, #31
 8007740:	f340 8124 	ble.w	800798c <_strtod_l+0x84c>
 8007744:	2b34      	cmp	r3, #52	; 0x34
 8007746:	bfde      	ittt	le
 8007748:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800774c:	f04f 33ff 	movle.w	r3, #4294967295
 8007750:	fa03 f202 	lslle.w	r2, r3, r2
 8007754:	f04f 0a00 	mov.w	sl, #0
 8007758:	bfcc      	ite	gt
 800775a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800775e:	ea02 0b01 	andle.w	fp, r2, r1
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	4650      	mov	r0, sl
 8007768:	4659      	mov	r1, fp
 800776a:	f7f9 f9bd 	bl	8000ae8 <__aeabi_dcmpeq>
 800776e:	2800      	cmp	r0, #0
 8007770:	d1a2      	bne.n	80076b8 <_strtod_l+0x578>
 8007772:	9b07      	ldr	r3, [sp, #28]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	9908      	ldr	r1, [sp, #32]
 8007778:	462b      	mov	r3, r5
 800777a:	463a      	mov	r2, r7
 800777c:	4620      	mov	r0, r4
 800777e:	f001 fe2d 	bl	80093dc <__s2b>
 8007782:	9007      	str	r0, [sp, #28]
 8007784:	2800      	cmp	r0, #0
 8007786:	f43f af1f 	beq.w	80075c8 <_strtod_l+0x488>
 800778a:	9b05      	ldr	r3, [sp, #20]
 800778c:	1b9e      	subs	r6, r3, r6
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfb4      	ite	lt
 8007794:	4633      	movlt	r3, r6
 8007796:	2300      	movge	r3, #0
 8007798:	930c      	str	r3, [sp, #48]	; 0x30
 800779a:	9b06      	ldr	r3, [sp, #24]
 800779c:	2500      	movs	r5, #0
 800779e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077a2:	9312      	str	r3, [sp, #72]	; 0x48
 80077a4:	462e      	mov	r6, r5
 80077a6:	9b07      	ldr	r3, [sp, #28]
 80077a8:	4620      	mov	r0, r4
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	f001 fd6e 	bl	800928c <_Balloc>
 80077b0:	9005      	str	r0, [sp, #20]
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f43f af0c 	beq.w	80075d0 <_strtod_l+0x490>
 80077b8:	9b07      	ldr	r3, [sp, #28]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	3202      	adds	r2, #2
 80077be:	f103 010c 	add.w	r1, r3, #12
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	300c      	adds	r0, #12
 80077c6:	f001 fd53 	bl	8009270 <memcpy>
 80077ca:	ec4b ab10 	vmov	d0, sl, fp
 80077ce:	aa1a      	add	r2, sp, #104	; 0x68
 80077d0:	a919      	add	r1, sp, #100	; 0x64
 80077d2:	4620      	mov	r0, r4
 80077d4:	f002 f948 	bl	8009a68 <__d2b>
 80077d8:	ec4b ab18 	vmov	d8, sl, fp
 80077dc:	9018      	str	r0, [sp, #96]	; 0x60
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f aef6 	beq.w	80075d0 <_strtod_l+0x490>
 80077e4:	2101      	movs	r1, #1
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 fe92 	bl	8009510 <__i2b>
 80077ec:	4606      	mov	r6, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f aeee 	beq.w	80075d0 <_strtod_l+0x490>
 80077f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077f6:	9904      	ldr	r1, [sp, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfab      	itete	ge
 80077fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80077fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007800:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007802:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007806:	bfac      	ite	ge
 8007808:	eb03 0902 	addge.w	r9, r3, r2
 800780c:	1ad7      	sublt	r7, r2, r3
 800780e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007810:	eba3 0801 	sub.w	r8, r3, r1
 8007814:	4490      	add	r8, r2
 8007816:	4ba1      	ldr	r3, [pc, #644]	; (8007a9c <_strtod_l+0x95c>)
 8007818:	f108 38ff 	add.w	r8, r8, #4294967295
 800781c:	4598      	cmp	r8, r3
 800781e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007822:	f280 80c7 	bge.w	80079b4 <_strtod_l+0x874>
 8007826:	eba3 0308 	sub.w	r3, r3, r8
 800782a:	2b1f      	cmp	r3, #31
 800782c:	eba2 0203 	sub.w	r2, r2, r3
 8007830:	f04f 0101 	mov.w	r1, #1
 8007834:	f300 80b1 	bgt.w	800799a <_strtod_l+0x85a>
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	930d      	str	r3, [sp, #52]	; 0x34
 800783e:	2300      	movs	r3, #0
 8007840:	9308      	str	r3, [sp, #32]
 8007842:	eb09 0802 	add.w	r8, r9, r2
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	45c1      	cmp	r9, r8
 800784a:	4417      	add	r7, r2
 800784c:	441f      	add	r7, r3
 800784e:	464b      	mov	r3, r9
 8007850:	bfa8      	it	ge
 8007852:	4643      	movge	r3, r8
 8007854:	42bb      	cmp	r3, r7
 8007856:	bfa8      	it	ge
 8007858:	463b      	movge	r3, r7
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfc2      	ittt	gt
 800785e:	eba8 0803 	subgt.w	r8, r8, r3
 8007862:	1aff      	subgt	r7, r7, r3
 8007864:	eba9 0903 	subgt.w	r9, r9, r3
 8007868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800786a:	2b00      	cmp	r3, #0
 800786c:	dd17      	ble.n	800789e <_strtod_l+0x75e>
 800786e:	4631      	mov	r1, r6
 8007870:	461a      	mov	r2, r3
 8007872:	4620      	mov	r0, r4
 8007874:	f001 ff0c 	bl	8009690 <__pow5mult>
 8007878:	4606      	mov	r6, r0
 800787a:	2800      	cmp	r0, #0
 800787c:	f43f aea8 	beq.w	80075d0 <_strtod_l+0x490>
 8007880:	4601      	mov	r1, r0
 8007882:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007884:	4620      	mov	r0, r4
 8007886:	f001 fe59 	bl	800953c <__multiply>
 800788a:	900b      	str	r0, [sp, #44]	; 0x2c
 800788c:	2800      	cmp	r0, #0
 800788e:	f43f ae9f 	beq.w	80075d0 <_strtod_l+0x490>
 8007892:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007894:	4620      	mov	r0, r4
 8007896:	f001 fd39 	bl	800930c <_Bfree>
 800789a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800789c:	9318      	str	r3, [sp, #96]	; 0x60
 800789e:	f1b8 0f00 	cmp.w	r8, #0
 80078a2:	f300 808c 	bgt.w	80079be <_strtod_l+0x87e>
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dd08      	ble.n	80078be <_strtod_l+0x77e>
 80078ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078ae:	9905      	ldr	r1, [sp, #20]
 80078b0:	4620      	mov	r0, r4
 80078b2:	f001 feed 	bl	8009690 <__pow5mult>
 80078b6:	9005      	str	r0, [sp, #20]
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f43f ae89 	beq.w	80075d0 <_strtod_l+0x490>
 80078be:	2f00      	cmp	r7, #0
 80078c0:	dd08      	ble.n	80078d4 <_strtod_l+0x794>
 80078c2:	9905      	ldr	r1, [sp, #20]
 80078c4:	463a      	mov	r2, r7
 80078c6:	4620      	mov	r0, r4
 80078c8:	f001 ff3c 	bl	8009744 <__lshift>
 80078cc:	9005      	str	r0, [sp, #20]
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f ae7e 	beq.w	80075d0 <_strtod_l+0x490>
 80078d4:	f1b9 0f00 	cmp.w	r9, #0
 80078d8:	dd08      	ble.n	80078ec <_strtod_l+0x7ac>
 80078da:	4631      	mov	r1, r6
 80078dc:	464a      	mov	r2, r9
 80078de:	4620      	mov	r0, r4
 80078e0:	f001 ff30 	bl	8009744 <__lshift>
 80078e4:	4606      	mov	r6, r0
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f43f ae72 	beq.w	80075d0 <_strtod_l+0x490>
 80078ec:	9a05      	ldr	r2, [sp, #20]
 80078ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078f0:	4620      	mov	r0, r4
 80078f2:	f001 ffb3 	bl	800985c <__mdiff>
 80078f6:	4605      	mov	r5, r0
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f43f ae69 	beq.w	80075d0 <_strtod_l+0x490>
 80078fe:	68c3      	ldr	r3, [r0, #12]
 8007900:	930b      	str	r3, [sp, #44]	; 0x2c
 8007902:	2300      	movs	r3, #0
 8007904:	60c3      	str	r3, [r0, #12]
 8007906:	4631      	mov	r1, r6
 8007908:	f001 ff8c 	bl	8009824 <__mcmp>
 800790c:	2800      	cmp	r0, #0
 800790e:	da60      	bge.n	80079d2 <_strtod_l+0x892>
 8007910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007912:	ea53 030a 	orrs.w	r3, r3, sl
 8007916:	f040 8082 	bne.w	8007a1e <_strtod_l+0x8de>
 800791a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800791e:	2b00      	cmp	r3, #0
 8007920:	d17d      	bne.n	8007a1e <_strtod_l+0x8de>
 8007922:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007926:	0d1b      	lsrs	r3, r3, #20
 8007928:	051b      	lsls	r3, r3, #20
 800792a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800792e:	d976      	bls.n	8007a1e <_strtod_l+0x8de>
 8007930:	696b      	ldr	r3, [r5, #20]
 8007932:	b913      	cbnz	r3, 800793a <_strtod_l+0x7fa>
 8007934:	692b      	ldr	r3, [r5, #16]
 8007936:	2b01      	cmp	r3, #1
 8007938:	dd71      	ble.n	8007a1e <_strtod_l+0x8de>
 800793a:	4629      	mov	r1, r5
 800793c:	2201      	movs	r2, #1
 800793e:	4620      	mov	r0, r4
 8007940:	f001 ff00 	bl	8009744 <__lshift>
 8007944:	4631      	mov	r1, r6
 8007946:	4605      	mov	r5, r0
 8007948:	f001 ff6c 	bl	8009824 <__mcmp>
 800794c:	2800      	cmp	r0, #0
 800794e:	dd66      	ble.n	8007a1e <_strtod_l+0x8de>
 8007950:	9904      	ldr	r1, [sp, #16]
 8007952:	4a53      	ldr	r2, [pc, #332]	; (8007aa0 <_strtod_l+0x960>)
 8007954:	465b      	mov	r3, fp
 8007956:	2900      	cmp	r1, #0
 8007958:	f000 8081 	beq.w	8007a5e <_strtod_l+0x91e>
 800795c:	ea02 010b 	and.w	r1, r2, fp
 8007960:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007964:	dc7b      	bgt.n	8007a5e <_strtod_l+0x91e>
 8007966:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800796a:	f77f aea9 	ble.w	80076c0 <_strtod_l+0x580>
 800796e:	4b4d      	ldr	r3, [pc, #308]	; (8007aa4 <_strtod_l+0x964>)
 8007970:	4650      	mov	r0, sl
 8007972:	4659      	mov	r1, fp
 8007974:	2200      	movs	r2, #0
 8007976:	f7f8 fe4f 	bl	8000618 <__aeabi_dmul>
 800797a:	460b      	mov	r3, r1
 800797c:	4303      	orrs	r3, r0
 800797e:	bf08      	it	eq
 8007980:	2322      	moveq	r3, #34	; 0x22
 8007982:	4682      	mov	sl, r0
 8007984:	468b      	mov	fp, r1
 8007986:	bf08      	it	eq
 8007988:	6023      	streq	r3, [r4, #0]
 800798a:	e62b      	b.n	80075e4 <_strtod_l+0x4a4>
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	ea03 0a0a 	and.w	sl, r3, sl
 8007998:	e6e3      	b.n	8007762 <_strtod_l+0x622>
 800799a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800799e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80079a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80079a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80079aa:	fa01 f308 	lsl.w	r3, r1, r8
 80079ae:	9308      	str	r3, [sp, #32]
 80079b0:	910d      	str	r1, [sp, #52]	; 0x34
 80079b2:	e746      	b.n	8007842 <_strtod_l+0x702>
 80079b4:	2300      	movs	r3, #0
 80079b6:	9308      	str	r3, [sp, #32]
 80079b8:	2301      	movs	r3, #1
 80079ba:	930d      	str	r3, [sp, #52]	; 0x34
 80079bc:	e741      	b.n	8007842 <_strtod_l+0x702>
 80079be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079c0:	4642      	mov	r2, r8
 80079c2:	4620      	mov	r0, r4
 80079c4:	f001 febe 	bl	8009744 <__lshift>
 80079c8:	9018      	str	r0, [sp, #96]	; 0x60
 80079ca:	2800      	cmp	r0, #0
 80079cc:	f47f af6b 	bne.w	80078a6 <_strtod_l+0x766>
 80079d0:	e5fe      	b.n	80075d0 <_strtod_l+0x490>
 80079d2:	465f      	mov	r7, fp
 80079d4:	d16e      	bne.n	8007ab4 <_strtod_l+0x974>
 80079d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079dc:	b342      	cbz	r2, 8007a30 <_strtod_l+0x8f0>
 80079de:	4a32      	ldr	r2, [pc, #200]	; (8007aa8 <_strtod_l+0x968>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d128      	bne.n	8007a36 <_strtod_l+0x8f6>
 80079e4:	9b04      	ldr	r3, [sp, #16]
 80079e6:	4651      	mov	r1, sl
 80079e8:	b1eb      	cbz	r3, 8007a26 <_strtod_l+0x8e6>
 80079ea:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <_strtod_l+0x960>)
 80079ec:	403b      	ands	r3, r7
 80079ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	d819      	bhi.n	8007a2c <_strtod_l+0x8ec>
 80079f8:	0d1b      	lsrs	r3, r3, #20
 80079fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	4299      	cmp	r1, r3
 8007a04:	d117      	bne.n	8007a36 <_strtod_l+0x8f6>
 8007a06:	4b29      	ldr	r3, [pc, #164]	; (8007aac <_strtod_l+0x96c>)
 8007a08:	429f      	cmp	r7, r3
 8007a0a:	d102      	bne.n	8007a12 <_strtod_l+0x8d2>
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	f43f addf 	beq.w	80075d0 <_strtod_l+0x490>
 8007a12:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <_strtod_l+0x960>)
 8007a14:	403b      	ands	r3, r7
 8007a16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007a1a:	f04f 0a00 	mov.w	sl, #0
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1a4      	bne.n	800796e <_strtod_l+0x82e>
 8007a24:	e5de      	b.n	80075e4 <_strtod_l+0x4a4>
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	e7ea      	b.n	8007a02 <_strtod_l+0x8c2>
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	e7e8      	b.n	8007a02 <_strtod_l+0x8c2>
 8007a30:	ea53 030a 	orrs.w	r3, r3, sl
 8007a34:	d08c      	beq.n	8007950 <_strtod_l+0x810>
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	b1db      	cbz	r3, 8007a72 <_strtod_l+0x932>
 8007a3a:	423b      	tst	r3, r7
 8007a3c:	d0ef      	beq.n	8007a1e <_strtod_l+0x8de>
 8007a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a40:	9a04      	ldr	r2, [sp, #16]
 8007a42:	4650      	mov	r0, sl
 8007a44:	4659      	mov	r1, fp
 8007a46:	b1c3      	cbz	r3, 8007a7a <_strtod_l+0x93a>
 8007a48:	f7ff fb5e 	bl	8007108 <sulp>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	ec51 0b18 	vmov	r0, r1, d8
 8007a54:	f7f8 fc2a 	bl	80002ac <__adddf3>
 8007a58:	4682      	mov	sl, r0
 8007a5a:	468b      	mov	fp, r1
 8007a5c:	e7df      	b.n	8007a1e <_strtod_l+0x8de>
 8007a5e:	4013      	ands	r3, r2
 8007a60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a6c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a70:	e7d5      	b.n	8007a1e <_strtod_l+0x8de>
 8007a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a74:	ea13 0f0a 	tst.w	r3, sl
 8007a78:	e7e0      	b.n	8007a3c <_strtod_l+0x8fc>
 8007a7a:	f7ff fb45 	bl	8007108 <sulp>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	ec51 0b18 	vmov	r0, r1, d8
 8007a86:	f7f8 fc0f 	bl	80002a8 <__aeabi_dsub>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4682      	mov	sl, r0
 8007a90:	468b      	mov	fp, r1
 8007a92:	f7f9 f829 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0c1      	beq.n	8007a1e <_strtod_l+0x8de>
 8007a9a:	e611      	b.n	80076c0 <_strtod_l+0x580>
 8007a9c:	fffffc02 	.word	0xfffffc02
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	39500000 	.word	0x39500000
 8007aa8:	000fffff 	.word	0x000fffff
 8007aac:	7fefffff 	.word	0x7fefffff
 8007ab0:	0800c810 	.word	0x0800c810
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f002 f832 	bl	8009b20 <__ratio>
 8007abc:	ec59 8b10 	vmov	r8, r9, d0
 8007ac0:	ee10 0a10 	vmov	r0, s0
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aca:	4649      	mov	r1, r9
 8007acc:	f7f9 f820 	bl	8000b10 <__aeabi_dcmple>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d07a      	beq.n	8007bca <_strtod_l+0xa8a>
 8007ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d04a      	beq.n	8007b70 <_strtod_l+0xa30>
 8007ada:	4b95      	ldr	r3, [pc, #596]	; (8007d30 <_strtod_l+0xbf0>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ae2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007d30 <_strtod_l+0xbf0>
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	4b92      	ldr	r3, [pc, #584]	; (8007d34 <_strtod_l+0xbf4>)
 8007aec:	403b      	ands	r3, r7
 8007aee:	930d      	str	r3, [sp, #52]	; 0x34
 8007af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007af2:	4b91      	ldr	r3, [pc, #580]	; (8007d38 <_strtod_l+0xbf8>)
 8007af4:	429a      	cmp	r2, r3
 8007af6:	f040 80b0 	bne.w	8007c5a <_strtod_l+0xb1a>
 8007afa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007afe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007b02:	ec4b ab10 	vmov	d0, sl, fp
 8007b06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b0a:	f001 ff31 	bl	8009970 <__ulp>
 8007b0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b12:	ec53 2b10 	vmov	r2, r3, d0
 8007b16:	f7f8 fd7f 	bl	8000618 <__aeabi_dmul>
 8007b1a:	4652      	mov	r2, sl
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	f7f8 fbc5 	bl	80002ac <__adddf3>
 8007b22:	460b      	mov	r3, r1
 8007b24:	4983      	ldr	r1, [pc, #524]	; (8007d34 <_strtod_l+0xbf4>)
 8007b26:	4a85      	ldr	r2, [pc, #532]	; (8007d3c <_strtod_l+0xbfc>)
 8007b28:	4019      	ands	r1, r3
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	d960      	bls.n	8007bf2 <_strtod_l+0xab2>
 8007b30:	ee18 3a90 	vmov	r3, s17
 8007b34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d104      	bne.n	8007b46 <_strtod_l+0xa06>
 8007b3c:	ee18 3a10 	vmov	r3, s16
 8007b40:	3301      	adds	r3, #1
 8007b42:	f43f ad45 	beq.w	80075d0 <_strtod_l+0x490>
 8007b46:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d48 <_strtod_l+0xc08>
 8007b4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 fbdb 	bl	800930c <_Bfree>
 8007b56:	9905      	ldr	r1, [sp, #20]
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f001 fbd7 	bl	800930c <_Bfree>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4620      	mov	r0, r4
 8007b62:	f001 fbd3 	bl	800930c <_Bfree>
 8007b66:	4629      	mov	r1, r5
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f001 fbcf 	bl	800930c <_Bfree>
 8007b6e:	e61a      	b.n	80077a6 <_strtod_l+0x666>
 8007b70:	f1ba 0f00 	cmp.w	sl, #0
 8007b74:	d11b      	bne.n	8007bae <_strtod_l+0xa6e>
 8007b76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b7a:	b9f3      	cbnz	r3, 8007bba <_strtod_l+0xa7a>
 8007b7c:	4b6c      	ldr	r3, [pc, #432]	; (8007d30 <_strtod_l+0xbf0>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4640      	mov	r0, r8
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7f8 ffba 	bl	8000afc <__aeabi_dcmplt>
 8007b88:	b9d0      	cbnz	r0, 8007bc0 <_strtod_l+0xa80>
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <_strtod_l+0xc00>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	f7f8 fd41 	bl	8000618 <__aeabi_dmul>
 8007b96:	4680      	mov	r8, r0
 8007b98:	4689      	mov	r9, r1
 8007b9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007ba2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ba4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ba8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bac:	e79d      	b.n	8007aea <_strtod_l+0x9aa>
 8007bae:	f1ba 0f01 	cmp.w	sl, #1
 8007bb2:	d102      	bne.n	8007bba <_strtod_l+0xa7a>
 8007bb4:	2f00      	cmp	r7, #0
 8007bb6:	f43f ad83 	beq.w	80076c0 <_strtod_l+0x580>
 8007bba:	4b62      	ldr	r3, [pc, #392]	; (8007d44 <_strtod_l+0xc04>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	e78e      	b.n	8007ade <_strtod_l+0x99e>
 8007bc0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007d40 <_strtod_l+0xc00>
 8007bc4:	f04f 0800 	mov.w	r8, #0
 8007bc8:	e7e7      	b.n	8007b9a <_strtod_l+0xa5a>
 8007bca:	4b5d      	ldr	r3, [pc, #372]	; (8007d40 <_strtod_l+0xc00>)
 8007bcc:	4640      	mov	r0, r8
 8007bce:	4649      	mov	r1, r9
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f7f8 fd21 	bl	8000618 <__aeabi_dmul>
 8007bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd8:	4680      	mov	r8, r0
 8007bda:	4689      	mov	r9, r1
 8007bdc:	b933      	cbnz	r3, 8007bec <_strtod_l+0xaac>
 8007bde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007be2:	900e      	str	r0, [sp, #56]	; 0x38
 8007be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007be6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007bea:	e7dd      	b.n	8007ba8 <_strtod_l+0xa68>
 8007bec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007bf0:	e7f9      	b.n	8007be6 <_strtod_l+0xaa6>
 8007bf2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1a8      	bne.n	8007b4e <_strtod_l+0xa0e>
 8007bfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c02:	0d1b      	lsrs	r3, r3, #20
 8007c04:	051b      	lsls	r3, r3, #20
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d1a1      	bne.n	8007b4e <_strtod_l+0xa0e>
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	f7f9 f863 	bl	8000cd8 <__aeabi_d2lz>
 8007c12:	f7f8 fcd3 	bl	80005bc <__aeabi_l2d>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fb43 	bl	80002a8 <__aeabi_dsub>
 8007c22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c28:	ea43 030a 	orr.w	r3, r3, sl
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	4680      	mov	r8, r0
 8007c30:	4689      	mov	r9, r1
 8007c32:	d055      	beq.n	8007ce0 <_strtod_l+0xba0>
 8007c34:	a336      	add	r3, pc, #216	; (adr r3, 8007d10 <_strtod_l+0xbd0>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 ff5f 	bl	8000afc <__aeabi_dcmplt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	f47f acd0 	bne.w	80075e4 <_strtod_l+0x4a4>
 8007c44:	a334      	add	r3, pc, #208	; (adr r3, 8007d18 <_strtod_l+0xbd8>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	f7f8 ff73 	bl	8000b38 <__aeabi_dcmpgt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	f43f af7b 	beq.w	8007b4e <_strtod_l+0xa0e>
 8007c58:	e4c4      	b.n	80075e4 <_strtod_l+0x4a4>
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	b333      	cbz	r3, 8007cac <_strtod_l+0xb6c>
 8007c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c64:	d822      	bhi.n	8007cac <_strtod_l+0xb6c>
 8007c66:	a32e      	add	r3, pc, #184	; (adr r3, 8007d20 <_strtod_l+0xbe0>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	f7f8 ff4e 	bl	8000b10 <__aeabi_dcmple>
 8007c74:	b1a0      	cbz	r0, 8007ca0 <_strtod_l+0xb60>
 8007c76:	4649      	mov	r1, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	f7f8 ffa5 	bl	8000bc8 <__aeabi_d2uiz>
 8007c7e:	2801      	cmp	r0, #1
 8007c80:	bf38      	it	cc
 8007c82:	2001      	movcc	r0, #1
 8007c84:	f7f8 fc4e 	bl	8000524 <__aeabi_ui2d>
 8007c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	4689      	mov	r9, r1
 8007c8e:	bb23      	cbnz	r3, 8007cda <_strtod_l+0xb9a>
 8007c90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c94:	9010      	str	r0, [sp, #64]	; 0x40
 8007c96:	9311      	str	r3, [sp, #68]	; 0x44
 8007c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ca4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8007cb4:	eef0 0a68 	vmov.f32	s1, s17
 8007cb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cbc:	f001 fe58 	bl	8009970 <__ulp>
 8007cc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cc4:	ec53 2b10 	vmov	r2, r3, d0
 8007cc8:	f7f8 fca6 	bl	8000618 <__aeabi_dmul>
 8007ccc:	ec53 2b18 	vmov	r2, r3, d8
 8007cd0:	f7f8 faec 	bl	80002ac <__adddf3>
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	e78d      	b.n	8007bf6 <_strtod_l+0xab6>
 8007cda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007cde:	e7db      	b.n	8007c98 <_strtod_l+0xb58>
 8007ce0:	a311      	add	r3, pc, #68	; (adr r3, 8007d28 <_strtod_l+0xbe8>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 ff09 	bl	8000afc <__aeabi_dcmplt>
 8007cea:	e7b2      	b.n	8007c52 <_strtod_l+0xb12>
 8007cec:	2300      	movs	r3, #0
 8007cee:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	f7ff ba6b 	b.w	80071d0 <_strtod_l+0x90>
 8007cfa:	2a65      	cmp	r2, #101	; 0x65
 8007cfc:	f43f ab5f 	beq.w	80073be <_strtod_l+0x27e>
 8007d00:	2a45      	cmp	r2, #69	; 0x45
 8007d02:	f43f ab5c 	beq.w	80073be <_strtod_l+0x27e>
 8007d06:	2301      	movs	r3, #1
 8007d08:	f7ff bb94 	b.w	8007434 <_strtod_l+0x2f4>
 8007d0c:	f3af 8000 	nop.w
 8007d10:	94a03595 	.word	0x94a03595
 8007d14:	3fdfffff 	.word	0x3fdfffff
 8007d18:	35afe535 	.word	0x35afe535
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	ffc00000 	.word	0xffc00000
 8007d24:	41dfffff 	.word	0x41dfffff
 8007d28:	94a03595 	.word	0x94a03595
 8007d2c:	3fcfffff 	.word	0x3fcfffff
 8007d30:	3ff00000 	.word	0x3ff00000
 8007d34:	7ff00000 	.word	0x7ff00000
 8007d38:	7fe00000 	.word	0x7fe00000
 8007d3c:	7c9fffff 	.word	0x7c9fffff
 8007d40:	3fe00000 	.word	0x3fe00000
 8007d44:	bff00000 	.word	0xbff00000
 8007d48:	7fefffff 	.word	0x7fefffff

08007d4c <_strtod_r>:
 8007d4c:	4b01      	ldr	r3, [pc, #4]	; (8007d54 <_strtod_r+0x8>)
 8007d4e:	f7ff b9f7 	b.w	8007140 <_strtod_l>
 8007d52:	bf00      	nop
 8007d54:	200000f0 	.word	0x200000f0

08007d58 <_strtol_l.constprop.0>:
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5e:	d001      	beq.n	8007d64 <_strtol_l.constprop.0+0xc>
 8007d60:	2b24      	cmp	r3, #36	; 0x24
 8007d62:	d906      	bls.n	8007d72 <_strtol_l.constprop.0+0x1a>
 8007d64:	f7fe fafe 	bl	8006364 <__errno>
 8007d68:	2316      	movs	r3, #22
 8007d6a:	6003      	str	r3, [r0, #0]
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e58 <_strtol_l.constprop.0+0x100>
 8007d76:	460d      	mov	r5, r1
 8007d78:	462e      	mov	r6, r5
 8007d7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d82:	f017 0708 	ands.w	r7, r7, #8
 8007d86:	d1f7      	bne.n	8007d78 <_strtol_l.constprop.0+0x20>
 8007d88:	2c2d      	cmp	r4, #45	; 0x2d
 8007d8a:	d132      	bne.n	8007df2 <_strtol_l.constprop.0+0x9a>
 8007d8c:	782c      	ldrb	r4, [r5, #0]
 8007d8e:	2701      	movs	r7, #1
 8007d90:	1cb5      	adds	r5, r6, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d05b      	beq.n	8007e4e <_strtol_l.constprop.0+0xf6>
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d109      	bne.n	8007dae <_strtol_l.constprop.0+0x56>
 8007d9a:	2c30      	cmp	r4, #48	; 0x30
 8007d9c:	d107      	bne.n	8007dae <_strtol_l.constprop.0+0x56>
 8007d9e:	782c      	ldrb	r4, [r5, #0]
 8007da0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007da4:	2c58      	cmp	r4, #88	; 0x58
 8007da6:	d14d      	bne.n	8007e44 <_strtol_l.constprop.0+0xec>
 8007da8:	786c      	ldrb	r4, [r5, #1]
 8007daa:	2310      	movs	r3, #16
 8007dac:	3502      	adds	r5, #2
 8007dae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007db2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007db6:	f04f 0c00 	mov.w	ip, #0
 8007dba:	fbb8 f9f3 	udiv	r9, r8, r3
 8007dbe:	4666      	mov	r6, ip
 8007dc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007dc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007dc8:	f1be 0f09 	cmp.w	lr, #9
 8007dcc:	d816      	bhi.n	8007dfc <_strtol_l.constprop.0+0xa4>
 8007dce:	4674      	mov	r4, lr
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	dd24      	ble.n	8007e1e <_strtol_l.constprop.0+0xc6>
 8007dd4:	f1bc 0f00 	cmp.w	ip, #0
 8007dd8:	db1e      	blt.n	8007e18 <_strtol_l.constprop.0+0xc0>
 8007dda:	45b1      	cmp	r9, r6
 8007ddc:	d31c      	bcc.n	8007e18 <_strtol_l.constprop.0+0xc0>
 8007dde:	d101      	bne.n	8007de4 <_strtol_l.constprop.0+0x8c>
 8007de0:	45a2      	cmp	sl, r4
 8007de2:	db19      	blt.n	8007e18 <_strtol_l.constprop.0+0xc0>
 8007de4:	fb06 4603 	mla	r6, r6, r3, r4
 8007de8:	f04f 0c01 	mov.w	ip, #1
 8007dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007df0:	e7e8      	b.n	8007dc4 <_strtol_l.constprop.0+0x6c>
 8007df2:	2c2b      	cmp	r4, #43	; 0x2b
 8007df4:	bf04      	itt	eq
 8007df6:	782c      	ldrbeq	r4, [r5, #0]
 8007df8:	1cb5      	addeq	r5, r6, #2
 8007dfa:	e7ca      	b.n	8007d92 <_strtol_l.constprop.0+0x3a>
 8007dfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007e00:	f1be 0f19 	cmp.w	lr, #25
 8007e04:	d801      	bhi.n	8007e0a <_strtol_l.constprop.0+0xb2>
 8007e06:	3c37      	subs	r4, #55	; 0x37
 8007e08:	e7e2      	b.n	8007dd0 <_strtol_l.constprop.0+0x78>
 8007e0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007e0e:	f1be 0f19 	cmp.w	lr, #25
 8007e12:	d804      	bhi.n	8007e1e <_strtol_l.constprop.0+0xc6>
 8007e14:	3c57      	subs	r4, #87	; 0x57
 8007e16:	e7db      	b.n	8007dd0 <_strtol_l.constprop.0+0x78>
 8007e18:	f04f 3cff 	mov.w	ip, #4294967295
 8007e1c:	e7e6      	b.n	8007dec <_strtol_l.constprop.0+0x94>
 8007e1e:	f1bc 0f00 	cmp.w	ip, #0
 8007e22:	da05      	bge.n	8007e30 <_strtol_l.constprop.0+0xd8>
 8007e24:	2322      	movs	r3, #34	; 0x22
 8007e26:	6003      	str	r3, [r0, #0]
 8007e28:	4646      	mov	r6, r8
 8007e2a:	b942      	cbnz	r2, 8007e3e <_strtol_l.constprop.0+0xe6>
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	e79e      	b.n	8007d6e <_strtol_l.constprop.0+0x16>
 8007e30:	b107      	cbz	r7, 8007e34 <_strtol_l.constprop.0+0xdc>
 8007e32:	4276      	negs	r6, r6
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	d0f9      	beq.n	8007e2c <_strtol_l.constprop.0+0xd4>
 8007e38:	f1bc 0f00 	cmp.w	ip, #0
 8007e3c:	d000      	beq.n	8007e40 <_strtol_l.constprop.0+0xe8>
 8007e3e:	1e69      	subs	r1, r5, #1
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	e7f3      	b.n	8007e2c <_strtol_l.constprop.0+0xd4>
 8007e44:	2430      	movs	r4, #48	; 0x30
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1b1      	bne.n	8007dae <_strtol_l.constprop.0+0x56>
 8007e4a:	2308      	movs	r3, #8
 8007e4c:	e7af      	b.n	8007dae <_strtol_l.constprop.0+0x56>
 8007e4e:	2c30      	cmp	r4, #48	; 0x30
 8007e50:	d0a5      	beq.n	8007d9e <_strtol_l.constprop.0+0x46>
 8007e52:	230a      	movs	r3, #10
 8007e54:	e7ab      	b.n	8007dae <_strtol_l.constprop.0+0x56>
 8007e56:	bf00      	nop
 8007e58:	0800c839 	.word	0x0800c839

08007e5c <_strtol_r>:
 8007e5c:	f7ff bf7c 	b.w	8007d58 <_strtol_l.constprop.0>

08007e60 <quorem>:
 8007e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	6903      	ldr	r3, [r0, #16]
 8007e66:	690c      	ldr	r4, [r1, #16]
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	f2c0 8081 	blt.w	8007f72 <quorem+0x112>
 8007e70:	3c01      	subs	r4, #1
 8007e72:	f101 0814 	add.w	r8, r1, #20
 8007e76:	f100 0514 	add.w	r5, r0, #20
 8007e7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e98:	d331      	bcc.n	8007efe <quorem+0x9e>
 8007e9a:	f04f 0e00 	mov.w	lr, #0
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	46ac      	mov	ip, r5
 8007ea2:	46f2      	mov	sl, lr
 8007ea4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ea8:	b293      	uxth	r3, r2
 8007eaa:	fb06 e303 	mla	r3, r6, r3, lr
 8007eae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	ebaa 0303 	sub.w	r3, sl, r3
 8007eb8:	f8dc a000 	ldr.w	sl, [ip]
 8007ebc:	0c12      	lsrs	r2, r2, #16
 8007ebe:	fa13 f38a 	uxtah	r3, r3, sl
 8007ec2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	9b00      	ldr	r3, [sp, #0]
 8007eca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ece:	b292      	uxth	r2, r2
 8007ed0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ed8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007edc:	4581      	cmp	r9, r0
 8007ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ee2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ee6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eea:	d2db      	bcs.n	8007ea4 <quorem+0x44>
 8007eec:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ef0:	b92b      	cbnz	r3, 8007efe <quorem+0x9e>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	429d      	cmp	r5, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	d32e      	bcc.n	8007f5a <quorem+0xfa>
 8007efc:	613c      	str	r4, [r7, #16]
 8007efe:	4638      	mov	r0, r7
 8007f00:	f001 fc90 	bl	8009824 <__mcmp>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	db24      	blt.n	8007f52 <quorem+0xf2>
 8007f08:	3601      	adds	r6, #1
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f04f 0c00 	mov.w	ip, #0
 8007f10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f14:	f8d0 e000 	ldr.w	lr, [r0]
 8007f18:	b293      	uxth	r3, r2
 8007f1a:	ebac 0303 	sub.w	r3, ip, r3
 8007f1e:	0c12      	lsrs	r2, r2, #16
 8007f20:	fa13 f38e 	uxtah	r3, r3, lr
 8007f24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f32:	45c1      	cmp	r9, r8
 8007f34:	f840 3b04 	str.w	r3, [r0], #4
 8007f38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f3c:	d2e8      	bcs.n	8007f10 <quorem+0xb0>
 8007f3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f46:	b922      	cbnz	r2, 8007f52 <quorem+0xf2>
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	429d      	cmp	r5, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	d30a      	bcc.n	8007f66 <quorem+0x106>
 8007f50:	613c      	str	r4, [r7, #16]
 8007f52:	4630      	mov	r0, r6
 8007f54:	b003      	add	sp, #12
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	3b04      	subs	r3, #4
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	d1cc      	bne.n	8007efc <quorem+0x9c>
 8007f62:	3c01      	subs	r4, #1
 8007f64:	e7c7      	b.n	8007ef6 <quorem+0x96>
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d1f0      	bne.n	8007f50 <quorem+0xf0>
 8007f6e:	3c01      	subs	r4, #1
 8007f70:	e7eb      	b.n	8007f4a <quorem+0xea>
 8007f72:	2000      	movs	r0, #0
 8007f74:	e7ee      	b.n	8007f54 <quorem+0xf4>
	...

08007f78 <_dtoa_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	ed2d 8b04 	vpush	{d8-d9}
 8007f80:	ec57 6b10 	vmov	r6, r7, d0
 8007f84:	b093      	sub	sp, #76	; 0x4c
 8007f86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f8c:	9106      	str	r1, [sp, #24]
 8007f8e:	ee10 aa10 	vmov	sl, s0
 8007f92:	4604      	mov	r4, r0
 8007f94:	9209      	str	r2, [sp, #36]	; 0x24
 8007f96:	930c      	str	r3, [sp, #48]	; 0x30
 8007f98:	46bb      	mov	fp, r7
 8007f9a:	b975      	cbnz	r5, 8007fba <_dtoa_r+0x42>
 8007f9c:	2010      	movs	r0, #16
 8007f9e:	f001 f94d 	bl	800923c <malloc>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fa6:	b920      	cbnz	r0, 8007fb2 <_dtoa_r+0x3a>
 8007fa8:	4ba7      	ldr	r3, [pc, #668]	; (8008248 <_dtoa_r+0x2d0>)
 8007faa:	21ea      	movs	r1, #234	; 0xea
 8007fac:	48a7      	ldr	r0, [pc, #668]	; (800824c <_dtoa_r+0x2d4>)
 8007fae:	f002 f8bd 	bl	800a12c <__assert_func>
 8007fb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb6:	6005      	str	r5, [r0, #0]
 8007fb8:	60c5      	str	r5, [r0, #12]
 8007fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fbc:	6819      	ldr	r1, [r3, #0]
 8007fbe:	b151      	cbz	r1, 8007fd6 <_dtoa_r+0x5e>
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	604a      	str	r2, [r1, #4]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4093      	lsls	r3, r2
 8007fc8:	608b      	str	r3, [r1, #8]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f001 f99e 	bl	800930c <_Bfree>
 8007fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	1e3b      	subs	r3, r7, #0
 8007fd8:	bfaa      	itet	ge
 8007fda:	2300      	movge	r3, #0
 8007fdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007fe0:	f8c8 3000 	strge.w	r3, [r8]
 8007fe4:	4b9a      	ldr	r3, [pc, #616]	; (8008250 <_dtoa_r+0x2d8>)
 8007fe6:	bfbc      	itt	lt
 8007fe8:	2201      	movlt	r2, #1
 8007fea:	f8c8 2000 	strlt.w	r2, [r8]
 8007fee:	ea33 030b 	bics.w	r3, r3, fp
 8007ff2:	d11b      	bne.n	800802c <_dtoa_r+0xb4>
 8007ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ff6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008000:	4333      	orrs	r3, r6
 8008002:	f000 8592 	beq.w	8008b2a <_dtoa_r+0xbb2>
 8008006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008008:	b963      	cbnz	r3, 8008024 <_dtoa_r+0xac>
 800800a:	4b92      	ldr	r3, [pc, #584]	; (8008254 <_dtoa_r+0x2dc>)
 800800c:	e022      	b.n	8008054 <_dtoa_r+0xdc>
 800800e:	4b92      	ldr	r3, [pc, #584]	; (8008258 <_dtoa_r+0x2e0>)
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	3308      	adds	r3, #8
 8008014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	b013      	add	sp, #76	; 0x4c
 800801c:	ecbd 8b04 	vpop	{d8-d9}
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	4b8b      	ldr	r3, [pc, #556]	; (8008254 <_dtoa_r+0x2dc>)
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	3303      	adds	r3, #3
 800802a:	e7f3      	b.n	8008014 <_dtoa_r+0x9c>
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	4650      	mov	r0, sl
 8008032:	4659      	mov	r1, fp
 8008034:	f7f8 fd58 	bl	8000ae8 <__aeabi_dcmpeq>
 8008038:	ec4b ab19 	vmov	d9, sl, fp
 800803c:	4680      	mov	r8, r0
 800803e:	b158      	cbz	r0, 8008058 <_dtoa_r+0xe0>
 8008040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008042:	2301      	movs	r3, #1
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 856b 	beq.w	8008b24 <_dtoa_r+0xbac>
 800804e:	4883      	ldr	r0, [pc, #524]	; (800825c <_dtoa_r+0x2e4>)
 8008050:	6018      	str	r0, [r3, #0]
 8008052:	1e43      	subs	r3, r0, #1
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	e7df      	b.n	8008018 <_dtoa_r+0xa0>
 8008058:	ec4b ab10 	vmov	d0, sl, fp
 800805c:	aa10      	add	r2, sp, #64	; 0x40
 800805e:	a911      	add	r1, sp, #68	; 0x44
 8008060:	4620      	mov	r0, r4
 8008062:	f001 fd01 	bl	8009a68 <__d2b>
 8008066:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800806a:	ee08 0a10 	vmov	s16, r0
 800806e:	2d00      	cmp	r5, #0
 8008070:	f000 8084 	beq.w	800817c <_dtoa_r+0x204>
 8008074:	ee19 3a90 	vmov	r3, s19
 8008078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800807c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008080:	4656      	mov	r6, sl
 8008082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800808a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800808e:	4b74      	ldr	r3, [pc, #464]	; (8008260 <_dtoa_r+0x2e8>)
 8008090:	2200      	movs	r2, #0
 8008092:	4630      	mov	r0, r6
 8008094:	4639      	mov	r1, r7
 8008096:	f7f8 f907 	bl	80002a8 <__aeabi_dsub>
 800809a:	a365      	add	r3, pc, #404	; (adr r3, 8008230 <_dtoa_r+0x2b8>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 faba 	bl	8000618 <__aeabi_dmul>
 80080a4:	a364      	add	r3, pc, #400	; (adr r3, 8008238 <_dtoa_r+0x2c0>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8ff 	bl	80002ac <__adddf3>
 80080ae:	4606      	mov	r6, r0
 80080b0:	4628      	mov	r0, r5
 80080b2:	460f      	mov	r7, r1
 80080b4:	f7f8 fa46 	bl	8000544 <__aeabi_i2d>
 80080b8:	a361      	add	r3, pc, #388	; (adr r3, 8008240 <_dtoa_r+0x2c8>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 faab 	bl	8000618 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4630      	mov	r0, r6
 80080c8:	4639      	mov	r1, r7
 80080ca:	f7f8 f8ef 	bl	80002ac <__adddf3>
 80080ce:	4606      	mov	r6, r0
 80080d0:	460f      	mov	r7, r1
 80080d2:	f7f8 fd51 	bl	8000b78 <__aeabi_d2iz>
 80080d6:	2200      	movs	r2, #0
 80080d8:	9000      	str	r0, [sp, #0]
 80080da:	2300      	movs	r3, #0
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fd0c 	bl	8000afc <__aeabi_dcmplt>
 80080e4:	b150      	cbz	r0, 80080fc <_dtoa_r+0x184>
 80080e6:	9800      	ldr	r0, [sp, #0]
 80080e8:	f7f8 fa2c 	bl	8000544 <__aeabi_i2d>
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	f7f8 fcfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80080f4:	b910      	cbnz	r0, 80080fc <_dtoa_r+0x184>
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	9b00      	ldr	r3, [sp, #0]
 80080fe:	2b16      	cmp	r3, #22
 8008100:	d85a      	bhi.n	80081b8 <_dtoa_r+0x240>
 8008102:	9a00      	ldr	r2, [sp, #0]
 8008104:	4b57      	ldr	r3, [pc, #348]	; (8008264 <_dtoa_r+0x2ec>)
 8008106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	ec51 0b19 	vmov	r0, r1, d9
 8008112:	f7f8 fcf3 	bl	8000afc <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d050      	beq.n	80081bc <_dtoa_r+0x244>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	3b01      	subs	r3, #1
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2300      	movs	r3, #0
 8008122:	930b      	str	r3, [sp, #44]	; 0x2c
 8008124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008126:	1b5d      	subs	r5, r3, r5
 8008128:	1e6b      	subs	r3, r5, #1
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	bf45      	ittet	mi
 800812e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008132:	9304      	strmi	r3, [sp, #16]
 8008134:	2300      	movpl	r3, #0
 8008136:	2300      	movmi	r3, #0
 8008138:	bf4c      	ite	mi
 800813a:	9305      	strmi	r3, [sp, #20]
 800813c:	9304      	strpl	r3, [sp, #16]
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	db3d      	blt.n	80081c0 <_dtoa_r+0x248>
 8008144:	9b05      	ldr	r3, [sp, #20]
 8008146:	9a00      	ldr	r2, [sp, #0]
 8008148:	920a      	str	r2, [sp, #40]	; 0x28
 800814a:	4413      	add	r3, r2
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	2300      	movs	r3, #0
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	9b06      	ldr	r3, [sp, #24]
 8008154:	2b09      	cmp	r3, #9
 8008156:	f200 8089 	bhi.w	800826c <_dtoa_r+0x2f4>
 800815a:	2b05      	cmp	r3, #5
 800815c:	bfc4      	itt	gt
 800815e:	3b04      	subgt	r3, #4
 8008160:	9306      	strgt	r3, [sp, #24]
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	f1a3 0302 	sub.w	r3, r3, #2
 8008168:	bfcc      	ite	gt
 800816a:	2500      	movgt	r5, #0
 800816c:	2501      	movle	r5, #1
 800816e:	2b03      	cmp	r3, #3
 8008170:	f200 8087 	bhi.w	8008282 <_dtoa_r+0x30a>
 8008174:	e8df f003 	tbb	[pc, r3]
 8008178:	59383a2d 	.word	0x59383a2d
 800817c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008180:	441d      	add	r5, r3
 8008182:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008186:	2b20      	cmp	r3, #32
 8008188:	bfc1      	itttt	gt
 800818a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800818e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008192:	fa0b f303 	lslgt.w	r3, fp, r3
 8008196:	fa26 f000 	lsrgt.w	r0, r6, r0
 800819a:	bfda      	itte	le
 800819c:	f1c3 0320 	rsble	r3, r3, #32
 80081a0:	fa06 f003 	lslle.w	r0, r6, r3
 80081a4:	4318      	orrgt	r0, r3
 80081a6:	f7f8 f9bd 	bl	8000524 <__aeabi_ui2d>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4606      	mov	r6, r0
 80081ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081b2:	3d01      	subs	r5, #1
 80081b4:	930e      	str	r3, [sp, #56]	; 0x38
 80081b6:	e76a      	b.n	800808e <_dtoa_r+0x116>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e7b2      	b.n	8008122 <_dtoa_r+0x1aa>
 80081bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80081be:	e7b1      	b.n	8008124 <_dtoa_r+0x1ac>
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	9a00      	ldr	r2, [sp, #0]
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	4253      	negs	r3, r2
 80081ca:	9307      	str	r3, [sp, #28]
 80081cc:	2300      	movs	r3, #0
 80081ce:	930a      	str	r3, [sp, #40]	; 0x28
 80081d0:	e7bf      	b.n	8008152 <_dtoa_r+0x1da>
 80081d2:	2300      	movs	r3, #0
 80081d4:	9308      	str	r3, [sp, #32]
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dc55      	bgt.n	8008288 <_dtoa_r+0x310>
 80081dc:	2301      	movs	r3, #1
 80081de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081e2:	461a      	mov	r2, r3
 80081e4:	9209      	str	r2, [sp, #36]	; 0x24
 80081e6:	e00c      	b.n	8008202 <_dtoa_r+0x28a>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e7f3      	b.n	80081d4 <_dtoa_r+0x25c>
 80081ec:	2300      	movs	r3, #0
 80081ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f0:	9308      	str	r3, [sp, #32]
 80081f2:	9b00      	ldr	r3, [sp, #0]
 80081f4:	4413      	add	r3, r2
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	3301      	adds	r3, #1
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	9303      	str	r3, [sp, #12]
 80081fe:	bfb8      	it	lt
 8008200:	2301      	movlt	r3, #1
 8008202:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008204:	2200      	movs	r2, #0
 8008206:	6042      	str	r2, [r0, #4]
 8008208:	2204      	movs	r2, #4
 800820a:	f102 0614 	add.w	r6, r2, #20
 800820e:	429e      	cmp	r6, r3
 8008210:	6841      	ldr	r1, [r0, #4]
 8008212:	d93d      	bls.n	8008290 <_dtoa_r+0x318>
 8008214:	4620      	mov	r0, r4
 8008216:	f001 f839 	bl	800928c <_Balloc>
 800821a:	9001      	str	r0, [sp, #4]
 800821c:	2800      	cmp	r0, #0
 800821e:	d13b      	bne.n	8008298 <_dtoa_r+0x320>
 8008220:	4b11      	ldr	r3, [pc, #68]	; (8008268 <_dtoa_r+0x2f0>)
 8008222:	4602      	mov	r2, r0
 8008224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008228:	e6c0      	b.n	8007fac <_dtoa_r+0x34>
 800822a:	2301      	movs	r3, #1
 800822c:	e7df      	b.n	80081ee <_dtoa_r+0x276>
 800822e:	bf00      	nop
 8008230:	636f4361 	.word	0x636f4361
 8008234:	3fd287a7 	.word	0x3fd287a7
 8008238:	8b60c8b3 	.word	0x8b60c8b3
 800823c:	3fc68a28 	.word	0x3fc68a28
 8008240:	509f79fb 	.word	0x509f79fb
 8008244:	3fd34413 	.word	0x3fd34413
 8008248:	0800c946 	.word	0x0800c946
 800824c:	0800c95d 	.word	0x0800c95d
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	0800c942 	.word	0x0800c942
 8008258:	0800c939 	.word	0x0800c939
 800825c:	0800c7bd 	.word	0x0800c7bd
 8008260:	3ff80000 	.word	0x3ff80000
 8008264:	0800cac8 	.word	0x0800cac8
 8008268:	0800c9b8 	.word	0x0800c9b8
 800826c:	2501      	movs	r5, #1
 800826e:	2300      	movs	r3, #0
 8008270:	9306      	str	r3, [sp, #24]
 8008272:	9508      	str	r5, [sp, #32]
 8008274:	f04f 33ff 	mov.w	r3, #4294967295
 8008278:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	2312      	movs	r3, #18
 8008280:	e7b0      	b.n	80081e4 <_dtoa_r+0x26c>
 8008282:	2301      	movs	r3, #1
 8008284:	9308      	str	r3, [sp, #32]
 8008286:	e7f5      	b.n	8008274 <_dtoa_r+0x2fc>
 8008288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800828e:	e7b8      	b.n	8008202 <_dtoa_r+0x28a>
 8008290:	3101      	adds	r1, #1
 8008292:	6041      	str	r1, [r0, #4]
 8008294:	0052      	lsls	r2, r2, #1
 8008296:	e7b8      	b.n	800820a <_dtoa_r+0x292>
 8008298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829a:	9a01      	ldr	r2, [sp, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	2b0e      	cmp	r3, #14
 80082a2:	f200 809d 	bhi.w	80083e0 <_dtoa_r+0x468>
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	f000 809a 	beq.w	80083e0 <_dtoa_r+0x468>
 80082ac:	9b00      	ldr	r3, [sp, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dd32      	ble.n	8008318 <_dtoa_r+0x3a0>
 80082b2:	4ab7      	ldr	r2, [pc, #732]	; (8008590 <_dtoa_r+0x618>)
 80082b4:	f003 030f 	and.w	r3, r3, #15
 80082b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c0:	9b00      	ldr	r3, [sp, #0]
 80082c2:	05d8      	lsls	r0, r3, #23
 80082c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082c8:	d516      	bpl.n	80082f8 <_dtoa_r+0x380>
 80082ca:	4bb2      	ldr	r3, [pc, #712]	; (8008594 <_dtoa_r+0x61c>)
 80082cc:	ec51 0b19 	vmov	r0, r1, d9
 80082d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082d4:	f7f8 faca 	bl	800086c <__aeabi_ddiv>
 80082d8:	f007 070f 	and.w	r7, r7, #15
 80082dc:	4682      	mov	sl, r0
 80082de:	468b      	mov	fp, r1
 80082e0:	2503      	movs	r5, #3
 80082e2:	4eac      	ldr	r6, [pc, #688]	; (8008594 <_dtoa_r+0x61c>)
 80082e4:	b957      	cbnz	r7, 80082fc <_dtoa_r+0x384>
 80082e6:	4642      	mov	r2, r8
 80082e8:	464b      	mov	r3, r9
 80082ea:	4650      	mov	r0, sl
 80082ec:	4659      	mov	r1, fp
 80082ee:	f7f8 fabd 	bl	800086c <__aeabi_ddiv>
 80082f2:	4682      	mov	sl, r0
 80082f4:	468b      	mov	fp, r1
 80082f6:	e028      	b.n	800834a <_dtoa_r+0x3d2>
 80082f8:	2502      	movs	r5, #2
 80082fa:	e7f2      	b.n	80082e2 <_dtoa_r+0x36a>
 80082fc:	07f9      	lsls	r1, r7, #31
 80082fe:	d508      	bpl.n	8008312 <_dtoa_r+0x39a>
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008308:	f7f8 f986 	bl	8000618 <__aeabi_dmul>
 800830c:	3501      	adds	r5, #1
 800830e:	4680      	mov	r8, r0
 8008310:	4689      	mov	r9, r1
 8008312:	107f      	asrs	r7, r7, #1
 8008314:	3608      	adds	r6, #8
 8008316:	e7e5      	b.n	80082e4 <_dtoa_r+0x36c>
 8008318:	f000 809b 	beq.w	8008452 <_dtoa_r+0x4da>
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	4f9d      	ldr	r7, [pc, #628]	; (8008594 <_dtoa_r+0x61c>)
 8008320:	425e      	negs	r6, r3
 8008322:	4b9b      	ldr	r3, [pc, #620]	; (8008590 <_dtoa_r+0x618>)
 8008324:	f006 020f 	and.w	r2, r6, #15
 8008328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	ec51 0b19 	vmov	r0, r1, d9
 8008334:	f7f8 f970 	bl	8000618 <__aeabi_dmul>
 8008338:	1136      	asrs	r6, r6, #4
 800833a:	4682      	mov	sl, r0
 800833c:	468b      	mov	fp, r1
 800833e:	2300      	movs	r3, #0
 8008340:	2502      	movs	r5, #2
 8008342:	2e00      	cmp	r6, #0
 8008344:	d17a      	bne.n	800843c <_dtoa_r+0x4c4>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1d3      	bne.n	80082f2 <_dtoa_r+0x37a>
 800834a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8082 	beq.w	8008456 <_dtoa_r+0x4de>
 8008352:	4b91      	ldr	r3, [pc, #580]	; (8008598 <_dtoa_r+0x620>)
 8008354:	2200      	movs	r2, #0
 8008356:	4650      	mov	r0, sl
 8008358:	4659      	mov	r1, fp
 800835a:	f7f8 fbcf 	bl	8000afc <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d079      	beq.n	8008456 <_dtoa_r+0x4de>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d076      	beq.n	8008456 <_dtoa_r+0x4de>
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	dd36      	ble.n	80083dc <_dtoa_r+0x464>
 800836e:	9b00      	ldr	r3, [sp, #0]
 8008370:	4650      	mov	r0, sl
 8008372:	4659      	mov	r1, fp
 8008374:	1e5f      	subs	r7, r3, #1
 8008376:	2200      	movs	r2, #0
 8008378:	4b88      	ldr	r3, [pc, #544]	; (800859c <_dtoa_r+0x624>)
 800837a:	f7f8 f94d 	bl	8000618 <__aeabi_dmul>
 800837e:	9e02      	ldr	r6, [sp, #8]
 8008380:	4682      	mov	sl, r0
 8008382:	468b      	mov	fp, r1
 8008384:	3501      	adds	r5, #1
 8008386:	4628      	mov	r0, r5
 8008388:	f7f8 f8dc 	bl	8000544 <__aeabi_i2d>
 800838c:	4652      	mov	r2, sl
 800838e:	465b      	mov	r3, fp
 8008390:	f7f8 f942 	bl	8000618 <__aeabi_dmul>
 8008394:	4b82      	ldr	r3, [pc, #520]	; (80085a0 <_dtoa_r+0x628>)
 8008396:	2200      	movs	r2, #0
 8008398:	f7f7 ff88 	bl	80002ac <__adddf3>
 800839c:	46d0      	mov	r8, sl
 800839e:	46d9      	mov	r9, fp
 80083a0:	4682      	mov	sl, r0
 80083a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	d158      	bne.n	800845c <_dtoa_r+0x4e4>
 80083aa:	4b7e      	ldr	r3, [pc, #504]	; (80085a4 <_dtoa_r+0x62c>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f7 ff79 	bl	80002a8 <__aeabi_dsub>
 80083b6:	4652      	mov	r2, sl
 80083b8:	465b      	mov	r3, fp
 80083ba:	4680      	mov	r8, r0
 80083bc:	4689      	mov	r9, r1
 80083be:	f7f8 fbbb 	bl	8000b38 <__aeabi_dcmpgt>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f040 8295 	bne.w	80088f2 <_dtoa_r+0x97a>
 80083c8:	4652      	mov	r2, sl
 80083ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 fb93 	bl	8000afc <__aeabi_dcmplt>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f040 8289 	bne.w	80088ee <_dtoa_r+0x976>
 80083dc:	ec5b ab19 	vmov	sl, fp, d9
 80083e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f2c0 8148 	blt.w	8008678 <_dtoa_r+0x700>
 80083e8:	9a00      	ldr	r2, [sp, #0]
 80083ea:	2a0e      	cmp	r2, #14
 80083ec:	f300 8144 	bgt.w	8008678 <_dtoa_r+0x700>
 80083f0:	4b67      	ldr	r3, [pc, #412]	; (8008590 <_dtoa_r+0x618>)
 80083f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f280 80d5 	bge.w	80085ac <_dtoa_r+0x634>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f300 80d1 	bgt.w	80085ac <_dtoa_r+0x634>
 800840a:	f040 826f 	bne.w	80088ec <_dtoa_r+0x974>
 800840e:	4b65      	ldr	r3, [pc, #404]	; (80085a4 <_dtoa_r+0x62c>)
 8008410:	2200      	movs	r2, #0
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f8 f8ff 	bl	8000618 <__aeabi_dmul>
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	f7f8 fb81 	bl	8000b24 <__aeabi_dcmpge>
 8008422:	9e03      	ldr	r6, [sp, #12]
 8008424:	4637      	mov	r7, r6
 8008426:	2800      	cmp	r0, #0
 8008428:	f040 8245 	bne.w	80088b6 <_dtoa_r+0x93e>
 800842c:	9d01      	ldr	r5, [sp, #4]
 800842e:	2331      	movs	r3, #49	; 0x31
 8008430:	f805 3b01 	strb.w	r3, [r5], #1
 8008434:	9b00      	ldr	r3, [sp, #0]
 8008436:	3301      	adds	r3, #1
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	e240      	b.n	80088be <_dtoa_r+0x946>
 800843c:	07f2      	lsls	r2, r6, #31
 800843e:	d505      	bpl.n	800844c <_dtoa_r+0x4d4>
 8008440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008444:	f7f8 f8e8 	bl	8000618 <__aeabi_dmul>
 8008448:	3501      	adds	r5, #1
 800844a:	2301      	movs	r3, #1
 800844c:	1076      	asrs	r6, r6, #1
 800844e:	3708      	adds	r7, #8
 8008450:	e777      	b.n	8008342 <_dtoa_r+0x3ca>
 8008452:	2502      	movs	r5, #2
 8008454:	e779      	b.n	800834a <_dtoa_r+0x3d2>
 8008456:	9f00      	ldr	r7, [sp, #0]
 8008458:	9e03      	ldr	r6, [sp, #12]
 800845a:	e794      	b.n	8008386 <_dtoa_r+0x40e>
 800845c:	9901      	ldr	r1, [sp, #4]
 800845e:	4b4c      	ldr	r3, [pc, #304]	; (8008590 <_dtoa_r+0x618>)
 8008460:	4431      	add	r1, r6
 8008462:	910d      	str	r1, [sp, #52]	; 0x34
 8008464:	9908      	ldr	r1, [sp, #32]
 8008466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800846a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800846e:	2900      	cmp	r1, #0
 8008470:	d043      	beq.n	80084fa <_dtoa_r+0x582>
 8008472:	494d      	ldr	r1, [pc, #308]	; (80085a8 <_dtoa_r+0x630>)
 8008474:	2000      	movs	r0, #0
 8008476:	f7f8 f9f9 	bl	800086c <__aeabi_ddiv>
 800847a:	4652      	mov	r2, sl
 800847c:	465b      	mov	r3, fp
 800847e:	f7f7 ff13 	bl	80002a8 <__aeabi_dsub>
 8008482:	9d01      	ldr	r5, [sp, #4]
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	4649      	mov	r1, r9
 800848a:	4640      	mov	r0, r8
 800848c:	f7f8 fb74 	bl	8000b78 <__aeabi_d2iz>
 8008490:	4606      	mov	r6, r0
 8008492:	f7f8 f857 	bl	8000544 <__aeabi_i2d>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f7 ff03 	bl	80002a8 <__aeabi_dsub>
 80084a2:	3630      	adds	r6, #48	; 0x30
 80084a4:	f805 6b01 	strb.w	r6, [r5], #1
 80084a8:	4652      	mov	r2, sl
 80084aa:	465b      	mov	r3, fp
 80084ac:	4680      	mov	r8, r0
 80084ae:	4689      	mov	r9, r1
 80084b0:	f7f8 fb24 	bl	8000afc <__aeabi_dcmplt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d163      	bne.n	8008580 <_dtoa_r+0x608>
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	4936      	ldr	r1, [pc, #216]	; (8008598 <_dtoa_r+0x620>)
 80084be:	2000      	movs	r0, #0
 80084c0:	f7f7 fef2 	bl	80002a8 <__aeabi_dsub>
 80084c4:	4652      	mov	r2, sl
 80084c6:	465b      	mov	r3, fp
 80084c8:	f7f8 fb18 	bl	8000afc <__aeabi_dcmplt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f040 80b5 	bne.w	800863c <_dtoa_r+0x6c4>
 80084d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084d4:	429d      	cmp	r5, r3
 80084d6:	d081      	beq.n	80083dc <_dtoa_r+0x464>
 80084d8:	4b30      	ldr	r3, [pc, #192]	; (800859c <_dtoa_r+0x624>)
 80084da:	2200      	movs	r2, #0
 80084dc:	4650      	mov	r0, sl
 80084de:	4659      	mov	r1, fp
 80084e0:	f7f8 f89a 	bl	8000618 <__aeabi_dmul>
 80084e4:	4b2d      	ldr	r3, [pc, #180]	; (800859c <_dtoa_r+0x624>)
 80084e6:	4682      	mov	sl, r0
 80084e8:	468b      	mov	fp, r1
 80084ea:	4640      	mov	r0, r8
 80084ec:	4649      	mov	r1, r9
 80084ee:	2200      	movs	r2, #0
 80084f0:	f7f8 f892 	bl	8000618 <__aeabi_dmul>
 80084f4:	4680      	mov	r8, r0
 80084f6:	4689      	mov	r9, r1
 80084f8:	e7c6      	b.n	8008488 <_dtoa_r+0x510>
 80084fa:	4650      	mov	r0, sl
 80084fc:	4659      	mov	r1, fp
 80084fe:	f7f8 f88b 	bl	8000618 <__aeabi_dmul>
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	9d01      	ldr	r5, [sp, #4]
 8008506:	930f      	str	r3, [sp, #60]	; 0x3c
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	4649      	mov	r1, r9
 800850e:	4640      	mov	r0, r8
 8008510:	f7f8 fb32 	bl	8000b78 <__aeabi_d2iz>
 8008514:	4606      	mov	r6, r0
 8008516:	f7f8 f815 	bl	8000544 <__aeabi_i2d>
 800851a:	3630      	adds	r6, #48	; 0x30
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f7 fec0 	bl	80002a8 <__aeabi_dsub>
 8008528:	f805 6b01 	strb.w	r6, [r5], #1
 800852c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852e:	429d      	cmp	r5, r3
 8008530:	4680      	mov	r8, r0
 8008532:	4689      	mov	r9, r1
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	d124      	bne.n	8008584 <_dtoa_r+0x60c>
 800853a:	4b1b      	ldr	r3, [pc, #108]	; (80085a8 <_dtoa_r+0x630>)
 800853c:	4650      	mov	r0, sl
 800853e:	4659      	mov	r1, fp
 8008540:	f7f7 feb4 	bl	80002ac <__adddf3>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f8 faf4 	bl	8000b38 <__aeabi_dcmpgt>
 8008550:	2800      	cmp	r0, #0
 8008552:	d173      	bne.n	800863c <_dtoa_r+0x6c4>
 8008554:	4652      	mov	r2, sl
 8008556:	465b      	mov	r3, fp
 8008558:	4913      	ldr	r1, [pc, #76]	; (80085a8 <_dtoa_r+0x630>)
 800855a:	2000      	movs	r0, #0
 800855c:	f7f7 fea4 	bl	80002a8 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f8 fac8 	bl	8000afc <__aeabi_dcmplt>
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f af35 	beq.w	80083dc <_dtoa_r+0x464>
 8008572:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008574:	1e6b      	subs	r3, r5, #1
 8008576:	930f      	str	r3, [sp, #60]	; 0x3c
 8008578:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800857c:	2b30      	cmp	r3, #48	; 0x30
 800857e:	d0f8      	beq.n	8008572 <_dtoa_r+0x5fa>
 8008580:	9700      	str	r7, [sp, #0]
 8008582:	e049      	b.n	8008618 <_dtoa_r+0x6a0>
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <_dtoa_r+0x624>)
 8008586:	f7f8 f847 	bl	8000618 <__aeabi_dmul>
 800858a:	4680      	mov	r8, r0
 800858c:	4689      	mov	r9, r1
 800858e:	e7bd      	b.n	800850c <_dtoa_r+0x594>
 8008590:	0800cac8 	.word	0x0800cac8
 8008594:	0800caa0 	.word	0x0800caa0
 8008598:	3ff00000 	.word	0x3ff00000
 800859c:	40240000 	.word	0x40240000
 80085a0:	401c0000 	.word	0x401c0000
 80085a4:	40140000 	.word	0x40140000
 80085a8:	3fe00000 	.word	0x3fe00000
 80085ac:	9d01      	ldr	r5, [sp, #4]
 80085ae:	4656      	mov	r6, sl
 80085b0:	465f      	mov	r7, fp
 80085b2:	4642      	mov	r2, r8
 80085b4:	464b      	mov	r3, r9
 80085b6:	4630      	mov	r0, r6
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f8 f957 	bl	800086c <__aeabi_ddiv>
 80085be:	f7f8 fadb 	bl	8000b78 <__aeabi_d2iz>
 80085c2:	4682      	mov	sl, r0
 80085c4:	f7f7 ffbe 	bl	8000544 <__aeabi_i2d>
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	f7f8 f824 	bl	8000618 <__aeabi_dmul>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085dc:	f7f7 fe64 	bl	80002a8 <__aeabi_dsub>
 80085e0:	f805 6b01 	strb.w	r6, [r5], #1
 80085e4:	9e01      	ldr	r6, [sp, #4]
 80085e6:	9f03      	ldr	r7, [sp, #12]
 80085e8:	1bae      	subs	r6, r5, r6
 80085ea:	42b7      	cmp	r7, r6
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	d135      	bne.n	800865e <_dtoa_r+0x6e6>
 80085f2:	f7f7 fe5b 	bl	80002ac <__adddf3>
 80085f6:	4642      	mov	r2, r8
 80085f8:	464b      	mov	r3, r9
 80085fa:	4606      	mov	r6, r0
 80085fc:	460f      	mov	r7, r1
 80085fe:	f7f8 fa9b 	bl	8000b38 <__aeabi_dcmpgt>
 8008602:	b9d0      	cbnz	r0, 800863a <_dtoa_r+0x6c2>
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f8 fa6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008610:	b110      	cbz	r0, 8008618 <_dtoa_r+0x6a0>
 8008612:	f01a 0f01 	tst.w	sl, #1
 8008616:	d110      	bne.n	800863a <_dtoa_r+0x6c2>
 8008618:	4620      	mov	r0, r4
 800861a:	ee18 1a10 	vmov	r1, s16
 800861e:	f000 fe75 	bl	800930c <_Bfree>
 8008622:	2300      	movs	r3, #0
 8008624:	9800      	ldr	r0, [sp, #0]
 8008626:	702b      	strb	r3, [r5, #0]
 8008628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800862a:	3001      	adds	r0, #1
 800862c:	6018      	str	r0, [r3, #0]
 800862e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008630:	2b00      	cmp	r3, #0
 8008632:	f43f acf1 	beq.w	8008018 <_dtoa_r+0xa0>
 8008636:	601d      	str	r5, [r3, #0]
 8008638:	e4ee      	b.n	8008018 <_dtoa_r+0xa0>
 800863a:	9f00      	ldr	r7, [sp, #0]
 800863c:	462b      	mov	r3, r5
 800863e:	461d      	mov	r5, r3
 8008640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008644:	2a39      	cmp	r2, #57	; 0x39
 8008646:	d106      	bne.n	8008656 <_dtoa_r+0x6de>
 8008648:	9a01      	ldr	r2, [sp, #4]
 800864a:	429a      	cmp	r2, r3
 800864c:	d1f7      	bne.n	800863e <_dtoa_r+0x6c6>
 800864e:	9901      	ldr	r1, [sp, #4]
 8008650:	2230      	movs	r2, #48	; 0x30
 8008652:	3701      	adds	r7, #1
 8008654:	700a      	strb	r2, [r1, #0]
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	3201      	adds	r2, #1
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	e790      	b.n	8008580 <_dtoa_r+0x608>
 800865e:	4ba6      	ldr	r3, [pc, #664]	; (80088f8 <_dtoa_r+0x980>)
 8008660:	2200      	movs	r2, #0
 8008662:	f7f7 ffd9 	bl	8000618 <__aeabi_dmul>
 8008666:	2200      	movs	r2, #0
 8008668:	2300      	movs	r3, #0
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	f7f8 fa3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008672:	2800      	cmp	r0, #0
 8008674:	d09d      	beq.n	80085b2 <_dtoa_r+0x63a>
 8008676:	e7cf      	b.n	8008618 <_dtoa_r+0x6a0>
 8008678:	9a08      	ldr	r2, [sp, #32]
 800867a:	2a00      	cmp	r2, #0
 800867c:	f000 80d7 	beq.w	800882e <_dtoa_r+0x8b6>
 8008680:	9a06      	ldr	r2, [sp, #24]
 8008682:	2a01      	cmp	r2, #1
 8008684:	f300 80ba 	bgt.w	80087fc <_dtoa_r+0x884>
 8008688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800868a:	2a00      	cmp	r2, #0
 800868c:	f000 80b2 	beq.w	80087f4 <_dtoa_r+0x87c>
 8008690:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008694:	9e07      	ldr	r6, [sp, #28]
 8008696:	9d04      	ldr	r5, [sp, #16]
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	441a      	add	r2, r3
 800869c:	9204      	str	r2, [sp, #16]
 800869e:	9a05      	ldr	r2, [sp, #20]
 80086a0:	2101      	movs	r1, #1
 80086a2:	441a      	add	r2, r3
 80086a4:	4620      	mov	r0, r4
 80086a6:	9205      	str	r2, [sp, #20]
 80086a8:	f000 ff32 	bl	8009510 <__i2b>
 80086ac:	4607      	mov	r7, r0
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	dd0c      	ble.n	80086cc <_dtoa_r+0x754>
 80086b2:	9b05      	ldr	r3, [sp, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd09      	ble.n	80086cc <_dtoa_r+0x754>
 80086b8:	42ab      	cmp	r3, r5
 80086ba:	9a04      	ldr	r2, [sp, #16]
 80086bc:	bfa8      	it	ge
 80086be:	462b      	movge	r3, r5
 80086c0:	1ad2      	subs	r2, r2, r3
 80086c2:	9204      	str	r2, [sp, #16]
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	1aed      	subs	r5, r5, r3
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	b31b      	cbz	r3, 8008718 <_dtoa_r+0x7a0>
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 80af 	beq.w	8008836 <_dtoa_r+0x8be>
 80086d8:	2e00      	cmp	r6, #0
 80086da:	dd13      	ble.n	8008704 <_dtoa_r+0x78c>
 80086dc:	4639      	mov	r1, r7
 80086de:	4632      	mov	r2, r6
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 ffd5 	bl	8009690 <__pow5mult>
 80086e6:	ee18 2a10 	vmov	r2, s16
 80086ea:	4601      	mov	r1, r0
 80086ec:	4607      	mov	r7, r0
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 ff24 	bl	800953c <__multiply>
 80086f4:	ee18 1a10 	vmov	r1, s16
 80086f8:	4680      	mov	r8, r0
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 fe06 	bl	800930c <_Bfree>
 8008700:	ee08 8a10 	vmov	s16, r8
 8008704:	9b07      	ldr	r3, [sp, #28]
 8008706:	1b9a      	subs	r2, r3, r6
 8008708:	d006      	beq.n	8008718 <_dtoa_r+0x7a0>
 800870a:	ee18 1a10 	vmov	r1, s16
 800870e:	4620      	mov	r0, r4
 8008710:	f000 ffbe 	bl	8009690 <__pow5mult>
 8008714:	ee08 0a10 	vmov	s16, r0
 8008718:	2101      	movs	r1, #1
 800871a:	4620      	mov	r0, r4
 800871c:	f000 fef8 	bl	8009510 <__i2b>
 8008720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	4606      	mov	r6, r0
 8008726:	f340 8088 	ble.w	800883a <_dtoa_r+0x8c2>
 800872a:	461a      	mov	r2, r3
 800872c:	4601      	mov	r1, r0
 800872e:	4620      	mov	r0, r4
 8008730:	f000 ffae 	bl	8009690 <__pow5mult>
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	2b01      	cmp	r3, #1
 8008738:	4606      	mov	r6, r0
 800873a:	f340 8081 	ble.w	8008840 <_dtoa_r+0x8c8>
 800873e:	f04f 0800 	mov.w	r8, #0
 8008742:	6933      	ldr	r3, [r6, #16]
 8008744:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008748:	6918      	ldr	r0, [r3, #16]
 800874a:	f000 fe91 	bl	8009470 <__hi0bits>
 800874e:	f1c0 0020 	rsb	r0, r0, #32
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	4418      	add	r0, r3
 8008756:	f010 001f 	ands.w	r0, r0, #31
 800875a:	f000 8092 	beq.w	8008882 <_dtoa_r+0x90a>
 800875e:	f1c0 0320 	rsb	r3, r0, #32
 8008762:	2b04      	cmp	r3, #4
 8008764:	f340 808a 	ble.w	800887c <_dtoa_r+0x904>
 8008768:	f1c0 001c 	rsb	r0, r0, #28
 800876c:	9b04      	ldr	r3, [sp, #16]
 800876e:	4403      	add	r3, r0
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	9b05      	ldr	r3, [sp, #20]
 8008774:	4403      	add	r3, r0
 8008776:	4405      	add	r5, r0
 8008778:	9305      	str	r3, [sp, #20]
 800877a:	9b04      	ldr	r3, [sp, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd07      	ble.n	8008790 <_dtoa_r+0x818>
 8008780:	ee18 1a10 	vmov	r1, s16
 8008784:	461a      	mov	r2, r3
 8008786:	4620      	mov	r0, r4
 8008788:	f000 ffdc 	bl	8009744 <__lshift>
 800878c:	ee08 0a10 	vmov	s16, r0
 8008790:	9b05      	ldr	r3, [sp, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	dd05      	ble.n	80087a2 <_dtoa_r+0x82a>
 8008796:	4631      	mov	r1, r6
 8008798:	461a      	mov	r2, r3
 800879a:	4620      	mov	r0, r4
 800879c:	f000 ffd2 	bl	8009744 <__lshift>
 80087a0:	4606      	mov	r6, r0
 80087a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d06e      	beq.n	8008886 <_dtoa_r+0x90e>
 80087a8:	ee18 0a10 	vmov	r0, s16
 80087ac:	4631      	mov	r1, r6
 80087ae:	f001 f839 	bl	8009824 <__mcmp>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	da67      	bge.n	8008886 <_dtoa_r+0x90e>
 80087b6:	9b00      	ldr	r3, [sp, #0]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	ee18 1a10 	vmov	r1, s16
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	220a      	movs	r2, #10
 80087c2:	2300      	movs	r3, #0
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 fdc3 	bl	8009350 <__multadd>
 80087ca:	9b08      	ldr	r3, [sp, #32]
 80087cc:	ee08 0a10 	vmov	s16, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 81b1 	beq.w	8008b38 <_dtoa_r+0xbc0>
 80087d6:	2300      	movs	r3, #0
 80087d8:	4639      	mov	r1, r7
 80087da:	220a      	movs	r2, #10
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 fdb7 	bl	8009350 <__multadd>
 80087e2:	9b02      	ldr	r3, [sp, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	4607      	mov	r7, r0
 80087e8:	f300 808e 	bgt.w	8008908 <_dtoa_r+0x990>
 80087ec:	9b06      	ldr	r3, [sp, #24]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	dc51      	bgt.n	8008896 <_dtoa_r+0x91e>
 80087f2:	e089      	b.n	8008908 <_dtoa_r+0x990>
 80087f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087fa:	e74b      	b.n	8008694 <_dtoa_r+0x71c>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	1e5e      	subs	r6, r3, #1
 8008800:	9b07      	ldr	r3, [sp, #28]
 8008802:	42b3      	cmp	r3, r6
 8008804:	bfbf      	itttt	lt
 8008806:	9b07      	ldrlt	r3, [sp, #28]
 8008808:	9607      	strlt	r6, [sp, #28]
 800880a:	1af2      	sublt	r2, r6, r3
 800880c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800880e:	bfb6      	itet	lt
 8008810:	189b      	addlt	r3, r3, r2
 8008812:	1b9e      	subge	r6, r3, r6
 8008814:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008816:	9b03      	ldr	r3, [sp, #12]
 8008818:	bfb8      	it	lt
 800881a:	2600      	movlt	r6, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfb7      	itett	lt
 8008820:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008824:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008828:	1a9d      	sublt	r5, r3, r2
 800882a:	2300      	movlt	r3, #0
 800882c:	e734      	b.n	8008698 <_dtoa_r+0x720>
 800882e:	9e07      	ldr	r6, [sp, #28]
 8008830:	9d04      	ldr	r5, [sp, #16]
 8008832:	9f08      	ldr	r7, [sp, #32]
 8008834:	e73b      	b.n	80086ae <_dtoa_r+0x736>
 8008836:	9a07      	ldr	r2, [sp, #28]
 8008838:	e767      	b.n	800870a <_dtoa_r+0x792>
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	2b01      	cmp	r3, #1
 800883e:	dc18      	bgt.n	8008872 <_dtoa_r+0x8fa>
 8008840:	f1ba 0f00 	cmp.w	sl, #0
 8008844:	d115      	bne.n	8008872 <_dtoa_r+0x8fa>
 8008846:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800884a:	b993      	cbnz	r3, 8008872 <_dtoa_r+0x8fa>
 800884c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008850:	0d1b      	lsrs	r3, r3, #20
 8008852:	051b      	lsls	r3, r3, #20
 8008854:	b183      	cbz	r3, 8008878 <_dtoa_r+0x900>
 8008856:	9b04      	ldr	r3, [sp, #16]
 8008858:	3301      	adds	r3, #1
 800885a:	9304      	str	r3, [sp, #16]
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	3301      	adds	r3, #1
 8008860:	9305      	str	r3, [sp, #20]
 8008862:	f04f 0801 	mov.w	r8, #1
 8008866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008868:	2b00      	cmp	r3, #0
 800886a:	f47f af6a 	bne.w	8008742 <_dtoa_r+0x7ca>
 800886e:	2001      	movs	r0, #1
 8008870:	e76f      	b.n	8008752 <_dtoa_r+0x7da>
 8008872:	f04f 0800 	mov.w	r8, #0
 8008876:	e7f6      	b.n	8008866 <_dtoa_r+0x8ee>
 8008878:	4698      	mov	r8, r3
 800887a:	e7f4      	b.n	8008866 <_dtoa_r+0x8ee>
 800887c:	f43f af7d 	beq.w	800877a <_dtoa_r+0x802>
 8008880:	4618      	mov	r0, r3
 8008882:	301c      	adds	r0, #28
 8008884:	e772      	b.n	800876c <_dtoa_r+0x7f4>
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	dc37      	bgt.n	80088fc <_dtoa_r+0x984>
 800888c:	9b06      	ldr	r3, [sp, #24]
 800888e:	2b02      	cmp	r3, #2
 8008890:	dd34      	ble.n	80088fc <_dtoa_r+0x984>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	9302      	str	r3, [sp, #8]
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	b96b      	cbnz	r3, 80088b6 <_dtoa_r+0x93e>
 800889a:	4631      	mov	r1, r6
 800889c:	2205      	movs	r2, #5
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fd56 	bl	8009350 <__multadd>
 80088a4:	4601      	mov	r1, r0
 80088a6:	4606      	mov	r6, r0
 80088a8:	ee18 0a10 	vmov	r0, s16
 80088ac:	f000 ffba 	bl	8009824 <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f73f adbb 	bgt.w	800842c <_dtoa_r+0x4b4>
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	9d01      	ldr	r5, [sp, #4]
 80088ba:	43db      	mvns	r3, r3
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	f04f 0800 	mov.w	r8, #0
 80088c2:	4631      	mov	r1, r6
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 fd21 	bl	800930c <_Bfree>
 80088ca:	2f00      	cmp	r7, #0
 80088cc:	f43f aea4 	beq.w	8008618 <_dtoa_r+0x6a0>
 80088d0:	f1b8 0f00 	cmp.w	r8, #0
 80088d4:	d005      	beq.n	80088e2 <_dtoa_r+0x96a>
 80088d6:	45b8      	cmp	r8, r7
 80088d8:	d003      	beq.n	80088e2 <_dtoa_r+0x96a>
 80088da:	4641      	mov	r1, r8
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fd15 	bl	800930c <_Bfree>
 80088e2:	4639      	mov	r1, r7
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fd11 	bl	800930c <_Bfree>
 80088ea:	e695      	b.n	8008618 <_dtoa_r+0x6a0>
 80088ec:	2600      	movs	r6, #0
 80088ee:	4637      	mov	r7, r6
 80088f0:	e7e1      	b.n	80088b6 <_dtoa_r+0x93e>
 80088f2:	9700      	str	r7, [sp, #0]
 80088f4:	4637      	mov	r7, r6
 80088f6:	e599      	b.n	800842c <_dtoa_r+0x4b4>
 80088f8:	40240000 	.word	0x40240000
 80088fc:	9b08      	ldr	r3, [sp, #32]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80ca 	beq.w	8008a98 <_dtoa_r+0xb20>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	9302      	str	r3, [sp, #8]
 8008908:	2d00      	cmp	r5, #0
 800890a:	dd05      	ble.n	8008918 <_dtoa_r+0x9a0>
 800890c:	4639      	mov	r1, r7
 800890e:	462a      	mov	r2, r5
 8008910:	4620      	mov	r0, r4
 8008912:	f000 ff17 	bl	8009744 <__lshift>
 8008916:	4607      	mov	r7, r0
 8008918:	f1b8 0f00 	cmp.w	r8, #0
 800891c:	d05b      	beq.n	80089d6 <_dtoa_r+0xa5e>
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4620      	mov	r0, r4
 8008922:	f000 fcb3 	bl	800928c <_Balloc>
 8008926:	4605      	mov	r5, r0
 8008928:	b928      	cbnz	r0, 8008936 <_dtoa_r+0x9be>
 800892a:	4b87      	ldr	r3, [pc, #540]	; (8008b48 <_dtoa_r+0xbd0>)
 800892c:	4602      	mov	r2, r0
 800892e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008932:	f7ff bb3b 	b.w	8007fac <_dtoa_r+0x34>
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	3202      	adds	r2, #2
 800893a:	0092      	lsls	r2, r2, #2
 800893c:	f107 010c 	add.w	r1, r7, #12
 8008940:	300c      	adds	r0, #12
 8008942:	f000 fc95 	bl	8009270 <memcpy>
 8008946:	2201      	movs	r2, #1
 8008948:	4629      	mov	r1, r5
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fefa 	bl	8009744 <__lshift>
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	f103 0901 	add.w	r9, r3, #1
 8008956:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800895a:	4413      	add	r3, r2
 800895c:	9305      	str	r3, [sp, #20]
 800895e:	f00a 0301 	and.w	r3, sl, #1
 8008962:	46b8      	mov	r8, r7
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	4607      	mov	r7, r0
 8008968:	4631      	mov	r1, r6
 800896a:	ee18 0a10 	vmov	r0, s16
 800896e:	f7ff fa77 	bl	8007e60 <quorem>
 8008972:	4641      	mov	r1, r8
 8008974:	9002      	str	r0, [sp, #8]
 8008976:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800897a:	ee18 0a10 	vmov	r0, s16
 800897e:	f000 ff51 	bl	8009824 <__mcmp>
 8008982:	463a      	mov	r2, r7
 8008984:	9003      	str	r0, [sp, #12]
 8008986:	4631      	mov	r1, r6
 8008988:	4620      	mov	r0, r4
 800898a:	f000 ff67 	bl	800985c <__mdiff>
 800898e:	68c2      	ldr	r2, [r0, #12]
 8008990:	f109 3bff 	add.w	fp, r9, #4294967295
 8008994:	4605      	mov	r5, r0
 8008996:	bb02      	cbnz	r2, 80089da <_dtoa_r+0xa62>
 8008998:	4601      	mov	r1, r0
 800899a:	ee18 0a10 	vmov	r0, s16
 800899e:	f000 ff41 	bl	8009824 <__mcmp>
 80089a2:	4602      	mov	r2, r0
 80089a4:	4629      	mov	r1, r5
 80089a6:	4620      	mov	r0, r4
 80089a8:	9207      	str	r2, [sp, #28]
 80089aa:	f000 fcaf 	bl	800930c <_Bfree>
 80089ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089b2:	ea43 0102 	orr.w	r1, r3, r2
 80089b6:	9b04      	ldr	r3, [sp, #16]
 80089b8:	430b      	orrs	r3, r1
 80089ba:	464d      	mov	r5, r9
 80089bc:	d10f      	bne.n	80089de <_dtoa_r+0xa66>
 80089be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089c2:	d02a      	beq.n	8008a1a <_dtoa_r+0xaa2>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	dd02      	ble.n	80089d0 <_dtoa_r+0xa58>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089d0:	f88b a000 	strb.w	sl, [fp]
 80089d4:	e775      	b.n	80088c2 <_dtoa_r+0x94a>
 80089d6:	4638      	mov	r0, r7
 80089d8:	e7ba      	b.n	8008950 <_dtoa_r+0x9d8>
 80089da:	2201      	movs	r2, #1
 80089dc:	e7e2      	b.n	80089a4 <_dtoa_r+0xa2c>
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	db04      	blt.n	80089ee <_dtoa_r+0xa76>
 80089e4:	9906      	ldr	r1, [sp, #24]
 80089e6:	430b      	orrs	r3, r1
 80089e8:	9904      	ldr	r1, [sp, #16]
 80089ea:	430b      	orrs	r3, r1
 80089ec:	d122      	bne.n	8008a34 <_dtoa_r+0xabc>
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	ddee      	ble.n	80089d0 <_dtoa_r+0xa58>
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	2201      	movs	r2, #1
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fea3 	bl	8009744 <__lshift>
 80089fe:	4631      	mov	r1, r6
 8008a00:	ee08 0a10 	vmov	s16, r0
 8008a04:	f000 ff0e 	bl	8009824 <__mcmp>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dc03      	bgt.n	8008a14 <_dtoa_r+0xa9c>
 8008a0c:	d1e0      	bne.n	80089d0 <_dtoa_r+0xa58>
 8008a0e:	f01a 0f01 	tst.w	sl, #1
 8008a12:	d0dd      	beq.n	80089d0 <_dtoa_r+0xa58>
 8008a14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a18:	d1d7      	bne.n	80089ca <_dtoa_r+0xa52>
 8008a1a:	2339      	movs	r3, #57	; 0x39
 8008a1c:	f88b 3000 	strb.w	r3, [fp]
 8008a20:	462b      	mov	r3, r5
 8008a22:	461d      	mov	r5, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a2a:	2a39      	cmp	r2, #57	; 0x39
 8008a2c:	d071      	beq.n	8008b12 <_dtoa_r+0xb9a>
 8008a2e:	3201      	adds	r2, #1
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e746      	b.n	80088c2 <_dtoa_r+0x94a>
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	dd07      	ble.n	8008a48 <_dtoa_r+0xad0>
 8008a38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a3c:	d0ed      	beq.n	8008a1a <_dtoa_r+0xaa2>
 8008a3e:	f10a 0301 	add.w	r3, sl, #1
 8008a42:	f88b 3000 	strb.w	r3, [fp]
 8008a46:	e73c      	b.n	80088c2 <_dtoa_r+0x94a>
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a4e:	4599      	cmp	r9, r3
 8008a50:	d047      	beq.n	8008ae2 <_dtoa_r+0xb6a>
 8008a52:	ee18 1a10 	vmov	r1, s16
 8008a56:	2300      	movs	r3, #0
 8008a58:	220a      	movs	r2, #10
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fc78 	bl	8009350 <__multadd>
 8008a60:	45b8      	cmp	r8, r7
 8008a62:	ee08 0a10 	vmov	s16, r0
 8008a66:	f04f 0300 	mov.w	r3, #0
 8008a6a:	f04f 020a 	mov.w	r2, #10
 8008a6e:	4641      	mov	r1, r8
 8008a70:	4620      	mov	r0, r4
 8008a72:	d106      	bne.n	8008a82 <_dtoa_r+0xb0a>
 8008a74:	f000 fc6c 	bl	8009350 <__multadd>
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	f109 0901 	add.w	r9, r9, #1
 8008a80:	e772      	b.n	8008968 <_dtoa_r+0x9f0>
 8008a82:	f000 fc65 	bl	8009350 <__multadd>
 8008a86:	4639      	mov	r1, r7
 8008a88:	4680      	mov	r8, r0
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	220a      	movs	r2, #10
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 fc5e 	bl	8009350 <__multadd>
 8008a94:	4607      	mov	r7, r0
 8008a96:	e7f1      	b.n	8008a7c <_dtoa_r+0xb04>
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	9d01      	ldr	r5, [sp, #4]
 8008a9e:	ee18 0a10 	vmov	r0, s16
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	f7ff f9dc 	bl	8007e60 <quorem>
 8008aa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	f805 ab01 	strb.w	sl, [r5], #1
 8008ab2:	1aea      	subs	r2, r5, r3
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	dd09      	ble.n	8008ace <_dtoa_r+0xb56>
 8008aba:	ee18 1a10 	vmov	r1, s16
 8008abe:	2300      	movs	r3, #0
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fc44 	bl	8009350 <__multadd>
 8008ac8:	ee08 0a10 	vmov	s16, r0
 8008acc:	e7e7      	b.n	8008a9e <_dtoa_r+0xb26>
 8008ace:	9b02      	ldr	r3, [sp, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bfc8      	it	gt
 8008ad4:	461d      	movgt	r5, r3
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	bfd8      	it	le
 8008ada:	2501      	movle	r5, #1
 8008adc:	441d      	add	r5, r3
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	ee18 1a10 	vmov	r1, s16
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fe2b 	bl	8009744 <__lshift>
 8008aee:	4631      	mov	r1, r6
 8008af0:	ee08 0a10 	vmov	s16, r0
 8008af4:	f000 fe96 	bl	8009824 <__mcmp>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	dc91      	bgt.n	8008a20 <_dtoa_r+0xaa8>
 8008afc:	d102      	bne.n	8008b04 <_dtoa_r+0xb8c>
 8008afe:	f01a 0f01 	tst.w	sl, #1
 8008b02:	d18d      	bne.n	8008a20 <_dtoa_r+0xaa8>
 8008b04:	462b      	mov	r3, r5
 8008b06:	461d      	mov	r5, r3
 8008b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b0c:	2a30      	cmp	r2, #48	; 0x30
 8008b0e:	d0fa      	beq.n	8008b06 <_dtoa_r+0xb8e>
 8008b10:	e6d7      	b.n	80088c2 <_dtoa_r+0x94a>
 8008b12:	9a01      	ldr	r2, [sp, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d184      	bne.n	8008a22 <_dtoa_r+0xaaa>
 8008b18:	9b00      	ldr	r3, [sp, #0]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2331      	movs	r3, #49	; 0x31
 8008b20:	7013      	strb	r3, [r2, #0]
 8008b22:	e6ce      	b.n	80088c2 <_dtoa_r+0x94a>
 8008b24:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <_dtoa_r+0xbd4>)
 8008b26:	f7ff ba95 	b.w	8008054 <_dtoa_r+0xdc>
 8008b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f47f aa6e 	bne.w	800800e <_dtoa_r+0x96>
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <_dtoa_r+0xbd8>)
 8008b34:	f7ff ba8e 	b.w	8008054 <_dtoa_r+0xdc>
 8008b38:	9b02      	ldr	r3, [sp, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dcae      	bgt.n	8008a9c <_dtoa_r+0xb24>
 8008b3e:	9b06      	ldr	r3, [sp, #24]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	f73f aea8 	bgt.w	8008896 <_dtoa_r+0x91e>
 8008b46:	e7a9      	b.n	8008a9c <_dtoa_r+0xb24>
 8008b48:	0800c9b8 	.word	0x0800c9b8
 8008b4c:	0800c7bc 	.word	0x0800c7bc
 8008b50:	0800c939 	.word	0x0800c939

08008b54 <rshift>:
 8008b54:	6903      	ldr	r3, [r0, #16]
 8008b56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b62:	f100 0414 	add.w	r4, r0, #20
 8008b66:	dd45      	ble.n	8008bf4 <rshift+0xa0>
 8008b68:	f011 011f 	ands.w	r1, r1, #31
 8008b6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b74:	d10c      	bne.n	8008b90 <rshift+0x3c>
 8008b76:	f100 0710 	add.w	r7, r0, #16
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	42b1      	cmp	r1, r6
 8008b7e:	d334      	bcc.n	8008bea <rshift+0x96>
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	1eea      	subs	r2, r5, #3
 8008b86:	4296      	cmp	r6, r2
 8008b88:	bf38      	it	cc
 8008b8a:	2300      	movcc	r3, #0
 8008b8c:	4423      	add	r3, r4
 8008b8e:	e015      	b.n	8008bbc <rshift+0x68>
 8008b90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b94:	f1c1 0820 	rsb	r8, r1, #32
 8008b98:	40cf      	lsrs	r7, r1
 8008b9a:	f105 0e04 	add.w	lr, r5, #4
 8008b9e:	46a1      	mov	r9, r4
 8008ba0:	4576      	cmp	r6, lr
 8008ba2:	46f4      	mov	ip, lr
 8008ba4:	d815      	bhi.n	8008bd2 <rshift+0x7e>
 8008ba6:	1a9a      	subs	r2, r3, r2
 8008ba8:	0092      	lsls	r2, r2, #2
 8008baa:	3a04      	subs	r2, #4
 8008bac:	3501      	adds	r5, #1
 8008bae:	42ae      	cmp	r6, r5
 8008bb0:	bf38      	it	cc
 8008bb2:	2200      	movcc	r2, #0
 8008bb4:	18a3      	adds	r3, r4, r2
 8008bb6:	50a7      	str	r7, [r4, r2]
 8008bb8:	b107      	cbz	r7, 8008bbc <rshift+0x68>
 8008bba:	3304      	adds	r3, #4
 8008bbc:	1b1a      	subs	r2, r3, r4
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bc4:	bf08      	it	eq
 8008bc6:	2300      	moveq	r3, #0
 8008bc8:	6102      	str	r2, [r0, #16]
 8008bca:	bf08      	it	eq
 8008bcc:	6143      	streq	r3, [r0, #20]
 8008bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	f8dc c000 	ldr.w	ip, [ip]
 8008bd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bda:	ea4c 0707 	orr.w	r7, ip, r7
 8008bde:	f849 7b04 	str.w	r7, [r9], #4
 8008be2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008be6:	40cf      	lsrs	r7, r1
 8008be8:	e7da      	b.n	8008ba0 <rshift+0x4c>
 8008bea:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bee:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bf2:	e7c3      	b.n	8008b7c <rshift+0x28>
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	e7e1      	b.n	8008bbc <rshift+0x68>

08008bf8 <__hexdig_fun>:
 8008bf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bfc:	2b09      	cmp	r3, #9
 8008bfe:	d802      	bhi.n	8008c06 <__hexdig_fun+0xe>
 8008c00:	3820      	subs	r0, #32
 8008c02:	b2c0      	uxtb	r0, r0
 8008c04:	4770      	bx	lr
 8008c06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d801      	bhi.n	8008c12 <__hexdig_fun+0x1a>
 8008c0e:	3847      	subs	r0, #71	; 0x47
 8008c10:	e7f7      	b.n	8008c02 <__hexdig_fun+0xa>
 8008c12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d801      	bhi.n	8008c1e <__hexdig_fun+0x26>
 8008c1a:	3827      	subs	r0, #39	; 0x27
 8008c1c:	e7f1      	b.n	8008c02 <__hexdig_fun+0xa>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	4770      	bx	lr
	...

08008c24 <__gethex>:
 8008c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	ed2d 8b02 	vpush	{d8}
 8008c2c:	b089      	sub	sp, #36	; 0x24
 8008c2e:	ee08 0a10 	vmov	s16, r0
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	4bb4      	ldr	r3, [pc, #720]	; (8008f08 <__gethex+0x2e4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	4690      	mov	r8, r2
 8008c40:	f7f7 fad6 	bl	80001f0 <strlen>
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	f8db 2000 	ldr.w	r2, [fp]
 8008c4a:	4403      	add	r3, r0
 8008c4c:	4682      	mov	sl, r0
 8008c4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c52:	9305      	str	r3, [sp, #20]
 8008c54:	1c93      	adds	r3, r2, #2
 8008c56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c5e:	32fe      	adds	r2, #254	; 0xfe
 8008c60:	18d1      	adds	r1, r2, r3
 8008c62:	461f      	mov	r7, r3
 8008c64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c68:	9100      	str	r1, [sp, #0]
 8008c6a:	2830      	cmp	r0, #48	; 0x30
 8008c6c:	d0f8      	beq.n	8008c60 <__gethex+0x3c>
 8008c6e:	f7ff ffc3 	bl	8008bf8 <__hexdig_fun>
 8008c72:	4604      	mov	r4, r0
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d13a      	bne.n	8008cee <__gethex+0xca>
 8008c78:	9901      	ldr	r1, [sp, #4]
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f001 fa33 	bl	800a0e8 <strncmp>
 8008c82:	4605      	mov	r5, r0
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d168      	bne.n	8008d5a <__gethex+0x136>
 8008c88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c8c:	eb07 060a 	add.w	r6, r7, sl
 8008c90:	f7ff ffb2 	bl	8008bf8 <__hexdig_fun>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d062      	beq.n	8008d5e <__gethex+0x13a>
 8008c98:	4633      	mov	r3, r6
 8008c9a:	7818      	ldrb	r0, [r3, #0]
 8008c9c:	2830      	cmp	r0, #48	; 0x30
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	f103 0301 	add.w	r3, r3, #1
 8008ca4:	d0f9      	beq.n	8008c9a <__gethex+0x76>
 8008ca6:	f7ff ffa7 	bl	8008bf8 <__hexdig_fun>
 8008caa:	2301      	movs	r3, #1
 8008cac:	fab0 f480 	clz	r4, r0
 8008cb0:	0964      	lsrs	r4, r4, #5
 8008cb2:	4635      	mov	r5, r6
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	4616      	mov	r6, r2
 8008cba:	3201      	adds	r2, #1
 8008cbc:	7830      	ldrb	r0, [r6, #0]
 8008cbe:	f7ff ff9b 	bl	8008bf8 <__hexdig_fun>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1f8      	bne.n	8008cb8 <__gethex+0x94>
 8008cc6:	9901      	ldr	r1, [sp, #4]
 8008cc8:	4652      	mov	r2, sl
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f001 fa0c 	bl	800a0e8 <strncmp>
 8008cd0:	b980      	cbnz	r0, 8008cf4 <__gethex+0xd0>
 8008cd2:	b94d      	cbnz	r5, 8008ce8 <__gethex+0xc4>
 8008cd4:	eb06 050a 	add.w	r5, r6, sl
 8008cd8:	462a      	mov	r2, r5
 8008cda:	4616      	mov	r6, r2
 8008cdc:	3201      	adds	r2, #1
 8008cde:	7830      	ldrb	r0, [r6, #0]
 8008ce0:	f7ff ff8a 	bl	8008bf8 <__hexdig_fun>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1f8      	bne.n	8008cda <__gethex+0xb6>
 8008ce8:	1bad      	subs	r5, r5, r6
 8008cea:	00ad      	lsls	r5, r5, #2
 8008cec:	e004      	b.n	8008cf8 <__gethex+0xd4>
 8008cee:	2400      	movs	r4, #0
 8008cf0:	4625      	mov	r5, r4
 8008cf2:	e7e0      	b.n	8008cb6 <__gethex+0x92>
 8008cf4:	2d00      	cmp	r5, #0
 8008cf6:	d1f7      	bne.n	8008ce8 <__gethex+0xc4>
 8008cf8:	7833      	ldrb	r3, [r6, #0]
 8008cfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cfe:	2b50      	cmp	r3, #80	; 0x50
 8008d00:	d13b      	bne.n	8008d7a <__gethex+0x156>
 8008d02:	7873      	ldrb	r3, [r6, #1]
 8008d04:	2b2b      	cmp	r3, #43	; 0x2b
 8008d06:	d02c      	beq.n	8008d62 <__gethex+0x13e>
 8008d08:	2b2d      	cmp	r3, #45	; 0x2d
 8008d0a:	d02e      	beq.n	8008d6a <__gethex+0x146>
 8008d0c:	1c71      	adds	r1, r6, #1
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	7808      	ldrb	r0, [r1, #0]
 8008d14:	f7ff ff70 	bl	8008bf8 <__hexdig_fun>
 8008d18:	1e43      	subs	r3, r0, #1
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b18      	cmp	r3, #24
 8008d1e:	d82c      	bhi.n	8008d7a <__gethex+0x156>
 8008d20:	f1a0 0210 	sub.w	r2, r0, #16
 8008d24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d28:	f7ff ff66 	bl	8008bf8 <__hexdig_fun>
 8008d2c:	1e43      	subs	r3, r0, #1
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b18      	cmp	r3, #24
 8008d32:	d91d      	bls.n	8008d70 <__gethex+0x14c>
 8008d34:	f1b9 0f00 	cmp.w	r9, #0
 8008d38:	d000      	beq.n	8008d3c <__gethex+0x118>
 8008d3a:	4252      	negs	r2, r2
 8008d3c:	4415      	add	r5, r2
 8008d3e:	f8cb 1000 	str.w	r1, [fp]
 8008d42:	b1e4      	cbz	r4, 8008d7e <__gethex+0x15a>
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2700      	movne	r7, #0
 8008d4c:	2706      	moveq	r7, #6
 8008d4e:	4638      	mov	r0, r7
 8008d50:	b009      	add	sp, #36	; 0x24
 8008d52:	ecbd 8b02 	vpop	{d8}
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	463e      	mov	r6, r7
 8008d5c:	4625      	mov	r5, r4
 8008d5e:	2401      	movs	r4, #1
 8008d60:	e7ca      	b.n	8008cf8 <__gethex+0xd4>
 8008d62:	f04f 0900 	mov.w	r9, #0
 8008d66:	1cb1      	adds	r1, r6, #2
 8008d68:	e7d3      	b.n	8008d12 <__gethex+0xee>
 8008d6a:	f04f 0901 	mov.w	r9, #1
 8008d6e:	e7fa      	b.n	8008d66 <__gethex+0x142>
 8008d70:	230a      	movs	r3, #10
 8008d72:	fb03 0202 	mla	r2, r3, r2, r0
 8008d76:	3a10      	subs	r2, #16
 8008d78:	e7d4      	b.n	8008d24 <__gethex+0x100>
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	e7df      	b.n	8008d3e <__gethex+0x11a>
 8008d7e:	1bf3      	subs	r3, r6, r7
 8008d80:	3b01      	subs	r3, #1
 8008d82:	4621      	mov	r1, r4
 8008d84:	2b07      	cmp	r3, #7
 8008d86:	dc0b      	bgt.n	8008da0 <__gethex+0x17c>
 8008d88:	ee18 0a10 	vmov	r0, s16
 8008d8c:	f000 fa7e 	bl	800928c <_Balloc>
 8008d90:	4604      	mov	r4, r0
 8008d92:	b940      	cbnz	r0, 8008da6 <__gethex+0x182>
 8008d94:	4b5d      	ldr	r3, [pc, #372]	; (8008f0c <__gethex+0x2e8>)
 8008d96:	4602      	mov	r2, r0
 8008d98:	21de      	movs	r1, #222	; 0xde
 8008d9a:	485d      	ldr	r0, [pc, #372]	; (8008f10 <__gethex+0x2ec>)
 8008d9c:	f001 f9c6 	bl	800a12c <__assert_func>
 8008da0:	3101      	adds	r1, #1
 8008da2:	105b      	asrs	r3, r3, #1
 8008da4:	e7ee      	b.n	8008d84 <__gethex+0x160>
 8008da6:	f100 0914 	add.w	r9, r0, #20
 8008daa:	f04f 0b00 	mov.w	fp, #0
 8008dae:	f1ca 0301 	rsb	r3, sl, #1
 8008db2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008db6:	f8cd b000 	str.w	fp, [sp]
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	42b7      	cmp	r7, r6
 8008dbe:	d340      	bcc.n	8008e42 <__gethex+0x21e>
 8008dc0:	9802      	ldr	r0, [sp, #8]
 8008dc2:	9b00      	ldr	r3, [sp, #0]
 8008dc4:	f840 3b04 	str.w	r3, [r0], #4
 8008dc8:	eba0 0009 	sub.w	r0, r0, r9
 8008dcc:	1080      	asrs	r0, r0, #2
 8008dce:	0146      	lsls	r6, r0, #5
 8008dd0:	6120      	str	r0, [r4, #16]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fb4c 	bl	8009470 <__hi0bits>
 8008dd8:	1a30      	subs	r0, r6, r0
 8008dda:	f8d8 6000 	ldr.w	r6, [r8]
 8008dde:	42b0      	cmp	r0, r6
 8008de0:	dd63      	ble.n	8008eaa <__gethex+0x286>
 8008de2:	1b87      	subs	r7, r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fef0 	bl	8009bcc <__any_on>
 8008dec:	4682      	mov	sl, r0
 8008dee:	b1a8      	cbz	r0, 8008e1c <__gethex+0x1f8>
 8008df0:	1e7b      	subs	r3, r7, #1
 8008df2:	1159      	asrs	r1, r3, #5
 8008df4:	f003 021f 	and.w	r2, r3, #31
 8008df8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008dfc:	f04f 0a01 	mov.w	sl, #1
 8008e00:	fa0a f202 	lsl.w	r2, sl, r2
 8008e04:	420a      	tst	r2, r1
 8008e06:	d009      	beq.n	8008e1c <__gethex+0x1f8>
 8008e08:	4553      	cmp	r3, sl
 8008e0a:	dd05      	ble.n	8008e18 <__gethex+0x1f4>
 8008e0c:	1eb9      	subs	r1, r7, #2
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 fedc 	bl	8009bcc <__any_on>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d145      	bne.n	8008ea4 <__gethex+0x280>
 8008e18:	f04f 0a02 	mov.w	sl, #2
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff fe98 	bl	8008b54 <rshift>
 8008e24:	443d      	add	r5, r7
 8008e26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e2a:	42ab      	cmp	r3, r5
 8008e2c:	da4c      	bge.n	8008ec8 <__gethex+0x2a4>
 8008e2e:	ee18 0a10 	vmov	r0, s16
 8008e32:	4621      	mov	r1, r4
 8008e34:	f000 fa6a 	bl	800930c <_Bfree>
 8008e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	27a3      	movs	r7, #163	; 0xa3
 8008e40:	e785      	b.n	8008d4e <__gethex+0x12a>
 8008e42:	1e73      	subs	r3, r6, #1
 8008e44:	9a05      	ldr	r2, [sp, #20]
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d019      	beq.n	8008e84 <__gethex+0x260>
 8008e50:	f1bb 0f20 	cmp.w	fp, #32
 8008e54:	d107      	bne.n	8008e66 <__gethex+0x242>
 8008e56:	9b02      	ldr	r3, [sp, #8]
 8008e58:	9a00      	ldr	r2, [sp, #0]
 8008e5a:	f843 2b04 	str.w	r2, [r3], #4
 8008e5e:	9302      	str	r3, [sp, #8]
 8008e60:	2300      	movs	r3, #0
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	469b      	mov	fp, r3
 8008e66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e6a:	f7ff fec5 	bl	8008bf8 <__hexdig_fun>
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	f000 000f 	and.w	r0, r0, #15
 8008e74:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e78:	4303      	orrs	r3, r0
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	f10b 0b04 	add.w	fp, fp, #4
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	e00d      	b.n	8008ea0 <__gethex+0x27c>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	9a06      	ldr	r2, [sp, #24]
 8008e88:	4413      	add	r3, r2
 8008e8a:	42bb      	cmp	r3, r7
 8008e8c:	d3e0      	bcc.n	8008e50 <__gethex+0x22c>
 8008e8e:	4618      	mov	r0, r3
 8008e90:	9901      	ldr	r1, [sp, #4]
 8008e92:	9307      	str	r3, [sp, #28]
 8008e94:	4652      	mov	r2, sl
 8008e96:	f001 f927 	bl	800a0e8 <strncmp>
 8008e9a:	9b07      	ldr	r3, [sp, #28]
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d1d7      	bne.n	8008e50 <__gethex+0x22c>
 8008ea0:	461e      	mov	r6, r3
 8008ea2:	e78b      	b.n	8008dbc <__gethex+0x198>
 8008ea4:	f04f 0a03 	mov.w	sl, #3
 8008ea8:	e7b8      	b.n	8008e1c <__gethex+0x1f8>
 8008eaa:	da0a      	bge.n	8008ec2 <__gethex+0x29e>
 8008eac:	1a37      	subs	r7, r6, r0
 8008eae:	4621      	mov	r1, r4
 8008eb0:	ee18 0a10 	vmov	r0, s16
 8008eb4:	463a      	mov	r2, r7
 8008eb6:	f000 fc45 	bl	8009744 <__lshift>
 8008eba:	1bed      	subs	r5, r5, r7
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	f100 0914 	add.w	r9, r0, #20
 8008ec2:	f04f 0a00 	mov.w	sl, #0
 8008ec6:	e7ae      	b.n	8008e26 <__gethex+0x202>
 8008ec8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ecc:	42a8      	cmp	r0, r5
 8008ece:	dd72      	ble.n	8008fb6 <__gethex+0x392>
 8008ed0:	1b45      	subs	r5, r0, r5
 8008ed2:	42ae      	cmp	r6, r5
 8008ed4:	dc36      	bgt.n	8008f44 <__gethex+0x320>
 8008ed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d02a      	beq.n	8008f34 <__gethex+0x310>
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d02c      	beq.n	8008f3c <__gethex+0x318>
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d11c      	bne.n	8008f20 <__gethex+0x2fc>
 8008ee6:	42ae      	cmp	r6, r5
 8008ee8:	d11a      	bne.n	8008f20 <__gethex+0x2fc>
 8008eea:	2e01      	cmp	r6, #1
 8008eec:	d112      	bne.n	8008f14 <__gethex+0x2f0>
 8008eee:	9a04      	ldr	r2, [sp, #16]
 8008ef0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	f8c9 3000 	str.w	r3, [r9]
 8008efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f00:	2762      	movs	r7, #98	; 0x62
 8008f02:	601c      	str	r4, [r3, #0]
 8008f04:	e723      	b.n	8008d4e <__gethex+0x12a>
 8008f06:	bf00      	nop
 8008f08:	0800ca30 	.word	0x0800ca30
 8008f0c:	0800c9b8 	.word	0x0800c9b8
 8008f10:	0800c9c9 	.word	0x0800c9c9
 8008f14:	1e71      	subs	r1, r6, #1
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fe58 	bl	8009bcc <__any_on>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d1e6      	bne.n	8008eee <__gethex+0x2ca>
 8008f20:	ee18 0a10 	vmov	r0, s16
 8008f24:	4621      	mov	r1, r4
 8008f26:	f000 f9f1 	bl	800930c <_Bfree>
 8008f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	2750      	movs	r7, #80	; 0x50
 8008f32:	e70c      	b.n	8008d4e <__gethex+0x12a>
 8008f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1f2      	bne.n	8008f20 <__gethex+0x2fc>
 8008f3a:	e7d8      	b.n	8008eee <__gethex+0x2ca>
 8008f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1d5      	bne.n	8008eee <__gethex+0x2ca>
 8008f42:	e7ed      	b.n	8008f20 <__gethex+0x2fc>
 8008f44:	1e6f      	subs	r7, r5, #1
 8008f46:	f1ba 0f00 	cmp.w	sl, #0
 8008f4a:	d131      	bne.n	8008fb0 <__gethex+0x38c>
 8008f4c:	b127      	cbz	r7, 8008f58 <__gethex+0x334>
 8008f4e:	4639      	mov	r1, r7
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fe3b 	bl	8009bcc <__any_on>
 8008f56:	4682      	mov	sl, r0
 8008f58:	117b      	asrs	r3, r7, #5
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f60:	f007 071f 	and.w	r7, r7, #31
 8008f64:	fa01 f707 	lsl.w	r7, r1, r7
 8008f68:	421f      	tst	r7, r3
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	bf18      	it	ne
 8008f70:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f74:	1b76      	subs	r6, r6, r5
 8008f76:	f7ff fded 	bl	8008b54 <rshift>
 8008f7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f7e:	2702      	movs	r7, #2
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	d048      	beq.n	8009018 <__gethex+0x3f4>
 8008f86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d015      	beq.n	8008fba <__gethex+0x396>
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d017      	beq.n	8008fc2 <__gethex+0x39e>
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d109      	bne.n	8008faa <__gethex+0x386>
 8008f96:	f01a 0f02 	tst.w	sl, #2
 8008f9a:	d006      	beq.n	8008faa <__gethex+0x386>
 8008f9c:	f8d9 0000 	ldr.w	r0, [r9]
 8008fa0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fa4:	f01a 0f01 	tst.w	sl, #1
 8008fa8:	d10e      	bne.n	8008fc8 <__gethex+0x3a4>
 8008faa:	f047 0710 	orr.w	r7, r7, #16
 8008fae:	e033      	b.n	8009018 <__gethex+0x3f4>
 8008fb0:	f04f 0a01 	mov.w	sl, #1
 8008fb4:	e7d0      	b.n	8008f58 <__gethex+0x334>
 8008fb6:	2701      	movs	r7, #1
 8008fb8:	e7e2      	b.n	8008f80 <__gethex+0x35c>
 8008fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fbc:	f1c3 0301 	rsb	r3, r3, #1
 8008fc0:	9315      	str	r3, [sp, #84]	; 0x54
 8008fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <__gethex+0x386>
 8008fc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fcc:	f104 0314 	add.w	r3, r4, #20
 8008fd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fd8:	f04f 0c00 	mov.w	ip, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fe6:	d01c      	beq.n	8009022 <__gethex+0x3fe>
 8008fe8:	3201      	adds	r2, #1
 8008fea:	6002      	str	r2, [r0, #0]
 8008fec:	2f02      	cmp	r7, #2
 8008fee:	f104 0314 	add.w	r3, r4, #20
 8008ff2:	d13f      	bne.n	8009074 <__gethex+0x450>
 8008ff4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ff8:	3a01      	subs	r2, #1
 8008ffa:	42b2      	cmp	r2, r6
 8008ffc:	d10a      	bne.n	8009014 <__gethex+0x3f0>
 8008ffe:	1171      	asrs	r1, r6, #5
 8009000:	2201      	movs	r2, #1
 8009002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009006:	f006 061f 	and.w	r6, r6, #31
 800900a:	fa02 f606 	lsl.w	r6, r2, r6
 800900e:	421e      	tst	r6, r3
 8009010:	bf18      	it	ne
 8009012:	4617      	movne	r7, r2
 8009014:	f047 0720 	orr.w	r7, r7, #32
 8009018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800901a:	601c      	str	r4, [r3, #0]
 800901c:	9b04      	ldr	r3, [sp, #16]
 800901e:	601d      	str	r5, [r3, #0]
 8009020:	e695      	b.n	8008d4e <__gethex+0x12a>
 8009022:	4299      	cmp	r1, r3
 8009024:	f843 cc04 	str.w	ip, [r3, #-4]
 8009028:	d8d8      	bhi.n	8008fdc <__gethex+0x3b8>
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	459b      	cmp	fp, r3
 800902e:	db19      	blt.n	8009064 <__gethex+0x440>
 8009030:	6861      	ldr	r1, [r4, #4]
 8009032:	ee18 0a10 	vmov	r0, s16
 8009036:	3101      	adds	r1, #1
 8009038:	f000 f928 	bl	800928c <_Balloc>
 800903c:	4681      	mov	r9, r0
 800903e:	b918      	cbnz	r0, 8009048 <__gethex+0x424>
 8009040:	4b1a      	ldr	r3, [pc, #104]	; (80090ac <__gethex+0x488>)
 8009042:	4602      	mov	r2, r0
 8009044:	2184      	movs	r1, #132	; 0x84
 8009046:	e6a8      	b.n	8008d9a <__gethex+0x176>
 8009048:	6922      	ldr	r2, [r4, #16]
 800904a:	3202      	adds	r2, #2
 800904c:	f104 010c 	add.w	r1, r4, #12
 8009050:	0092      	lsls	r2, r2, #2
 8009052:	300c      	adds	r0, #12
 8009054:	f000 f90c 	bl	8009270 <memcpy>
 8009058:	4621      	mov	r1, r4
 800905a:	ee18 0a10 	vmov	r0, s16
 800905e:	f000 f955 	bl	800930c <_Bfree>
 8009062:	464c      	mov	r4, r9
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800906c:	6122      	str	r2, [r4, #16]
 800906e:	2201      	movs	r2, #1
 8009070:	615a      	str	r2, [r3, #20]
 8009072:	e7bb      	b.n	8008fec <__gethex+0x3c8>
 8009074:	6922      	ldr	r2, [r4, #16]
 8009076:	455a      	cmp	r2, fp
 8009078:	dd0b      	ble.n	8009092 <__gethex+0x46e>
 800907a:	2101      	movs	r1, #1
 800907c:	4620      	mov	r0, r4
 800907e:	f7ff fd69 	bl	8008b54 <rshift>
 8009082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009086:	3501      	adds	r5, #1
 8009088:	42ab      	cmp	r3, r5
 800908a:	f6ff aed0 	blt.w	8008e2e <__gethex+0x20a>
 800908e:	2701      	movs	r7, #1
 8009090:	e7c0      	b.n	8009014 <__gethex+0x3f0>
 8009092:	f016 061f 	ands.w	r6, r6, #31
 8009096:	d0fa      	beq.n	800908e <__gethex+0x46a>
 8009098:	4453      	add	r3, sl
 800909a:	f1c6 0620 	rsb	r6, r6, #32
 800909e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090a2:	f000 f9e5 	bl	8009470 <__hi0bits>
 80090a6:	42b0      	cmp	r0, r6
 80090a8:	dbe7      	blt.n	800907a <__gethex+0x456>
 80090aa:	e7f0      	b.n	800908e <__gethex+0x46a>
 80090ac:	0800c9b8 	.word	0x0800c9b8

080090b0 <L_shift>:
 80090b0:	f1c2 0208 	rsb	r2, r2, #8
 80090b4:	0092      	lsls	r2, r2, #2
 80090b6:	b570      	push	{r4, r5, r6, lr}
 80090b8:	f1c2 0620 	rsb	r6, r2, #32
 80090bc:	6843      	ldr	r3, [r0, #4]
 80090be:	6804      	ldr	r4, [r0, #0]
 80090c0:	fa03 f506 	lsl.w	r5, r3, r6
 80090c4:	432c      	orrs	r4, r5
 80090c6:	40d3      	lsrs	r3, r2
 80090c8:	6004      	str	r4, [r0, #0]
 80090ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80090ce:	4288      	cmp	r0, r1
 80090d0:	d3f4      	bcc.n	80090bc <L_shift+0xc>
 80090d2:	bd70      	pop	{r4, r5, r6, pc}

080090d4 <__match>:
 80090d4:	b530      	push	{r4, r5, lr}
 80090d6:	6803      	ldr	r3, [r0, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090de:	b914      	cbnz	r4, 80090e6 <__match+0x12>
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	2001      	movs	r0, #1
 80090e4:	bd30      	pop	{r4, r5, pc}
 80090e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090ee:	2d19      	cmp	r5, #25
 80090f0:	bf98      	it	ls
 80090f2:	3220      	addls	r2, #32
 80090f4:	42a2      	cmp	r2, r4
 80090f6:	d0f0      	beq.n	80090da <__match+0x6>
 80090f8:	2000      	movs	r0, #0
 80090fa:	e7f3      	b.n	80090e4 <__match+0x10>

080090fc <__hexnan>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	680b      	ldr	r3, [r1, #0]
 8009102:	115e      	asrs	r6, r3, #5
 8009104:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009108:	f013 031f 	ands.w	r3, r3, #31
 800910c:	b087      	sub	sp, #28
 800910e:	bf18      	it	ne
 8009110:	3604      	addne	r6, #4
 8009112:	2500      	movs	r5, #0
 8009114:	1f37      	subs	r7, r6, #4
 8009116:	4690      	mov	r8, r2
 8009118:	6802      	ldr	r2, [r0, #0]
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	4682      	mov	sl, r0
 800911e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009122:	46b9      	mov	r9, r7
 8009124:	463c      	mov	r4, r7
 8009126:	9502      	str	r5, [sp, #8]
 8009128:	46ab      	mov	fp, r5
 800912a:	7851      	ldrb	r1, [r2, #1]
 800912c:	1c53      	adds	r3, r2, #1
 800912e:	9303      	str	r3, [sp, #12]
 8009130:	b341      	cbz	r1, 8009184 <__hexnan+0x88>
 8009132:	4608      	mov	r0, r1
 8009134:	9205      	str	r2, [sp, #20]
 8009136:	9104      	str	r1, [sp, #16]
 8009138:	f7ff fd5e 	bl	8008bf8 <__hexdig_fun>
 800913c:	2800      	cmp	r0, #0
 800913e:	d14f      	bne.n	80091e0 <__hexnan+0xe4>
 8009140:	9904      	ldr	r1, [sp, #16]
 8009142:	9a05      	ldr	r2, [sp, #20]
 8009144:	2920      	cmp	r1, #32
 8009146:	d818      	bhi.n	800917a <__hexnan+0x7e>
 8009148:	9b02      	ldr	r3, [sp, #8]
 800914a:	459b      	cmp	fp, r3
 800914c:	dd13      	ble.n	8009176 <__hexnan+0x7a>
 800914e:	454c      	cmp	r4, r9
 8009150:	d206      	bcs.n	8009160 <__hexnan+0x64>
 8009152:	2d07      	cmp	r5, #7
 8009154:	dc04      	bgt.n	8009160 <__hexnan+0x64>
 8009156:	462a      	mov	r2, r5
 8009158:	4649      	mov	r1, r9
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff ffa8 	bl	80090b0 <L_shift>
 8009160:	4544      	cmp	r4, r8
 8009162:	d950      	bls.n	8009206 <__hexnan+0x10a>
 8009164:	2300      	movs	r3, #0
 8009166:	f1a4 0904 	sub.w	r9, r4, #4
 800916a:	f844 3c04 	str.w	r3, [r4, #-4]
 800916e:	f8cd b008 	str.w	fp, [sp, #8]
 8009172:	464c      	mov	r4, r9
 8009174:	461d      	mov	r5, r3
 8009176:	9a03      	ldr	r2, [sp, #12]
 8009178:	e7d7      	b.n	800912a <__hexnan+0x2e>
 800917a:	2929      	cmp	r1, #41	; 0x29
 800917c:	d156      	bne.n	800922c <__hexnan+0x130>
 800917e:	3202      	adds	r2, #2
 8009180:	f8ca 2000 	str.w	r2, [sl]
 8009184:	f1bb 0f00 	cmp.w	fp, #0
 8009188:	d050      	beq.n	800922c <__hexnan+0x130>
 800918a:	454c      	cmp	r4, r9
 800918c:	d206      	bcs.n	800919c <__hexnan+0xa0>
 800918e:	2d07      	cmp	r5, #7
 8009190:	dc04      	bgt.n	800919c <__hexnan+0xa0>
 8009192:	462a      	mov	r2, r5
 8009194:	4649      	mov	r1, r9
 8009196:	4620      	mov	r0, r4
 8009198:	f7ff ff8a 	bl	80090b0 <L_shift>
 800919c:	4544      	cmp	r4, r8
 800919e:	d934      	bls.n	800920a <__hexnan+0x10e>
 80091a0:	f1a8 0204 	sub.w	r2, r8, #4
 80091a4:	4623      	mov	r3, r4
 80091a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80091aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80091ae:	429f      	cmp	r7, r3
 80091b0:	d2f9      	bcs.n	80091a6 <__hexnan+0xaa>
 80091b2:	1b3b      	subs	r3, r7, r4
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	3304      	adds	r3, #4
 80091ba:	3401      	adds	r4, #1
 80091bc:	3e03      	subs	r6, #3
 80091be:	42b4      	cmp	r4, r6
 80091c0:	bf88      	it	hi
 80091c2:	2304      	movhi	r3, #4
 80091c4:	4443      	add	r3, r8
 80091c6:	2200      	movs	r2, #0
 80091c8:	f843 2b04 	str.w	r2, [r3], #4
 80091cc:	429f      	cmp	r7, r3
 80091ce:	d2fb      	bcs.n	80091c8 <__hexnan+0xcc>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	b91b      	cbnz	r3, 80091dc <__hexnan+0xe0>
 80091d4:	4547      	cmp	r7, r8
 80091d6:	d127      	bne.n	8009228 <__hexnan+0x12c>
 80091d8:	2301      	movs	r3, #1
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	2005      	movs	r0, #5
 80091de:	e026      	b.n	800922e <__hexnan+0x132>
 80091e0:	3501      	adds	r5, #1
 80091e2:	2d08      	cmp	r5, #8
 80091e4:	f10b 0b01 	add.w	fp, fp, #1
 80091e8:	dd06      	ble.n	80091f8 <__hexnan+0xfc>
 80091ea:	4544      	cmp	r4, r8
 80091ec:	d9c3      	bls.n	8009176 <__hexnan+0x7a>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80091f4:	2501      	movs	r5, #1
 80091f6:	3c04      	subs	r4, #4
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	f000 000f 	and.w	r0, r0, #15
 80091fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009202:	6022      	str	r2, [r4, #0]
 8009204:	e7b7      	b.n	8009176 <__hexnan+0x7a>
 8009206:	2508      	movs	r5, #8
 8009208:	e7b5      	b.n	8009176 <__hexnan+0x7a>
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0df      	beq.n	80091d0 <__hexnan+0xd4>
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	f1c3 0320 	rsb	r3, r3, #32
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009220:	401a      	ands	r2, r3
 8009222:	f846 2c04 	str.w	r2, [r6, #-4]
 8009226:	e7d3      	b.n	80091d0 <__hexnan+0xd4>
 8009228:	3f04      	subs	r7, #4
 800922a:	e7d1      	b.n	80091d0 <__hexnan+0xd4>
 800922c:	2004      	movs	r0, #4
 800922e:	b007      	add	sp, #28
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009234 <_localeconv_r>:
 8009234:	4800      	ldr	r0, [pc, #0]	; (8009238 <_localeconv_r+0x4>)
 8009236:	4770      	bx	lr
 8009238:	200001e0 	.word	0x200001e0

0800923c <malloc>:
 800923c:	4b02      	ldr	r3, [pc, #8]	; (8009248 <malloc+0xc>)
 800923e:	4601      	mov	r1, r0
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	f000 bd67 	b.w	8009d14 <_malloc_r>
 8009246:	bf00      	nop
 8009248:	20000088 	.word	0x20000088

0800924c <__ascii_mbtowc>:
 800924c:	b082      	sub	sp, #8
 800924e:	b901      	cbnz	r1, 8009252 <__ascii_mbtowc+0x6>
 8009250:	a901      	add	r1, sp, #4
 8009252:	b142      	cbz	r2, 8009266 <__ascii_mbtowc+0x1a>
 8009254:	b14b      	cbz	r3, 800926a <__ascii_mbtowc+0x1e>
 8009256:	7813      	ldrb	r3, [r2, #0]
 8009258:	600b      	str	r3, [r1, #0]
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	1e10      	subs	r0, r2, #0
 800925e:	bf18      	it	ne
 8009260:	2001      	movne	r0, #1
 8009262:	b002      	add	sp, #8
 8009264:	4770      	bx	lr
 8009266:	4610      	mov	r0, r2
 8009268:	e7fb      	b.n	8009262 <__ascii_mbtowc+0x16>
 800926a:	f06f 0001 	mvn.w	r0, #1
 800926e:	e7f8      	b.n	8009262 <__ascii_mbtowc+0x16>

08009270 <memcpy>:
 8009270:	440a      	add	r2, r1
 8009272:	4291      	cmp	r1, r2
 8009274:	f100 33ff 	add.w	r3, r0, #4294967295
 8009278:	d100      	bne.n	800927c <memcpy+0xc>
 800927a:	4770      	bx	lr
 800927c:	b510      	push	{r4, lr}
 800927e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009286:	4291      	cmp	r1, r2
 8009288:	d1f9      	bne.n	800927e <memcpy+0xe>
 800928a:	bd10      	pop	{r4, pc}

0800928c <_Balloc>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	b976      	cbnz	r6, 80092b4 <_Balloc+0x28>
 8009296:	2010      	movs	r0, #16
 8009298:	f7ff ffd0 	bl	800923c <malloc>
 800929c:	4602      	mov	r2, r0
 800929e:	6260      	str	r0, [r4, #36]	; 0x24
 80092a0:	b920      	cbnz	r0, 80092ac <_Balloc+0x20>
 80092a2:	4b18      	ldr	r3, [pc, #96]	; (8009304 <_Balloc+0x78>)
 80092a4:	4818      	ldr	r0, [pc, #96]	; (8009308 <_Balloc+0x7c>)
 80092a6:	2166      	movs	r1, #102	; 0x66
 80092a8:	f000 ff40 	bl	800a12c <__assert_func>
 80092ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092b0:	6006      	str	r6, [r0, #0]
 80092b2:	60c6      	str	r6, [r0, #12]
 80092b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092b6:	68f3      	ldr	r3, [r6, #12]
 80092b8:	b183      	cbz	r3, 80092dc <_Balloc+0x50>
 80092ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092c2:	b9b8      	cbnz	r0, 80092f4 <_Balloc+0x68>
 80092c4:	2101      	movs	r1, #1
 80092c6:	fa01 f605 	lsl.w	r6, r1, r5
 80092ca:	1d72      	adds	r2, r6, #5
 80092cc:	0092      	lsls	r2, r2, #2
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fc9d 	bl	8009c0e <_calloc_r>
 80092d4:	b160      	cbz	r0, 80092f0 <_Balloc+0x64>
 80092d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092da:	e00e      	b.n	80092fa <_Balloc+0x6e>
 80092dc:	2221      	movs	r2, #33	; 0x21
 80092de:	2104      	movs	r1, #4
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fc94 	bl	8009c0e <_calloc_r>
 80092e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e8:	60f0      	str	r0, [r6, #12]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e4      	bne.n	80092ba <_Balloc+0x2e>
 80092f0:	2000      	movs	r0, #0
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	6802      	ldr	r2, [r0, #0]
 80092f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092fa:	2300      	movs	r3, #0
 80092fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009300:	e7f7      	b.n	80092f2 <_Balloc+0x66>
 8009302:	bf00      	nop
 8009304:	0800c946 	.word	0x0800c946
 8009308:	0800ca44 	.word	0x0800ca44

0800930c <_Bfree>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	b976      	cbnz	r6, 8009334 <_Bfree+0x28>
 8009316:	2010      	movs	r0, #16
 8009318:	f7ff ff90 	bl	800923c <malloc>
 800931c:	4602      	mov	r2, r0
 800931e:	6268      	str	r0, [r5, #36]	; 0x24
 8009320:	b920      	cbnz	r0, 800932c <_Bfree+0x20>
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <_Bfree+0x3c>)
 8009324:	4809      	ldr	r0, [pc, #36]	; (800934c <_Bfree+0x40>)
 8009326:	218a      	movs	r1, #138	; 0x8a
 8009328:	f000 ff00 	bl	800a12c <__assert_func>
 800932c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009330:	6006      	str	r6, [r0, #0]
 8009332:	60c6      	str	r6, [r0, #12]
 8009334:	b13c      	cbz	r4, 8009346 <_Bfree+0x3a>
 8009336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009338:	6862      	ldr	r2, [r4, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009340:	6021      	str	r1, [r4, #0]
 8009342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	0800c946 	.word	0x0800c946
 800934c:	0800ca44 	.word	0x0800ca44

08009350 <__multadd>:
 8009350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009354:	690d      	ldr	r5, [r1, #16]
 8009356:	4607      	mov	r7, r0
 8009358:	460c      	mov	r4, r1
 800935a:	461e      	mov	r6, r3
 800935c:	f101 0c14 	add.w	ip, r1, #20
 8009360:	2000      	movs	r0, #0
 8009362:	f8dc 3000 	ldr.w	r3, [ip]
 8009366:	b299      	uxth	r1, r3
 8009368:	fb02 6101 	mla	r1, r2, r1, r6
 800936c:	0c1e      	lsrs	r6, r3, #16
 800936e:	0c0b      	lsrs	r3, r1, #16
 8009370:	fb02 3306 	mla	r3, r2, r6, r3
 8009374:	b289      	uxth	r1, r1
 8009376:	3001      	adds	r0, #1
 8009378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800937c:	4285      	cmp	r5, r0
 800937e:	f84c 1b04 	str.w	r1, [ip], #4
 8009382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009386:	dcec      	bgt.n	8009362 <__multadd+0x12>
 8009388:	b30e      	cbz	r6, 80093ce <__multadd+0x7e>
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	42ab      	cmp	r3, r5
 800938e:	dc19      	bgt.n	80093c4 <__multadd+0x74>
 8009390:	6861      	ldr	r1, [r4, #4]
 8009392:	4638      	mov	r0, r7
 8009394:	3101      	adds	r1, #1
 8009396:	f7ff ff79 	bl	800928c <_Balloc>
 800939a:	4680      	mov	r8, r0
 800939c:	b928      	cbnz	r0, 80093aa <__multadd+0x5a>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <__multadd+0x84>)
 80093a2:	480d      	ldr	r0, [pc, #52]	; (80093d8 <__multadd+0x88>)
 80093a4:	21b5      	movs	r1, #181	; 0xb5
 80093a6:	f000 fec1 	bl	800a12c <__assert_func>
 80093aa:	6922      	ldr	r2, [r4, #16]
 80093ac:	3202      	adds	r2, #2
 80093ae:	f104 010c 	add.w	r1, r4, #12
 80093b2:	0092      	lsls	r2, r2, #2
 80093b4:	300c      	adds	r0, #12
 80093b6:	f7ff ff5b 	bl	8009270 <memcpy>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff ffa5 	bl	800930c <_Bfree>
 80093c2:	4644      	mov	r4, r8
 80093c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093c8:	3501      	adds	r5, #1
 80093ca:	615e      	str	r6, [r3, #20]
 80093cc:	6125      	str	r5, [r4, #16]
 80093ce:	4620      	mov	r0, r4
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	0800c9b8 	.word	0x0800c9b8
 80093d8:	0800ca44 	.word	0x0800ca44

080093dc <__s2b>:
 80093dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	4615      	mov	r5, r2
 80093e4:	461f      	mov	r7, r3
 80093e6:	2209      	movs	r2, #9
 80093e8:	3308      	adds	r3, #8
 80093ea:	4606      	mov	r6, r0
 80093ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80093f0:	2100      	movs	r1, #0
 80093f2:	2201      	movs	r2, #1
 80093f4:	429a      	cmp	r2, r3
 80093f6:	db09      	blt.n	800940c <__s2b+0x30>
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ff47 	bl	800928c <_Balloc>
 80093fe:	b940      	cbnz	r0, 8009412 <__s2b+0x36>
 8009400:	4602      	mov	r2, r0
 8009402:	4b19      	ldr	r3, [pc, #100]	; (8009468 <__s2b+0x8c>)
 8009404:	4819      	ldr	r0, [pc, #100]	; (800946c <__s2b+0x90>)
 8009406:	21ce      	movs	r1, #206	; 0xce
 8009408:	f000 fe90 	bl	800a12c <__assert_func>
 800940c:	0052      	lsls	r2, r2, #1
 800940e:	3101      	adds	r1, #1
 8009410:	e7f0      	b.n	80093f4 <__s2b+0x18>
 8009412:	9b08      	ldr	r3, [sp, #32]
 8009414:	6143      	str	r3, [r0, #20]
 8009416:	2d09      	cmp	r5, #9
 8009418:	f04f 0301 	mov.w	r3, #1
 800941c:	6103      	str	r3, [r0, #16]
 800941e:	dd16      	ble.n	800944e <__s2b+0x72>
 8009420:	f104 0909 	add.w	r9, r4, #9
 8009424:	46c8      	mov	r8, r9
 8009426:	442c      	add	r4, r5
 8009428:	f818 3b01 	ldrb.w	r3, [r8], #1
 800942c:	4601      	mov	r1, r0
 800942e:	3b30      	subs	r3, #48	; 0x30
 8009430:	220a      	movs	r2, #10
 8009432:	4630      	mov	r0, r6
 8009434:	f7ff ff8c 	bl	8009350 <__multadd>
 8009438:	45a0      	cmp	r8, r4
 800943a:	d1f5      	bne.n	8009428 <__s2b+0x4c>
 800943c:	f1a5 0408 	sub.w	r4, r5, #8
 8009440:	444c      	add	r4, r9
 8009442:	1b2d      	subs	r5, r5, r4
 8009444:	1963      	adds	r3, r4, r5
 8009446:	42bb      	cmp	r3, r7
 8009448:	db04      	blt.n	8009454 <__s2b+0x78>
 800944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944e:	340a      	adds	r4, #10
 8009450:	2509      	movs	r5, #9
 8009452:	e7f6      	b.n	8009442 <__s2b+0x66>
 8009454:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009458:	4601      	mov	r1, r0
 800945a:	3b30      	subs	r3, #48	; 0x30
 800945c:	220a      	movs	r2, #10
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ff76 	bl	8009350 <__multadd>
 8009464:	e7ee      	b.n	8009444 <__s2b+0x68>
 8009466:	bf00      	nop
 8009468:	0800c9b8 	.word	0x0800c9b8
 800946c:	0800ca44 	.word	0x0800ca44

08009470 <__hi0bits>:
 8009470:	0c03      	lsrs	r3, r0, #16
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	b9d3      	cbnz	r3, 80094ac <__hi0bits+0x3c>
 8009476:	0400      	lsls	r0, r0, #16
 8009478:	2310      	movs	r3, #16
 800947a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800947e:	bf04      	itt	eq
 8009480:	0200      	lsleq	r0, r0, #8
 8009482:	3308      	addeq	r3, #8
 8009484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009488:	bf04      	itt	eq
 800948a:	0100      	lsleq	r0, r0, #4
 800948c:	3304      	addeq	r3, #4
 800948e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009492:	bf04      	itt	eq
 8009494:	0080      	lsleq	r0, r0, #2
 8009496:	3302      	addeq	r3, #2
 8009498:	2800      	cmp	r0, #0
 800949a:	db05      	blt.n	80094a8 <__hi0bits+0x38>
 800949c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094a0:	f103 0301 	add.w	r3, r3, #1
 80094a4:	bf08      	it	eq
 80094a6:	2320      	moveq	r3, #32
 80094a8:	4618      	mov	r0, r3
 80094aa:	4770      	bx	lr
 80094ac:	2300      	movs	r3, #0
 80094ae:	e7e4      	b.n	800947a <__hi0bits+0xa>

080094b0 <__lo0bits>:
 80094b0:	6803      	ldr	r3, [r0, #0]
 80094b2:	f013 0207 	ands.w	r2, r3, #7
 80094b6:	4601      	mov	r1, r0
 80094b8:	d00b      	beq.n	80094d2 <__lo0bits+0x22>
 80094ba:	07da      	lsls	r2, r3, #31
 80094bc:	d423      	bmi.n	8009506 <__lo0bits+0x56>
 80094be:	0798      	lsls	r0, r3, #30
 80094c0:	bf49      	itett	mi
 80094c2:	085b      	lsrmi	r3, r3, #1
 80094c4:	089b      	lsrpl	r3, r3, #2
 80094c6:	2001      	movmi	r0, #1
 80094c8:	600b      	strmi	r3, [r1, #0]
 80094ca:	bf5c      	itt	pl
 80094cc:	600b      	strpl	r3, [r1, #0]
 80094ce:	2002      	movpl	r0, #2
 80094d0:	4770      	bx	lr
 80094d2:	b298      	uxth	r0, r3
 80094d4:	b9a8      	cbnz	r0, 8009502 <__lo0bits+0x52>
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	2010      	movs	r0, #16
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	b90a      	cbnz	r2, 80094e2 <__lo0bits+0x32>
 80094de:	3008      	adds	r0, #8
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	071a      	lsls	r2, r3, #28
 80094e4:	bf04      	itt	eq
 80094e6:	091b      	lsreq	r3, r3, #4
 80094e8:	3004      	addeq	r0, #4
 80094ea:	079a      	lsls	r2, r3, #30
 80094ec:	bf04      	itt	eq
 80094ee:	089b      	lsreq	r3, r3, #2
 80094f0:	3002      	addeq	r0, #2
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d403      	bmi.n	80094fe <__lo0bits+0x4e>
 80094f6:	085b      	lsrs	r3, r3, #1
 80094f8:	f100 0001 	add.w	r0, r0, #1
 80094fc:	d005      	beq.n	800950a <__lo0bits+0x5a>
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	4770      	bx	lr
 8009502:	4610      	mov	r0, r2
 8009504:	e7e9      	b.n	80094da <__lo0bits+0x2a>
 8009506:	2000      	movs	r0, #0
 8009508:	4770      	bx	lr
 800950a:	2020      	movs	r0, #32
 800950c:	4770      	bx	lr
	...

08009510 <__i2b>:
 8009510:	b510      	push	{r4, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	2101      	movs	r1, #1
 8009516:	f7ff feb9 	bl	800928c <_Balloc>
 800951a:	4602      	mov	r2, r0
 800951c:	b928      	cbnz	r0, 800952a <__i2b+0x1a>
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <__i2b+0x24>)
 8009520:	4805      	ldr	r0, [pc, #20]	; (8009538 <__i2b+0x28>)
 8009522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009526:	f000 fe01 	bl	800a12c <__assert_func>
 800952a:	2301      	movs	r3, #1
 800952c:	6144      	str	r4, [r0, #20]
 800952e:	6103      	str	r3, [r0, #16]
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	0800c9b8 	.word	0x0800c9b8
 8009538:	0800ca44 	.word	0x0800ca44

0800953c <__multiply>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4691      	mov	r9, r2
 8009542:	690a      	ldr	r2, [r1, #16]
 8009544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009548:	429a      	cmp	r2, r3
 800954a:	bfb8      	it	lt
 800954c:	460b      	movlt	r3, r1
 800954e:	460c      	mov	r4, r1
 8009550:	bfbc      	itt	lt
 8009552:	464c      	movlt	r4, r9
 8009554:	4699      	movlt	r9, r3
 8009556:	6927      	ldr	r7, [r4, #16]
 8009558:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800955c:	68a3      	ldr	r3, [r4, #8]
 800955e:	6861      	ldr	r1, [r4, #4]
 8009560:	eb07 060a 	add.w	r6, r7, sl
 8009564:	42b3      	cmp	r3, r6
 8009566:	b085      	sub	sp, #20
 8009568:	bfb8      	it	lt
 800956a:	3101      	addlt	r1, #1
 800956c:	f7ff fe8e 	bl	800928c <_Balloc>
 8009570:	b930      	cbnz	r0, 8009580 <__multiply+0x44>
 8009572:	4602      	mov	r2, r0
 8009574:	4b44      	ldr	r3, [pc, #272]	; (8009688 <__multiply+0x14c>)
 8009576:	4845      	ldr	r0, [pc, #276]	; (800968c <__multiply+0x150>)
 8009578:	f240 115d 	movw	r1, #349	; 0x15d
 800957c:	f000 fdd6 	bl	800a12c <__assert_func>
 8009580:	f100 0514 	add.w	r5, r0, #20
 8009584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009588:	462b      	mov	r3, r5
 800958a:	2200      	movs	r2, #0
 800958c:	4543      	cmp	r3, r8
 800958e:	d321      	bcc.n	80095d4 <__multiply+0x98>
 8009590:	f104 0314 	add.w	r3, r4, #20
 8009594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009598:	f109 0314 	add.w	r3, r9, #20
 800959c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095a0:	9202      	str	r2, [sp, #8]
 80095a2:	1b3a      	subs	r2, r7, r4
 80095a4:	3a15      	subs	r2, #21
 80095a6:	f022 0203 	bic.w	r2, r2, #3
 80095aa:	3204      	adds	r2, #4
 80095ac:	f104 0115 	add.w	r1, r4, #21
 80095b0:	428f      	cmp	r7, r1
 80095b2:	bf38      	it	cc
 80095b4:	2204      	movcc	r2, #4
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9a02      	ldr	r2, [sp, #8]
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d80c      	bhi.n	80095da <__multiply+0x9e>
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	dd03      	ble.n	80095cc <__multiply+0x90>
 80095c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d05a      	beq.n	8009682 <__multiply+0x146>
 80095cc:	6106      	str	r6, [r0, #16]
 80095ce:	b005      	add	sp, #20
 80095d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d4:	f843 2b04 	str.w	r2, [r3], #4
 80095d8:	e7d8      	b.n	800958c <__multiply+0x50>
 80095da:	f8b3 a000 	ldrh.w	sl, [r3]
 80095de:	f1ba 0f00 	cmp.w	sl, #0
 80095e2:	d024      	beq.n	800962e <__multiply+0xf2>
 80095e4:	f104 0e14 	add.w	lr, r4, #20
 80095e8:	46a9      	mov	r9, r5
 80095ea:	f04f 0c00 	mov.w	ip, #0
 80095ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095f2:	f8d9 1000 	ldr.w	r1, [r9]
 80095f6:	fa1f fb82 	uxth.w	fp, r2
 80095fa:	b289      	uxth	r1, r1
 80095fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009600:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009604:	f8d9 2000 	ldr.w	r2, [r9]
 8009608:	4461      	add	r1, ip
 800960a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800960e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009616:	b289      	uxth	r1, r1
 8009618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800961c:	4577      	cmp	r7, lr
 800961e:	f849 1b04 	str.w	r1, [r9], #4
 8009622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009626:	d8e2      	bhi.n	80095ee <__multiply+0xb2>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	f845 c002 	str.w	ip, [r5, r2]
 800962e:	9a03      	ldr	r2, [sp, #12]
 8009630:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009634:	3304      	adds	r3, #4
 8009636:	f1b9 0f00 	cmp.w	r9, #0
 800963a:	d020      	beq.n	800967e <__multiply+0x142>
 800963c:	6829      	ldr	r1, [r5, #0]
 800963e:	f104 0c14 	add.w	ip, r4, #20
 8009642:	46ae      	mov	lr, r5
 8009644:	f04f 0a00 	mov.w	sl, #0
 8009648:	f8bc b000 	ldrh.w	fp, [ip]
 800964c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009650:	fb09 220b 	mla	r2, r9, fp, r2
 8009654:	4492      	add	sl, r2
 8009656:	b289      	uxth	r1, r1
 8009658:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800965c:	f84e 1b04 	str.w	r1, [lr], #4
 8009660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009664:	f8be 1000 	ldrh.w	r1, [lr]
 8009668:	0c12      	lsrs	r2, r2, #16
 800966a:	fb09 1102 	mla	r1, r9, r2, r1
 800966e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009672:	4567      	cmp	r7, ip
 8009674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009678:	d8e6      	bhi.n	8009648 <__multiply+0x10c>
 800967a:	9a01      	ldr	r2, [sp, #4]
 800967c:	50a9      	str	r1, [r5, r2]
 800967e:	3504      	adds	r5, #4
 8009680:	e79a      	b.n	80095b8 <__multiply+0x7c>
 8009682:	3e01      	subs	r6, #1
 8009684:	e79c      	b.n	80095c0 <__multiply+0x84>
 8009686:	bf00      	nop
 8009688:	0800c9b8 	.word	0x0800c9b8
 800968c:	0800ca44 	.word	0x0800ca44

08009690 <__pow5mult>:
 8009690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009694:	4615      	mov	r5, r2
 8009696:	f012 0203 	ands.w	r2, r2, #3
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	d007      	beq.n	80096b0 <__pow5mult+0x20>
 80096a0:	4c25      	ldr	r4, [pc, #148]	; (8009738 <__pow5mult+0xa8>)
 80096a2:	3a01      	subs	r2, #1
 80096a4:	2300      	movs	r3, #0
 80096a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096aa:	f7ff fe51 	bl	8009350 <__multadd>
 80096ae:	4607      	mov	r7, r0
 80096b0:	10ad      	asrs	r5, r5, #2
 80096b2:	d03d      	beq.n	8009730 <__pow5mult+0xa0>
 80096b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096b6:	b97c      	cbnz	r4, 80096d8 <__pow5mult+0x48>
 80096b8:	2010      	movs	r0, #16
 80096ba:	f7ff fdbf 	bl	800923c <malloc>
 80096be:	4602      	mov	r2, r0
 80096c0:	6270      	str	r0, [r6, #36]	; 0x24
 80096c2:	b928      	cbnz	r0, 80096d0 <__pow5mult+0x40>
 80096c4:	4b1d      	ldr	r3, [pc, #116]	; (800973c <__pow5mult+0xac>)
 80096c6:	481e      	ldr	r0, [pc, #120]	; (8009740 <__pow5mult+0xb0>)
 80096c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096cc:	f000 fd2e 	bl	800a12c <__assert_func>
 80096d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096d4:	6004      	str	r4, [r0, #0]
 80096d6:	60c4      	str	r4, [r0, #12]
 80096d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096e0:	b94c      	cbnz	r4, 80096f6 <__pow5mult+0x66>
 80096e2:	f240 2171 	movw	r1, #625	; 0x271
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ff12 	bl	8009510 <__i2b>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80096f2:	4604      	mov	r4, r0
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	f04f 0900 	mov.w	r9, #0
 80096fa:	07eb      	lsls	r3, r5, #31
 80096fc:	d50a      	bpl.n	8009714 <__pow5mult+0x84>
 80096fe:	4639      	mov	r1, r7
 8009700:	4622      	mov	r2, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ff1a 	bl	800953c <__multiply>
 8009708:	4639      	mov	r1, r7
 800970a:	4680      	mov	r8, r0
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff fdfd 	bl	800930c <_Bfree>
 8009712:	4647      	mov	r7, r8
 8009714:	106d      	asrs	r5, r5, #1
 8009716:	d00b      	beq.n	8009730 <__pow5mult+0xa0>
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	b938      	cbnz	r0, 800972c <__pow5mult+0x9c>
 800971c:	4622      	mov	r2, r4
 800971e:	4621      	mov	r1, r4
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff ff0b 	bl	800953c <__multiply>
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	f8c0 9000 	str.w	r9, [r0]
 800972c:	4604      	mov	r4, r0
 800972e:	e7e4      	b.n	80096fa <__pow5mult+0x6a>
 8009730:	4638      	mov	r0, r7
 8009732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009736:	bf00      	nop
 8009738:	0800cb90 	.word	0x0800cb90
 800973c:	0800c946 	.word	0x0800c946
 8009740:	0800ca44 	.word	0x0800ca44

08009744 <__lshift>:
 8009744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	460c      	mov	r4, r1
 800974a:	6849      	ldr	r1, [r1, #4]
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	4607      	mov	r7, r0
 8009756:	4691      	mov	r9, r2
 8009758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800975c:	f108 0601 	add.w	r6, r8, #1
 8009760:	42b3      	cmp	r3, r6
 8009762:	db0b      	blt.n	800977c <__lshift+0x38>
 8009764:	4638      	mov	r0, r7
 8009766:	f7ff fd91 	bl	800928c <_Balloc>
 800976a:	4605      	mov	r5, r0
 800976c:	b948      	cbnz	r0, 8009782 <__lshift+0x3e>
 800976e:	4602      	mov	r2, r0
 8009770:	4b2a      	ldr	r3, [pc, #168]	; (800981c <__lshift+0xd8>)
 8009772:	482b      	ldr	r0, [pc, #172]	; (8009820 <__lshift+0xdc>)
 8009774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009778:	f000 fcd8 	bl	800a12c <__assert_func>
 800977c:	3101      	adds	r1, #1
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	e7ee      	b.n	8009760 <__lshift+0x1c>
 8009782:	2300      	movs	r3, #0
 8009784:	f100 0114 	add.w	r1, r0, #20
 8009788:	f100 0210 	add.w	r2, r0, #16
 800978c:	4618      	mov	r0, r3
 800978e:	4553      	cmp	r3, sl
 8009790:	db37      	blt.n	8009802 <__lshift+0xbe>
 8009792:	6920      	ldr	r0, [r4, #16]
 8009794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009798:	f104 0314 	add.w	r3, r4, #20
 800979c:	f019 091f 	ands.w	r9, r9, #31
 80097a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097a8:	d02f      	beq.n	800980a <__lshift+0xc6>
 80097aa:	f1c9 0e20 	rsb	lr, r9, #32
 80097ae:	468a      	mov	sl, r1
 80097b0:	f04f 0c00 	mov.w	ip, #0
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	fa02 f209 	lsl.w	r2, r2, r9
 80097ba:	ea42 020c 	orr.w	r2, r2, ip
 80097be:	f84a 2b04 	str.w	r2, [sl], #4
 80097c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c6:	4298      	cmp	r0, r3
 80097c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097cc:	d8f2      	bhi.n	80097b4 <__lshift+0x70>
 80097ce:	1b03      	subs	r3, r0, r4
 80097d0:	3b15      	subs	r3, #21
 80097d2:	f023 0303 	bic.w	r3, r3, #3
 80097d6:	3304      	adds	r3, #4
 80097d8:	f104 0215 	add.w	r2, r4, #21
 80097dc:	4290      	cmp	r0, r2
 80097de:	bf38      	it	cc
 80097e0:	2304      	movcc	r3, #4
 80097e2:	f841 c003 	str.w	ip, [r1, r3]
 80097e6:	f1bc 0f00 	cmp.w	ip, #0
 80097ea:	d001      	beq.n	80097f0 <__lshift+0xac>
 80097ec:	f108 0602 	add.w	r6, r8, #2
 80097f0:	3e01      	subs	r6, #1
 80097f2:	4638      	mov	r0, r7
 80097f4:	612e      	str	r6, [r5, #16]
 80097f6:	4621      	mov	r1, r4
 80097f8:	f7ff fd88 	bl	800930c <_Bfree>
 80097fc:	4628      	mov	r0, r5
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	f842 0f04 	str.w	r0, [r2, #4]!
 8009806:	3301      	adds	r3, #1
 8009808:	e7c1      	b.n	800978e <__lshift+0x4a>
 800980a:	3904      	subs	r1, #4
 800980c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009810:	f841 2f04 	str.w	r2, [r1, #4]!
 8009814:	4298      	cmp	r0, r3
 8009816:	d8f9      	bhi.n	800980c <__lshift+0xc8>
 8009818:	e7ea      	b.n	80097f0 <__lshift+0xac>
 800981a:	bf00      	nop
 800981c:	0800c9b8 	.word	0x0800c9b8
 8009820:	0800ca44 	.word	0x0800ca44

08009824 <__mcmp>:
 8009824:	b530      	push	{r4, r5, lr}
 8009826:	6902      	ldr	r2, [r0, #16]
 8009828:	690c      	ldr	r4, [r1, #16]
 800982a:	1b12      	subs	r2, r2, r4
 800982c:	d10e      	bne.n	800984c <__mcmp+0x28>
 800982e:	f100 0314 	add.w	r3, r0, #20
 8009832:	3114      	adds	r1, #20
 8009834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800983c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009844:	42a5      	cmp	r5, r4
 8009846:	d003      	beq.n	8009850 <__mcmp+0x2c>
 8009848:	d305      	bcc.n	8009856 <__mcmp+0x32>
 800984a:	2201      	movs	r2, #1
 800984c:	4610      	mov	r0, r2
 800984e:	bd30      	pop	{r4, r5, pc}
 8009850:	4283      	cmp	r3, r0
 8009852:	d3f3      	bcc.n	800983c <__mcmp+0x18>
 8009854:	e7fa      	b.n	800984c <__mcmp+0x28>
 8009856:	f04f 32ff 	mov.w	r2, #4294967295
 800985a:	e7f7      	b.n	800984c <__mcmp+0x28>

0800985c <__mdiff>:
 800985c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	4606      	mov	r6, r0
 8009864:	4611      	mov	r1, r2
 8009866:	4620      	mov	r0, r4
 8009868:	4690      	mov	r8, r2
 800986a:	f7ff ffdb 	bl	8009824 <__mcmp>
 800986e:	1e05      	subs	r5, r0, #0
 8009870:	d110      	bne.n	8009894 <__mdiff+0x38>
 8009872:	4629      	mov	r1, r5
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fd09 	bl	800928c <_Balloc>
 800987a:	b930      	cbnz	r0, 800988a <__mdiff+0x2e>
 800987c:	4b3a      	ldr	r3, [pc, #232]	; (8009968 <__mdiff+0x10c>)
 800987e:	4602      	mov	r2, r0
 8009880:	f240 2132 	movw	r1, #562	; 0x232
 8009884:	4839      	ldr	r0, [pc, #228]	; (800996c <__mdiff+0x110>)
 8009886:	f000 fc51 	bl	800a12c <__assert_func>
 800988a:	2301      	movs	r3, #1
 800988c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	bfa4      	itt	ge
 8009896:	4643      	movge	r3, r8
 8009898:	46a0      	movge	r8, r4
 800989a:	4630      	mov	r0, r6
 800989c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098a0:	bfa6      	itte	ge
 80098a2:	461c      	movge	r4, r3
 80098a4:	2500      	movge	r5, #0
 80098a6:	2501      	movlt	r5, #1
 80098a8:	f7ff fcf0 	bl	800928c <_Balloc>
 80098ac:	b920      	cbnz	r0, 80098b8 <__mdiff+0x5c>
 80098ae:	4b2e      	ldr	r3, [pc, #184]	; (8009968 <__mdiff+0x10c>)
 80098b0:	4602      	mov	r2, r0
 80098b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098b6:	e7e5      	b.n	8009884 <__mdiff+0x28>
 80098b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098bc:	6926      	ldr	r6, [r4, #16]
 80098be:	60c5      	str	r5, [r0, #12]
 80098c0:	f104 0914 	add.w	r9, r4, #20
 80098c4:	f108 0514 	add.w	r5, r8, #20
 80098c8:	f100 0e14 	add.w	lr, r0, #20
 80098cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098d4:	f108 0210 	add.w	r2, r8, #16
 80098d8:	46f2      	mov	sl, lr
 80098da:	2100      	movs	r1, #0
 80098dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80098e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098e4:	fa1f f883 	uxth.w	r8, r3
 80098e8:	fa11 f18b 	uxtah	r1, r1, fp
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	eba1 0808 	sub.w	r8, r1, r8
 80098f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098fa:	fa1f f888 	uxth.w	r8, r8
 80098fe:	1419      	asrs	r1, r3, #16
 8009900:	454e      	cmp	r6, r9
 8009902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009906:	f84a 3b04 	str.w	r3, [sl], #4
 800990a:	d8e7      	bhi.n	80098dc <__mdiff+0x80>
 800990c:	1b33      	subs	r3, r6, r4
 800990e:	3b15      	subs	r3, #21
 8009910:	f023 0303 	bic.w	r3, r3, #3
 8009914:	3304      	adds	r3, #4
 8009916:	3415      	adds	r4, #21
 8009918:	42a6      	cmp	r6, r4
 800991a:	bf38      	it	cc
 800991c:	2304      	movcc	r3, #4
 800991e:	441d      	add	r5, r3
 8009920:	4473      	add	r3, lr
 8009922:	469e      	mov	lr, r3
 8009924:	462e      	mov	r6, r5
 8009926:	4566      	cmp	r6, ip
 8009928:	d30e      	bcc.n	8009948 <__mdiff+0xec>
 800992a:	f10c 0203 	add.w	r2, ip, #3
 800992e:	1b52      	subs	r2, r2, r5
 8009930:	f022 0203 	bic.w	r2, r2, #3
 8009934:	3d03      	subs	r5, #3
 8009936:	45ac      	cmp	ip, r5
 8009938:	bf38      	it	cc
 800993a:	2200      	movcc	r2, #0
 800993c:	441a      	add	r2, r3
 800993e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009942:	b17b      	cbz	r3, 8009964 <__mdiff+0x108>
 8009944:	6107      	str	r7, [r0, #16]
 8009946:	e7a3      	b.n	8009890 <__mdiff+0x34>
 8009948:	f856 8b04 	ldr.w	r8, [r6], #4
 800994c:	fa11 f288 	uxtah	r2, r1, r8
 8009950:	1414      	asrs	r4, r2, #16
 8009952:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009956:	b292      	uxth	r2, r2
 8009958:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800995c:	f84e 2b04 	str.w	r2, [lr], #4
 8009960:	1421      	asrs	r1, r4, #16
 8009962:	e7e0      	b.n	8009926 <__mdiff+0xca>
 8009964:	3f01      	subs	r7, #1
 8009966:	e7ea      	b.n	800993e <__mdiff+0xe2>
 8009968:	0800c9b8 	.word	0x0800c9b8
 800996c:	0800ca44 	.word	0x0800ca44

08009970 <__ulp>:
 8009970:	b082      	sub	sp, #8
 8009972:	ed8d 0b00 	vstr	d0, [sp]
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	4912      	ldr	r1, [pc, #72]	; (80099c4 <__ulp+0x54>)
 800997a:	4019      	ands	r1, r3
 800997c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009980:	2900      	cmp	r1, #0
 8009982:	dd05      	ble.n	8009990 <__ulp+0x20>
 8009984:	2200      	movs	r2, #0
 8009986:	460b      	mov	r3, r1
 8009988:	ec43 2b10 	vmov	d0, r2, r3
 800998c:	b002      	add	sp, #8
 800998e:	4770      	bx	lr
 8009990:	4249      	negs	r1, r1
 8009992:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009996:	ea4f 5021 	mov.w	r0, r1, asr #20
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	da04      	bge.n	80099ae <__ulp+0x3e>
 80099a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099a8:	fa41 f300 	asr.w	r3, r1, r0
 80099ac:	e7ec      	b.n	8009988 <__ulp+0x18>
 80099ae:	f1a0 0114 	sub.w	r1, r0, #20
 80099b2:	291e      	cmp	r1, #30
 80099b4:	bfda      	itte	le
 80099b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80099be:	2101      	movgt	r1, #1
 80099c0:	460a      	mov	r2, r1
 80099c2:	e7e1      	b.n	8009988 <__ulp+0x18>
 80099c4:	7ff00000 	.word	0x7ff00000

080099c8 <__b2d>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	6905      	ldr	r5, [r0, #16]
 80099cc:	f100 0714 	add.w	r7, r0, #20
 80099d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099d4:	1f2e      	subs	r6, r5, #4
 80099d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099da:	4620      	mov	r0, r4
 80099dc:	f7ff fd48 	bl	8009470 <__hi0bits>
 80099e0:	f1c0 0320 	rsb	r3, r0, #32
 80099e4:	280a      	cmp	r0, #10
 80099e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a64 <__b2d+0x9c>
 80099ea:	600b      	str	r3, [r1, #0]
 80099ec:	dc14      	bgt.n	8009a18 <__b2d+0x50>
 80099ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80099f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80099f6:	42b7      	cmp	r7, r6
 80099f8:	ea41 030c 	orr.w	r3, r1, ip
 80099fc:	bf34      	ite	cc
 80099fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a02:	2100      	movcs	r1, #0
 8009a04:	3015      	adds	r0, #21
 8009a06:	fa04 f000 	lsl.w	r0, r4, r0
 8009a0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a0e:	ea40 0201 	orr.w	r2, r0, r1
 8009a12:	ec43 2b10 	vmov	d0, r2, r3
 8009a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a18:	42b7      	cmp	r7, r6
 8009a1a:	bf3a      	itte	cc
 8009a1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a20:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a24:	2100      	movcs	r1, #0
 8009a26:	380b      	subs	r0, #11
 8009a28:	d017      	beq.n	8009a5a <__b2d+0x92>
 8009a2a:	f1c0 0c20 	rsb	ip, r0, #32
 8009a2e:	fa04 f500 	lsl.w	r5, r4, r0
 8009a32:	42be      	cmp	r6, r7
 8009a34:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a38:	ea45 0504 	orr.w	r5, r5, r4
 8009a3c:	bf8c      	ite	hi
 8009a3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a42:	2400      	movls	r4, #0
 8009a44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a48:	fa01 f000 	lsl.w	r0, r1, r0
 8009a4c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a54:	ea40 0204 	orr.w	r2, r0, r4
 8009a58:	e7db      	b.n	8009a12 <__b2d+0x4a>
 8009a5a:	ea44 030c 	orr.w	r3, r4, ip
 8009a5e:	460a      	mov	r2, r1
 8009a60:	e7d7      	b.n	8009a12 <__b2d+0x4a>
 8009a62:	bf00      	nop
 8009a64:	3ff00000 	.word	0x3ff00000

08009a68 <__d2b>:
 8009a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	4689      	mov	r9, r1
 8009a6e:	2101      	movs	r1, #1
 8009a70:	ec57 6b10 	vmov	r6, r7, d0
 8009a74:	4690      	mov	r8, r2
 8009a76:	f7ff fc09 	bl	800928c <_Balloc>
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	b930      	cbnz	r0, 8009a8c <__d2b+0x24>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	4b25      	ldr	r3, [pc, #148]	; (8009b18 <__d2b+0xb0>)
 8009a82:	4826      	ldr	r0, [pc, #152]	; (8009b1c <__d2b+0xb4>)
 8009a84:	f240 310a 	movw	r1, #778	; 0x30a
 8009a88:	f000 fb50 	bl	800a12c <__assert_func>
 8009a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a94:	bb35      	cbnz	r5, 8009ae4 <__d2b+0x7c>
 8009a96:	2e00      	cmp	r6, #0
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	d028      	beq.n	8009aee <__d2b+0x86>
 8009a9c:	4668      	mov	r0, sp
 8009a9e:	9600      	str	r6, [sp, #0]
 8009aa0:	f7ff fd06 	bl	80094b0 <__lo0bits>
 8009aa4:	9900      	ldr	r1, [sp, #0]
 8009aa6:	b300      	cbz	r0, 8009aea <__d2b+0x82>
 8009aa8:	9a01      	ldr	r2, [sp, #4]
 8009aaa:	f1c0 0320 	rsb	r3, r0, #32
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	40c2      	lsrs	r2, r0
 8009ab6:	6163      	str	r3, [r4, #20]
 8009ab8:	9201      	str	r2, [sp, #4]
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	61a3      	str	r3, [r4, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bf14      	ite	ne
 8009ac2:	2202      	movne	r2, #2
 8009ac4:	2201      	moveq	r2, #1
 8009ac6:	6122      	str	r2, [r4, #16]
 8009ac8:	b1d5      	cbz	r5, 8009b00 <__d2b+0x98>
 8009aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ace:	4405      	add	r5, r0
 8009ad0:	f8c9 5000 	str.w	r5, [r9]
 8009ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ad8:	f8c8 0000 	str.w	r0, [r8]
 8009adc:	4620      	mov	r0, r4
 8009ade:	b003      	add	sp, #12
 8009ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ae8:	e7d5      	b.n	8009a96 <__d2b+0x2e>
 8009aea:	6161      	str	r1, [r4, #20]
 8009aec:	e7e5      	b.n	8009aba <__d2b+0x52>
 8009aee:	a801      	add	r0, sp, #4
 8009af0:	f7ff fcde 	bl	80094b0 <__lo0bits>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	2201      	movs	r2, #1
 8009afa:	6122      	str	r2, [r4, #16]
 8009afc:	3020      	adds	r0, #32
 8009afe:	e7e3      	b.n	8009ac8 <__d2b+0x60>
 8009b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b08:	f8c9 0000 	str.w	r0, [r9]
 8009b0c:	6918      	ldr	r0, [r3, #16]
 8009b0e:	f7ff fcaf 	bl	8009470 <__hi0bits>
 8009b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b16:	e7df      	b.n	8009ad8 <__d2b+0x70>
 8009b18:	0800c9b8 	.word	0x0800c9b8
 8009b1c:	0800ca44 	.word	0x0800ca44

08009b20 <__ratio>:
 8009b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4688      	mov	r8, r1
 8009b26:	4669      	mov	r1, sp
 8009b28:	4681      	mov	r9, r0
 8009b2a:	f7ff ff4d 	bl	80099c8 <__b2d>
 8009b2e:	a901      	add	r1, sp, #4
 8009b30:	4640      	mov	r0, r8
 8009b32:	ec55 4b10 	vmov	r4, r5, d0
 8009b36:	f7ff ff47 	bl	80099c8 <__b2d>
 8009b3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b42:	eba3 0c02 	sub.w	ip, r3, r2
 8009b46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b50:	ec51 0b10 	vmov	r0, r1, d0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bfd6      	itet	le
 8009b58:	460a      	movle	r2, r1
 8009b5a:	462a      	movgt	r2, r5
 8009b5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b60:	468b      	mov	fp, r1
 8009b62:	462f      	mov	r7, r5
 8009b64:	bfd4      	ite	le
 8009b66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b6e:	4620      	mov	r0, r4
 8009b70:	ee10 2a10 	vmov	r2, s0
 8009b74:	465b      	mov	r3, fp
 8009b76:	4639      	mov	r1, r7
 8009b78:	f7f6 fe78 	bl	800086c <__aeabi_ddiv>
 8009b7c:	ec41 0b10 	vmov	d0, r0, r1
 8009b80:	b003      	add	sp, #12
 8009b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b86 <__copybits>:
 8009b86:	3901      	subs	r1, #1
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	1149      	asrs	r1, r1, #5
 8009b8c:	6914      	ldr	r4, [r2, #16]
 8009b8e:	3101      	adds	r1, #1
 8009b90:	f102 0314 	add.w	r3, r2, #20
 8009b94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b9c:	1f05      	subs	r5, r0, #4
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	d30c      	bcc.n	8009bbc <__copybits+0x36>
 8009ba2:	1aa3      	subs	r3, r4, r2
 8009ba4:	3b11      	subs	r3, #17
 8009ba6:	f023 0303 	bic.w	r3, r3, #3
 8009baa:	3211      	adds	r2, #17
 8009bac:	42a2      	cmp	r2, r4
 8009bae:	bf88      	it	hi
 8009bb0:	2300      	movhi	r3, #0
 8009bb2:	4418      	add	r0, r3
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4288      	cmp	r0, r1
 8009bb8:	d305      	bcc.n	8009bc6 <__copybits+0x40>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bc0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bc4:	e7eb      	b.n	8009b9e <__copybits+0x18>
 8009bc6:	f840 3b04 	str.w	r3, [r0], #4
 8009bca:	e7f4      	b.n	8009bb6 <__copybits+0x30>

08009bcc <__any_on>:
 8009bcc:	f100 0214 	add.w	r2, r0, #20
 8009bd0:	6900      	ldr	r0, [r0, #16]
 8009bd2:	114b      	asrs	r3, r1, #5
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	db11      	blt.n	8009bfe <__any_on+0x32>
 8009bda:	dd0a      	ble.n	8009bf2 <__any_on+0x26>
 8009bdc:	f011 011f 	ands.w	r1, r1, #31
 8009be0:	d007      	beq.n	8009bf2 <__any_on+0x26>
 8009be2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009be6:	fa24 f001 	lsr.w	r0, r4, r1
 8009bea:	fa00 f101 	lsl.w	r1, r0, r1
 8009bee:	428c      	cmp	r4, r1
 8009bf0:	d10b      	bne.n	8009c0a <__any_on+0x3e>
 8009bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d803      	bhi.n	8009c02 <__any_on+0x36>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	4603      	mov	r3, r0
 8009c00:	e7f7      	b.n	8009bf2 <__any_on+0x26>
 8009c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c06:	2900      	cmp	r1, #0
 8009c08:	d0f5      	beq.n	8009bf6 <__any_on+0x2a>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e7f6      	b.n	8009bfc <__any_on+0x30>

08009c0e <_calloc_r>:
 8009c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c10:	fba1 2402 	umull	r2, r4, r1, r2
 8009c14:	b94c      	cbnz	r4, 8009c2a <_calloc_r+0x1c>
 8009c16:	4611      	mov	r1, r2
 8009c18:	9201      	str	r2, [sp, #4]
 8009c1a:	f000 f87b 	bl	8009d14 <_malloc_r>
 8009c1e:	9a01      	ldr	r2, [sp, #4]
 8009c20:	4605      	mov	r5, r0
 8009c22:	b930      	cbnz	r0, 8009c32 <_calloc_r+0x24>
 8009c24:	4628      	mov	r0, r5
 8009c26:	b003      	add	sp, #12
 8009c28:	bd30      	pop	{r4, r5, pc}
 8009c2a:	220c      	movs	r2, #12
 8009c2c:	6002      	str	r2, [r0, #0]
 8009c2e:	2500      	movs	r5, #0
 8009c30:	e7f8      	b.n	8009c24 <_calloc_r+0x16>
 8009c32:	4621      	mov	r1, r4
 8009c34:	f7fc fbc0 	bl	80063b8 <memset>
 8009c38:	e7f4      	b.n	8009c24 <_calloc_r+0x16>
	...

08009c3c <_free_r>:
 8009c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	d044      	beq.n	8009ccc <_free_r+0x90>
 8009c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c46:	9001      	str	r0, [sp, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c4e:	bfb8      	it	lt
 8009c50:	18e4      	addlt	r4, r4, r3
 8009c52:	f000 fab5 	bl	800a1c0 <__malloc_lock>
 8009c56:	4a1e      	ldr	r2, [pc, #120]	; (8009cd0 <_free_r+0x94>)
 8009c58:	9801      	ldr	r0, [sp, #4]
 8009c5a:	6813      	ldr	r3, [r2, #0]
 8009c5c:	b933      	cbnz	r3, 8009c6c <_free_r+0x30>
 8009c5e:	6063      	str	r3, [r4, #4]
 8009c60:	6014      	str	r4, [r2, #0]
 8009c62:	b003      	add	sp, #12
 8009c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c68:	f000 bab0 	b.w	800a1cc <__malloc_unlock>
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	d908      	bls.n	8009c82 <_free_r+0x46>
 8009c70:	6825      	ldr	r5, [r4, #0]
 8009c72:	1961      	adds	r1, r4, r5
 8009c74:	428b      	cmp	r3, r1
 8009c76:	bf01      	itttt	eq
 8009c78:	6819      	ldreq	r1, [r3, #0]
 8009c7a:	685b      	ldreq	r3, [r3, #4]
 8009c7c:	1949      	addeq	r1, r1, r5
 8009c7e:	6021      	streq	r1, [r4, #0]
 8009c80:	e7ed      	b.n	8009c5e <_free_r+0x22>
 8009c82:	461a      	mov	r2, r3
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	b10b      	cbz	r3, 8009c8c <_free_r+0x50>
 8009c88:	42a3      	cmp	r3, r4
 8009c8a:	d9fa      	bls.n	8009c82 <_free_r+0x46>
 8009c8c:	6811      	ldr	r1, [r2, #0]
 8009c8e:	1855      	adds	r5, r2, r1
 8009c90:	42a5      	cmp	r5, r4
 8009c92:	d10b      	bne.n	8009cac <_free_r+0x70>
 8009c94:	6824      	ldr	r4, [r4, #0]
 8009c96:	4421      	add	r1, r4
 8009c98:	1854      	adds	r4, r2, r1
 8009c9a:	42a3      	cmp	r3, r4
 8009c9c:	6011      	str	r1, [r2, #0]
 8009c9e:	d1e0      	bne.n	8009c62 <_free_r+0x26>
 8009ca0:	681c      	ldr	r4, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	6053      	str	r3, [r2, #4]
 8009ca6:	4421      	add	r1, r4
 8009ca8:	6011      	str	r1, [r2, #0]
 8009caa:	e7da      	b.n	8009c62 <_free_r+0x26>
 8009cac:	d902      	bls.n	8009cb4 <_free_r+0x78>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	e7d6      	b.n	8009c62 <_free_r+0x26>
 8009cb4:	6825      	ldr	r5, [r4, #0]
 8009cb6:	1961      	adds	r1, r4, r5
 8009cb8:	428b      	cmp	r3, r1
 8009cba:	bf04      	itt	eq
 8009cbc:	6819      	ldreq	r1, [r3, #0]
 8009cbe:	685b      	ldreq	r3, [r3, #4]
 8009cc0:	6063      	str	r3, [r4, #4]
 8009cc2:	bf04      	itt	eq
 8009cc4:	1949      	addeq	r1, r1, r5
 8009cc6:	6021      	streq	r1, [r4, #0]
 8009cc8:	6054      	str	r4, [r2, #4]
 8009cca:	e7ca      	b.n	8009c62 <_free_r+0x26>
 8009ccc:	b003      	add	sp, #12
 8009cce:	bd30      	pop	{r4, r5, pc}
 8009cd0:	20000530 	.word	0x20000530

08009cd4 <sbrk_aligned>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	4e0e      	ldr	r6, [pc, #56]	; (8009d10 <sbrk_aligned+0x3c>)
 8009cd8:	460c      	mov	r4, r1
 8009cda:	6831      	ldr	r1, [r6, #0]
 8009cdc:	4605      	mov	r5, r0
 8009cde:	b911      	cbnz	r1, 8009ce6 <sbrk_aligned+0x12>
 8009ce0:	f000 f9f2 	bl	800a0c8 <_sbrk_r>
 8009ce4:	6030      	str	r0, [r6, #0]
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f000 f9ed 	bl	800a0c8 <_sbrk_r>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d00a      	beq.n	8009d08 <sbrk_aligned+0x34>
 8009cf2:	1cc4      	adds	r4, r0, #3
 8009cf4:	f024 0403 	bic.w	r4, r4, #3
 8009cf8:	42a0      	cmp	r0, r4
 8009cfa:	d007      	beq.n	8009d0c <sbrk_aligned+0x38>
 8009cfc:	1a21      	subs	r1, r4, r0
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f000 f9e2 	bl	800a0c8 <_sbrk_r>
 8009d04:	3001      	adds	r0, #1
 8009d06:	d101      	bne.n	8009d0c <sbrk_aligned+0x38>
 8009d08:	f04f 34ff 	mov.w	r4, #4294967295
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	20000534 	.word	0x20000534

08009d14 <_malloc_r>:
 8009d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	1ccd      	adds	r5, r1, #3
 8009d1a:	f025 0503 	bic.w	r5, r5, #3
 8009d1e:	3508      	adds	r5, #8
 8009d20:	2d0c      	cmp	r5, #12
 8009d22:	bf38      	it	cc
 8009d24:	250c      	movcc	r5, #12
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	4607      	mov	r7, r0
 8009d2a:	db01      	blt.n	8009d30 <_malloc_r+0x1c>
 8009d2c:	42a9      	cmp	r1, r5
 8009d2e:	d905      	bls.n	8009d3c <_malloc_r+0x28>
 8009d30:	230c      	movs	r3, #12
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	2600      	movs	r6, #0
 8009d36:	4630      	mov	r0, r6
 8009d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d3c:	4e2e      	ldr	r6, [pc, #184]	; (8009df8 <_malloc_r+0xe4>)
 8009d3e:	f000 fa3f 	bl	800a1c0 <__malloc_lock>
 8009d42:	6833      	ldr	r3, [r6, #0]
 8009d44:	461c      	mov	r4, r3
 8009d46:	bb34      	cbnz	r4, 8009d96 <_malloc_r+0x82>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f7ff ffc2 	bl	8009cd4 <sbrk_aligned>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	4604      	mov	r4, r0
 8009d54:	d14d      	bne.n	8009df2 <_malloc_r+0xde>
 8009d56:	6834      	ldr	r4, [r6, #0]
 8009d58:	4626      	mov	r6, r4
 8009d5a:	2e00      	cmp	r6, #0
 8009d5c:	d140      	bne.n	8009de0 <_malloc_r+0xcc>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	4631      	mov	r1, r6
 8009d62:	4638      	mov	r0, r7
 8009d64:	eb04 0803 	add.w	r8, r4, r3
 8009d68:	f000 f9ae 	bl	800a0c8 <_sbrk_r>
 8009d6c:	4580      	cmp	r8, r0
 8009d6e:	d13a      	bne.n	8009de6 <_malloc_r+0xd2>
 8009d70:	6821      	ldr	r1, [r4, #0]
 8009d72:	3503      	adds	r5, #3
 8009d74:	1a6d      	subs	r5, r5, r1
 8009d76:	f025 0503 	bic.w	r5, r5, #3
 8009d7a:	3508      	adds	r5, #8
 8009d7c:	2d0c      	cmp	r5, #12
 8009d7e:	bf38      	it	cc
 8009d80:	250c      	movcc	r5, #12
 8009d82:	4629      	mov	r1, r5
 8009d84:	4638      	mov	r0, r7
 8009d86:	f7ff ffa5 	bl	8009cd4 <sbrk_aligned>
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d02b      	beq.n	8009de6 <_malloc_r+0xd2>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	442b      	add	r3, r5
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	e00e      	b.n	8009db4 <_malloc_r+0xa0>
 8009d96:	6822      	ldr	r2, [r4, #0]
 8009d98:	1b52      	subs	r2, r2, r5
 8009d9a:	d41e      	bmi.n	8009dda <_malloc_r+0xc6>
 8009d9c:	2a0b      	cmp	r2, #11
 8009d9e:	d916      	bls.n	8009dce <_malloc_r+0xba>
 8009da0:	1961      	adds	r1, r4, r5
 8009da2:	42a3      	cmp	r3, r4
 8009da4:	6025      	str	r5, [r4, #0]
 8009da6:	bf18      	it	ne
 8009da8:	6059      	strne	r1, [r3, #4]
 8009daa:	6863      	ldr	r3, [r4, #4]
 8009dac:	bf08      	it	eq
 8009dae:	6031      	streq	r1, [r6, #0]
 8009db0:	5162      	str	r2, [r4, r5]
 8009db2:	604b      	str	r3, [r1, #4]
 8009db4:	4638      	mov	r0, r7
 8009db6:	f104 060b 	add.w	r6, r4, #11
 8009dba:	f000 fa07 	bl	800a1cc <__malloc_unlock>
 8009dbe:	f026 0607 	bic.w	r6, r6, #7
 8009dc2:	1d23      	adds	r3, r4, #4
 8009dc4:	1af2      	subs	r2, r6, r3
 8009dc6:	d0b6      	beq.n	8009d36 <_malloc_r+0x22>
 8009dc8:	1b9b      	subs	r3, r3, r6
 8009dca:	50a3      	str	r3, [r4, r2]
 8009dcc:	e7b3      	b.n	8009d36 <_malloc_r+0x22>
 8009dce:	6862      	ldr	r2, [r4, #4]
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	bf0c      	ite	eq
 8009dd4:	6032      	streq	r2, [r6, #0]
 8009dd6:	605a      	strne	r2, [r3, #4]
 8009dd8:	e7ec      	b.n	8009db4 <_malloc_r+0xa0>
 8009dda:	4623      	mov	r3, r4
 8009ddc:	6864      	ldr	r4, [r4, #4]
 8009dde:	e7b2      	b.n	8009d46 <_malloc_r+0x32>
 8009de0:	4634      	mov	r4, r6
 8009de2:	6876      	ldr	r6, [r6, #4]
 8009de4:	e7b9      	b.n	8009d5a <_malloc_r+0x46>
 8009de6:	230c      	movs	r3, #12
 8009de8:	603b      	str	r3, [r7, #0]
 8009dea:	4638      	mov	r0, r7
 8009dec:	f000 f9ee 	bl	800a1cc <__malloc_unlock>
 8009df0:	e7a1      	b.n	8009d36 <_malloc_r+0x22>
 8009df2:	6025      	str	r5, [r4, #0]
 8009df4:	e7de      	b.n	8009db4 <_malloc_r+0xa0>
 8009df6:	bf00      	nop
 8009df8:	20000530 	.word	0x20000530

08009dfc <__ssputs_r>:
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	688e      	ldr	r6, [r1, #8]
 8009e02:	429e      	cmp	r6, r3
 8009e04:	4682      	mov	sl, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4690      	mov	r8, r2
 8009e0a:	461f      	mov	r7, r3
 8009e0c:	d838      	bhi.n	8009e80 <__ssputs_r+0x84>
 8009e0e:	898a      	ldrh	r2, [r1, #12]
 8009e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e14:	d032      	beq.n	8009e7c <__ssputs_r+0x80>
 8009e16:	6825      	ldr	r5, [r4, #0]
 8009e18:	6909      	ldr	r1, [r1, #16]
 8009e1a:	eba5 0901 	sub.w	r9, r5, r1
 8009e1e:	6965      	ldr	r5, [r4, #20]
 8009e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e28:	3301      	adds	r3, #1
 8009e2a:	444b      	add	r3, r9
 8009e2c:	106d      	asrs	r5, r5, #1
 8009e2e:	429d      	cmp	r5, r3
 8009e30:	bf38      	it	cc
 8009e32:	461d      	movcc	r5, r3
 8009e34:	0553      	lsls	r3, r2, #21
 8009e36:	d531      	bpl.n	8009e9c <__ssputs_r+0xa0>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	f7ff ff6b 	bl	8009d14 <_malloc_r>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	b950      	cbnz	r0, 8009e58 <__ssputs_r+0x5c>
 8009e42:	230c      	movs	r3, #12
 8009e44:	f8ca 3000 	str.w	r3, [sl]
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e58:	6921      	ldr	r1, [r4, #16]
 8009e5a:	464a      	mov	r2, r9
 8009e5c:	f7ff fa08 	bl	8009270 <memcpy>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	6126      	str	r6, [r4, #16]
 8009e6e:	6165      	str	r5, [r4, #20]
 8009e70:	444e      	add	r6, r9
 8009e72:	eba5 0509 	sub.w	r5, r5, r9
 8009e76:	6026      	str	r6, [r4, #0]
 8009e78:	60a5      	str	r5, [r4, #8]
 8009e7a:	463e      	mov	r6, r7
 8009e7c:	42be      	cmp	r6, r7
 8009e7e:	d900      	bls.n	8009e82 <__ssputs_r+0x86>
 8009e80:	463e      	mov	r6, r7
 8009e82:	6820      	ldr	r0, [r4, #0]
 8009e84:	4632      	mov	r2, r6
 8009e86:	4641      	mov	r1, r8
 8009e88:	f000 f980 	bl	800a18c <memmove>
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	1b9b      	subs	r3, r3, r6
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	4433      	add	r3, r6
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	2000      	movs	r0, #0
 8009e9a:	e7db      	b.n	8009e54 <__ssputs_r+0x58>
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	f000 f99b 	bl	800a1d8 <_realloc_r>
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d1e1      	bne.n	8009e6c <__ssputs_r+0x70>
 8009ea8:	6921      	ldr	r1, [r4, #16]
 8009eaa:	4650      	mov	r0, sl
 8009eac:	f7ff fec6 	bl	8009c3c <_free_r>
 8009eb0:	e7c7      	b.n	8009e42 <__ssputs_r+0x46>
	...

08009eb4 <_svfiprintf_r>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	4698      	mov	r8, r3
 8009eba:	898b      	ldrh	r3, [r1, #12]
 8009ebc:	061b      	lsls	r3, r3, #24
 8009ebe:	b09d      	sub	sp, #116	; 0x74
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	d50e      	bpl.n	8009ee6 <_svfiprintf_r+0x32>
 8009ec8:	690b      	ldr	r3, [r1, #16]
 8009eca:	b963      	cbnz	r3, 8009ee6 <_svfiprintf_r+0x32>
 8009ecc:	2140      	movs	r1, #64	; 0x40
 8009ece:	f7ff ff21 	bl	8009d14 <_malloc_r>
 8009ed2:	6028      	str	r0, [r5, #0]
 8009ed4:	6128      	str	r0, [r5, #16]
 8009ed6:	b920      	cbnz	r0, 8009ee2 <_svfiprintf_r+0x2e>
 8009ed8:	230c      	movs	r3, #12
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e0d1      	b.n	800a086 <_svfiprintf_r+0x1d2>
 8009ee2:	2340      	movs	r3, #64	; 0x40
 8009ee4:	616b      	str	r3, [r5, #20]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eea:	2320      	movs	r3, #32
 8009eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef4:	2330      	movs	r3, #48	; 0x30
 8009ef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0a0 <_svfiprintf_r+0x1ec>
 8009efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009efe:	f04f 0901 	mov.w	r9, #1
 8009f02:	4623      	mov	r3, r4
 8009f04:	469a      	mov	sl, r3
 8009f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f0a:	b10a      	cbz	r2, 8009f10 <_svfiprintf_r+0x5c>
 8009f0c:	2a25      	cmp	r2, #37	; 0x25
 8009f0e:	d1f9      	bne.n	8009f04 <_svfiprintf_r+0x50>
 8009f10:	ebba 0b04 	subs.w	fp, sl, r4
 8009f14:	d00b      	beq.n	8009f2e <_svfiprintf_r+0x7a>
 8009f16:	465b      	mov	r3, fp
 8009f18:	4622      	mov	r2, r4
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7ff ff6d 	bl	8009dfc <__ssputs_r>
 8009f22:	3001      	adds	r0, #1
 8009f24:	f000 80aa 	beq.w	800a07c <_svfiprintf_r+0x1c8>
 8009f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f2a:	445a      	add	r2, fp
 8009f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80a2 	beq.w	800a07c <_svfiprintf_r+0x1c8>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f42:	f10a 0a01 	add.w	sl, sl, #1
 8009f46:	9304      	str	r3, [sp, #16]
 8009f48:	9307      	str	r3, [sp, #28]
 8009f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f50:	4654      	mov	r4, sl
 8009f52:	2205      	movs	r2, #5
 8009f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f58:	4851      	ldr	r0, [pc, #324]	; (800a0a0 <_svfiprintf_r+0x1ec>)
 8009f5a:	f7f6 f951 	bl	8000200 <memchr>
 8009f5e:	9a04      	ldr	r2, [sp, #16]
 8009f60:	b9d8      	cbnz	r0, 8009f9a <_svfiprintf_r+0xe6>
 8009f62:	06d0      	lsls	r0, r2, #27
 8009f64:	bf44      	itt	mi
 8009f66:	2320      	movmi	r3, #32
 8009f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f6c:	0711      	lsls	r1, r2, #28
 8009f6e:	bf44      	itt	mi
 8009f70:	232b      	movmi	r3, #43	; 0x2b
 8009f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f76:	f89a 3000 	ldrb.w	r3, [sl]
 8009f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7c:	d015      	beq.n	8009faa <_svfiprintf_r+0xf6>
 8009f7e:	9a07      	ldr	r2, [sp, #28]
 8009f80:	4654      	mov	r4, sl
 8009f82:	2000      	movs	r0, #0
 8009f84:	f04f 0c0a 	mov.w	ip, #10
 8009f88:	4621      	mov	r1, r4
 8009f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8e:	3b30      	subs	r3, #48	; 0x30
 8009f90:	2b09      	cmp	r3, #9
 8009f92:	d94e      	bls.n	800a032 <_svfiprintf_r+0x17e>
 8009f94:	b1b0      	cbz	r0, 8009fc4 <_svfiprintf_r+0x110>
 8009f96:	9207      	str	r2, [sp, #28]
 8009f98:	e014      	b.n	8009fc4 <_svfiprintf_r+0x110>
 8009f9a:	eba0 0308 	sub.w	r3, r0, r8
 8009f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	46a2      	mov	sl, r4
 8009fa8:	e7d2      	b.n	8009f50 <_svfiprintf_r+0x9c>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	1d19      	adds	r1, r3, #4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	9103      	str	r1, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfbb      	ittet	lt
 8009fb6:	425b      	neglt	r3, r3
 8009fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8009fbc:	9307      	strge	r3, [sp, #28]
 8009fbe:	9307      	strlt	r3, [sp, #28]
 8009fc0:	bfb8      	it	lt
 8009fc2:	9204      	strlt	r2, [sp, #16]
 8009fc4:	7823      	ldrb	r3, [r4, #0]
 8009fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc8:	d10c      	bne.n	8009fe4 <_svfiprintf_r+0x130>
 8009fca:	7863      	ldrb	r3, [r4, #1]
 8009fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8009fce:	d135      	bne.n	800a03c <_svfiprintf_r+0x188>
 8009fd0:	9b03      	ldr	r3, [sp, #12]
 8009fd2:	1d1a      	adds	r2, r3, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	9203      	str	r2, [sp, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bfb8      	it	lt
 8009fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fe0:	3402      	adds	r4, #2
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0b0 <_svfiprintf_r+0x1fc>
 8009fe8:	7821      	ldrb	r1, [r4, #0]
 8009fea:	2203      	movs	r2, #3
 8009fec:	4650      	mov	r0, sl
 8009fee:	f7f6 f907 	bl	8000200 <memchr>
 8009ff2:	b140      	cbz	r0, 800a006 <_svfiprintf_r+0x152>
 8009ff4:	2340      	movs	r3, #64	; 0x40
 8009ff6:	eba0 000a 	sub.w	r0, r0, sl
 8009ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	4303      	orrs	r3, r0
 800a002:	3401      	adds	r4, #1
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00a:	4826      	ldr	r0, [pc, #152]	; (800a0a4 <_svfiprintf_r+0x1f0>)
 800a00c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a010:	2206      	movs	r2, #6
 800a012:	f7f6 f8f5 	bl	8000200 <memchr>
 800a016:	2800      	cmp	r0, #0
 800a018:	d038      	beq.n	800a08c <_svfiprintf_r+0x1d8>
 800a01a:	4b23      	ldr	r3, [pc, #140]	; (800a0a8 <_svfiprintf_r+0x1f4>)
 800a01c:	bb1b      	cbnz	r3, 800a066 <_svfiprintf_r+0x1b2>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	3307      	adds	r3, #7
 800a022:	f023 0307 	bic.w	r3, r3, #7
 800a026:	3308      	adds	r3, #8
 800a028:	9303      	str	r3, [sp, #12]
 800a02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02c:	4433      	add	r3, r6
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	e767      	b.n	8009f02 <_svfiprintf_r+0x4e>
 800a032:	fb0c 3202 	mla	r2, ip, r2, r3
 800a036:	460c      	mov	r4, r1
 800a038:	2001      	movs	r0, #1
 800a03a:	e7a5      	b.n	8009f88 <_svfiprintf_r+0xd4>
 800a03c:	2300      	movs	r3, #0
 800a03e:	3401      	adds	r4, #1
 800a040:	9305      	str	r3, [sp, #20]
 800a042:	4619      	mov	r1, r3
 800a044:	f04f 0c0a 	mov.w	ip, #10
 800a048:	4620      	mov	r0, r4
 800a04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a04e:	3a30      	subs	r2, #48	; 0x30
 800a050:	2a09      	cmp	r2, #9
 800a052:	d903      	bls.n	800a05c <_svfiprintf_r+0x1a8>
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0c5      	beq.n	8009fe4 <_svfiprintf_r+0x130>
 800a058:	9105      	str	r1, [sp, #20]
 800a05a:	e7c3      	b.n	8009fe4 <_svfiprintf_r+0x130>
 800a05c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a060:	4604      	mov	r4, r0
 800a062:	2301      	movs	r3, #1
 800a064:	e7f0      	b.n	800a048 <_svfiprintf_r+0x194>
 800a066:	ab03      	add	r3, sp, #12
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	462a      	mov	r2, r5
 800a06c:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <_svfiprintf_r+0x1f8>)
 800a06e:	a904      	add	r1, sp, #16
 800a070:	4638      	mov	r0, r7
 800a072:	f7fc fa49 	bl	8006508 <_printf_float>
 800a076:	1c42      	adds	r2, r0, #1
 800a078:	4606      	mov	r6, r0
 800a07a:	d1d6      	bne.n	800a02a <_svfiprintf_r+0x176>
 800a07c:	89ab      	ldrh	r3, [r5, #12]
 800a07e:	065b      	lsls	r3, r3, #25
 800a080:	f53f af2c 	bmi.w	8009edc <_svfiprintf_r+0x28>
 800a084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a086:	b01d      	add	sp, #116	; 0x74
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	ab03      	add	r3, sp, #12
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	462a      	mov	r2, r5
 800a092:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <_svfiprintf_r+0x1f8>)
 800a094:	a904      	add	r1, sp, #16
 800a096:	4638      	mov	r0, r7
 800a098:	f7fc fcda 	bl	8006a50 <_printf_i>
 800a09c:	e7eb      	b.n	800a076 <_svfiprintf_r+0x1c2>
 800a09e:	bf00      	nop
 800a0a0:	0800cb9c 	.word	0x0800cb9c
 800a0a4:	0800cba6 	.word	0x0800cba6
 800a0a8:	08006509 	.word	0x08006509
 800a0ac:	08009dfd 	.word	0x08009dfd
 800a0b0:	0800cba2 	.word	0x0800cba2
 800a0b4:	00000000 	.word	0x00000000

0800a0b8 <nan>:
 800a0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0c0 <nan+0x8>
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	00000000 	.word	0x00000000
 800a0c4:	7ff80000 	.word	0x7ff80000

0800a0c8 <_sbrk_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	; (800a0e4 <_sbrk_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f7 fa20 	bl	8001518 <_sbrk>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_sbrk_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_sbrk_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20000538 	.word	0x20000538

0800a0e8 <strncmp>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	b17a      	cbz	r2, 800a10c <strncmp+0x24>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	3901      	subs	r1, #1
 800a0f0:	1884      	adds	r4, r0, r2
 800a0f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0fa:	4290      	cmp	r0, r2
 800a0fc:	d101      	bne.n	800a102 <strncmp+0x1a>
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	d101      	bne.n	800a106 <strncmp+0x1e>
 800a102:	1a80      	subs	r0, r0, r2
 800a104:	bd10      	pop	{r4, pc}
 800a106:	2800      	cmp	r0, #0
 800a108:	d1f3      	bne.n	800a0f2 <strncmp+0xa>
 800a10a:	e7fa      	b.n	800a102 <strncmp+0x1a>
 800a10c:	4610      	mov	r0, r2
 800a10e:	e7f9      	b.n	800a104 <strncmp+0x1c>

0800a110 <__ascii_wctomb>:
 800a110:	b149      	cbz	r1, 800a126 <__ascii_wctomb+0x16>
 800a112:	2aff      	cmp	r2, #255	; 0xff
 800a114:	bf85      	ittet	hi
 800a116:	238a      	movhi	r3, #138	; 0x8a
 800a118:	6003      	strhi	r3, [r0, #0]
 800a11a:	700a      	strbls	r2, [r1, #0]
 800a11c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a120:	bf98      	it	ls
 800a122:	2001      	movls	r0, #1
 800a124:	4770      	bx	lr
 800a126:	4608      	mov	r0, r1
 800a128:	4770      	bx	lr
	...

0800a12c <__assert_func>:
 800a12c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a12e:	4614      	mov	r4, r2
 800a130:	461a      	mov	r2, r3
 800a132:	4b09      	ldr	r3, [pc, #36]	; (800a158 <__assert_func+0x2c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4605      	mov	r5, r0
 800a138:	68d8      	ldr	r0, [r3, #12]
 800a13a:	b14c      	cbz	r4, 800a150 <__assert_func+0x24>
 800a13c:	4b07      	ldr	r3, [pc, #28]	; (800a15c <__assert_func+0x30>)
 800a13e:	9100      	str	r1, [sp, #0]
 800a140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a144:	4906      	ldr	r1, [pc, #24]	; (800a160 <__assert_func+0x34>)
 800a146:	462b      	mov	r3, r5
 800a148:	f000 f80e 	bl	800a168 <fiprintf>
 800a14c:	f000 fa8c 	bl	800a668 <abort>
 800a150:	4b04      	ldr	r3, [pc, #16]	; (800a164 <__assert_func+0x38>)
 800a152:	461c      	mov	r4, r3
 800a154:	e7f3      	b.n	800a13e <__assert_func+0x12>
 800a156:	bf00      	nop
 800a158:	20000088 	.word	0x20000088
 800a15c:	0800cbad 	.word	0x0800cbad
 800a160:	0800cbba 	.word	0x0800cbba
 800a164:	0800cbe8 	.word	0x0800cbe8

0800a168 <fiprintf>:
 800a168:	b40e      	push	{r1, r2, r3}
 800a16a:	b503      	push	{r0, r1, lr}
 800a16c:	4601      	mov	r1, r0
 800a16e:	ab03      	add	r3, sp, #12
 800a170:	4805      	ldr	r0, [pc, #20]	; (800a188 <fiprintf+0x20>)
 800a172:	f853 2b04 	ldr.w	r2, [r3], #4
 800a176:	6800      	ldr	r0, [r0, #0]
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	f000 f885 	bl	800a288 <_vfiprintf_r>
 800a17e:	b002      	add	sp, #8
 800a180:	f85d eb04 	ldr.w	lr, [sp], #4
 800a184:	b003      	add	sp, #12
 800a186:	4770      	bx	lr
 800a188:	20000088 	.word	0x20000088

0800a18c <memmove>:
 800a18c:	4288      	cmp	r0, r1
 800a18e:	b510      	push	{r4, lr}
 800a190:	eb01 0402 	add.w	r4, r1, r2
 800a194:	d902      	bls.n	800a19c <memmove+0x10>
 800a196:	4284      	cmp	r4, r0
 800a198:	4623      	mov	r3, r4
 800a19a:	d807      	bhi.n	800a1ac <memmove+0x20>
 800a19c:	1e43      	subs	r3, r0, #1
 800a19e:	42a1      	cmp	r1, r4
 800a1a0:	d008      	beq.n	800a1b4 <memmove+0x28>
 800a1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1aa:	e7f8      	b.n	800a19e <memmove+0x12>
 800a1ac:	4402      	add	r2, r0
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	428a      	cmp	r2, r1
 800a1b2:	d100      	bne.n	800a1b6 <memmove+0x2a>
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1be:	e7f7      	b.n	800a1b0 <memmove+0x24>

0800a1c0 <__malloc_lock>:
 800a1c0:	4801      	ldr	r0, [pc, #4]	; (800a1c8 <__malloc_lock+0x8>)
 800a1c2:	f000 bc11 	b.w	800a9e8 <__retarget_lock_acquire_recursive>
 800a1c6:	bf00      	nop
 800a1c8:	2000053c 	.word	0x2000053c

0800a1cc <__malloc_unlock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <__malloc_unlock+0x8>)
 800a1ce:	f000 bc0c 	b.w	800a9ea <__retarget_lock_release_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	2000053c 	.word	0x2000053c

0800a1d8 <_realloc_r>:
 800a1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1dc:	4680      	mov	r8, r0
 800a1de:	4614      	mov	r4, r2
 800a1e0:	460e      	mov	r6, r1
 800a1e2:	b921      	cbnz	r1, 800a1ee <_realloc_r+0x16>
 800a1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	f7ff bd93 	b.w	8009d14 <_malloc_r>
 800a1ee:	b92a      	cbnz	r2, 800a1fc <_realloc_r+0x24>
 800a1f0:	f7ff fd24 	bl	8009c3c <_free_r>
 800a1f4:	4625      	mov	r5, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	f000 fc5c 	bl	800aab8 <_malloc_usable_size_r>
 800a200:	4284      	cmp	r4, r0
 800a202:	4607      	mov	r7, r0
 800a204:	d802      	bhi.n	800a20c <_realloc_r+0x34>
 800a206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a20a:	d812      	bhi.n	800a232 <_realloc_r+0x5a>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4640      	mov	r0, r8
 800a210:	f7ff fd80 	bl	8009d14 <_malloc_r>
 800a214:	4605      	mov	r5, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	d0ed      	beq.n	800a1f6 <_realloc_r+0x1e>
 800a21a:	42bc      	cmp	r4, r7
 800a21c:	4622      	mov	r2, r4
 800a21e:	4631      	mov	r1, r6
 800a220:	bf28      	it	cs
 800a222:	463a      	movcs	r2, r7
 800a224:	f7ff f824 	bl	8009270 <memcpy>
 800a228:	4631      	mov	r1, r6
 800a22a:	4640      	mov	r0, r8
 800a22c:	f7ff fd06 	bl	8009c3c <_free_r>
 800a230:	e7e1      	b.n	800a1f6 <_realloc_r+0x1e>
 800a232:	4635      	mov	r5, r6
 800a234:	e7df      	b.n	800a1f6 <_realloc_r+0x1e>

0800a236 <__sfputc_r>:
 800a236:	6893      	ldr	r3, [r2, #8]
 800a238:	3b01      	subs	r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	b410      	push	{r4}
 800a23e:	6093      	str	r3, [r2, #8]
 800a240:	da08      	bge.n	800a254 <__sfputc_r+0x1e>
 800a242:	6994      	ldr	r4, [r2, #24]
 800a244:	42a3      	cmp	r3, r4
 800a246:	db01      	blt.n	800a24c <__sfputc_r+0x16>
 800a248:	290a      	cmp	r1, #10
 800a24a:	d103      	bne.n	800a254 <__sfputc_r+0x1e>
 800a24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a250:	f000 b94a 	b.w	800a4e8 <__swbuf_r>
 800a254:	6813      	ldr	r3, [r2, #0]
 800a256:	1c58      	adds	r0, r3, #1
 800a258:	6010      	str	r0, [r2, #0]
 800a25a:	7019      	strb	r1, [r3, #0]
 800a25c:	4608      	mov	r0, r1
 800a25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <__sfputs_r>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	4606      	mov	r6, r0
 800a268:	460f      	mov	r7, r1
 800a26a:	4614      	mov	r4, r2
 800a26c:	18d5      	adds	r5, r2, r3
 800a26e:	42ac      	cmp	r4, r5
 800a270:	d101      	bne.n	800a276 <__sfputs_r+0x12>
 800a272:	2000      	movs	r0, #0
 800a274:	e007      	b.n	800a286 <__sfputs_r+0x22>
 800a276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a27a:	463a      	mov	r2, r7
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff ffda 	bl	800a236 <__sfputc_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d1f3      	bne.n	800a26e <__sfputs_r+0xa>
 800a286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a288 <_vfiprintf_r>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	460d      	mov	r5, r1
 800a28e:	b09d      	sub	sp, #116	; 0x74
 800a290:	4614      	mov	r4, r2
 800a292:	4698      	mov	r8, r3
 800a294:	4606      	mov	r6, r0
 800a296:	b118      	cbz	r0, 800a2a0 <_vfiprintf_r+0x18>
 800a298:	6983      	ldr	r3, [r0, #24]
 800a29a:	b90b      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x18>
 800a29c:	f000 fb06 	bl	800a8ac <__sinit>
 800a2a0:	4b89      	ldr	r3, [pc, #548]	; (800a4c8 <_vfiprintf_r+0x240>)
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	d11b      	bne.n	800a2de <_vfiprintf_r+0x56>
 800a2a6:	6875      	ldr	r5, [r6, #4]
 800a2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2aa:	07d9      	lsls	r1, r3, #31
 800a2ac:	d405      	bmi.n	800a2ba <_vfiprintf_r+0x32>
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	059a      	lsls	r2, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_vfiprintf_r+0x32>
 800a2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b6:	f000 fb97 	bl	800a9e8 <__retarget_lock_acquire_recursive>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	071b      	lsls	r3, r3, #28
 800a2be:	d501      	bpl.n	800a2c4 <_vfiprintf_r+0x3c>
 800a2c0:	692b      	ldr	r3, [r5, #16]
 800a2c2:	b9eb      	cbnz	r3, 800a300 <_vfiprintf_r+0x78>
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f000 f960 	bl	800a58c <__swsetup_r>
 800a2cc:	b1c0      	cbz	r0, 800a300 <_vfiprintf_r+0x78>
 800a2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d0:	07dc      	lsls	r4, r3, #31
 800a2d2:	d50e      	bpl.n	800a2f2 <_vfiprintf_r+0x6a>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b01d      	add	sp, #116	; 0x74
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	4b7b      	ldr	r3, [pc, #492]	; (800a4cc <_vfiprintf_r+0x244>)
 800a2e0:	429d      	cmp	r5, r3
 800a2e2:	d101      	bne.n	800a2e8 <_vfiprintf_r+0x60>
 800a2e4:	68b5      	ldr	r5, [r6, #8]
 800a2e6:	e7df      	b.n	800a2a8 <_vfiprintf_r+0x20>
 800a2e8:	4b79      	ldr	r3, [pc, #484]	; (800a4d0 <_vfiprintf_r+0x248>)
 800a2ea:	429d      	cmp	r5, r3
 800a2ec:	bf08      	it	eq
 800a2ee:	68f5      	ldreq	r5, [r6, #12]
 800a2f0:	e7da      	b.n	800a2a8 <_vfiprintf_r+0x20>
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	0598      	lsls	r0, r3, #22
 800a2f6:	d4ed      	bmi.n	800a2d4 <_vfiprintf_r+0x4c>
 800a2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2fa:	f000 fb76 	bl	800a9ea <__retarget_lock_release_recursive>
 800a2fe:	e7e9      	b.n	800a2d4 <_vfiprintf_r+0x4c>
 800a300:	2300      	movs	r3, #0
 800a302:	9309      	str	r3, [sp, #36]	; 0x24
 800a304:	2320      	movs	r3, #32
 800a306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a30e:	2330      	movs	r3, #48	; 0x30
 800a310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4d4 <_vfiprintf_r+0x24c>
 800a314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a318:	f04f 0901 	mov.w	r9, #1
 800a31c:	4623      	mov	r3, r4
 800a31e:	469a      	mov	sl, r3
 800a320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a324:	b10a      	cbz	r2, 800a32a <_vfiprintf_r+0xa2>
 800a326:	2a25      	cmp	r2, #37	; 0x25
 800a328:	d1f9      	bne.n	800a31e <_vfiprintf_r+0x96>
 800a32a:	ebba 0b04 	subs.w	fp, sl, r4
 800a32e:	d00b      	beq.n	800a348 <_vfiprintf_r+0xc0>
 800a330:	465b      	mov	r3, fp
 800a332:	4622      	mov	r2, r4
 800a334:	4629      	mov	r1, r5
 800a336:	4630      	mov	r0, r6
 800a338:	f7ff ff94 	bl	800a264 <__sfputs_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	f000 80aa 	beq.w	800a496 <_vfiprintf_r+0x20e>
 800a342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a344:	445a      	add	r2, fp
 800a346:	9209      	str	r2, [sp, #36]	; 0x24
 800a348:	f89a 3000 	ldrb.w	r3, [sl]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 80a2 	beq.w	800a496 <_vfiprintf_r+0x20e>
 800a352:	2300      	movs	r3, #0
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35c:	f10a 0a01 	add.w	sl, sl, #1
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a368:	931a      	str	r3, [sp, #104]	; 0x68
 800a36a:	4654      	mov	r4, sl
 800a36c:	2205      	movs	r2, #5
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	4858      	ldr	r0, [pc, #352]	; (800a4d4 <_vfiprintf_r+0x24c>)
 800a374:	f7f5 ff44 	bl	8000200 <memchr>
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	b9d8      	cbnz	r0, 800a3b4 <_vfiprintf_r+0x12c>
 800a37c:	06d1      	lsls	r1, r2, #27
 800a37e:	bf44      	itt	mi
 800a380:	2320      	movmi	r3, #32
 800a382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a386:	0713      	lsls	r3, r2, #28
 800a388:	bf44      	itt	mi
 800a38a:	232b      	movmi	r3, #43	; 0x2b
 800a38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a390:	f89a 3000 	ldrb.w	r3, [sl]
 800a394:	2b2a      	cmp	r3, #42	; 0x2a
 800a396:	d015      	beq.n	800a3c4 <_vfiprintf_r+0x13c>
 800a398:	9a07      	ldr	r2, [sp, #28]
 800a39a:	4654      	mov	r4, sl
 800a39c:	2000      	movs	r0, #0
 800a39e:	f04f 0c0a 	mov.w	ip, #10
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a8:	3b30      	subs	r3, #48	; 0x30
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	d94e      	bls.n	800a44c <_vfiprintf_r+0x1c4>
 800a3ae:	b1b0      	cbz	r0, 800a3de <_vfiprintf_r+0x156>
 800a3b0:	9207      	str	r2, [sp, #28]
 800a3b2:	e014      	b.n	800a3de <_vfiprintf_r+0x156>
 800a3b4:	eba0 0308 	sub.w	r3, r0, r8
 800a3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	46a2      	mov	sl, r4
 800a3c2:	e7d2      	b.n	800a36a <_vfiprintf_r+0xe2>
 800a3c4:	9b03      	ldr	r3, [sp, #12]
 800a3c6:	1d19      	adds	r1, r3, #4
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	9103      	str	r1, [sp, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bfbb      	ittet	lt
 800a3d0:	425b      	neglt	r3, r3
 800a3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d6:	9307      	strge	r3, [sp, #28]
 800a3d8:	9307      	strlt	r3, [sp, #28]
 800a3da:	bfb8      	it	lt
 800a3dc:	9204      	strlt	r2, [sp, #16]
 800a3de:	7823      	ldrb	r3, [r4, #0]
 800a3e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3e2:	d10c      	bne.n	800a3fe <_vfiprintf_r+0x176>
 800a3e4:	7863      	ldrb	r3, [r4, #1]
 800a3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e8:	d135      	bne.n	800a456 <_vfiprintf_r+0x1ce>
 800a3ea:	9b03      	ldr	r3, [sp, #12]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9203      	str	r2, [sp, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	bfb8      	it	lt
 800a3f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3fa:	3402      	adds	r4, #2
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4e4 <_vfiprintf_r+0x25c>
 800a402:	7821      	ldrb	r1, [r4, #0]
 800a404:	2203      	movs	r2, #3
 800a406:	4650      	mov	r0, sl
 800a408:	f7f5 fefa 	bl	8000200 <memchr>
 800a40c:	b140      	cbz	r0, 800a420 <_vfiprintf_r+0x198>
 800a40e:	2340      	movs	r3, #64	; 0x40
 800a410:	eba0 000a 	sub.w	r0, r0, sl
 800a414:	fa03 f000 	lsl.w	r0, r3, r0
 800a418:	9b04      	ldr	r3, [sp, #16]
 800a41a:	4303      	orrs	r3, r0
 800a41c:	3401      	adds	r4, #1
 800a41e:	9304      	str	r3, [sp, #16]
 800a420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a424:	482c      	ldr	r0, [pc, #176]	; (800a4d8 <_vfiprintf_r+0x250>)
 800a426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a42a:	2206      	movs	r2, #6
 800a42c:	f7f5 fee8 	bl	8000200 <memchr>
 800a430:	2800      	cmp	r0, #0
 800a432:	d03f      	beq.n	800a4b4 <_vfiprintf_r+0x22c>
 800a434:	4b29      	ldr	r3, [pc, #164]	; (800a4dc <_vfiprintf_r+0x254>)
 800a436:	bb1b      	cbnz	r3, 800a480 <_vfiprintf_r+0x1f8>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	3307      	adds	r3, #7
 800a43c:	f023 0307 	bic.w	r3, r3, #7
 800a440:	3308      	adds	r3, #8
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	443b      	add	r3, r7
 800a448:	9309      	str	r3, [sp, #36]	; 0x24
 800a44a:	e767      	b.n	800a31c <_vfiprintf_r+0x94>
 800a44c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a450:	460c      	mov	r4, r1
 800a452:	2001      	movs	r0, #1
 800a454:	e7a5      	b.n	800a3a2 <_vfiprintf_r+0x11a>
 800a456:	2300      	movs	r3, #0
 800a458:	3401      	adds	r4, #1
 800a45a:	9305      	str	r3, [sp, #20]
 800a45c:	4619      	mov	r1, r3
 800a45e:	f04f 0c0a 	mov.w	ip, #10
 800a462:	4620      	mov	r0, r4
 800a464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a468:	3a30      	subs	r2, #48	; 0x30
 800a46a:	2a09      	cmp	r2, #9
 800a46c:	d903      	bls.n	800a476 <_vfiprintf_r+0x1ee>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0c5      	beq.n	800a3fe <_vfiprintf_r+0x176>
 800a472:	9105      	str	r1, [sp, #20]
 800a474:	e7c3      	b.n	800a3fe <_vfiprintf_r+0x176>
 800a476:	fb0c 2101 	mla	r1, ip, r1, r2
 800a47a:	4604      	mov	r4, r0
 800a47c:	2301      	movs	r3, #1
 800a47e:	e7f0      	b.n	800a462 <_vfiprintf_r+0x1da>
 800a480:	ab03      	add	r3, sp, #12
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	462a      	mov	r2, r5
 800a486:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <_vfiprintf_r+0x258>)
 800a488:	a904      	add	r1, sp, #16
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7fc f83c 	bl	8006508 <_printf_float>
 800a490:	4607      	mov	r7, r0
 800a492:	1c78      	adds	r0, r7, #1
 800a494:	d1d6      	bne.n	800a444 <_vfiprintf_r+0x1bc>
 800a496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a498:	07d9      	lsls	r1, r3, #31
 800a49a:	d405      	bmi.n	800a4a8 <_vfiprintf_r+0x220>
 800a49c:	89ab      	ldrh	r3, [r5, #12]
 800a49e:	059a      	lsls	r2, r3, #22
 800a4a0:	d402      	bmi.n	800a4a8 <_vfiprintf_r+0x220>
 800a4a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4a4:	f000 faa1 	bl	800a9ea <__retarget_lock_release_recursive>
 800a4a8:	89ab      	ldrh	r3, [r5, #12]
 800a4aa:	065b      	lsls	r3, r3, #25
 800a4ac:	f53f af12 	bmi.w	800a2d4 <_vfiprintf_r+0x4c>
 800a4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4b2:	e711      	b.n	800a2d8 <_vfiprintf_r+0x50>
 800a4b4:	ab03      	add	r3, sp, #12
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <_vfiprintf_r+0x258>)
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7fc fac6 	bl	8006a50 <_printf_i>
 800a4c4:	e7e4      	b.n	800a490 <_vfiprintf_r+0x208>
 800a4c6:	bf00      	nop
 800a4c8:	0800cc0c 	.word	0x0800cc0c
 800a4cc:	0800cc2c 	.word	0x0800cc2c
 800a4d0:	0800cbec 	.word	0x0800cbec
 800a4d4:	0800cb9c 	.word	0x0800cb9c
 800a4d8:	0800cba6 	.word	0x0800cba6
 800a4dc:	08006509 	.word	0x08006509
 800a4e0:	0800a265 	.word	0x0800a265
 800a4e4:	0800cba2 	.word	0x0800cba2

0800a4e8 <__swbuf_r>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	460e      	mov	r6, r1
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	b118      	cbz	r0, 800a4fa <__swbuf_r+0x12>
 800a4f2:	6983      	ldr	r3, [r0, #24]
 800a4f4:	b90b      	cbnz	r3, 800a4fa <__swbuf_r+0x12>
 800a4f6:	f000 f9d9 	bl	800a8ac <__sinit>
 800a4fa:	4b21      	ldr	r3, [pc, #132]	; (800a580 <__swbuf_r+0x98>)
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	d12b      	bne.n	800a558 <__swbuf_r+0x70>
 800a500:	686c      	ldr	r4, [r5, #4]
 800a502:	69a3      	ldr	r3, [r4, #24]
 800a504:	60a3      	str	r3, [r4, #8]
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	071a      	lsls	r2, r3, #28
 800a50a:	d52f      	bpl.n	800a56c <__swbuf_r+0x84>
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	b36b      	cbz	r3, 800a56c <__swbuf_r+0x84>
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	6820      	ldr	r0, [r4, #0]
 800a514:	1ac0      	subs	r0, r0, r3
 800a516:	6963      	ldr	r3, [r4, #20]
 800a518:	b2f6      	uxtb	r6, r6
 800a51a:	4283      	cmp	r3, r0
 800a51c:	4637      	mov	r7, r6
 800a51e:	dc04      	bgt.n	800a52a <__swbuf_r+0x42>
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f000 f92e 	bl	800a784 <_fflush_r>
 800a528:	bb30      	cbnz	r0, 800a578 <__swbuf_r+0x90>
 800a52a:	68a3      	ldr	r3, [r4, #8]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	6022      	str	r2, [r4, #0]
 800a536:	701e      	strb	r6, [r3, #0]
 800a538:	6963      	ldr	r3, [r4, #20]
 800a53a:	3001      	adds	r0, #1
 800a53c:	4283      	cmp	r3, r0
 800a53e:	d004      	beq.n	800a54a <__swbuf_r+0x62>
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	07db      	lsls	r3, r3, #31
 800a544:	d506      	bpl.n	800a554 <__swbuf_r+0x6c>
 800a546:	2e0a      	cmp	r6, #10
 800a548:	d104      	bne.n	800a554 <__swbuf_r+0x6c>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4628      	mov	r0, r5
 800a54e:	f000 f919 	bl	800a784 <_fflush_r>
 800a552:	b988      	cbnz	r0, 800a578 <__swbuf_r+0x90>
 800a554:	4638      	mov	r0, r7
 800a556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a558:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <__swbuf_r+0x9c>)
 800a55a:	429c      	cmp	r4, r3
 800a55c:	d101      	bne.n	800a562 <__swbuf_r+0x7a>
 800a55e:	68ac      	ldr	r4, [r5, #8]
 800a560:	e7cf      	b.n	800a502 <__swbuf_r+0x1a>
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <__swbuf_r+0xa0>)
 800a564:	429c      	cmp	r4, r3
 800a566:	bf08      	it	eq
 800a568:	68ec      	ldreq	r4, [r5, #12]
 800a56a:	e7ca      	b.n	800a502 <__swbuf_r+0x1a>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 f80c 	bl	800a58c <__swsetup_r>
 800a574:	2800      	cmp	r0, #0
 800a576:	d0cb      	beq.n	800a510 <__swbuf_r+0x28>
 800a578:	f04f 37ff 	mov.w	r7, #4294967295
 800a57c:	e7ea      	b.n	800a554 <__swbuf_r+0x6c>
 800a57e:	bf00      	nop
 800a580:	0800cc0c 	.word	0x0800cc0c
 800a584:	0800cc2c 	.word	0x0800cc2c
 800a588:	0800cbec 	.word	0x0800cbec

0800a58c <__swsetup_r>:
 800a58c:	4b32      	ldr	r3, [pc, #200]	; (800a658 <__swsetup_r+0xcc>)
 800a58e:	b570      	push	{r4, r5, r6, lr}
 800a590:	681d      	ldr	r5, [r3, #0]
 800a592:	4606      	mov	r6, r0
 800a594:	460c      	mov	r4, r1
 800a596:	b125      	cbz	r5, 800a5a2 <__swsetup_r+0x16>
 800a598:	69ab      	ldr	r3, [r5, #24]
 800a59a:	b913      	cbnz	r3, 800a5a2 <__swsetup_r+0x16>
 800a59c:	4628      	mov	r0, r5
 800a59e:	f000 f985 	bl	800a8ac <__sinit>
 800a5a2:	4b2e      	ldr	r3, [pc, #184]	; (800a65c <__swsetup_r+0xd0>)
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	d10f      	bne.n	800a5c8 <__swsetup_r+0x3c>
 800a5a8:	686c      	ldr	r4, [r5, #4]
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5b0:	0719      	lsls	r1, r3, #28
 800a5b2:	d42c      	bmi.n	800a60e <__swsetup_r+0x82>
 800a5b4:	06dd      	lsls	r5, r3, #27
 800a5b6:	d411      	bmi.n	800a5dc <__swsetup_r+0x50>
 800a5b8:	2309      	movs	r3, #9
 800a5ba:	6033      	str	r3, [r6, #0]
 800a5bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5c0:	81a3      	strh	r3, [r4, #12]
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	e03e      	b.n	800a646 <__swsetup_r+0xba>
 800a5c8:	4b25      	ldr	r3, [pc, #148]	; (800a660 <__swsetup_r+0xd4>)
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d101      	bne.n	800a5d2 <__swsetup_r+0x46>
 800a5ce:	68ac      	ldr	r4, [r5, #8]
 800a5d0:	e7eb      	b.n	800a5aa <__swsetup_r+0x1e>
 800a5d2:	4b24      	ldr	r3, [pc, #144]	; (800a664 <__swsetup_r+0xd8>)
 800a5d4:	429c      	cmp	r4, r3
 800a5d6:	bf08      	it	eq
 800a5d8:	68ec      	ldreq	r4, [r5, #12]
 800a5da:	e7e6      	b.n	800a5aa <__swsetup_r+0x1e>
 800a5dc:	0758      	lsls	r0, r3, #29
 800a5de:	d512      	bpl.n	800a606 <__swsetup_r+0x7a>
 800a5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5e2:	b141      	cbz	r1, 800a5f6 <__swsetup_r+0x6a>
 800a5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e8:	4299      	cmp	r1, r3
 800a5ea:	d002      	beq.n	800a5f2 <__swsetup_r+0x66>
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff fb25 	bl	8009c3c <_free_r>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	2300      	movs	r3, #0
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f043 0308 	orr.w	r3, r3, #8
 800a60c:	81a3      	strh	r3, [r4, #12]
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	b94b      	cbnz	r3, 800a626 <__swsetup_r+0x9a>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a61c:	d003      	beq.n	800a626 <__swsetup_r+0x9a>
 800a61e:	4621      	mov	r1, r4
 800a620:	4630      	mov	r0, r6
 800a622:	f000 fa09 	bl	800aa38 <__smakebuf_r>
 800a626:	89a0      	ldrh	r0, [r4, #12]
 800a628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a62c:	f010 0301 	ands.w	r3, r0, #1
 800a630:	d00a      	beq.n	800a648 <__swsetup_r+0xbc>
 800a632:	2300      	movs	r3, #0
 800a634:	60a3      	str	r3, [r4, #8]
 800a636:	6963      	ldr	r3, [r4, #20]
 800a638:	425b      	negs	r3, r3
 800a63a:	61a3      	str	r3, [r4, #24]
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	b943      	cbnz	r3, 800a652 <__swsetup_r+0xc6>
 800a640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a644:	d1ba      	bne.n	800a5bc <__swsetup_r+0x30>
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	0781      	lsls	r1, r0, #30
 800a64a:	bf58      	it	pl
 800a64c:	6963      	ldrpl	r3, [r4, #20]
 800a64e:	60a3      	str	r3, [r4, #8]
 800a650:	e7f4      	b.n	800a63c <__swsetup_r+0xb0>
 800a652:	2000      	movs	r0, #0
 800a654:	e7f7      	b.n	800a646 <__swsetup_r+0xba>
 800a656:	bf00      	nop
 800a658:	20000088 	.word	0x20000088
 800a65c:	0800cc0c 	.word	0x0800cc0c
 800a660:	0800cc2c 	.word	0x0800cc2c
 800a664:	0800cbec 	.word	0x0800cbec

0800a668 <abort>:
 800a668:	b508      	push	{r3, lr}
 800a66a:	2006      	movs	r0, #6
 800a66c:	f000 fa54 	bl	800ab18 <raise>
 800a670:	2001      	movs	r0, #1
 800a672:	f7f6 fed9 	bl	8001428 <_exit>
	...

0800a678 <__sflush_r>:
 800a678:	898a      	ldrh	r2, [r1, #12]
 800a67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67e:	4605      	mov	r5, r0
 800a680:	0710      	lsls	r0, r2, #28
 800a682:	460c      	mov	r4, r1
 800a684:	d458      	bmi.n	800a738 <__sflush_r+0xc0>
 800a686:	684b      	ldr	r3, [r1, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	dc05      	bgt.n	800a698 <__sflush_r+0x20>
 800a68c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a68e:	2b00      	cmp	r3, #0
 800a690:	dc02      	bgt.n	800a698 <__sflush_r+0x20>
 800a692:	2000      	movs	r0, #0
 800a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	d0f9      	beq.n	800a692 <__sflush_r+0x1a>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6a4:	682f      	ldr	r7, [r5, #0]
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	d032      	beq.n	800a710 <__sflush_r+0x98>
 800a6aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	075a      	lsls	r2, r3, #29
 800a6b0:	d505      	bpl.n	800a6be <__sflush_r+0x46>
 800a6b2:	6863      	ldr	r3, [r4, #4]
 800a6b4:	1ac0      	subs	r0, r0, r3
 800a6b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6b8:	b10b      	cbz	r3, 800a6be <__sflush_r+0x46>
 800a6ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6bc:	1ac0      	subs	r0, r0, r3
 800a6be:	2300      	movs	r3, #0
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6c4:	6a21      	ldr	r1, [r4, #32]
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b0      	blx	r6
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	d106      	bne.n	800a6de <__sflush_r+0x66>
 800a6d0:	6829      	ldr	r1, [r5, #0]
 800a6d2:	291d      	cmp	r1, #29
 800a6d4:	d82c      	bhi.n	800a730 <__sflush_r+0xb8>
 800a6d6:	4a2a      	ldr	r2, [pc, #168]	; (800a780 <__sflush_r+0x108>)
 800a6d8:	40ca      	lsrs	r2, r1
 800a6da:	07d6      	lsls	r6, r2, #31
 800a6dc:	d528      	bpl.n	800a730 <__sflush_r+0xb8>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	6062      	str	r2, [r4, #4]
 800a6e2:	04d9      	lsls	r1, r3, #19
 800a6e4:	6922      	ldr	r2, [r4, #16]
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	d504      	bpl.n	800a6f4 <__sflush_r+0x7c>
 800a6ea:	1c42      	adds	r2, r0, #1
 800a6ec:	d101      	bne.n	800a6f2 <__sflush_r+0x7a>
 800a6ee:	682b      	ldr	r3, [r5, #0]
 800a6f0:	b903      	cbnz	r3, 800a6f4 <__sflush_r+0x7c>
 800a6f2:	6560      	str	r0, [r4, #84]	; 0x54
 800a6f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6f6:	602f      	str	r7, [r5, #0]
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	d0ca      	beq.n	800a692 <__sflush_r+0x1a>
 800a6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a700:	4299      	cmp	r1, r3
 800a702:	d002      	beq.n	800a70a <__sflush_r+0x92>
 800a704:	4628      	mov	r0, r5
 800a706:	f7ff fa99 	bl	8009c3c <_free_r>
 800a70a:	2000      	movs	r0, #0
 800a70c:	6360      	str	r0, [r4, #52]	; 0x34
 800a70e:	e7c1      	b.n	800a694 <__sflush_r+0x1c>
 800a710:	6a21      	ldr	r1, [r4, #32]
 800a712:	2301      	movs	r3, #1
 800a714:	4628      	mov	r0, r5
 800a716:	47b0      	blx	r6
 800a718:	1c41      	adds	r1, r0, #1
 800a71a:	d1c7      	bne.n	800a6ac <__sflush_r+0x34>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0c4      	beq.n	800a6ac <__sflush_r+0x34>
 800a722:	2b1d      	cmp	r3, #29
 800a724:	d001      	beq.n	800a72a <__sflush_r+0xb2>
 800a726:	2b16      	cmp	r3, #22
 800a728:	d101      	bne.n	800a72e <__sflush_r+0xb6>
 800a72a:	602f      	str	r7, [r5, #0]
 800a72c:	e7b1      	b.n	800a692 <__sflush_r+0x1a>
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	e7ad      	b.n	800a694 <__sflush_r+0x1c>
 800a738:	690f      	ldr	r7, [r1, #16]
 800a73a:	2f00      	cmp	r7, #0
 800a73c:	d0a9      	beq.n	800a692 <__sflush_r+0x1a>
 800a73e:	0793      	lsls	r3, r2, #30
 800a740:	680e      	ldr	r6, [r1, #0]
 800a742:	bf08      	it	eq
 800a744:	694b      	ldreq	r3, [r1, #20]
 800a746:	600f      	str	r7, [r1, #0]
 800a748:	bf18      	it	ne
 800a74a:	2300      	movne	r3, #0
 800a74c:	eba6 0807 	sub.w	r8, r6, r7
 800a750:	608b      	str	r3, [r1, #8]
 800a752:	f1b8 0f00 	cmp.w	r8, #0
 800a756:	dd9c      	ble.n	800a692 <__sflush_r+0x1a>
 800a758:	6a21      	ldr	r1, [r4, #32]
 800a75a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a75c:	4643      	mov	r3, r8
 800a75e:	463a      	mov	r2, r7
 800a760:	4628      	mov	r0, r5
 800a762:	47b0      	blx	r6
 800a764:	2800      	cmp	r0, #0
 800a766:	dc06      	bgt.n	800a776 <__sflush_r+0xfe>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	e78e      	b.n	800a694 <__sflush_r+0x1c>
 800a776:	4407      	add	r7, r0
 800a778:	eba8 0800 	sub.w	r8, r8, r0
 800a77c:	e7e9      	b.n	800a752 <__sflush_r+0xda>
 800a77e:	bf00      	nop
 800a780:	20400001 	.word	0x20400001

0800a784 <_fflush_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	690b      	ldr	r3, [r1, #16]
 800a788:	4605      	mov	r5, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	b913      	cbnz	r3, 800a794 <_fflush_r+0x10>
 800a78e:	2500      	movs	r5, #0
 800a790:	4628      	mov	r0, r5
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	b118      	cbz	r0, 800a79e <_fflush_r+0x1a>
 800a796:	6983      	ldr	r3, [r0, #24]
 800a798:	b90b      	cbnz	r3, 800a79e <_fflush_r+0x1a>
 800a79a:	f000 f887 	bl	800a8ac <__sinit>
 800a79e:	4b14      	ldr	r3, [pc, #80]	; (800a7f0 <_fflush_r+0x6c>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d11b      	bne.n	800a7dc <_fflush_r+0x58>
 800a7a4:	686c      	ldr	r4, [r5, #4]
 800a7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0ef      	beq.n	800a78e <_fflush_r+0xa>
 800a7ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7b0:	07d0      	lsls	r0, r2, #31
 800a7b2:	d404      	bmi.n	800a7be <_fflush_r+0x3a>
 800a7b4:	0599      	lsls	r1, r3, #22
 800a7b6:	d402      	bmi.n	800a7be <_fflush_r+0x3a>
 800a7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ba:	f000 f915 	bl	800a9e8 <__retarget_lock_acquire_recursive>
 800a7be:	4628      	mov	r0, r5
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	f7ff ff59 	bl	800a678 <__sflush_r>
 800a7c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7c8:	07da      	lsls	r2, r3, #31
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	d4e0      	bmi.n	800a790 <_fflush_r+0xc>
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	059b      	lsls	r3, r3, #22
 800a7d2:	d4dd      	bmi.n	800a790 <_fflush_r+0xc>
 800a7d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7d6:	f000 f908 	bl	800a9ea <__retarget_lock_release_recursive>
 800a7da:	e7d9      	b.n	800a790 <_fflush_r+0xc>
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <_fflush_r+0x70>)
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	d101      	bne.n	800a7e6 <_fflush_r+0x62>
 800a7e2:	68ac      	ldr	r4, [r5, #8]
 800a7e4:	e7df      	b.n	800a7a6 <_fflush_r+0x22>
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <_fflush_r+0x74>)
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	bf08      	it	eq
 800a7ec:	68ec      	ldreq	r4, [r5, #12]
 800a7ee:	e7da      	b.n	800a7a6 <_fflush_r+0x22>
 800a7f0:	0800cc0c 	.word	0x0800cc0c
 800a7f4:	0800cc2c 	.word	0x0800cc2c
 800a7f8:	0800cbec 	.word	0x0800cbec

0800a7fc <std>:
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	b510      	push	{r4, lr}
 800a800:	4604      	mov	r4, r0
 800a802:	e9c0 3300 	strd	r3, r3, [r0]
 800a806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a80a:	6083      	str	r3, [r0, #8]
 800a80c:	8181      	strh	r1, [r0, #12]
 800a80e:	6643      	str	r3, [r0, #100]	; 0x64
 800a810:	81c2      	strh	r2, [r0, #14]
 800a812:	6183      	str	r3, [r0, #24]
 800a814:	4619      	mov	r1, r3
 800a816:	2208      	movs	r2, #8
 800a818:	305c      	adds	r0, #92	; 0x5c
 800a81a:	f7fb fdcd 	bl	80063b8 <memset>
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <std+0x38>)
 800a820:	6263      	str	r3, [r4, #36]	; 0x24
 800a822:	4b05      	ldr	r3, [pc, #20]	; (800a838 <std+0x3c>)
 800a824:	62a3      	str	r3, [r4, #40]	; 0x28
 800a826:	4b05      	ldr	r3, [pc, #20]	; (800a83c <std+0x40>)
 800a828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <std+0x44>)
 800a82c:	6224      	str	r4, [r4, #32]
 800a82e:	6323      	str	r3, [r4, #48]	; 0x30
 800a830:	bd10      	pop	{r4, pc}
 800a832:	bf00      	nop
 800a834:	0800ab51 	.word	0x0800ab51
 800a838:	0800ab73 	.word	0x0800ab73
 800a83c:	0800abab 	.word	0x0800abab
 800a840:	0800abcf 	.word	0x0800abcf

0800a844 <_cleanup_r>:
 800a844:	4901      	ldr	r1, [pc, #4]	; (800a84c <_cleanup_r+0x8>)
 800a846:	f000 b8af 	b.w	800a9a8 <_fwalk_reent>
 800a84a:	bf00      	nop
 800a84c:	0800a785 	.word	0x0800a785

0800a850 <__sfmoreglue>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	2268      	movs	r2, #104	; 0x68
 800a854:	1e4d      	subs	r5, r1, #1
 800a856:	4355      	muls	r5, r2
 800a858:	460e      	mov	r6, r1
 800a85a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a85e:	f7ff fa59 	bl	8009d14 <_malloc_r>
 800a862:	4604      	mov	r4, r0
 800a864:	b140      	cbz	r0, 800a878 <__sfmoreglue+0x28>
 800a866:	2100      	movs	r1, #0
 800a868:	e9c0 1600 	strd	r1, r6, [r0]
 800a86c:	300c      	adds	r0, #12
 800a86e:	60a0      	str	r0, [r4, #8]
 800a870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a874:	f7fb fda0 	bl	80063b8 <memset>
 800a878:	4620      	mov	r0, r4
 800a87a:	bd70      	pop	{r4, r5, r6, pc}

0800a87c <__sfp_lock_acquire>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__sfp_lock_acquire+0x8>)
 800a87e:	f000 b8b3 	b.w	800a9e8 <__retarget_lock_acquire_recursive>
 800a882:	bf00      	nop
 800a884:	2000053d 	.word	0x2000053d

0800a888 <__sfp_lock_release>:
 800a888:	4801      	ldr	r0, [pc, #4]	; (800a890 <__sfp_lock_release+0x8>)
 800a88a:	f000 b8ae 	b.w	800a9ea <__retarget_lock_release_recursive>
 800a88e:	bf00      	nop
 800a890:	2000053d 	.word	0x2000053d

0800a894 <__sinit_lock_acquire>:
 800a894:	4801      	ldr	r0, [pc, #4]	; (800a89c <__sinit_lock_acquire+0x8>)
 800a896:	f000 b8a7 	b.w	800a9e8 <__retarget_lock_acquire_recursive>
 800a89a:	bf00      	nop
 800a89c:	2000053e 	.word	0x2000053e

0800a8a0 <__sinit_lock_release>:
 800a8a0:	4801      	ldr	r0, [pc, #4]	; (800a8a8 <__sinit_lock_release+0x8>)
 800a8a2:	f000 b8a2 	b.w	800a9ea <__retarget_lock_release_recursive>
 800a8a6:	bf00      	nop
 800a8a8:	2000053e 	.word	0x2000053e

0800a8ac <__sinit>:
 800a8ac:	b510      	push	{r4, lr}
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	f7ff fff0 	bl	800a894 <__sinit_lock_acquire>
 800a8b4:	69a3      	ldr	r3, [r4, #24]
 800a8b6:	b11b      	cbz	r3, 800a8c0 <__sinit+0x14>
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	f7ff bff0 	b.w	800a8a0 <__sinit_lock_release>
 800a8c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a8c6:	4b13      	ldr	r3, [pc, #76]	; (800a914 <__sinit+0x68>)
 800a8c8:	4a13      	ldr	r2, [pc, #76]	; (800a918 <__sinit+0x6c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	bf04      	itt	eq
 800a8d2:	2301      	moveq	r3, #1
 800a8d4:	61a3      	streq	r3, [r4, #24]
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 f820 	bl	800a91c <__sfp>
 800a8dc:	6060      	str	r0, [r4, #4]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 f81c 	bl	800a91c <__sfp>
 800a8e4:	60a0      	str	r0, [r4, #8]
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 f818 	bl	800a91c <__sfp>
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	60e0      	str	r0, [r4, #12]
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	6860      	ldr	r0, [r4, #4]
 800a8f4:	f7ff ff82 	bl	800a7fc <std>
 800a8f8:	68a0      	ldr	r0, [r4, #8]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	2109      	movs	r1, #9
 800a8fe:	f7ff ff7d 	bl	800a7fc <std>
 800a902:	68e0      	ldr	r0, [r4, #12]
 800a904:	2202      	movs	r2, #2
 800a906:	2112      	movs	r1, #18
 800a908:	f7ff ff78 	bl	800a7fc <std>
 800a90c:	2301      	movs	r3, #1
 800a90e:	61a3      	str	r3, [r4, #24]
 800a910:	e7d2      	b.n	800a8b8 <__sinit+0xc>
 800a912:	bf00      	nop
 800a914:	0800c7a8 	.word	0x0800c7a8
 800a918:	0800a845 	.word	0x0800a845

0800a91c <__sfp>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	4607      	mov	r7, r0
 800a920:	f7ff ffac 	bl	800a87c <__sfp_lock_acquire>
 800a924:	4b1e      	ldr	r3, [pc, #120]	; (800a9a0 <__sfp+0x84>)
 800a926:	681e      	ldr	r6, [r3, #0]
 800a928:	69b3      	ldr	r3, [r6, #24]
 800a92a:	b913      	cbnz	r3, 800a932 <__sfp+0x16>
 800a92c:	4630      	mov	r0, r6
 800a92e:	f7ff ffbd 	bl	800a8ac <__sinit>
 800a932:	3648      	adds	r6, #72	; 0x48
 800a934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a938:	3b01      	subs	r3, #1
 800a93a:	d503      	bpl.n	800a944 <__sfp+0x28>
 800a93c:	6833      	ldr	r3, [r6, #0]
 800a93e:	b30b      	cbz	r3, 800a984 <__sfp+0x68>
 800a940:	6836      	ldr	r6, [r6, #0]
 800a942:	e7f7      	b.n	800a934 <__sfp+0x18>
 800a944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a948:	b9d5      	cbnz	r5, 800a980 <__sfp+0x64>
 800a94a:	4b16      	ldr	r3, [pc, #88]	; (800a9a4 <__sfp+0x88>)
 800a94c:	60e3      	str	r3, [r4, #12]
 800a94e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a952:	6665      	str	r5, [r4, #100]	; 0x64
 800a954:	f000 f847 	bl	800a9e6 <__retarget_lock_init_recursive>
 800a958:	f7ff ff96 	bl	800a888 <__sfp_lock_release>
 800a95c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a964:	6025      	str	r5, [r4, #0]
 800a966:	61a5      	str	r5, [r4, #24]
 800a968:	2208      	movs	r2, #8
 800a96a:	4629      	mov	r1, r5
 800a96c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a970:	f7fb fd22 	bl	80063b8 <memset>
 800a974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a97c:	4620      	mov	r0, r4
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a980:	3468      	adds	r4, #104	; 0x68
 800a982:	e7d9      	b.n	800a938 <__sfp+0x1c>
 800a984:	2104      	movs	r1, #4
 800a986:	4638      	mov	r0, r7
 800a988:	f7ff ff62 	bl	800a850 <__sfmoreglue>
 800a98c:	4604      	mov	r4, r0
 800a98e:	6030      	str	r0, [r6, #0]
 800a990:	2800      	cmp	r0, #0
 800a992:	d1d5      	bne.n	800a940 <__sfp+0x24>
 800a994:	f7ff ff78 	bl	800a888 <__sfp_lock_release>
 800a998:	230c      	movs	r3, #12
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	e7ee      	b.n	800a97c <__sfp+0x60>
 800a99e:	bf00      	nop
 800a9a0:	0800c7a8 	.word	0x0800c7a8
 800a9a4:	ffff0001 	.word	0xffff0001

0800a9a8 <_fwalk_reent>:
 800a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	4688      	mov	r8, r1
 800a9b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9b4:	2700      	movs	r7, #0
 800a9b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9ba:	f1b9 0901 	subs.w	r9, r9, #1
 800a9be:	d505      	bpl.n	800a9cc <_fwalk_reent+0x24>
 800a9c0:	6824      	ldr	r4, [r4, #0]
 800a9c2:	2c00      	cmp	r4, #0
 800a9c4:	d1f7      	bne.n	800a9b6 <_fwalk_reent+0xe>
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9cc:	89ab      	ldrh	r3, [r5, #12]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d907      	bls.n	800a9e2 <_fwalk_reent+0x3a>
 800a9d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	d003      	beq.n	800a9e2 <_fwalk_reent+0x3a>
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4630      	mov	r0, r6
 800a9de:	47c0      	blx	r8
 800a9e0:	4307      	orrs	r7, r0
 800a9e2:	3568      	adds	r5, #104	; 0x68
 800a9e4:	e7e9      	b.n	800a9ba <_fwalk_reent+0x12>

0800a9e6 <__retarget_lock_init_recursive>:
 800a9e6:	4770      	bx	lr

0800a9e8 <__retarget_lock_acquire_recursive>:
 800a9e8:	4770      	bx	lr

0800a9ea <__retarget_lock_release_recursive>:
 800a9ea:	4770      	bx	lr

0800a9ec <__swhatbuf_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	460e      	mov	r6, r1
 800a9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	b096      	sub	sp, #88	; 0x58
 800a9f8:	4614      	mov	r4, r2
 800a9fa:	461d      	mov	r5, r3
 800a9fc:	da08      	bge.n	800aa10 <__swhatbuf_r+0x24>
 800a9fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	061a      	lsls	r2, r3, #24
 800aa08:	d410      	bmi.n	800aa2c <__swhatbuf_r+0x40>
 800aa0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa0e:	e00e      	b.n	800aa2e <__swhatbuf_r+0x42>
 800aa10:	466a      	mov	r2, sp
 800aa12:	f000 f903 	bl	800ac1c <_fstat_r>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	dbf1      	blt.n	800a9fe <__swhatbuf_r+0x12>
 800aa1a:	9a01      	ldr	r2, [sp, #4]
 800aa1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa24:	425a      	negs	r2, r3
 800aa26:	415a      	adcs	r2, r3
 800aa28:	602a      	str	r2, [r5, #0]
 800aa2a:	e7ee      	b.n	800aa0a <__swhatbuf_r+0x1e>
 800aa2c:	2340      	movs	r3, #64	; 0x40
 800aa2e:	2000      	movs	r0, #0
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	b016      	add	sp, #88	; 0x58
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa38 <__smakebuf_r>:
 800aa38:	898b      	ldrh	r3, [r1, #12]
 800aa3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa3c:	079d      	lsls	r5, r3, #30
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460c      	mov	r4, r1
 800aa42:	d507      	bpl.n	800aa54 <__smakebuf_r+0x1c>
 800aa44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	6123      	str	r3, [r4, #16]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	b002      	add	sp, #8
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
 800aa54:	ab01      	add	r3, sp, #4
 800aa56:	466a      	mov	r2, sp
 800aa58:	f7ff ffc8 	bl	800a9ec <__swhatbuf_r>
 800aa5c:	9900      	ldr	r1, [sp, #0]
 800aa5e:	4605      	mov	r5, r0
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff f957 	bl	8009d14 <_malloc_r>
 800aa66:	b948      	cbnz	r0, 800aa7c <__smakebuf_r+0x44>
 800aa68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6c:	059a      	lsls	r2, r3, #22
 800aa6e:	d4ef      	bmi.n	800aa50 <__smakebuf_r+0x18>
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	f043 0302 	orr.w	r3, r3, #2
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	e7e3      	b.n	800aa44 <__smakebuf_r+0xc>
 800aa7c:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <__smakebuf_r+0x7c>)
 800aa7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	6020      	str	r0, [r4, #0]
 800aa84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	9b00      	ldr	r3, [sp, #0]
 800aa8c:	6163      	str	r3, [r4, #20]
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	6120      	str	r0, [r4, #16]
 800aa92:	b15b      	cbz	r3, 800aaac <__smakebuf_r+0x74>
 800aa94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f000 f8d1 	bl	800ac40 <_isatty_r>
 800aa9e:	b128      	cbz	r0, 800aaac <__smakebuf_r+0x74>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	89a0      	ldrh	r0, [r4, #12]
 800aaae:	4305      	orrs	r5, r0
 800aab0:	81a5      	strh	r5, [r4, #12]
 800aab2:	e7cd      	b.n	800aa50 <__smakebuf_r+0x18>
 800aab4:	0800a845 	.word	0x0800a845

0800aab8 <_malloc_usable_size_r>:
 800aab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aabc:	1f18      	subs	r0, r3, #4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bfbc      	itt	lt
 800aac2:	580b      	ldrlt	r3, [r1, r0]
 800aac4:	18c0      	addlt	r0, r0, r3
 800aac6:	4770      	bx	lr

0800aac8 <_raise_r>:
 800aac8:	291f      	cmp	r1, #31
 800aaca:	b538      	push	{r3, r4, r5, lr}
 800aacc:	4604      	mov	r4, r0
 800aace:	460d      	mov	r5, r1
 800aad0:	d904      	bls.n	800aadc <_raise_r+0x14>
 800aad2:	2316      	movs	r3, #22
 800aad4:	6003      	str	r3, [r0, #0]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aade:	b112      	cbz	r2, 800aae6 <_raise_r+0x1e>
 800aae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aae4:	b94b      	cbnz	r3, 800aafa <_raise_r+0x32>
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 f830 	bl	800ab4c <_getpid_r>
 800aaec:	462a      	mov	r2, r5
 800aaee:	4601      	mov	r1, r0
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaf6:	f000 b817 	b.w	800ab28 <_kill_r>
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d00a      	beq.n	800ab14 <_raise_r+0x4c>
 800aafe:	1c59      	adds	r1, r3, #1
 800ab00:	d103      	bne.n	800ab0a <_raise_r+0x42>
 800ab02:	2316      	movs	r3, #22
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	2001      	movs	r0, #1
 800ab08:	e7e7      	b.n	800aada <_raise_r+0x12>
 800ab0a:	2400      	movs	r4, #0
 800ab0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab10:	4628      	mov	r0, r5
 800ab12:	4798      	blx	r3
 800ab14:	2000      	movs	r0, #0
 800ab16:	e7e0      	b.n	800aada <_raise_r+0x12>

0800ab18 <raise>:
 800ab18:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <raise+0xc>)
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	f7ff bfd3 	b.w	800aac8 <_raise_r>
 800ab22:	bf00      	nop
 800ab24:	20000088 	.word	0x20000088

0800ab28 <_kill_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d07      	ldr	r5, [pc, #28]	; (800ab48 <_kill_r+0x20>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	4611      	mov	r1, r2
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	f7f6 fc67 	bl	8001408 <_kill>
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	d102      	bne.n	800ab44 <_kill_r+0x1c>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	b103      	cbz	r3, 800ab44 <_kill_r+0x1c>
 800ab42:	6023      	str	r3, [r4, #0]
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	bf00      	nop
 800ab48:	20000538 	.word	0x20000538

0800ab4c <_getpid_r>:
 800ab4c:	f7f6 bc54 	b.w	80013f8 <_getpid>

0800ab50 <__sread>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab58:	f000 f894 	bl	800ac84 <_read_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	bfab      	itete	ge
 800ab60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab62:	89a3      	ldrhlt	r3, [r4, #12]
 800ab64:	181b      	addge	r3, r3, r0
 800ab66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab6a:	bfac      	ite	ge
 800ab6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab6e:	81a3      	strhlt	r3, [r4, #12]
 800ab70:	bd10      	pop	{r4, pc}

0800ab72 <__swrite>:
 800ab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	461f      	mov	r7, r3
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	05db      	lsls	r3, r3, #23
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	4616      	mov	r6, r2
 800ab82:	d505      	bpl.n	800ab90 <__swrite+0x1e>
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	2302      	movs	r3, #2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f000 f868 	bl	800ac60 <_lseek_r>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	463b      	mov	r3, r7
 800aba0:	4628      	mov	r0, r5
 800aba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	f000 b817 	b.w	800abd8 <_write_r>

0800abaa <__sseek>:
 800abaa:	b510      	push	{r4, lr}
 800abac:	460c      	mov	r4, r1
 800abae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb2:	f000 f855 	bl	800ac60 <_lseek_r>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	bf15      	itete	ne
 800abbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800abbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abc6:	81a3      	strheq	r3, [r4, #12]
 800abc8:	bf18      	it	ne
 800abca:	81a3      	strhne	r3, [r4, #12]
 800abcc:	bd10      	pop	{r4, pc}

0800abce <__sclose>:
 800abce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd2:	f000 b813 	b.w	800abfc <_close_r>
	...

0800abd8 <_write_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d07      	ldr	r5, [pc, #28]	; (800abf8 <_write_r+0x20>)
 800abdc:	4604      	mov	r4, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f6 fc45 	bl	8001476 <_write>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_write_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_write_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20000538 	.word	0x20000538

0800abfc <_close_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4d06      	ldr	r5, [pc, #24]	; (800ac18 <_close_r+0x1c>)
 800ac00:	2300      	movs	r3, #0
 800ac02:	4604      	mov	r4, r0
 800ac04:	4608      	mov	r0, r1
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	f7f6 fc51 	bl	80014ae <_close>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_close_r+0x1a>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_close_r+0x1a>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	20000538 	.word	0x20000538

0800ac1c <_fstat_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d07      	ldr	r5, [pc, #28]	; (800ac3c <_fstat_r+0x20>)
 800ac20:	2300      	movs	r3, #0
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	f7f6 fc4c 	bl	80014c6 <_fstat>
 800ac2e:	1c43      	adds	r3, r0, #1
 800ac30:	d102      	bne.n	800ac38 <_fstat_r+0x1c>
 800ac32:	682b      	ldr	r3, [r5, #0]
 800ac34:	b103      	cbz	r3, 800ac38 <_fstat_r+0x1c>
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000538 	.word	0x20000538

0800ac40 <_isatty_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4d06      	ldr	r5, [pc, #24]	; (800ac5c <_isatty_r+0x1c>)
 800ac44:	2300      	movs	r3, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	602b      	str	r3, [r5, #0]
 800ac4c:	f7f6 fc4b 	bl	80014e6 <_isatty>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_isatty_r+0x1a>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_isatty_r+0x1a>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	20000538 	.word	0x20000538

0800ac60 <_lseek_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	; (800ac80 <_lseek_r+0x20>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f7f6 fc44 	bl	80014fc <_lseek>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_lseek_r+0x1e>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_lseek_r+0x1e>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	20000538 	.word	0x20000538

0800ac84 <_read_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d07      	ldr	r5, [pc, #28]	; (800aca4 <_read_r+0x20>)
 800ac88:	4604      	mov	r4, r0
 800ac8a:	4608      	mov	r0, r1
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	2200      	movs	r2, #0
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7f6 fbd2 	bl	800143c <_read>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_read_r+0x1e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_read_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20000538 	.word	0x20000538

0800aca8 <_init>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	bf00      	nop
 800acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acae:	bc08      	pop	{r3}
 800acb0:	469e      	mov	lr, r3
 800acb2:	4770      	bx	lr

0800acb4 <_fini>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	bf00      	nop
 800acb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acba:	bc08      	pop	{r3}
 800acbc:	469e      	mov	lr, r3
 800acbe:	4770      	bx	lr
